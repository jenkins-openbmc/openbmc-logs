<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170928 20:39:37.858" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 20:39:38.982" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 20:39:38.983" starttime="20170928 20:39:38.982"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 20:39:38.984" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 20:39:38.984" starttime="20170928 20:39:38.983"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 20:39:38.985" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 20:39:38.985" starttime="20170928 20:39:38.984"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 20:39:38.985" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 20:39:38.985" starttime="20170928 20:39:38.985"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 20:39:39.175" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 20:39:39.175" starttime="20170928 20:39:38.986"></status>
</kw>
<msg timestamp="20170928 20:39:39.175" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:39:39.175" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:39:39.175" starttime="20170928 20:39:38.986"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 20:39:39.176" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:39:39.176" starttime="20170928 20:39:39.176"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:39:39.177" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:39:39.177" starttime="20170928 20:39:39.176"></status>
</kw>
<status status="PASS" endtime="20170928 20:39:39.177" starttime="20170928 20:39:38.981"></status>
</kw>
<status status="PASS" endtime="20170928 20:39:39.177" starttime="20170928 20:39:38.981"></status>
</kw>
<status status="PASS" endtime="20170928 20:39:39.177" starttime="20170928 20:39:38.980"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 20:39:39.178" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170928 20:39:39.178" starttime="20170928 20:39:39.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:39:39.179" starttime="20170928 20:39:39.178"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 20:39:39.222" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170928 20:39:39.222" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 20:39:39.222" starttime="20170928 20:39:39.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:39:39.223" starttime="20170928 20:39:39.222"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 20:39:39.223" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 20:39:39.223" starttime="20170928 20:39:39.223"></status>
</kw>
<msg timestamp="20170928 20:39:39.223" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 20:39:39.223" starttime="20170928 20:39:38.979"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170928 20:39:39.224" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 20:39:39.224" starttime="20170928 20:39:39.224"></status>
</kw>
<status status="PASS" endtime="20170928 20:39:39.224" starttime="20170928 20:39:38.979"></status>
</kw>
<status status="PASS" endtime="20170928 20:39:39.224" starttime="20170928 20:39:38.978"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20170928 20:39:39.230" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170928 20:39:39.230" starttime="20170928 20:39:39.229"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20170928 20:39:39.249" level="INFO">${image_version} = v1.99.10-63-g7c65384</msg>
<status status="PASS" endtime="20170928 20:39:39.249" starttime="20170928 20:39:39.230"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170928 20:39:39.250" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170928 20:39:49.976" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20170928 20:39:49.976" starttime="20170928 20:39:39.249"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 20:39:49.980" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 20:39:49.980" starttime="20170928 20:39:49.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 20:39:49.981" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 20:39:49.981" starttime="20170928 20:39:49.980"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 20:39:49.981" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 20:39:49.981" starttime="20170928 20:39:49.981"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 20:39:49.982" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 20:39:49.982" starttime="20170928 20:39:49.982"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 20:39:50.233" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 20:39:50.233" starttime="20170928 20:39:49.983"></status>
</kw>
<msg timestamp="20170928 20:39:50.233" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:39:50.233" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:39:50.233" starttime="20170928 20:39:49.982"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 20:39:50.234" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:39:50.234" starttime="20170928 20:39:50.234"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:39:50.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:39:50.235" starttime="20170928 20:39:50.234"></status>
</kw>
<status status="PASS" endtime="20170928 20:39:50.235" starttime="20170928 20:39:49.979"></status>
</kw>
<status status="PASS" endtime="20170928 20:39:50.235" starttime="20170928 20:39:49.978"></status>
</kw>
<status status="PASS" endtime="20170928 20:39:50.235" starttime="20170928 20:39:49.978"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 20:39:50.236" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170928 20:39:50.236" starttime="20170928 20:39:50.235"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 20:39:50.236" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170928 20:39:50.236" starttime="20170928 20:39:50.236"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:39:50.237" starttime="20170928 20:39:50.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:39:50.238" starttime="20170928 20:39:50.237"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 20:40:00.255" level="FAIL">SSLError: ('The write operation timed out',)</msg>
<status status="FAIL" endtime="20170928 20:40:00.255" starttime="20170928 20:39:50.238"></status>
</kw>
<status status="FAIL" endtime="20170928 20:40:00.255" starttime="20170928 20:39:49.977"></status>
</kw>
<status status="FAIL" endtime="20170928 20:40:00.255" starttime="20170928 20:39:39.225"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170928 20:40:00.272" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170928 20:40:00.273" starttime="20170928 20:40:00.272"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170928 20:40:00.277" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170928 20:40:03.284" level="INFO">${RC} = 0</msg>
<msg timestamp="20170928 20:40:03.284" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.679 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.564 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170928 20:40:03.284" starttime="20170928 20:40:00.273"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170928 20:40:03.301" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.679 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.564 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.591 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=1.52 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.564/0.839/1.525/0.399 ms</msg>
<status status="PASS" endtime="20170928 20:40:03.301" starttime="20170928 20:40:03.298"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:03.303" starttime="20170928 20:40:03.302"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:03.303" starttime="20170928 20:40:00.271"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170928 20:40:03.343" level="INFO">${cur_time} = 2017-09-28 20:40:03:342455</msg>
<status status="PASS" endtime="20170928 20:40:03.343" starttime="20170928 20:40:03.337"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170928 20:40:03.346" level="INFO">${cur_time} = 20170928204003342455</msg>
<status status="PASS" endtime="20170928 20:40:03.346" starttime="20170928 20:40:03.345"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:03.347" starttime="20170928 20:40:03.336"></status>
</kw>
<msg timestamp="20170928 20:40:03.362" level="INFO">${FFDC_TIME} = 20170928204003342455</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170928 20:40:03.364" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20170928 20:40:03.365" starttime="20170928 20:40:03.364"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170928 20:40:03.365" level="INFO">${suite_name} = 20170928204003342455_BmcCodeUpdate</msg>
<status status="PASS" endtime="20170928 20:40:03.365" starttime="20170928 20:40:03.365"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170928 20:40:03.366" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170928 20:40:03.366" starttime="20170928 20:40:03.366"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170928 20:40:03.367" level="INFO">${test_name} = 20170928204003342455_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170928 20:40:03.367" starttime="20170928 20:40:03.367"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:03.368" starttime="20170928 20:40:03.363"></status>
</kw>
<msg timestamp="20170928 20:40:03.373" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/</msg>
<msg timestamp="20170928 20:40:03.379" level="INFO">${FFDC_PREFIX} = 20170928204003342455_</msg>
<msg timestamp="20170928 20:40:03.400" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20170928 20:40:03.402" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:03.402" starttime="20170928 20:40:03.401"></status>
</kw>
<msg timestamp="20170928 20:40:03.408" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:03.422" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:03.422" starttime="20170928 20:40:03.422"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:03.422" starttime="20170928 20:40:03.421"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:03.423" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:03.424" starttime="20170928 20:40:03.423"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:03.424" starttime="20170928 20:40:03.423"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:03.425" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:03.425" starttime="20170928 20:40:03.425"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:03.425" starttime="20170928 20:40:03.424"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:03.426" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:03.426" starttime="20170928 20:40:03.426"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:03.427" starttime="20170928 20:40:03.425"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:03.428" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:03.428" starttime="20170928 20:40:03.427"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:03.428" starttime="20170928 20:40:03.427"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:03.429" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:03.429" starttime="20170928 20:40:03.429"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:03.429" starttime="20170928 20:40:03.428"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:03.431" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:03.431" starttime="20170928 20:40:03.430"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:03.431" starttime="20170928 20:40:03.429"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:03.433" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:03.433" starttime="20170928 20:40:03.432"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:03.433" starttime="20170928 20:40:03.431"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:03.434" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:03.434" starttime="20170928 20:40:03.434"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:03.434" starttime="20170928 20:40:03.433"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:03.436" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:03.436" starttime="20170928 20:40:03.436"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:03.436" starttime="20170928 20:40:03.435"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:03.437" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:03.437" starttime="20170928 20:40:03.437"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:03.437" starttime="20170928 20:40:03.436"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:03.439" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:03.439" starttime="20170928 20:40:03.438"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:03.439" starttime="20170928 20:40:03.438"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:03.440" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:03.441" starttime="20170928 20:40:03.440"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:03.441" starttime="20170928 20:40:03.439"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170928 20:40:03.463" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 20:40:03.463" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170928 20:40:04.553" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170928 20:40:04.553" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170928 20:40:04.620" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170928 20:40:04.631" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170928 20:40:04.631" level="INFO">${stderr} = </msg>
<msg timestamp="20170928 20:40:04.631" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170928 20:40:04.631" starttime="20170928 20:40:03.442"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170928 20:40:04.632" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170928 20:40:04.632" starttime="20170928 20:40:04.632"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170928 20:40:04.632" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170928 20:40:04.633" starttime="20170928 20:40:04.632"></status>
</kw>
<msg timestamp="20170928 20:40:04.633" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170928 20:40:04.633" starttime="20170928 20:40:03.441"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:04.634" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:04.634" starttime="20170928 20:40:04.634"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.634" starttime="20170928 20:40:04.633"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.634" starttime="20170928 20:40:03.435"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:04.636" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:04.636" starttime="20170928 20:40:04.635"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.636" starttime="20170928 20:40:04.635"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 20:40:04.636" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170928 20:40:04.637" starttime="20170928 20:40:04.636"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:04.638" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:04.638" starttime="20170928 20:40:04.638"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.638" starttime="20170928 20:40:04.637"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:04.639" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:04.639" starttime="20170928 20:40:04.639"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.639" starttime="20170928 20:40:04.638"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.640" starttime="20170928 20:40:04.637"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:04.641" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:04.641" starttime="20170928 20:40:04.641"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.641" starttime="20170928 20:40:04.640"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:04.643" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:04.643" starttime="20170928 20:40:04.642"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.643" starttime="20170928 20:40:04.642"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.643" starttime="20170928 20:40:04.640"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:04.645" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:04.645" starttime="20170928 20:40:04.644"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.645" starttime="20170928 20:40:04.643"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:04.647" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:04.647" starttime="20170928 20:40:04.646"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.647" starttime="20170928 20:40:04.646"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.647" starttime="20170928 20:40:04.643"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.647" starttime="20170928 20:40:04.637"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:04.648" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:04.648" starttime="20170928 20:40:04.648"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.648" starttime="20170928 20:40:04.647"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.648" starttime="20170928 20:40:03.420"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 20:40:04.656" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170928 20:40:04.656" starttime="20170928 20:40:04.656"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170928 20:40:04.658" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170928 20:40:04.658" starttime="20170928 20:40:04.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:04.659" starttime="20170928 20:40:04.659"></status>
</kw>
<msg timestamp="20170928 20:40:04.659" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170928 20:40:04.659" starttime="20170928 20:40:04.658"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:04.661" starttime="20170928 20:40:04.661"></status>
</kw>
<msg timestamp="20170928 20:40:04.661" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:04.661" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 20:40:04.661" starttime="20170928 20:40:04.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:04.662" starttime="20170928 20:40:04.662"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 20:40:04.683" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170928 20:40:04.683" starttime="20170928 20:40:04.682"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 20:40:04.684" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170928 20:40:04.684" starttime="20170928 20:40:04.684"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170928 20:40:04.692" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170928 20:40:04.692" starttime="20170928 20:40:04.685"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:04.695" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:04.695" starttime="20170928 20:40:04.695"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.695" starttime="20170928 20:40:04.694"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:04.697" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:04.697" starttime="20170928 20:40:04.696"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.697" starttime="20170928 20:40:04.695"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:04.698" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:04.698" starttime="20170928 20:40:04.698"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.698" starttime="20170928 20:40:04.697"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:04.699" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:04.699" starttime="20170928 20:40:04.699"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.699" starttime="20170928 20:40:04.698"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.700" starttime="20170928 20:40:04.693"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:04.700" starttime="20170928 20:40:04.693"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 20:40:04.701" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170928 20:40:04.701" starttime="20170928 20:40:04.700"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 20:40:04.762" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 20:40:04.763" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170928 20:40:06.159" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 20:40:06.159" starttime="20170928 20:40:04.728"></status>
</kw>
<msg timestamp="20170928 20:40:06.159" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:06.159" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170928 20:40:06.159" starttime="20170928 20:40:04.701"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 20:40:06.160" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170928 20:40:06.160" starttime="20170928 20:40:06.160"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 20:40:06.161" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 20:40:06.161" starttime="20170928 20:40:06.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.168" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.168" starttime="20170928 20:40:06.168"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.168" starttime="20170928 20:40:06.167"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.169" starttime="20170928 20:40:06.161"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.169" starttime="20170928 20:40:04.692"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.169" starttime="20170928 20:40:04.692"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.169" starttime="20170928 20:40:04.692"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.169" starttime="20170928 20:40:04.683"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.169" starttime="20170928 20:40:04.683"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 20:40:06.170" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170928 20:40:06.170" starttime="20170928 20:40:06.170"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.171" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170928 20:40:06.171" starttime="20170928 20:40:06.170"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.174" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.174" starttime="20170928 20:40:06.174"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.174" starttime="20170928 20:40:06.173"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.176" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.176" starttime="20170928 20:40:06.175"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.176" starttime="20170928 20:40:06.175"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.177" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.177" starttime="20170928 20:40:06.177"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.177" starttime="20170928 20:40:06.176"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.178" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.179" starttime="20170928 20:40:06.178"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.179" starttime="20170928 20:40:06.177"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.179" starttime="20170928 20:40:06.173"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.179" starttime="20170928 20:40:06.172"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 20:40:06.180" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170928 20:40:06.180" starttime="20170928 20:40:06.179"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 20:40:06.238" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 20:40:06.238" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170928 20:40:06.316" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 20:40:06.316" starttime="20170928 20:40:06.205"></status>
</kw>
<msg timestamp="20170928 20:40:06.316" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:06.316" level="INFO">${ret_values} = (u'20170928200242', u'', 0)</msg>
<status status="PASS" endtime="20170928 20:40:06.316" starttime="20170928 20:40:06.180"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 20:40:06.317" level="INFO">${stdout} = 20170928200242</msg>
<status status="PASS" endtime="20170928 20:40:06.317" starttime="20170928 20:40:06.317"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 20:40:06.318" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 20:40:06.318" starttime="20170928 20:40:06.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.325" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.325" starttime="20170928 20:40:06.325"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.325" starttime="20170928 20:40:06.324"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.326" starttime="20170928 20:40:06.318"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.326" starttime="20170928 20:40:06.172"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.326" starttime="20170928 20:40:06.171"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.329" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.329" starttime="20170928 20:40:06.328"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.329" starttime="20170928 20:40:06.328"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.330" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.331" starttime="20170928 20:40:06.330"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.331" starttime="20170928 20:40:06.329"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.332" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.332" starttime="20170928 20:40:06.331"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.332" starttime="20170928 20:40:06.331"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.333" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.333" starttime="20170928 20:40:06.333"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.333" starttime="20170928 20:40:06.332"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.333" starttime="20170928 20:40:06.327"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.333" starttime="20170928 20:40:06.327"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 20:40:06.334" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170928 20:40:06.334" starttime="20170928 20:40:06.334"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 20:40:06.392" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 20:40:06.394" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170928 20:40:06.442" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 20:40:06.442" starttime="20170928 20:40:06.358"></status>
</kw>
<msg timestamp="20170928 20:40:06.443" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:06.443" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-62"\nVERSION_ID="v1.99.10-62-g5b0adc7"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170928 20:40:06.443" starttime="20170928 20:40:06.335"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 20:40:06.443" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-62"
VERSION_ID="v1.99.10-62-g5b0adc7"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170928 20:40:06.443" starttime="20170928 20:40:06.443"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 20:40:06.444" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 20:40:06.444" starttime="20170928 20:40:06.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.452" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.452" starttime="20170928 20:40:06.451"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.452" starttime="20170928 20:40:06.451"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.452" starttime="20170928 20:40:06.444"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.452" starttime="20170928 20:40:06.326"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.452" starttime="20170928 20:40:06.326"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.452" starttime="20170928 20:40:06.171"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.452" starttime="20170928 20:40:06.169"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.452" starttime="20170928 20:40:06.169"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 20:40:06.453" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170928 20:40:06.453" starttime="20170928 20:40:06.453"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.454" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170928 20:40:06.454" starttime="20170928 20:40:06.454"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.457" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.457" starttime="20170928 20:40:06.457"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.458" starttime="20170928 20:40:06.456"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.459" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.459" starttime="20170928 20:40:06.458"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.459" starttime="20170928 20:40:06.458"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.460" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.460" starttime="20170928 20:40:06.460"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.460" starttime="20170928 20:40:06.459"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.461" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.462" starttime="20170928 20:40:06.461"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.462" starttime="20170928 20:40:06.461"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.462" starttime="20170928 20:40:06.456"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.462" starttime="20170928 20:40:06.455"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 20:40:06.463" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170928 20:40:06.463" starttime="20170928 20:40:06.462"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 20:40:06.524" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 20:40:06.525" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170928 20:40:06.581" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 20:40:06.582" starttime="20170928 20:40:06.488"></status>
</kw>
<msg timestamp="20170928 20:40:06.582" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:06.582" level="INFO">${ret_values} = (u' 20:40:20 up 15 min,  load average: 0.51, 1.78, 1.87', u'', 0)</msg>
<status status="PASS" endtime="20170928 20:40:06.582" starttime="20170928 20:40:06.463"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 20:40:06.583" level="INFO">${stdout} =  20:40:20 up 15 min,  load average: 0.51, 1.78, 1.87</msg>
<status status="PASS" endtime="20170928 20:40:06.583" starttime="20170928 20:40:06.582"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 20:40:06.583" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 20:40:06.583" starttime="20170928 20:40:06.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.591" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.591" starttime="20170928 20:40:06.590"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.591" starttime="20170928 20:40:06.590"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.591" starttime="20170928 20:40:06.584"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.591" starttime="20170928 20:40:06.455"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.591" starttime="20170928 20:40:06.454"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.594" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.594" starttime="20170928 20:40:06.594"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.594" starttime="20170928 20:40:06.593"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.596" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.596" starttime="20170928 20:40:06.595"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.596" starttime="20170928 20:40:06.595"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.597" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.597" starttime="20170928 20:40:06.597"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.597" starttime="20170928 20:40:06.596"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.598" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.598" starttime="20170928 20:40:06.598"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.598" starttime="20170928 20:40:06.597"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.599" starttime="20170928 20:40:06.593"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.599" starttime="20170928 20:40:06.592"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 20:40:06.599" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170928 20:40:06.599" starttime="20170928 20:40:06.599"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 20:40:06.659" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 20:40:06.661" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170928 20:40:06.720" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 20:40:06.720" starttime="20170928 20:40:06.624"></status>
</kw>
<msg timestamp="20170928 20:40:06.720" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:06.720" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.3M     14.3M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20170928 20:40:06.720" starttime="20170928 20:40:06.600"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 20:40:06.721" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.3M     14.3M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20170928 20:40:06.721" starttime="20170928 20:40:06.721"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 20:40:06.722" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 20:40:06.722" starttime="20170928 20:40:06.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.729" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.729" starttime="20170928 20:40:06.729"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.729" starttime="20170928 20:40:06.728"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.729" starttime="20170928 20:40:06.722"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.730" starttime="20170928 20:40:06.591"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.730" starttime="20170928 20:40:06.591"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.733" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.733" starttime="20170928 20:40:06.732"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.733" starttime="20170928 20:40:06.732"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.734" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.734" starttime="20170928 20:40:06.734"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.734" starttime="20170928 20:40:06.733"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.736" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.736" starttime="20170928 20:40:06.735"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.736" starttime="20170928 20:40:06.735"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.737" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.737" starttime="20170928 20:40:06.737"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.737" starttime="20170928 20:40:06.736"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.737" starttime="20170928 20:40:06.731"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.737" starttime="20170928 20:40:06.731"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 20:40:06.738" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170928 20:40:06.738" starttime="20170928 20:40:06.738"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 20:40:06.796" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 20:40:06.796" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170928 20:40:06.887" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 20:40:06.888" starttime="20170928 20:40:06.764"></status>
</kw>
<msg timestamp="20170928 20:40:06.888" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:06.888" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170928 20:40:06.888" starttime="20170928 20:40:06.738"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 20:40:06.889" level="INFO">${stdout} = Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170928 20:40:06.889" starttime="20170928 20:40:06.888"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 20:40:06.889" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 20:40:06.889" starttime="20170928 20:40:06.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:06.897" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:06.897" starttime="20170928 20:40:06.897"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.897" starttime="20170928 20:40:06.896"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.898" starttime="20170928 20:40:06.890"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.898" starttime="20170928 20:40:06.730"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.898" starttime="20170928 20:40:06.730"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.898" starttime="20170928 20:40:06.454"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.898" starttime="20170928 20:40:06.453"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.898" starttime="20170928 20:40:06.452"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.898" starttime="20170928 20:40:04.683"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.898" starttime="20170928 20:40:04.681"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.898" starttime="20170928 20:40:04.662"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.898" starttime="20170928 20:40:04.659"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:06.898" starttime="20170928 20:40:04.659"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:06.900" starttime="20170928 20:40:06.900"></status>
</kw>
<msg timestamp="20170928 20:40:06.900" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:06.900" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 20:40:06.900" starttime="20170928 20:40:06.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:06.901" starttime="20170928 20:40:06.901"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 20:40:06.919" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170928 20:40:06.919" starttime="20170928 20:40:06.919"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 20:40:06.921" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20170928 20:40:06.921" starttime="20170928 20:40:06.920"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 20:40:06.922" level="INFO">${logpath} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170928 20:40:06.922" starttime="20170928 20:40:06.921"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 20:40:06.927" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 20:40:06.927" starttime="20170928 20:40:06.926"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 20:40:06.928" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 20:40:06.928" starttime="20170928 20:40:06.927"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 20:40:06.928" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 20:40:06.928" starttime="20170928 20:40:06.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 20:40:06.929" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 20:40:06.929" starttime="20170928 20:40:06.929"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 20:40:07.156" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 20:40:07.156" starttime="20170928 20:40:06.930"></status>
</kw>
<msg timestamp="20170928 20:40:07.157" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:07.157" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:07.157" starttime="20170928 20:40:06.929"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 20:40:07.157" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:07.158" starttime="20170928 20:40:07.157"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:07.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:07.158" starttime="20170928 20:40:07.158"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:07.158" starttime="20170928 20:40:06.926"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:07.159" starttime="20170928 20:40:06.924"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:07.159" starttime="20170928 20:40:06.923"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 20:40:07.159" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170928 20:40:07.159" starttime="20170928 20:40:07.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:07.160" starttime="20170928 20:40:07.160"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 20:40:07.749" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 20:40:07.749" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:07.749" starttime="20170928 20:40:07.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:07.750" starttime="20170928 20:40:07.750"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 20:40:07.750" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 20:40:07.751" starttime="20170928 20:40:07.750"></status>
</kw>
<msg timestamp="20170928 20:40:07.751" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:07.751" starttime="20170928 20:40:06.922"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:07.752" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:07.752" starttime="20170928 20:40:07.752"></status>
</kw>
<msg timestamp="20170928 20:40:07.752" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 20:40:07.752" starttime="20170928 20:40:07.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:07.753" starttime="20170928 20:40:07.753"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 20:40:07.754" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 4000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 23770
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 209000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 281
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 20:40:07.754" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 20:40:07.754" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170928 20:40:07.754" starttime="20170928 20:40:07.753"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:07.756" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:07.756" starttime="20170928 20:40:07.756"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:07.756" starttime="20170928 20:40:07.755"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:07.756" starttime="20170928 20:40:06.921"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 20:40:07.757" level="INFO">${logpath} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_OCC_state.txt</msg>
<status status="PASS" endtime="20170928 20:40:07.757" starttime="20170928 20:40:07.757"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 20:40:07.760" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 20:40:07.760" starttime="20170928 20:40:07.760"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 20:40:07.761" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 20:40:07.761" starttime="20170928 20:40:07.761"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 20:40:07.762" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 20:40:07.762" starttime="20170928 20:40:07.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 20:40:07.762" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 20:40:07.762" starttime="20170928 20:40:07.762"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 20:40:07.953" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 20:40:07.953" starttime="20170928 20:40:07.763"></status>
</kw>
<msg timestamp="20170928 20:40:07.953" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:07.953" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:07.953" starttime="20170928 20:40:07.763"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 20:40:07.954" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:07.954" starttime="20170928 20:40:07.954"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:07.955" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:07.955" starttime="20170928 20:40:07.954"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:07.955" starttime="20170928 20:40:07.759"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:07.955" starttime="20170928 20:40:07.759"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:07.955" starttime="20170928 20:40:07.758"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 20:40:07.956" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20170928 20:40:07.956" starttime="20170928 20:40:07.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:07.956" starttime="20170928 20:40:07.956"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 20:40:08.106" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 20:40:08.106" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:08.106" starttime="20170928 20:40:07.957"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:08.107" starttime="20170928 20:40:08.106"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 20:40:08.107" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 20:40:08.107" starttime="20170928 20:40:08.107"></status>
</kw>
<msg timestamp="20170928 20:40:08.108" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:08.108" starttime="20170928 20:40:07.757"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:08.109" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:08.109" starttime="20170928 20:40:08.108"></status>
</kw>
<msg timestamp="20170928 20:40:08.109" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 20:40:08.109" starttime="20170928 20:40:08.108"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:08.110" starttime="20170928 20:40:08.109"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 20:40:08.110" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 20:40:08.110" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 20:40:08.110" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" endtime="20170928 20:40:08.110" starttime="20170928 20:40:08.110"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:08.112" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_OCC_state.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:08.112" starttime="20170928 20:40:08.111"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:08.112" starttime="20170928 20:40:08.111"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:08.112" starttime="20170928 20:40:07.756"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 20:40:08.113" level="INFO">${logpath} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170928 20:40:08.113" starttime="20170928 20:40:08.113"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 20:40:08.116" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 20:40:08.116" starttime="20170928 20:40:08.115"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 20:40:08.117" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 20:40:08.117" starttime="20170928 20:40:08.116"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 20:40:08.117" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 20:40:08.117" starttime="20170928 20:40:08.117"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 20:40:08.118" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 20:40:08.118" starttime="20170928 20:40:08.118"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 20:40:08.302" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 20:40:08.302" starttime="20170928 20:40:08.119"></status>
</kw>
<msg timestamp="20170928 20:40:08.302" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:08.302" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:08.302" starttime="20170928 20:40:08.118"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 20:40:08.303" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:08.303" starttime="20170928 20:40:08.303"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:08.304" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:08.304" starttime="20170928 20:40:08.303"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:08.304" starttime="20170928 20:40:08.115"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:08.304" starttime="20170928 20:40:08.114"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:08.304" starttime="20170928 20:40:08.114"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 20:40:08.305" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170928 20:40:08.305" starttime="20170928 20:40:08.304"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:08.305" starttime="20170928 20:40:08.305"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 20:40:08.609" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 20:40:08.609" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:08.609" starttime="20170928 20:40:08.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:08.610" starttime="20170928 20:40:08.609"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 20:40:08.610" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 20:40:08.610" starttime="20170928 20:40:08.610"></status>
</kw>
<msg timestamp="20170928 20:40:08.610" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:08.610" starttime="20170928 20:40:08.113"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:08.611" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:08.612" starttime="20170928 20:40:08.611"></status>
</kw>
<msg timestamp="20170928 20:40:08.612" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 20:40:08.612" starttime="20170928 20:40:08.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:08.612" starttime="20170928 20:40:08.612"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 20:40:08.613" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 20:40:08.613" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 20:40:08.613" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170928 20:40:08.613" starttime="20170928 20:40:08.613"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:08.615" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:08.615" starttime="20170928 20:40:08.614"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:08.615" starttime="20170928 20:40:08.614"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:08.615" starttime="20170928 20:40:08.112"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 20:40:08.616" level="INFO">${logpath} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_led.txt</msg>
<status status="PASS" endtime="20170928 20:40:08.616" starttime="20170928 20:40:08.615"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 20:40:08.619" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 20:40:08.619" starttime="20170928 20:40:08.618"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 20:40:08.620" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 20:40:08.620" starttime="20170928 20:40:08.619"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 20:40:08.620" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 20:40:08.620" starttime="20170928 20:40:08.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 20:40:08.621" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 20:40:08.621" starttime="20170928 20:40:08.621"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 20:40:08.854" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 20:40:08.854" starttime="20170928 20:40:08.622"></status>
</kw>
<msg timestamp="20170928 20:40:08.854" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:08.854" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:08.854" starttime="20170928 20:40:08.622"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 20:40:08.855" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:08.855" starttime="20170928 20:40:08.855"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:08.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:08.856" starttime="20170928 20:40:08.855"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:08.856" starttime="20170928 20:40:08.618"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:08.856" starttime="20170928 20:40:08.617"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:08.856" starttime="20170928 20:40:08.617"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 20:40:08.857" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20170928 20:40:08.857" starttime="20170928 20:40:08.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:08.857" starttime="20170928 20:40:08.857"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 20:40:10.472" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 20:40:10.472" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:10.472" starttime="20170928 20:40:08.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:10.473" starttime="20170928 20:40:10.473"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 20:40:10.474" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 20:40:10.474" starttime="20170928 20:40:10.473"></status>
</kw>
<msg timestamp="20170928 20:40:10.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:10.474" starttime="20170928 20:40:08.616"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:10.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:10.475" starttime="20170928 20:40:10.475"></status>
</kw>
<msg timestamp="20170928 20:40:10.475" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 20:40:10.475" starttime="20170928 20:40:10.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:10.476" starttime="20170928 20:40:10.476"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 20:40:10.478" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 20:40:10.478" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 20:40:10.478" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20170928 20:40:10.478" starttime="20170928 20:40:10.476"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:10.480" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_led.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:10.480" starttime="20170928 20:40:10.479"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:10.480" starttime="20170928 20:40:10.479"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:10.480" starttime="20170928 20:40:08.615"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 20:40:10.481" level="INFO">${logpath} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20170928 20:40:10.481" starttime="20170928 20:40:10.481"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 20:40:10.484" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 20:40:10.484" starttime="20170928 20:40:10.484"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 20:40:10.485" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 20:40:10.485" starttime="20170928 20:40:10.485"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 20:40:10.486" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 20:40:10.486" starttime="20170928 20:40:10.485"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 20:40:10.486" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 20:40:10.487" starttime="20170928 20:40:10.486"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 20:40:10.695" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 20:40:10.695" starttime="20170928 20:40:10.487"></status>
</kw>
<msg timestamp="20170928 20:40:10.695" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:10.695" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:10.695" starttime="20170928 20:40:10.487"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 20:40:10.696" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:10.696" starttime="20170928 20:40:10.696"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:10.697" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:10.697" starttime="20170928 20:40:10.697"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:10.697" starttime="20170928 20:40:10.483"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:10.697" starttime="20170928 20:40:10.483"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:10.697" starttime="20170928 20:40:10.482"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 20:40:10.698" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170928 20:40:10.698" starttime="20170928 20:40:10.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:10.699" starttime="20170928 20:40:10.698"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 20:40:11.067" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 20:40:11.067" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:11.067" starttime="20170928 20:40:10.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:11.068" starttime="20170928 20:40:11.068"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 20:40:11.069" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 20:40:11.069" starttime="20170928 20:40:11.068"></status>
</kw>
<msg timestamp="20170928 20:40:11.069" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:11.069" starttime="20170928 20:40:10.481"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:11.070" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:11.070" starttime="20170928 20:40:11.070"></status>
</kw>
<msg timestamp="20170928 20:40:11.070" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 20:40:11.070" starttime="20170928 20:40:11.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:11.071" starttime="20170928 20:40:11.071"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 20:40:11.072" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/87ef4844": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-62-g02e574d", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/87ef4844/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/87ef4844/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/a4417d5c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-62-g5b0adc7", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/a4417d5c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/a4417d5c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/87ef4844", 
        "/xyz/openbmc_project/software/a4417d5c", 
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/a4417d5c"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 20:40:11.072" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 20:40:11.072" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/7a9ef57c": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-57a...</msg>
<status status="PASS" endtime="20170928 20:40:11.072" starttime="20170928 20:40:11.071"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:11.074" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:11.074" starttime="20170928 20:40:11.073"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:11.074" starttime="20170928 20:40:11.073"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:11.074" starttime="20170928 20:40:10.480"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 20:40:11.075" level="INFO">${logpath} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_elog.txt</msg>
<status status="PASS" endtime="20170928 20:40:11.075" starttime="20170928 20:40:11.074"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 20:40:11.078" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 20:40:11.079" starttime="20170928 20:40:11.078"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 20:40:11.079" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 20:40:11.079" starttime="20170928 20:40:11.079"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 20:40:11.080" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 20:40:11.080" starttime="20170928 20:40:11.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 20:40:11.081" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 20:40:11.081" starttime="20170928 20:40:11.080"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 20:40:11.298" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 20:40:11.298" starttime="20170928 20:40:11.081"></status>
</kw>
<msg timestamp="20170928 20:40:11.298" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:11.298" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:11.298" starttime="20170928 20:40:11.081"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 20:40:11.299" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:11.299" starttime="20170928 20:40:11.299"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:11.300" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:11.300" starttime="20170928 20:40:11.299"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:11.300" starttime="20170928 20:40:11.077"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:11.300" starttime="20170928 20:40:11.077"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:11.300" starttime="20170928 20:40:11.076"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 20:40:11.301" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170928 20:40:11.301" starttime="20170928 20:40:11.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:11.301" starttime="20170928 20:40:11.301"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 20:40:11.344" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 20:40:11.344" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:11.344" starttime="20170928 20:40:11.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:11.345" starttime="20170928 20:40:11.345"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 20:40:11.346" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 20:40:11.346" starttime="20170928 20:40:11.345"></status>
</kw>
<msg timestamp="20170928 20:40:11.346" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:11.346" starttime="20170928 20:40:11.075"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:11.347" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170928 20:40:11.347" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170928 20:40:11.347" starttime="20170928 20:40:11.347"></status>
</kw>
<msg timestamp="20170928 20:40:11.347" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170928 20:40:11.347" starttime="20170928 20:40:11.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170928 20:40:11.348" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170928 20:40:11.349" starttime="20170928 20:40:11.348"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:11.349" starttime="20170928 20:40:11.348"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:11.349" starttime="20170928 20:40:11.074"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 20:40:11.349" level="INFO">${logpath} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170928 20:40:11.350" starttime="20170928 20:40:11.349"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 20:40:11.352" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 20:40:11.355" starttime="20170928 20:40:11.352"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 20:40:11.355" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 20:40:11.356" starttime="20170928 20:40:11.355"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 20:40:11.356" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 20:40:11.356" starttime="20170928 20:40:11.356"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 20:40:11.357" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 20:40:11.357" starttime="20170928 20:40:11.357"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 20:40:11.546" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 20:40:11.547" starttime="20170928 20:40:11.358"></status>
</kw>
<msg timestamp="20170928 20:40:11.547" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:11.547" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:11.547" starttime="20170928 20:40:11.357"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 20:40:11.547" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:11.548" starttime="20170928 20:40:11.547"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:11.548" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:11.548" starttime="20170928 20:40:11.548"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:11.548" starttime="20170928 20:40:11.352"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:11.548" starttime="20170928 20:40:11.351"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:11.549" starttime="20170928 20:40:11.350"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 20:40:11.549" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170928 20:40:11.549" starttime="20170928 20:40:11.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:11.550" starttime="20170928 20:40:11.550"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 20:40:13.813" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 20:40:13.813" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:13.813" starttime="20170928 20:40:11.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:13.814" starttime="20170928 20:40:13.814"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 20:40:13.814" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 20:40:13.815" starttime="20170928 20:40:13.814"></status>
</kw>
<msg timestamp="20170928 20:40:13.815" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:13.815" starttime="20170928 20:40:11.350"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:13.816" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:13.816" starttime="20170928 20:40:13.816"></status>
</kw>
<msg timestamp="20170928 20:40:13.816" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 20:40:13.816" starttime="20170928 20:40:13.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:13.817" starttime="20170928 20:40:13.817"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 20:40:13.820" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/87ef4844", 
        "/xyz/openbmc_project/software/a4417d5c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 20:40:13.820" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 20:40:13.821" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20170928 20:40:13.821" starttime="20170928 20:40:13.817"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:13.823" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:13.823" starttime="20170928 20:40:13.822"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:13.823" starttime="20170928 20:40:13.821"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:13.823" starttime="20170928 20:40:11.349"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:13.823" starttime="20170928 20:40:06.921"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:13.823" starttime="20170928 20:40:06.920"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:13.823" starttime="20170928 20:40:06.920"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:13.823" starttime="20170928 20:40:06.919"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:13.823" starttime="20170928 20:40:06.918"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:13.823" starttime="20170928 20:40:06.901"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:13.823" starttime="20170928 20:40:06.899"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:13.824" starttime="20170928 20:40:06.898"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:13.825" starttime="20170928 20:40:13.825"></status>
</kw>
<msg timestamp="20170928 20:40:13.826" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:13.826" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 20:40:13.826" starttime="20170928 20:40:13.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:13.826" starttime="20170928 20:40:13.826"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:13.847" starttime="20170928 20:40:13.845"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170928 20:40:13.850" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170928 20:40:13.850" starttime="20170928 20:40:13.848"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:13.850" starttime="20170928 20:40:13.844"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:13.850" starttime="20170928 20:40:13.826"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:13.850" starttime="20170928 20:40:13.824"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:13.850" starttime="20170928 20:40:13.824"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:13.854" starttime="20170928 20:40:13.852"></status>
</kw>
<msg timestamp="20170928 20:40:13.854" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:13.854" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 20:40:13.854" starttime="20170928 20:40:13.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:13.855" starttime="20170928 20:40:13.854"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170928 20:40:13.903" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 20:40:13.903" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170928 20:40:13.964" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170928 20:40:13.977" level="INFO">${core_files} = None</msg>
<msg timestamp="20170928 20:40:13.977" level="INFO">${stderr} = None</msg>
<msg timestamp="20170928 20:40:13.977" level="INFO">${rc} = None</msg>
<msg timestamp="20170928 20:40:13.977" level="FAIL">#(UTC) 2017/09/28 20:40:13.976100 -    0.073703 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170928 20:40:13.977" starttime="20170928 20:40:13.873"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170928 20:40:13.978" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170928 20:40:13.978" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170928 20:40:13.978" starttime="20170928 20:40:13.978"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:14.004" starttime="20170928 20:40:13.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:14.641" starttime="20170928 20:40:14.005"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:14.641" starttime="20170928 20:40:14.004"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:14.641" starttime="20170928 20:40:13.989"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:14.641" starttime="20170928 20:40:13.979"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170928 20:40:14.641" starttime="20170928 20:40:14.641"></status>
</kw>
<status status="FAIL" endtime="20170928 20:40:14.642" starttime="20170928 20:40:13.873"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:14.642" starttime="20170928 20:40:13.855"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:14.642" starttime="20170928 20:40:13.851"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:14.642" starttime="20170928 20:40:13.850"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:14.644" starttime="20170928 20:40:14.644"></status>
</kw>
<msg timestamp="20170928 20:40:14.644" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:14.644" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 20:40:14.644" starttime="20170928 20:40:14.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:14.645" starttime="20170928 20:40:14.645"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 20:40:14.664" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170928 20:40:14.664" starttime="20170928 20:40:14.663"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 20:40:14.665" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20170928 20:40:14.665" starttime="20170928 20:40:14.665"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 20:40:14.666" level="INFO">${logpath} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170928 20:40:14.666" starttime="20170928 20:40:14.666"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:14.668" starttime="20170928 20:40:14.667"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 20:40:14.670" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170928 20:40:14.670" starttime="20170928 20:40:14.669"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 20:40:14.729" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 20:40:14.729" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170928 20:40:14.799" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 20:40:14.799" starttime="20170928 20:40:14.694"></status>
</kw>
<msg timestamp="20170928 20:40:14.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:14.799" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170928 20:40:14.799" starttime="20170928 20:40:14.670"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 20:40:14.800" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170928 20:40:14.800" starttime="20170928 20:40:14.800"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 20:40:14.801" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 20:40:14.801" starttime="20170928 20:40:14.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:14.808" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:14.808" starttime="20170928 20:40:14.808"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:14.809" starttime="20170928 20:40:14.807"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:14.809" starttime="20170928 20:40:14.801"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:14.809" starttime="20170928 20:40:14.667"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:14.809" starttime="20170928 20:40:14.666"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 20:40:14.810" level="INFO">${logpath} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170928 20:40:14.810" starttime="20170928 20:40:14.809"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:14.811" starttime="20170928 20:40:14.811"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 20:40:14.812" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170928 20:40:14.812" starttime="20170928 20:40:14.811"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 20:40:14.870" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 20:40:14.871" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170928 20:40:15.392" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 20:40:15.392" starttime="20170928 20:40:14.836"></status>
</kw>
<msg timestamp="20170928 20:40:15.392" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:15.393" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 28 20:40 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 28 20:40 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170928 20:40:15.393" starttime="20170928 20:40:14.812"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 20:40:15.394" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 28 20:40 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 28 20:40 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170928 20:40:15.394" starttime="20170928 20:40:15.394"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 20:40:15.395" level="INFO">${stderr} = ls: /proc/2521/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170928 20:40:15.395" starttime="20170928 20:40:15.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:15.403" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:15.403" starttime="20170928 20:40:15.403"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:15.403" starttime="20170928 20:40:15.401"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:15.403" starttime="20170928 20:40:15.395"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:15.404" starttime="20170928 20:40:14.810"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:15.404" starttime="20170928 20:40:14.809"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 20:40:15.404" level="INFO">${logpath} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170928 20:40:15.404" starttime="20170928 20:40:15.404"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:15.406" starttime="20170928 20:40:15.405"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 20:40:15.407" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170928 20:40:15.407" starttime="20170928 20:40:15.406"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 20:40:15.465" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 20:40:15.466" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170928 20:40:18.870" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 20:40:18.871" starttime="20170928 20:40:15.431"></status>
</kw>
<msg timestamp="20170928 20:40:18.871" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:18.875" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-09-28 20:25:23 UTC, end at Thu 2017-09-28 20:40:29 UTC. --\nSep 28 20:25:23 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 28 20:25:23 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170928 20:40:18.875" starttime="20170928 20:40:15.407"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 20:40:18.877" level="INFO">${stdout} = -- Logs begin at Thu 2017-09-28 20:25:23 UTC, end at Thu 2017-09-28 20:40:29 UTC. --
Sep 28 20:25:23 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 28 20:25:23 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170928 20:40:18.877" starttime="20170928 20:40:18.876"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 20:40:18.878" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 20:40:18.878" starttime="20170928 20:40:18.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:18.887" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:18.887" starttime="20170928 20:40:18.886"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:18.887" starttime="20170928 20:40:18.884"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:18.887" starttime="20170928 20:40:18.878"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:18.888" starttime="20170928 20:40:15.405"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:18.888" starttime="20170928 20:40:15.404"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 20:40:18.888" level="INFO">${logpath} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170928 20:40:18.889" starttime="20170928 20:40:18.888"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:18.890" starttime="20170928 20:40:18.890"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 20:40:18.891" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170928 20:40:18.891" starttime="20170928 20:40:18.890"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 20:40:18.948" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 20:40:18.949" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170928 20:40:28.370" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 20:40:28.375" starttime="20170928 20:40:18.915"></status>
</kw>
<msg timestamp="20170928 20:40:28.376" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:28.426" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=2f76639e41444fc0afee467c3e35567b;i=1;b=c7428ed82f494d8ea56d5e8b204c4a77;m=cd4b00;t=55a45b544de01;x=2a2abe35eae45ba9",\n\t"__REALTIME_TIMESTAMP" : "1506630323985921",\n\t"__MONO...</msg>
<status status="PASS" endtime="20170928 20:40:28.427" starttime="20170928 20:40:18.891"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 20:40:28.439" level="INFO">${stdout} = {
	"__CURSOR" : "s=2f76639e41444fc0afee467c3e35567b;i=1;b=c7428ed82f494d8ea56d5e8b204c4a77;m=cd4b00;t=55a45b544de01;x=2a2abe35eae45ba9",
	"__REALTIME_TIMESTAMP" : "1506630323985921",
	"__MONOTONIC_TIM...</msg>
<status status="PASS" endtime="20170928 20:40:28.439" starttime="20170928 20:40:28.427"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 20:40:28.440" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 20:40:28.440" starttime="20170928 20:40:28.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:28.472" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:28.472" starttime="20170928 20:40:28.463"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:28.472" starttime="20170928 20:40:28.450"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:28.472" starttime="20170928 20:40:28.440"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:28.472" starttime="20170928 20:40:18.889"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:28.472" starttime="20170928 20:40:18.888"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 20:40:28.473" level="INFO">${logpath} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170928 20:40:28.473" starttime="20170928 20:40:28.473"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:28.474" starttime="20170928 20:40:28.474"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 20:40:28.475" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170928 20:40:28.475" starttime="20170928 20:40:28.475"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 20:40:28.532" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 20:40:28.533" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170928 20:40:28.602" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 20:40:28.602" starttime="20170928 20:40:28.499"></status>
</kw>
<msg timestamp="20170928 20:40:28.602" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:28.602" level="INFO">${ret_values} = (u'MemTotal:         432244 kB\nMemFree:          221420 kB\nMemAvailable:     323528 kB\nBuffers:           31708 kB\nCached:            81004 kB\nSwapCached:            0 kB\nActive:           15837...</msg>
<status status="PASS" endtime="20170928 20:40:28.602" starttime="20170928 20:40:28.476"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 20:40:28.603" level="INFO">${stdout} = MemTotal:         432244 kB
MemFree:          221420 kB
MemAvailable:     323528 kB
Buffers:           31708 kB
Cached:            81004 kB
SwapCached:            0 kB
Active:           158376 kB
Inac...</msg>
<status status="PASS" endtime="20170928 20:40:28.603" starttime="20170928 20:40:28.603"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 20:40:28.604" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 20:40:28.604" starttime="20170928 20:40:28.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:28.611" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:28.611" starttime="20170928 20:40:28.611"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:28.611" starttime="20170928 20:40:28.610"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:28.611" starttime="20170928 20:40:28.604"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:28.612" starttime="20170928 20:40:28.473"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:28.612" starttime="20170928 20:40:28.472"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 20:40:28.612" level="INFO">${logpath} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170928 20:40:28.612" starttime="20170928 20:40:28.612"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:28.614" starttime="20170928 20:40:28.613"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 20:40:28.615" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170928 20:40:28.615" starttime="20170928 20:40:28.614"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 20:40:28.672" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 20:40:28.672" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170928 20:40:28.971" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 20:40:28.972" starttime="20170928 20:40:28.639"></status>
</kw>
<msg timestamp="20170928 20:40:28.972" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:28.972" level="INFO">${ret_values} = (u'Mem: 210824K used, 221420K free, 8944K shrd, 31708K buff, 81008K cached\nCPU:  15% usr   7% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 0.83 1.75 1.86 1/162 2525\n  PID  PPID U...</msg>
<status status="PASS" endtime="20170928 20:40:28.972" starttime="20170928 20:40:28.615"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 20:40:28.973" level="INFO">${stdout} = Mem: 210824K used, 221420K free, 8944K shrd, 31708K buff, 81008K cached
CPU:  15% usr   7% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.83 1.75 1.86 1/162 2525
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20170928 20:40:28.973" starttime="20170928 20:40:28.972"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 20:40:28.973" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 20:40:28.974" starttime="20170928 20:40:28.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:28.981" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:28.981" starttime="20170928 20:40:28.980"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:28.981" starttime="20170928 20:40:28.980"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:28.981" starttime="20170928 20:40:28.974"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:28.981" starttime="20170928 20:40:28.613"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:28.982" starttime="20170928 20:40:28.612"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 20:40:28.982" level="INFO">${logpath} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170928 20:40:28.982" starttime="20170928 20:40:28.982"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:28.984" starttime="20170928 20:40:28.983"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 20:40:28.984" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170928 20:40:28.985" starttime="20170928 20:40:28.984"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 20:40:29.041" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 20:40:29.041" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170928 20:40:29.113" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 20:40:29.113" starttime="20170928 20:40:29.010"></status>
</kw>
<msg timestamp="20170928 20:40:29.113" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:29.113" level="INFO">${ret_values} = (u'[    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16550A\n[    0.290000] 1e78d000.serial: ttyS1 at MMIO 0x1e78d000 (irq = 24, base_baud = 1500000) is a 1...</msg>
<status status="PASS" endtime="20170928 20:40:29.113" starttime="20170928 20:40:28.985"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 20:40:29.114" level="INFO">${stdout} = [    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16550A
[    0.290000] 1e78d000.serial: ttyS1 at MMIO 0x1e78d000 (irq = 24, base_baud = 1500000) is a 16550...</msg>
<status status="PASS" endtime="20170928 20:40:29.114" starttime="20170928 20:40:29.114"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 20:40:29.115" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 20:40:29.115" starttime="20170928 20:40:29.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.122" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/20170928204003342455_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:29.123" starttime="20170928 20:40:29.122"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.123" starttime="20170928 20:40:29.121"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.123" starttime="20170928 20:40:29.115"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.123" starttime="20170928 20:40:28.983"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.123" starttime="20170928 20:40:28.982"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.123" starttime="20170928 20:40:14.665"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.123" starttime="20170928 20:40:14.664"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.123" starttime="20170928 20:40:14.664"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.123" starttime="20170928 20:40:14.664"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.123" starttime="20170928 20:40:14.663"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.123" starttime="20170928 20:40:14.645"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.123" starttime="20170928 20:40:14.642"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.123" starttime="20170928 20:40:14.642"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:29.125" starttime="20170928 20:40:29.125"></status>
</kw>
<msg timestamp="20170928 20:40:29.126" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:29.126" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 20:40:29.126" starttime="20170928 20:40:29.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:29.126" starttime="20170928 20:40:29.126"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 20:40:29.147" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 20:40:29.148" starttime="20170928 20:40:29.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 20:40:29.148" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 20:40:29.148" starttime="20170928 20:40:29.148"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 20:40:29.149" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 20:40:29.149" starttime="20170928 20:40:29.149"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 20:40:29.150" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 20:40:29.150" starttime="20170928 20:40:29.149"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.353" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 20:40:29.353" starttime="20170928 20:40:29.151"></status>
</kw>
<msg timestamp="20170928 20:40:29.353" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:29.353" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:29.353" starttime="20170928 20:40:29.150"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.354" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:29.354" starttime="20170928 20:40:29.353"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:29.355" starttime="20170928 20:40:29.354"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.355" starttime="20170928 20:40:29.146"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.355" starttime="20170928 20:40:29.145"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.355" starttime="20170928 20:40:29.145"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 20:40:29.356" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170928 20:40:29.356" starttime="20170928 20:40:29.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:29.356" starttime="20170928 20:40:29.356"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 20:40:29.399" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170928 20:40:29.399" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:29.399" starttime="20170928 20:40:29.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:29.400" starttime="20170928 20:40:29.400"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 20:40:29.400" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 20:40:29.400" starttime="20170928 20:40:29.400"></status>
</kw>
<msg timestamp="20170928 20:40:29.401" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:29.401" starttime="20170928 20:40:29.144"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.402" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170928 20:40:29.402" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170928 20:40:29.402" starttime="20170928 20:40:29.402"></status>
</kw>
<msg timestamp="20170928 20:40:29.402" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170928 20:40:29.402" starttime="20170928 20:40:29.401"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170928 20:40:29.403" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 20:40:29.403" starttime="20170928 20:40:29.403"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.403" starttime="20170928 20:40:29.144"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.403" starttime="20170928 20:40:29.127"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.403" starttime="20170928 20:40:29.124"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.403" starttime="20170928 20:40:29.124"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:29.405" starttime="20170928 20:40:29.405"></status>
</kw>
<msg timestamp="20170928 20:40:29.405" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:29.406" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 20:40:29.406" starttime="20170928 20:40:29.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:29.406" starttime="20170928 20:40:29.406"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170928 20:40:29.426" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 20:40:29.426" starttime="20170928 20:40:29.425"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.426" starttime="20170928 20:40:29.423"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.426" starttime="20170928 20:40:29.406"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.426" starttime="20170928 20:40:29.404"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.426" starttime="20170928 20:40:29.404"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.426" starttime="20170928 20:40:04.659"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.426" starttime="20170928 20:40:04.657"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.426" starttime="20170928 20:40:04.656"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.427" starttime="20170928 20:40:04.656"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170928 20:40:29.438" starttime="20170928 20:40:29.438"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.439" starttime="20170928 20:40:29.427"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.439" starttime="20170928 20:40:04.655"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.439" starttime="20170928 20:40:00.258"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.439" starttime="20170928 20:40:00.257"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170928 20:40:29.441" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170928 20:40:29.441" starttime="20170928 20:40:29.440"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170928 20:40:29.441" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170928204003342455_BmcCodeUpdate/20170928204003342455_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20170928 20:40:29.441" starttime="20170928 20:40:29.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:29.442" starttime="20170928 20:40:29.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:29.443" starttime="20170928 20:40:29.442"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.443" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170928 20:40:29.443" starttime="20170928 20:40:29.443"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.445" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170928 20:40:29.445" starttime="20170928 20:40:29.444"></status>
</kw>
<msg timestamp="20170928 20:40:29.445" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170928 20:40:29.445" starttime="20170928 20:40:29.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.446" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:29.446" starttime="20170928 20:40:29.446"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.446" starttime="20170928 20:40:29.445"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:29.447" starttime="20170928 20:40:29.446"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170928 20:40:29.449" level="INFO">${cur_time} = 2017-09-28 20:40:29:447957</msg>
<status status="PASS" endtime="20170928 20:40:29.449" starttime="20170928 20:40:29.448"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170928 20:40:29.449" level="INFO">${cur_time} = 20170928204029447957</msg>
<status status="PASS" endtime="20170928 20:40:29.449" starttime="20170928 20:40:29.449"></status>
</kw>
<msg timestamp="20170928 20:40:29.450" level="INFO">${cur_time} = 20170928204029447957</msg>
<status status="PASS" endtime="20170928 20:40:29.450" starttime="20170928 20:40:29.447"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.451" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 20:40:29.451" starttime="20170928 20:40:29.450"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.451" starttime="20170928 20:40:29.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 20:40:29.455" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 20:40:29.457" starttime="20170928 20:40:29.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 20:40:29.457" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 20:40:29.457" starttime="20170928 20:40:29.457"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 20:40:29.458" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 20:40:29.458" starttime="20170928 20:40:29.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 20:40:29.459" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 20:40:29.459" starttime="20170928 20:40:29.458"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.636" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 20:40:29.636" starttime="20170928 20:40:29.459"></status>
</kw>
<msg timestamp="20170928 20:40:29.636" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:29.636" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:29.636" starttime="20170928 20:40:29.459"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.637" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:29.637" starttime="20170928 20:40:29.636"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:29.638" starttime="20170928 20:40:29.637"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.638" starttime="20170928 20:40:29.454"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.638" starttime="20170928 20:40:29.454"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.638" starttime="20170928 20:40:29.453"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 20:40:29.639" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170928 20:40:29.639" starttime="20170928 20:40:29.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:29.639" starttime="20170928 20:40:29.639"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 20:40:29.682" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170928 20:40:29.682" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:29.682" starttime="20170928 20:40:29.640"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:29.683" starttime="20170928 20:40:29.683"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 20:40:29.683" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 20:40:29.684" starttime="20170928 20:40:29.683"></status>
</kw>
<msg timestamp="20170928 20:40:29.684" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:29.684" starttime="20170928 20:40:29.453"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.684" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 20:40:29.685" starttime="20170928 20:40:29.684"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.685" starttime="20170928 20:40:29.452"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 20:40:29.688" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 20:40:29.688" starttime="20170928 20:40:29.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 20:40:29.689" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 20:40:29.689" starttime="20170928 20:40:29.689"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 20:40:29.690" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 20:40:29.690" starttime="20170928 20:40:29.689"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 20:40:29.690" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 20:40:29.690" starttime="20170928 20:40:29.690"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.917" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 20:40:29.917" starttime="20170928 20:40:29.691"></status>
</kw>
<msg timestamp="20170928 20:40:29.917" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 20:40:29.917" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:29.917" starttime="20170928 20:40:29.691"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.918" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:29.918" starttime="20170928 20:40:29.918"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.919" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 20:40:29.919" starttime="20170928 20:40:29.918"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.919" starttime="20170928 20:40:29.687"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.919" starttime="20170928 20:40:29.687"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.919" starttime="20170928 20:40:29.686"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 20:40:29.920" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170928 20:40:29.920" starttime="20170928 20:40:29.920"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:29.921" starttime="20170928 20:40:29.920"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 20:40:29.964" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170928 20:40:29.964" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:29.964" starttime="20170928 20:40:29.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:29.964" starttime="20170928 20:40:29.964"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 20:40:29.965" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 20:40:29.965" starttime="20170928 20:40:29.965"></status>
</kw>
<msg timestamp="20170928 20:40:29.965" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 20:40:29.965" starttime="20170928 20:40:29.685"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170928 20:40:29.966" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 20:40:29.966" starttime="20170928 20:40:29.965"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.966" starttime="20170928 20:40:29.685"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.966" starttime="20170928 20:40:29.452"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.966" starttime="20170928 20:40:29.451"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.967" starttime="20170928 20:40:00.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20170928 20:40:29.967" starttime="20170928 20:40:29.967"></status>
</kw>
<status status="PASS" endtime="20170928 20:40:29.968" starttime="20170928 20:40:00.256"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170928 20:40:29.968" critical="yes" starttime="20170928 20:39:38.977">SSLError: ('The write operation timed out',)</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20170928 20:40:29.969" starttime="20170928 20:39:37.860"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
