<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170918 15:36:58.299">
<suite name="Tests" id="s1" source="/tmp/fspcibld/17001/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 15:36:58.806">Dictionary does not contain key 'host'.</msg>
<status starttime="20170918 15:36:58.806" status="FAIL" endtime="20170918 15:36:58.806"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:36:58.806">${has_host} = False</msg>
<status starttime="20170918 15:36:58.805" status="PASS" endtime="20170918 15:36:58.806"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170918 15:36:58.807" status="PASS" endtime="20170918 15:36:58.807"></status>
</kw>
<status starttime="20170918 15:36:58.807" status="PASS" endtime="20170918 15:36:58.808"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:36:58.809">${port_num} = 22</msg>
<status starttime="20170918 15:36:58.809" status="PASS" endtime="20170918 15:36:58.809"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:36:58.810">${SSH_PORT} = 22</msg>
<status starttime="20170918 15:36:58.809" status="PASS" endtime="20170918 15:36:58.810"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:36:58.810">${https_num} = 443</msg>
<status starttime="20170918 15:36:58.810" status="PASS" endtime="20170918 15:36:58.810"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:36:58.811">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170918 15:36:58.810" status="PASS" endtime="20170918 15:36:58.811"></status>
</kw>
<status starttime="20170918 15:36:58.808" status="PASS" endtime="20170918 15:36:58.811"></status>
</kw>
<status starttime="20170918 15:36:58.808" status="PASS" endtime="20170918 15:36:58.811"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 15:36:58.812">Dictionary does not contain key 'port'.</msg>
<status starttime="20170918 15:36:58.812" status="FAIL" endtime="20170918 15:36:58.812"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:36:58.812">${has_port} = False</msg>
<status starttime="20170918 15:36:58.811" status="PASS" endtime="20170918 15:36:58.812"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170918 15:36:58.814" status="PASS" endtime="20170918 15:36:58.814"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170918 15:36:58.815" status="PASS" endtime="20170918 15:36:58.815"></status>
</kw>
<status starttime="20170918 15:36:58.813" status="PASS" endtime="20170918 15:36:58.815"></status>
</kw>
<status starttime="20170918 15:36:58.813" status="PASS" endtime="20170918 15:36:58.815"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:36:58.816">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170918 15:37:00.577">Read output: root@witherspoon:~#</msg>
<status starttime="20170918 15:36:58.815" status="PASS" endtime="20170918 15:37:00.577"></status>
</kw>
<status starttime="20170918 15:36:58.805" status="PASS" endtime="20170918 15:37:00.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:00.579">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170918 15:37:00.656">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170918 15:37:00.656">${output} = VERSION_ID="v1.99.10-17-gef5bc1e"</msg>
<msg level="INFO" timestamp="20170918 15:37:00.656">${stderr} = </msg>
<status starttime="20170918 15:37:00.579" status="PASS" endtime="20170918 15:37:00.657"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:00.657">Length is 0</msg>
<status starttime="20170918 15:37:00.657" status="PASS" endtime="20170918 15:37:00.657"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:00.658">VERSION_ID="v1.99.10-17-gef5bc1e"</msg>
<status starttime="20170918 15:37:00.657" status="PASS" endtime="20170918 15:37:00.658"></status>
</kw>
<status starttime="20170918 15:37:00.578" status="PASS" endtime="20170918 15:37:00.658"></status>
</kw>
<status starttime="20170918 15:37:00.578" status="PASS" endtime="20170918 15:37:00.658"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="code_update_utils" name="Get Host Software Objects Details">
<doc>Return software object details as a list of dictionaries.</doc>
<assign>
<var>${software}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${software}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:00.659">${software} = []</msg>
<status starttime="20170918 15:37:00.659" status="PASS" endtime="20170918 15:37:00.660"></status>
</kw>
<kw library="code_update_utils" name="Get Software Objects">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>${VERSION_PURPOSE_HOST}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:00.660">${host_list} = []</msg>
<status starttime="20170918 15:37:00.660" status="PASS" endtime="20170918 15:37:00.660"></status>
</kw>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:00.664">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170918 15:37:00.664" status="PASS" endtime="20170918 15:37:00.665"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:00.665">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170918 15:37:00.665" status="PASS" endtime="20170918 15:37:00.665"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:00.666">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170918 15:37:00.666" status="PASS" endtime="20170918 15:37:00.666"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:00.667">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170918 15:37:00.666" status="PASS" endtime="20170918 15:37:00.667"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:00.852">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170918 15:37:00.667" status="PASS" endtime="20170918 15:37:00.852"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:00.852">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:00.852">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:00.667" status="PASS" endtime="20170918 15:37:00.852"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:00.853">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:00.853" status="PASS" endtime="20170918 15:37:00.853"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:00.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:00.853" status="PASS" endtime="20170918 15:37:00.854"></status>
</kw>
<status starttime="20170918 15:37:00.663" status="PASS" endtime="20170918 15:37:00.854"></status>
</kw>
<status starttime="20170918 15:37:00.662" status="PASS" endtime="20170918 15:37:00.854"></status>
</kw>
<status starttime="20170918 15:37:00.662" status="PASS" endtime="20170918 15:37:00.854"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:00.855">${base_uri} = /xyz/openbmc_project/software/</msg>
<status starttime="20170918 15:37:00.854" status="PASS" endtime="20170918 15:37:00.855"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:00.857">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status starttime="20170918 15:37:00.856" status="PASS" endtime="20170918 15:37:00.857"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:00.858">URI:https://9.3.21.61:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status starttime="20170918 15:37:00.857" status="PASS" endtime="20170918 15:37:00.858"></status>
</kw>
<status starttime="20170918 15:37:00.857" status="PASS" endtime="20170918 15:37:00.858"></status>
</kw>
<status starttime="20170918 15:37:00.855" status="PASS" endtime="20170918 15:37:00.858"></status>
</kw>
<status starttime="20170918 15:37:00.855" status="PASS" endtime="20170918 15:37:00.858"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:00.923">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 15:37:00.923">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:00.858" status="PASS" endtime="20170918 15:37:00.923"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:00.925">${msg} = Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/active"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170918 15:37:00.924" status="PASS" endtime="20170918 15:37:00.925"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:00.926">Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/active"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170918 15:37:00.925" status="PASS" endtime="20170918 15:37:00.926"></status>
</kw>
<status starttime="20170918 15:37:00.925" status="PASS" endtime="20170918 15:37:00.926"></status>
</kw>
<status starttime="20170918 15:37:00.924" status="PASS" endtime="20170918 15:37:00.926"></status>
</kw>
<status starttime="20170918 15:37:00.923" status="PASS" endtime="20170918 15:37:00.926"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 15:37:00.926">Delete All Sessions</msg>
<status starttime="20170918 15:37:00.926" status="PASS" endtime="20170918 15:37:00.926"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:00.927">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:00.661" status="PASS" endtime="20170918 15:37:00.927"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:00.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:00.927" status="PASS" endtime="20170918 15:37:00.927"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:00.928">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/active"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 15:37:00.928">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 15:37:00.928">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/xyz/openbmc_project/software/8764baa3', u'/xyz/openbmc_project/software/active']}</msg>
<status starttime="20170918 15:37:00.928" status="PASS" endtime="20170918 15:37:00.928"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:00.928">${sw_list} = [u'/xyz/openbmc_project/software/8764baa3', u'/xyz/openbmc_project/software/active']</msg>
<status starttime="20170918 15:37:00.661" status="PASS" endtime="20170918 15:37:00.928"></status>
</kw>
<kw name="${index} IN [ @{sw_list} ]" type="for">
<kw name="${index} = /xyz/openbmc_project/software/8764baa3" type="foritem">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:00.934">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170918 15:37:00.933" status="PASS" endtime="20170918 15:37:00.934"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:00.935">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170918 15:37:00.934" status="PASS" endtime="20170918 15:37:00.935"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:00.935">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170918 15:37:00.935" status="PASS" endtime="20170918 15:37:00.935"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:00.936">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170918 15:37:00.936" status="PASS" endtime="20170918 15:37:00.937"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:01.131">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170918 15:37:00.937" status="PASS" endtime="20170918 15:37:01.131"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:01.131">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:01.131">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:00.937" status="PASS" endtime="20170918 15:37:01.131"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:01.132">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:01.132" status="PASS" endtime="20170918 15:37:01.132"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:01.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:01.132" status="PASS" endtime="20170918 15:37:01.133"></status>
</kw>
<status starttime="20170918 15:37:00.931" status="PASS" endtime="20170918 15:37:01.133"></status>
</kw>
<status starttime="20170918 15:37:00.930" status="PASS" endtime="20170918 15:37:01.133"></status>
</kw>
<status starttime="20170918 15:37:00.930" status="PASS" endtime="20170918 15:37:01.133"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:01.134">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/Purpose</msg>
<status starttime="20170918 15:37:01.133" status="PASS" endtime="20170918 15:37:01.134"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170918 15:37:01.134" status="PASS" endtime="20170918 15:37:01.134"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:01.246">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 15:37:01.246">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:01.135" status="PASS" endtime="20170918 15:37:01.246"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170918 15:37:01.247" status="PASS" endtime="20170918 15:37:01.247"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 15:37:01.248">Delete All Sessions</msg>
<status starttime="20170918 15:37:01.247" status="PASS" endtime="20170918 15:37:01.248"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:01.248">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:00.929" status="PASS" endtime="20170918 15:37:01.248"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status starttime="20170918 15:37:01.249" status="PASS" endtime="20170918 15:37:01.249"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:01.249">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 15:37:01.249">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 15:37:01.250">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host'}</msg>
<status starttime="20170918 15:37:01.249" status="PASS" endtime="20170918 15:37:01.250"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:01.250">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status starttime="20170918 15:37:00.929" status="PASS" endtime="20170918 15:37:01.250"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status starttime="20170918 15:37:01.250" status="PASS" endtime="20170918 15:37:01.251"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status starttime="20170918 15:37:01.251" status="PASS" endtime="20170918 15:37:01.251"></status>
</kw>
<status starttime="20170918 15:37:00.929" status="PASS" endtime="20170918 15:37:01.251"></status>
</kw>
<kw name="${index} = /xyz/openbmc_project/software/active" type="foritem">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:01.255">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170918 15:37:01.254" status="PASS" endtime="20170918 15:37:01.255"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:01.255">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170918 15:37:01.255" status="PASS" endtime="20170918 15:37:01.256"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:01.256">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170918 15:37:01.256" status="PASS" endtime="20170918 15:37:01.256"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:01.257">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170918 15:37:01.256" status="PASS" endtime="20170918 15:37:01.257"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:01.533">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170918 15:37:01.258" status="PASS" endtime="20170918 15:37:01.533"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:01.533">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:01.533">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:01.257" status="PASS" endtime="20170918 15:37:01.533"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:01.534">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:01.534" status="PASS" endtime="20170918 15:37:01.534"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:01.535">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:01.534" status="PASS" endtime="20170918 15:37:01.535"></status>
</kw>
<status starttime="20170918 15:37:01.253" status="PASS" endtime="20170918 15:37:01.535"></status>
</kw>
<status starttime="20170918 15:37:01.253" status="PASS" endtime="20170918 15:37:01.535"></status>
</kw>
<status starttime="20170918 15:37:01.252" status="PASS" endtime="20170918 15:37:01.535"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:01.536">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status starttime="20170918 15:37:01.535" status="PASS" endtime="20170918 15:37:01.536"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170918 15:37:01.536" status="PASS" endtime="20170918 15:37:01.536"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:01.593">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 15:37:01.593">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170918 15:37:01.537" status="PASS" endtime="20170918 15:37:01.593"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170918 15:37:01.594" status="PASS" endtime="20170918 15:37:01.594"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 15:37:01.594">Delete All Sessions</msg>
<status starttime="20170918 15:37:01.594" status="PASS" endtime="20170918 15:37:01.594"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:01.595">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170918 15:37:01.252" status="PASS" endtime="20170918 15:37:01.595"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:01.595">Returning from the enclosing user keyword.</msg>
<status starttime="20170918 15:37:01.595" status="PASS" endtime="20170918 15:37:01.595"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:01.596">${attr_purpose} = None</msg>
<status starttime="20170918 15:37:01.251" status="PASS" endtime="20170918 15:37:01.596"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:01.596">Continuing for loop from the next iteration.</msg>
<status starttime="20170918 15:37:01.596" status="PASS" endtime="20170918 15:37:01.596"></status>
</kw>
<status starttime="20170918 15:37:01.251" status="PASS" endtime="20170918 15:37:01.596"></status>
</kw>
<status starttime="20170918 15:37:00.928" status="PASS" endtime="20170918 15:37:01.596"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:01.597">${pnor_details} = [u'/xyz/openbmc_project/software/8764baa3']</msg>
<status starttime="20170918 15:37:00.660" status="PASS" endtime="20170918 15:37:01.597"></status>
</kw>
<kw name="${pnor} IN [ @{pnor_details} ]" type="for">
<kw name="${pnor} = /xyz/openbmc_project/software/8764baa3" type="foritem">
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:01.599">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170918 15:37:01.599" status="PASS" endtime="20170918 15:37:01.600"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:01.601">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170918 15:37:01.600" status="PASS" endtime="20170918 15:37:01.601"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:01.601">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170918 15:37:01.601" status="PASS" endtime="20170918 15:37:01.601"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:01.602">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170918 15:37:01.602" status="PASS" endtime="20170918 15:37:01.602"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:01.781">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170918 15:37:01.603" status="PASS" endtime="20170918 15:37:01.781"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:01.781">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:01.781">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:01.602" status="PASS" endtime="20170918 15:37:01.781"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:01.782">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:01.782" status="PASS" endtime="20170918 15:37:01.782"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:01.783">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:01.782" status="PASS" endtime="20170918 15:37:01.783"></status>
</kw>
<status starttime="20170918 15:37:01.599" status="PASS" endtime="20170918 15:37:01.783"></status>
</kw>
<status starttime="20170918 15:37:01.598" status="PASS" endtime="20170918 15:37:01.783"></status>
</kw>
<status starttime="20170918 15:37:01.598" status="PASS" endtime="20170918 15:37:01.783"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:01.784">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status starttime="20170918 15:37:01.784" status="PASS" endtime="20170918 15:37:01.784"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170918 15:37:01.784" status="PASS" endtime="20170918 15:37:01.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:01.907">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 15:37:01.907">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:01.785" status="PASS" endtime="20170918 15:37:01.907"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170918 15:37:01.907" status="PASS" endtime="20170918 15:37:01.908"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 15:37:01.908">Delete All Sessions</msg>
<status starttime="20170918 15:37:01.908" status="PASS" endtime="20170918 15:37:01.908"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:01.908">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:01.597" status="PASS" endtime="20170918 15:37:01.909"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:01.909">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 15:37:01.909">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 15:37:01.909">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'Path': u'', u'Priority': 0, u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Activation': u'xyz.ope...</msg>
<status starttime="20170918 15:37:01.909" status="PASS" endtime="20170918 15:37:01.909"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status starttime="20170918 15:37:01.910" status="PASS" endtime="20170918 15:37:01.910"></status>
</kw>
<status starttime="20170918 15:37:01.597" status="PASS" endtime="20170918 15:37:01.910"></status>
</kw>
<status starttime="20170918 15:37:01.597" status="PASS" endtime="20170918 15:37:01.910"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:01.910">${software} = [{u'Path': u'', u'Priority': 0, u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activ...</msg>
<status starttime="20170918 15:37:00.659" status="PASS" endtime="20170918 15:37:01.910"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${software}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:01.911">[{u'Path': u'', u'Priority': 0, u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54'}]</msg>
<status starttime="20170918 15:37:01.911" status="PASS" endtime="20170918 15:37:01.911"></status>
</kw>
<status starttime="20170918 15:37:00.659" status="PASS" endtime="20170918 15:37:01.911"></status>
</kw>
<status starttime="20170918 15:37:00.658" status="PASS" endtime="20170918 15:37:01.911"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:02.096">index=1
host=9.3.21.61
encoding=UTF-8
timeout=25 seconds
newline=

term_type=vt100
path_separator=/
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170918 15:37:02.096">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170918 15:37:02.852">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170918 15:37:02.853">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170918 15:37:02.940">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170918 15:37:02.948">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170918 15:37:02.948">${stderr} = </msg>
<msg level="INFO" timestamp="20170918 15:37:02.948">${rc} = 0</msg>
<status starttime="20170918 15:37:01.912" status="PASS" endtime="20170918 15:37:02.948"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:02.949">Length is 0</msg>
<status starttime="20170918 15:37:02.948" status="PASS" endtime="20170918 15:37:02.949"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:02.949">Length is 11</msg>
<status starttime="20170918 15:37:02.949" status="PASS" endtime="20170918 15:37:02.949"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:02.949">${bmc_model} = Witherspoon</msg>
<status starttime="20170918 15:37:01.912" status="PASS" endtime="20170918 15:37:02.949"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:02.950">BMC Model=Witherspoon</msg>
<status starttime="20170918 15:37:02.950" status="PASS" endtime="20170918 15:37:02.950"></status>
</kw>
<status starttime="20170918 15:37:01.912" status="PASS" endtime="20170918 15:37:02.950"></status>
</kw>
<status starttime="20170918 15:37:01.911" status="PASS" endtime="20170918 15:37:02.950"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 15:37:02.953">Dictionary does not contain key 'host'.</msg>
<status starttime="20170918 15:37:02.953" status="FAIL" endtime="20170918 15:37:02.953"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:02.954">${has_host} = False</msg>
<status starttime="20170918 15:37:02.952" status="PASS" endtime="20170918 15:37:02.954"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170918 15:37:02.955" status="PASS" endtime="20170918 15:37:02.955"></status>
</kw>
<status starttime="20170918 15:37:02.954" status="PASS" endtime="20170918 15:37:02.955"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:02.958">${port_num} = 22</msg>
<status starttime="20170918 15:37:02.957" status="PASS" endtime="20170918 15:37:02.958"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:02.958">${SSH_PORT} = 22</msg>
<status starttime="20170918 15:37:02.958" status="PASS" endtime="20170918 15:37:02.958"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:02.959">${https_num} = 443</msg>
<status starttime="20170918 15:37:02.959" status="PASS" endtime="20170918 15:37:02.959"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:02.960">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170918 15:37:02.959" status="PASS" endtime="20170918 15:37:02.960"></status>
</kw>
<status starttime="20170918 15:37:02.956" status="PASS" endtime="20170918 15:37:02.960"></status>
</kw>
<status starttime="20170918 15:37:02.956" status="PASS" endtime="20170918 15:37:02.960"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 15:37:02.961">Dictionary does not contain key 'port'.</msg>
<status starttime="20170918 15:37:02.961" status="FAIL" endtime="20170918 15:37:02.961"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:02.961">${has_port} = False</msg>
<status starttime="20170918 15:37:02.960" status="PASS" endtime="20170918 15:37:02.961"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170918 15:37:02.963" status="PASS" endtime="20170918 15:37:02.963"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170918 15:37:02.963" status="PASS" endtime="20170918 15:37:02.964"></status>
</kw>
<status starttime="20170918 15:37:02.962" status="PASS" endtime="20170918 15:37:02.964"></status>
</kw>
<status starttime="20170918 15:37:02.961" status="PASS" endtime="20170918 15:37:02.964"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:02.964">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170918 15:37:04.645">Read output: root@witherspoon:~#</msg>
<status starttime="20170918 15:37:02.964" status="PASS" endtime="20170918 15:37:04.645"></status>
</kw>
<status starttime="20170918 15:37:02.951" status="PASS" endtime="20170918 15:37:04.646"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:04.647">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170918 15:37:04.723">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170918 15:37:04.723">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170918 15:37:04.723">${stderr} = </msg>
<status starttime="20170918 15:37:04.646" status="PASS" endtime="20170918 15:37:04.723"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:04.724">Length is 0</msg>
<status starttime="20170918 15:37:04.724" status="PASS" endtime="20170918 15:37:04.724"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:04.724">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170918 15:37:04.646" status="PASS" endtime="20170918 15:37:04.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170918 15:37:04.725" status="PASS" endtime="20170918 15:37:04.725"></status>
</kw>
<status starttime="20170918 15:37:02.951" status="PASS" endtime="20170918 15:37:04.725"></status>
</kw>
<status starttime="20170918 15:37:02.951" status="PASS" endtime="20170918 15:37:04.725"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status starttime="20170918 15:37:04.725" status="PASS" endtime="20170918 15:37:04.726"></status>
</kw>
<status starttime="20170918 15:36:58.804" status="PASS" endtime="20170918 15:37:04.726"></status>
</kw>
<suite name="Security" id="s1-s1" source="/tmp/fspcibld/17001/obmc-robot/tests/security">
<suite name="Test Ssl" id="s1-s1-s1" source="/tmp/fspcibld/17001/obmc-robot/tests/security/test_ssl.robot">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:04.767">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170918 15:37:04.766" status="PASS" endtime="20170918 15:37:04.767"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:04.768">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170918 15:37:04.767" status="PASS" endtime="20170918 15:37:04.768"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:04.768">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170918 15:37:04.768" status="PASS" endtime="20170918 15:37:04.768"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:04.769">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170918 15:37:04.768" status="PASS" endtime="20170918 15:37:04.769"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:04.957">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170918 15:37:04.770" status="PASS" endtime="20170918 15:37:04.958"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:04.958">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:04.958">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:04.769" status="PASS" endtime="20170918 15:37:04.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:04.958">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:04.958" status="PASS" endtime="20170918 15:37:04.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:04.959">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:04.959" status="PASS" endtime="20170918 15:37:04.959"></status>
</kw>
<status starttime="20170918 15:37:04.766" status="PASS" endtime="20170918 15:37:04.959"></status>
</kw>
<status starttime="20170918 15:37:04.765" status="PASS" endtime="20170918 15:37:04.959"></status>
</kw>
<status starttime="20170918 15:37:04.765" status="PASS" endtime="20170918 15:37:04.959"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:04.965">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170918 15:37:04.964" status="PASS" endtime="20170918 15:37:04.965"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:04.966">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170918 15:37:04.966" status="PASS" endtime="20170918 15:37:04.966"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:04.967">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170918 15:37:04.967" status="PASS" endtime="20170918 15:37:04.967"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:04.968">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170918 15:37:04.967" status="PASS" endtime="20170918 15:37:04.968"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:05.199">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170918 15:37:04.969" status="PASS" endtime="20170918 15:37:05.199"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.199">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:05.199">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:04.968" status="PASS" endtime="20170918 15:37:05.199"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:05.200">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:05.199" status="PASS" endtime="20170918 15:37:05.200"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:05.200">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:05.200" status="PASS" endtime="20170918 15:37:05.201"></status>
</kw>
<status starttime="20170918 15:37:04.964" status="PASS" endtime="20170918 15:37:05.201"></status>
</kw>
<status starttime="20170918 15:37:04.963" status="PASS" endtime="20170918 15:37:05.201"></status>
</kw>
<status starttime="20170918 15:37:04.962" status="PASS" endtime="20170918 15:37:05.201"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.201">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170918 15:37:05.201" status="PASS" endtime="20170918 15:37:05.201"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.206">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170918 15:37:05.203" status="PASS" endtime="20170918 15:37:05.206"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:05.207">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170918 15:37:05.206" status="PASS" endtime="20170918 15:37:05.207"></status>
</kw>
<status starttime="20170918 15:37:05.206" status="PASS" endtime="20170918 15:37:05.207"></status>
</kw>
<status starttime="20170918 15:37:05.202" status="PASS" endtime="20170918 15:37:05.207"></status>
</kw>
<status starttime="20170918 15:37:05.202" status="PASS" endtime="20170918 15:37:05.207"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.294">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 15:37:05.294">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:05.207" status="PASS" endtime="20170918 15:37:05.294"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.296">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170918 15:37:05.296" status="PASS" endtime="20170918 15:37:05.296"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:05.297">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170918 15:37:05.297" status="PASS" endtime="20170918 15:37:05.297"></status>
</kw>
<status starttime="20170918 15:37:05.296" status="PASS" endtime="20170918 15:37:05.297"></status>
</kw>
<status starttime="20170918 15:37:05.295" status="PASS" endtime="20170918 15:37:05.297"></status>
</kw>
<status starttime="20170918 15:37:05.295" status="PASS" endtime="20170918 15:37:05.297"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 15:37:05.298">Delete All Sessions</msg>
<status starttime="20170918 15:37:05.298" status="PASS" endtime="20170918 15:37:05.298"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.298">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:04.962" status="PASS" endtime="20170918 15:37:05.298"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:05.299">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:05.299" status="PASS" endtime="20170918 15:37:05.299"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.299">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 15:37:05.300">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 15:37:05.300">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status starttime="20170918 15:37:05.299" status="PASS" endtime="20170918 15:37:05.300"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.300">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170918 15:37:04.961" status="PASS" endtime="20170918 15:37:05.300"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.300">${host_state} = Off</msg>
<status starttime="20170918 15:37:04.961" status="PASS" endtime="20170918 15:37:05.300"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 15:37:05.301">Off != Quiesced</msg>
<status starttime="20170918 15:37:05.301" status="FAIL" endtime="20170918 15:37:05.302"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.302">${status} = False</msg>
<status starttime="20170918 15:37:05.301" status="PASS" endtime="20170918 15:37:05.302"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.302">${status} = False</msg>
<status starttime="20170918 15:37:04.960" status="PASS" endtime="20170918 15:37:05.302"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170918 15:37:05.302" status="PASS" endtime="20170918 15:37:05.302"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170918 15:37:05.303" status="PASS" endtime="20170918 15:37:05.303"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.314">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170918 15:37:05.304" status="PASS" endtime="20170918 15:37:05.314"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.325">${FFDC_DIR_PATH} = </msg>
<status starttime="20170918 15:37:05.314" status="PASS" endtime="20170918 15:37:05.325"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.327">${cur_time} = 2017-09-18 15:37:05:326912</msg>
<status starttime="20170918 15:37:05.327" status="PASS" endtime="20170918 15:37:05.327"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.328">${cur_time} = 20170918153705326912</msg>
<status starttime="20170918 15:37:05.327" status="PASS" endtime="20170918 15:37:05.328"></status>
</kw>
<status starttime="20170918 15:37:05.326" status="PASS" endtime="20170918 15:37:05.328"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.332">${FFDC_TIME} = 20170918153705326912</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.334">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170918 15:37:05.333" status="PASS" endtime="20170918 15:37:05.334"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.334">${suite_name} = 20170918153705326912_TestsSecurityTestSsl</msg>
<status starttime="20170918 15:37:05.334" status="PASS" endtime="20170918 15:37:05.334"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.335">${test_name} = TestSSLConnection</msg>
<status starttime="20170918 15:37:05.335" status="PASS" endtime="20170918 15:37:05.335"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.336">${test_name} = 20170918153705326912_TestSSLConnection</msg>
<status starttime="20170918 15:37:05.335" status="PASS" endtime="20170918 15:37:05.336"></status>
</kw>
<status starttime="20170918 15:37:05.333" status="PASS" endtime="20170918 15:37:05.336"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.336">${FFDC_DIR_PATH} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153705326912_TestsSecurityTestSsl/20170918153705326912_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170918 15:37:05.341">${FFDC_PREFIX} = 20170918153705326912_</msg>
<status starttime="20170918 15:37:05.326" status="PASS" endtime="20170918 15:37:05.341"></status>
</kw>
<status starttime="20170918 15:37:05.325" status="PASS" endtime="20170918 15:37:05.342"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170918 15:37:05.342" status="PASS" endtime="20170918 15:37:05.342"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:05.343">Created directory '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs"&gt;/tmp/fspcibld/17001/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:05.342" status="PASS" endtime="20170918 15:37:05.343"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 15:37:05.344">File '/tmp/fspcibld/17001/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170918 15:37:05.344" status="FAIL" endtime="20170918 15:37:05.344"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.344">${exist} = False</msg>
<status starttime="20170918 15:37:05.343" status="PASS" endtime="20170918 15:37:05.344"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:05.345">Created file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:05.345" status="PASS" endtime="20170918 15:37:05.345"></status>
</kw>
<status starttime="20170918 15:37:05.345" status="PASS" endtime="20170918 15:37:05.346"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170918 15:37:05.346" status="PASS" endtime="20170918 15:37:05.346"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.347">${cur_time} = 2017-09-18 15:37:05:346867</msg>
<status starttime="20170918 15:37:05.347" status="PASS" endtime="20170918 15:37:05.347"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.348">${cur_time} = 20170918153705346867</msg>
<status starttime="20170918 15:37:05.347" status="PASS" endtime="20170918 15:37:05.348"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.348">${cur_time} = 20170918153705346867</msg>
<status starttime="20170918 15:37:05.346" status="PASS" endtime="20170918 15:37:05.348"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:05.349">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:05.348" status="PASS" endtime="20170918 15:37:05.349"></status>
</kw>
<status starttime="20170918 15:37:05.303" status="PASS" endtime="20170918 15:37:05.349"></status>
</kw>
<status starttime="20170918 15:37:04.960" status="PASS" endtime="20170918 15:37:05.349"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170918 15:37:04.764" critical="yes" status="PASS" endtime="20170918 15:37:05.349"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 15:37:05.350">Delete All Sessions</msg>
<status starttime="20170918 15:37:05.350" status="PASS" endtime="20170918 15:37:05.350"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170918 15:37:04.728" status="PASS" endtime="20170918 15:37:05.350"></status>
</suite>
<status starttime="20170918 15:37:04.726" status="PASS" endtime="20170918 15:37:05.352"></status>
</suite>
<suite name="Test Basic Poweron" id="s1-s2" source="/tmp/fspcibld/17001/obmc-robot/tests/test_basic_poweron.robot">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.390">${default_file_path} = /tmp/9.3.21.61_os_console.txt</msg>
<status starttime="20170918 15:37:05.390" status="PASS" endtime="20170918 15:37:05.390"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.391">${log_file_path} = /tmp/9.3.21.61_os_console.txt</msg>
<status starttime="20170918 15:37:05.390" status="PASS" endtime="20170918 15:37:05.391"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.391">${log_file_path} = /tmp/9.3.21.61_os_console.txt</msg>
<status starttime="20170918 15:37:05.389" status="PASS" endtime="20170918 15:37:05.391"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.393">${default_file_path} = /tmp/9.3.21.61_os_console.txt</msg>
<status starttime="20170918 15:37:05.392" status="PASS" endtime="20170918 15:37:05.393"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.394">${log_file_path} = /tmp/9.3.21.61_os_console.txt</msg>
<status starttime="20170918 15:37:05.393" status="PASS" endtime="20170918 15:37:05.394"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.394">${log_file_path} = /tmp/9.3.21.61_os_console.txt</msg>
<status starttime="20170918 15:37:05.392" status="PASS" endtime="20170918 15:37:05.394"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.395">${ssh_pw_file_path} = ssh_pw</msg>
<status starttime="20170918 15:37:05.395" status="PASS" endtime="20170918 15:37:05.395"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.396">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170918 15:37:05.396" status="PASS" endtime="20170918 15:37:05.396"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170918 15:37:05.396" status="PASS" endtime="20170918 15:37:05.396"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.402">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 15:37:05.406">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 15:37:05.406">${output} = /tmp/fspcibld/17001/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170918 15:37:05.397" status="PASS" endtime="20170918 15:37:05.406"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170918 15:37:05.408" status="PASS" endtime="20170918 15:37:05.409"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.410">${ssh_pw_file_path} = None</msg>
<status starttime="20170918 15:37:05.409" status="PASS" endtime="20170918 15:37:05.410"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.411">${cmd_buf} = None 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170918 15:37:05.410" status="PASS" endtime="20170918 15:37:05.411"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.411">${search_string} = None 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170918 15:37:05.395" status="PASS" endtime="20170918 15:37:05.411"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.412">${search_string} = None 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.21.61</msg>
<status starttime="20170918 15:37:05.411" status="PASS" endtime="20170918 15:37:05.412"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.412">${cmd_buf} = echo $(ps -ef | egrep 'None 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170918 15:37:05.412" status="PASS" endtime="20170918 15:37:05.413"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170918 15:37:05.413" status="PASS" endtime="20170918 15:37:05.413"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.417">Running command 'echo $(ps -ef | egrep 'None 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 15:37:05.426">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 15:37:05.426">${os_con_pid} = </msg>
<status starttime="20170918 15:37:05.413" status="PASS" endtime="20170918 15:37:05.426"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170918 15:37:05.428" status="PASS" endtime="20170918 15:37:05.429"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.429">${os_con_pid} = </msg>
<status starttime="20170918 15:37:05.394" status="PASS" endtime="20170918 15:37:05.429"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.430">${cmd_buf} = kill -9 </msg>
<status starttime="20170918 15:37:05.429" status="PASS" endtime="20170918 15:37:05.430"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170918 15:37:05.430" status="PASS" endtime="20170918 15:37:05.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.433">${rc} = None</msg>
<msg level="INFO" timestamp="20170918 15:37:05.433">${output} = None</msg>
<status starttime="20170918 15:37:05.432" status="PASS" endtime="20170918 15:37:05.433"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170918 15:37:05.433" status="PASS" endtime="20170918 15:37:05.434"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 15:37:05.437">Source file '/tmp/9.3.21.61_os_console.txt' does not exist.</msg>
<status starttime="20170918 15:37:05.436" status="FAIL" endtime="20170918 15:37:05.437"></status>
</kw>
<status starttime="20170918 15:37:05.435" status="PASS" endtime="20170918 15:37:05.437"></status>
</kw>
<status starttime="20170918 15:37:05.434" status="PASS" endtime="20170918 15:37:05.437"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.438">${output} = </msg>
<status starttime="20170918 15:37:05.438" status="PASS" endtime="20170918 15:37:05.438"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.438">${loc_quiet} = 1</msg>
<status starttime="20170918 15:37:05.438" status="PASS" endtime="20170918 15:37:05.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170918 15:37:05.439" status="PASS" endtime="20170918 15:37:05.483"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.484">${rc} = 1</msg>
<msg level="INFO" timestamp="20170918 15:37:05.484">${output} = cat: /tmp/9.3.21.61_os_console.txt: No such file or directory
</msg>
<status starttime="20170918 15:37:05.439" status="PASS" endtime="20170918 15:37:05.484"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.484">${log_output} = cat: /tmp/9.3.21.61_os_console.txt: No such file or directory
</msg>
<status starttime="20170918 15:37:05.391" status="PASS" endtime="20170918 15:37:05.484"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:05.486">Created file '&lt;a href="file:///tmp/9.3.21.61_os_console.txt"&gt;/tmp/9.3.21.61_os_console.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:05.486" status="PASS" endtime="20170918 15:37:05.486"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.488">${ssh_pw_file_path} = ssh_pw</msg>
<status starttime="20170918 15:37:05.487" status="PASS" endtime="20170918 15:37:05.488"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.488">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170918 15:37:05.488" status="PASS" endtime="20170918 15:37:05.488"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170918 15:37:05.488" status="PASS" endtime="20170918 15:37:05.489"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.492">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 15:37:05.494">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 15:37:05.495">${output} = /tmp/fspcibld/17001/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170918 15:37:05.489" status="PASS" endtime="20170918 15:37:05.495"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170918 15:37:05.497" status="PASS" endtime="20170918 15:37:05.498"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.499">${ssh_pw_file_path} = None</msg>
<status starttime="20170918 15:37:05.498" status="PASS" endtime="20170918 15:37:05.499"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.500">${cmd_buf} = None 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170918 15:37:05.499" status="PASS" endtime="20170918 15:37:05.500"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:05.500">${sub_cmd_buf} = None 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170918 15:37:05.487" status="PASS" endtime="20170918 15:37:05.500"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.501">${cmd_buf} = None 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console.txt 2&gt;&amp;1 &amp;</msg>
<status starttime="20170918 15:37:05.501" status="PASS" endtime="20170918 15:37:05.501"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170918 15:37:05.501" status="PASS" endtime="20170918 15:37:05.502"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:05.504">Running command 'None 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console.txt 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170918 15:37:05.510">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 15:37:05.510">${output} = </msg>
<status starttime="20170918 15:37:05.502" status="PASS" endtime="20170918 15:37:05.510"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170918 15:37:05.513" status="PASS" endtime="20170918 15:37:05.514"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:06.515">Slept 1 second</msg>
<status starttime="20170918 15:37:05.514" status="PASS" endtime="20170918 15:37:06.515"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.517">${ssh_pw_file_path} = ssh_pw</msg>
<status starttime="20170918 15:37:06.517" status="PASS" endtime="20170918 15:37:06.517"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.518">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170918 15:37:06.518" status="PASS" endtime="20170918 15:37:06.518"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170918 15:37:06.518" status="PASS" endtime="20170918 15:37:06.518"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.523">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 15:37:06.527">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 15:37:06.528">${output} = /tmp/fspcibld/17001/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170918 15:37:06.519" status="PASS" endtime="20170918 15:37:06.528"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170918 15:37:06.530" status="PASS" endtime="20170918 15:37:06.531"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.532">${ssh_pw_file_path} = None</msg>
<status starttime="20170918 15:37:06.531" status="PASS" endtime="20170918 15:37:06.532"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.533">${cmd_buf} = None 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170918 15:37:06.532" status="PASS" endtime="20170918 15:37:06.533"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:06.534">${search_string} = None 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170918 15:37:06.516" status="PASS" endtime="20170918 15:37:06.534"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.535">${search_string} = None 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.21.61</msg>
<status starttime="20170918 15:37:06.534" status="PASS" endtime="20170918 15:37:06.535"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.535">${cmd_buf} = echo $(ps -ef | egrep 'None 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170918 15:37:06.535" status="PASS" endtime="20170918 15:37:06.535"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170918 15:37:06.535" status="PASS" endtime="20170918 15:37:06.536"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.543">Running command 'echo $(ps -ef | egrep 'None 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 15:37:06.546">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 15:37:06.546">${os_con_pid} = </msg>
<status starttime="20170918 15:37:06.536" status="PASS" endtime="20170918 15:37:06.546"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170918 15:37:06.549" status="PASS" endtime="20170918 15:37:06.549"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:06.550">${os_con_pid} = </msg>
<status starttime="20170918 15:37:06.515" status="PASS" endtime="20170918 15:37:06.550"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:06.551">Length is 0</msg>
<msg level="FAIL" timestamp="20170918 15:37:06.551">'' should not be empty.</msg>
<status starttime="20170918 15:37:06.550" status="FAIL" endtime="20170918 15:37:06.551"></status>
</kw>
<status starttime="20170918 15:37:05.389" status="FAIL" endtime="20170918 15:37:06.552"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:06.558">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170918 15:37:06.558" status="PASS" endtime="20170918 15:37:06.560"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.560">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170918 15:37:06.560" status="PASS" endtime="20170918 15:37:06.561"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.561">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170918 15:37:06.561" status="PASS" endtime="20170918 15:37:06.561"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.562">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170918 15:37:06.562" status="PASS" endtime="20170918 15:37:06.562"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:06.798">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170918 15:37:06.563" status="PASS" endtime="20170918 15:37:06.798"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:06.798">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:06.798">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:06.562" status="PASS" endtime="20170918 15:37:06.798"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:06.799">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:06.799" status="PASS" endtime="20170918 15:37:06.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:06.800">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:06.799" status="PASS" endtime="20170918 15:37:06.800"></status>
</kw>
<status starttime="20170918 15:37:06.557" status="PASS" endtime="20170918 15:37:06.800"></status>
</kw>
<status starttime="20170918 15:37:06.557" status="PASS" endtime="20170918 15:37:06.800"></status>
</kw>
<status starttime="20170918 15:37:06.556" status="PASS" endtime="20170918 15:37:06.800"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.801">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170918 15:37:06.801" status="PASS" endtime="20170918 15:37:06.801"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.803">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170918 15:37:06.802" status="PASS" endtime="20170918 15:37:06.803"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:06.804">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170918 15:37:06.804" status="PASS" endtime="20170918 15:37:06.804"></status>
</kw>
<status starttime="20170918 15:37:06.803" status="PASS" endtime="20170918 15:37:06.804"></status>
</kw>
<status starttime="20170918 15:37:06.802" status="PASS" endtime="20170918 15:37:06.805"></status>
</kw>
<status starttime="20170918 15:37:06.801" status="PASS" endtime="20170918 15:37:06.805"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.893">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 15:37:06.893">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:06.805" status="PASS" endtime="20170918 15:37:06.894"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.896">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170918 15:37:06.895" status="PASS" endtime="20170918 15:37:06.896"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:06.897">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170918 15:37:06.896" status="PASS" endtime="20170918 15:37:06.897"></status>
</kw>
<status starttime="20170918 15:37:06.896" status="PASS" endtime="20170918 15:37:06.897"></status>
</kw>
<status starttime="20170918 15:37:06.895" status="PASS" endtime="20170918 15:37:06.897"></status>
</kw>
<status starttime="20170918 15:37:06.894" status="PASS" endtime="20170918 15:37:06.897"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 15:37:06.898">Delete All Sessions</msg>
<status starttime="20170918 15:37:06.897" status="PASS" endtime="20170918 15:37:06.898"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:06.898">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:06.555" status="PASS" endtime="20170918 15:37:06.898"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:06.899">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:06.898" status="PASS" endtime="20170918 15:37:06.899"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.899">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 15:37:06.899">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170918 15:37:06.899">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status starttime="20170918 15:37:06.899" status="PASS" endtime="20170918 15:37:06.899"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:06.900">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170918 15:37:06.554" status="PASS" endtime="20170918 15:37:06.900"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:06.900">${host_state} = Off</msg>
<status starttime="20170918 15:37:06.554" status="PASS" endtime="20170918 15:37:06.900"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170918 15:37:06.901">Off != Quiesced</msg>
<status starttime="20170918 15:37:06.901" status="FAIL" endtime="20170918 15:37:06.901"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:06.901">${status} = False</msg>
<status starttime="20170918 15:37:06.900" status="PASS" endtime="20170918 15:37:06.901"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:06.901">${status} = False</msg>
<status starttime="20170918 15:37:06.554" status="PASS" endtime="20170918 15:37:06.902"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:06.924">Length is 9</msg>
<status starttime="20170918 15:37:06.924" status="PASS" endtime="20170918 15:37:06.924"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:06.929">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 15:37:09.934">${RC} = 0</msg>
<msg level="INFO" timestamp="20170918 15:37:09.935">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.55 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.574 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status starttime="20170918 15:37:06.924" status="PASS" endtime="20170918 15:37:09.935"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:09.949">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.55 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.574 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.608 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.593 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.574/0.832/1.556/0.419 ms</msg>
<status starttime="20170918 15:37:09.946" status="PASS" endtime="20170918 15:37:09.949"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170918 15:37:09.950" status="PASS" endtime="20170918 15:37:09.950"></status>
</kw>
<status starttime="20170918 15:37:06.923" status="PASS" endtime="20170918 15:37:09.951"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:09.983">${cur_time} = 2017-09-18 15:37:09:982269</msg>
<status starttime="20170918 15:37:09.982" status="PASS" endtime="20170918 15:37:09.983"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:09.984">${cur_time} = 20170918153709982269</msg>
<status starttime="20170918 15:37:09.983" status="PASS" endtime="20170918 15:37:09.984"></status>
</kw>
<status starttime="20170918 15:37:09.981" status="PASS" endtime="20170918 15:37:09.984"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:09.985">${FFDC_TIME} = 20170918153709982269</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:09.997">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170918 15:37:09.997" status="PASS" endtime="20170918 15:37:09.997"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:09.998">${suite_name} = 20170918153709982269_TestsTestBasicPoweron</msg>
<status starttime="20170918 15:37:09.998" status="PASS" endtime="20170918 15:37:09.998"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:09.999">${test_name} = PowerOnTest</msg>
<status starttime="20170918 15:37:09.998" status="PASS" endtime="20170918 15:37:09.999"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:09.999">${test_name} = 20170918153709982269_PowerOnTest</msg>
<status starttime="20170918 15:37:09.999" status="PASS" endtime="20170918 15:37:09.999"></status>
</kw>
<status starttime="20170918 15:37:09.997" status="PASS" endtime="20170918 15:37:10.000"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:10.000">${FFDC_DIR_PATH} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170918 15:37:10.000">${FFDC_PREFIX} = 20170918153709982269_</msg>
<msg level="INFO" timestamp="20170918 15:37:10.020">${LOG_PREFIX} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.021">Created directory '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.021" status="PASS" endtime="20170918 15:37:10.021"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:10.026">${FFDC_FILE_PATH} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.049">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.047" status="PASS" endtime="20170918 15:37:10.049"></status>
</kw>
<status starttime="20170918 15:37:10.046" status="PASS" endtime="20170918 15:37:10.049"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.050">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.050" status="PASS" endtime="20170918 15:37:10.050"></status>
</kw>
<status starttime="20170918 15:37:10.049" status="PASS" endtime="20170918 15:37:10.051"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.052">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.051" status="PASS" endtime="20170918 15:37:10.052"></status>
</kw>
<status starttime="20170918 15:37:10.051" status="PASS" endtime="20170918 15:37:10.052"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.053">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.053" status="PASS" endtime="20170918 15:37:10.053"></status>
</kw>
<status starttime="20170918 15:37:10.052" status="PASS" endtime="20170918 15:37:10.054"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.055">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.054" status="PASS" endtime="20170918 15:37:10.055"></status>
</kw>
<status starttime="20170918 15:37:10.054" status="PASS" endtime="20170918 15:37:10.055"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.056">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.056" status="PASS" endtime="20170918 15:37:10.056"></status>
</kw>
<status starttime="20170918 15:37:10.055" status="PASS" endtime="20170918 15:37:10.056"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.057">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.057" status="PASS" endtime="20170918 15:37:10.058"></status>
</kw>
<status starttime="20170918 15:37:10.056" status="PASS" endtime="20170918 15:37:10.058"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.059">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.058" status="PASS" endtime="20170918 15:37:10.059"></status>
</kw>
<status starttime="20170918 15:37:10.058" status="PASS" endtime="20170918 15:37:10.059"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.060">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.060" status="PASS" endtime="20170918 15:37:10.060"></status>
</kw>
<status starttime="20170918 15:37:10.059" status="PASS" endtime="20170918 15:37:10.060"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.062">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.061" status="PASS" endtime="20170918 15:37:10.062"></status>
</kw>
<status starttime="20170918 15:37:10.061" status="PASS" endtime="20170918 15:37:10.062"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.063">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.063" status="PASS" endtime="20170918 15:37:10.063"></status>
</kw>
<status starttime="20170918 15:37:10.062" status="PASS" endtime="20170918 15:37:10.063"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.064">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.064" status="PASS" endtime="20170918 15:37:10.064"></status>
</kw>
<status starttime="20170918 15:37:10.063" status="PASS" endtime="20170918 15:37:10.064"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.066">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.065" status="PASS" endtime="20170918 15:37:10.066"></status>
</kw>
<status starttime="20170918 15:37:10.065" status="PASS" endtime="20170918 15:37:10.066"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:10.095">index=1
host=9.3.21.61
encoding=UTF-8
timeout=25 seconds
newline=

term_type=vt100
path_separator=/
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170918 15:37:10.095">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170918 15:37:10.175">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170918 15:37:10.186">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170918 15:37:10.186">${stderr} = </msg>
<msg level="INFO" timestamp="20170918 15:37:10.186">${rc} = 0</msg>
<status starttime="20170918 15:37:10.067" status="PASS" endtime="20170918 15:37:10.186"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:10.187">Length is 0</msg>
<status starttime="20170918 15:37:10.187" status="PASS" endtime="20170918 15:37:10.187"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:10.187">Length is 11</msg>
<status starttime="20170918 15:37:10.187" status="PASS" endtime="20170918 15:37:10.188"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:10.188">${model_name} = Witherspoon</msg>
<status starttime="20170918 15:37:10.066" status="PASS" endtime="20170918 15:37:10.188"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.189">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.189" status="PASS" endtime="20170918 15:37:10.189"></status>
</kw>
<status starttime="20170918 15:37:10.188" status="PASS" endtime="20170918 15:37:10.189"></status>
</kw>
<status starttime="20170918 15:37:10.060" status="PASS" endtime="20170918 15:37:10.189"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.191">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.190" status="PASS" endtime="20170918 15:37:10.191"></status>
</kw>
<status starttime="20170918 15:37:10.190" status="PASS" endtime="20170918 15:37:10.191"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:10.191">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20170918 15:37:10.191" status="PASS" endtime="20170918 15:37:10.191"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.193">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.192" status="PASS" endtime="20170918 15:37:10.193"></status>
</kw>
<status starttime="20170918 15:37:10.192" status="PASS" endtime="20170918 15:37:10.193"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.194">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.194" status="PASS" endtime="20170918 15:37:10.194"></status>
</kw>
<status starttime="20170918 15:37:10.193" status="PASS" endtime="20170918 15:37:10.194"></status>
</kw>
<status starttime="20170918 15:37:10.191" status="PASS" endtime="20170918 15:37:10.194"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.195">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.195" status="PASS" endtime="20170918 15:37:10.195"></status>
</kw>
<status starttime="20170918 15:37:10.194" status="PASS" endtime="20170918 15:37:10.196"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.197">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.196" status="PASS" endtime="20170918 15:37:10.197"></status>
</kw>
<status starttime="20170918 15:37:10.196" status="PASS" endtime="20170918 15:37:10.197"></status>
</kw>
<status starttime="20170918 15:37:10.194" status="PASS" endtime="20170918 15:37:10.197"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.198">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.198" status="PASS" endtime="20170918 15:37:10.198"></status>
</kw>
<status starttime="20170918 15:37:10.197" status="PASS" endtime="20170918 15:37:10.199"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.200">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.199" status="PASS" endtime="20170918 15:37:10.200"></status>
</kw>
<status starttime="20170918 15:37:10.199" status="PASS" endtime="20170918 15:37:10.200"></status>
</kw>
<status starttime="20170918 15:37:10.197" status="PASS" endtime="20170918 15:37:10.200"></status>
</kw>
<status starttime="20170918 15:37:10.191" status="PASS" endtime="20170918 15:37:10.200"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.201">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:10.201" status="PASS" endtime="20170918 15:37:10.201"></status>
</kw>
<status starttime="20170918 15:37:10.200" status="PASS" endtime="20170918 15:37:10.201"></status>
</kw>
<status starttime="20170918 15:37:10.046" status="PASS" endtime="20170918 15:37:10.201"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:10.208">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170918 15:37:10.207" status="PASS" endtime="20170918 15:37:10.208"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:10.217">@{method_list} = [ ('Sys Inventory Files', 'System Inventory Files') | ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('BMC Specific Files', 'BMC F...</msg>
<status starttime="20170918 15:37:10.217" status="PASS" endtime="20170918 15:37:10.217"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170918 15:37:10.218" status="PASS" endtime="20170918 15:37:10.218"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:10.218">@{ffdc_function_list} = [ Sys Inventory Files | OS FFDC | Core Files | FFDC Generic Report | BMC Specific Files | Get Request FFDC | SEL Log ]</msg>
<status starttime="20170918 15:37:10.217" status="PASS" endtime="20170918 15:37:10.218"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('Sys Inventory Files', 'System Inventory Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170918 15:37:10.220" status="PASS" endtime="20170918 15:37:10.220"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:10.220">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:10.220">${ret_values} = None</msg>
<status starttime="20170918 15:37:10.220" status="PASS" endtime="20170918 15:37:10.221"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170918 15:37:10.221" status="PASS" endtime="20170918 15:37:10.221"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="System Inventory Files">
<doc>Copy systest os_inventory files.</doc>
<kw library="OperatingSystem" name="Copy Files">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status starttime="20170918 15:37:10.248" status="PASS" endtime="20170918 15:37:10.249"></status>
</kw>
<kw library="OperatingSystem" name="Remove Files">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:10.250">File '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/17001/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status starttime="20170918 15:37:10.249" status="PASS" endtime="20170918 15:37:10.250"></status>
</kw>
<status starttime="20170918 15:37:10.248" status="PASS" endtime="20170918 15:37:10.250"></status>
</kw>
<status starttime="20170918 15:37:10.221" status="PASS" endtime="20170918 15:37:10.250"></status>
</kw>
<status starttime="20170918 15:37:10.219" status="PASS" endtime="20170918 15:37:10.250"></status>
</kw>
<status starttime="20170918 15:37:10.219" status="PASS" endtime="20170918 15:37:10.250"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170918 15:37:10.252" status="PASS" endtime="20170918 15:37:10.252"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:10.252">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:10.252">${ret_values} = None</msg>
<status starttime="20170918 15:37:10.251" status="PASS" endtime="20170918 15:37:10.252"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170918 15:37:10.253" status="PASS" endtime="20170918 15:37:10.253"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:10.284">Returning from the enclosing user keyword.</msg>
<status starttime="20170918 15:37:10.284" status="PASS" endtime="20170918 15:37:10.284"></status>
</kw>
<status starttime="20170918 15:37:10.283" status="PASS" endtime="20170918 15:37:10.284"></status>
</kw>
<status starttime="20170918 15:37:10.253" status="PASS" endtime="20170918 15:37:10.284"></status>
</kw>
<status starttime="20170918 15:37:10.251" status="PASS" endtime="20170918 15:37:10.285"></status>
</kw>
<status starttime="20170918 15:37:10.250" status="PASS" endtime="20170918 15:37:10.285"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170918 15:37:10.286" status="PASS" endtime="20170918 15:37:10.286"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:10.287">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:10.287">${ret_values} = None</msg>
<status starttime="20170918 15:37:10.286" status="PASS" endtime="20170918 15:37:10.287"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170918 15:37:10.287" status="PASS" endtime="20170918 15:37:10.287"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:10.345">index=1
host=9.3.21.61
encoding=UTF-8
timeout=25 seconds
newline=

term_type=vt100
path_separator=/
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170918 15:37:10.346">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170918 15:37:10.402">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170918 15:37:10.414">${core_files} = None</msg>
<msg level="INFO" timestamp="20170918 15:37:10.414">${stderr} = None</msg>
<msg level="INFO" timestamp="20170918 15:37:10.414">${rc} = None</msg>
<msg level="FAIL" timestamp="20170918 15:37:10.414">#(UTC) 2017/09/18 15:37:10.413486 -    0.068404 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status starttime="20170918 15:37:10.313" status="FAIL" endtime="20170918 15:37:10.415"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:10.415">@{core_list} = [ ]</msg>
<msg level="FAIL" timestamp="20170918 15:37:10.415">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status starttime="20170918 15:37:10.415" status="FAIL" endtime="20170918 15:37:10.415"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170918 15:37:10.425" status="PASS" endtime="20170918 15:37:10.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170918 15:37:10.439" status="PASS" endtime="20170918 15:37:11.140"></status>
</kw>
<status starttime="20170918 15:37:10.439" status="PASS" endtime="20170918 15:37:11.140"></status>
</kw>
<status starttime="20170918 15:37:10.438" status="PASS" endtime="20170918 15:37:11.140"></status>
</kw>
<status starttime="20170918 15:37:10.425" status="PASS" endtime="20170918 15:37:11.140"></status>
</kw>
<status starttime="20170918 15:37:10.416" status="PASS" endtime="20170918 15:37:11.140"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status starttime="20170918 15:37:11.140" status="PASS" endtime="20170918 15:37:11.141"></status>
</kw>
<status starttime="20170918 15:37:10.313" status="FAIL" endtime="20170918 15:37:11.141"></status>
</kw>
<status starttime="20170918 15:37:10.287" status="PASS" endtime="20170918 15:37:11.141"></status>
</kw>
<status starttime="20170918 15:37:10.285" status="PASS" endtime="20170918 15:37:11.141"></status>
</kw>
<status starttime="20170918 15:37:10.285" status="PASS" endtime="20170918 15:37:11.141"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170918 15:37:11.143" status="PASS" endtime="20170918 15:37:11.143"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:11.143">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:11.143">${ret_values} = None</msg>
<status starttime="20170918 15:37:11.142" status="PASS" endtime="20170918 15:37:11.143"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170918 15:37:11.144" status="PASS" endtime="20170918 15:37:11.144"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:11.171">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20170918 15:37:11.171" status="PASS" endtime="20170918 15:37:11.171"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:11.172">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status starttime="20170918 15:37:11.172" status="PASS" endtime="20170918 15:37:11.172"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:11.178">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170918 15:37:11.172" status="PASS" endtime="20170918 15:37:11.178"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:11.181">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:11.181" status="PASS" endtime="20170918 15:37:11.181"></status>
</kw>
<status starttime="20170918 15:37:11.180" status="PASS" endtime="20170918 15:37:11.182"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:11.183">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:11.182" status="PASS" endtime="20170918 15:37:11.183"></status>
</kw>
<status starttime="20170918 15:37:11.182" status="PASS" endtime="20170918 15:37:11.183"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:11.184">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:11.184" status="PASS" endtime="20170918 15:37:11.184"></status>
</kw>
<status starttime="20170918 15:37:11.183" status="PASS" endtime="20170918 15:37:11.184"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:11.186">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:11.185" status="PASS" endtime="20170918 15:37:11.186"></status>
</kw>
<status starttime="20170918 15:37:11.185" status="PASS" endtime="20170918 15:37:11.186"></status>
</kw>
<status starttime="20170918 15:37:11.179" status="PASS" endtime="20170918 15:37:11.186"></status>
</kw>
<status starttime="20170918 15:37:11.179" status="PASS" endtime="20170918 15:37:11.186"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:11.187">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status starttime="20170918 15:37:11.186" status="PASS" endtime="20170918 15:37:11.187"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:11.256">index=1
host=9.3.21.61
encoding=UTF-8
timeout=25 seconds
newline=

term_type=vt100
path_separator=/
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170918 15:37:11.256">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170918 15:37:12.624">Command exited with return code 0.</msg>
<status starttime="20170918 15:37:11.218" status="PASS" endtime="20170918 15:37:12.624"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:12.624">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:12.625">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status starttime="20170918 15:37:11.187" status="PASS" endtime="20170918 15:37:12.625"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:12.625">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170918 15:37:12.625" status="PASS" endtime="20170918 15:37:12.625"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:12.626">${stderr} = </msg>
<status starttime="20170918 15:37:12.626" status="PASS" endtime="20170918 15:37:12.626"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:12.633">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:12.632" status="PASS" endtime="20170918 15:37:12.633"></status>
</kw>
<status starttime="20170918 15:37:12.632" status="PASS" endtime="20170918 15:37:12.633"></status>
</kw>
<status starttime="20170918 15:37:12.626" status="PASS" endtime="20170918 15:37:12.633"></status>
</kw>
<status starttime="20170918 15:37:11.178" status="PASS" endtime="20170918 15:37:12.633"></status>
</kw>
<status starttime="20170918 15:37:11.178" status="PASS" endtime="20170918 15:37:12.633"></status>
</kw>
<status starttime="20170918 15:37:11.178" status="PASS" endtime="20170918 15:37:12.633"></status>
</kw>
<status starttime="20170918 15:37:11.171" status="PASS" endtime="20170918 15:37:12.634"></status>
</kw>
<status starttime="20170918 15:37:11.171" status="PASS" endtime="20170918 15:37:12.634"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:12.635">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20170918 15:37:12.634" status="PASS" endtime="20170918 15:37:12.635"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:12.635">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170918 15:37:12.635" status="PASS" endtime="20170918 15:37:12.635"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:12.639">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:12.638" status="PASS" endtime="20170918 15:37:12.639"></status>
</kw>
<status starttime="20170918 15:37:12.638" status="PASS" endtime="20170918 15:37:12.639"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:12.641">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:12.640" status="PASS" endtime="20170918 15:37:12.641"></status>
</kw>
<status starttime="20170918 15:37:12.639" status="PASS" endtime="20170918 15:37:12.641"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:12.642">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:12.642" status="PASS" endtime="20170918 15:37:12.642"></status>
</kw>
<status starttime="20170918 15:37:12.641" status="PASS" endtime="20170918 15:37:12.642"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:12.643">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:12.643" status="PASS" endtime="20170918 15:37:12.643"></status>
</kw>
<status starttime="20170918 15:37:12.642" status="PASS" endtime="20170918 15:37:12.644"></status>
</kw>
<status starttime="20170918 15:37:12.637" status="PASS" endtime="20170918 15:37:12.644"></status>
</kw>
<status starttime="20170918 15:37:12.637" status="PASS" endtime="20170918 15:37:12.644"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:12.644">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status starttime="20170918 15:37:12.644" status="PASS" endtime="20170918 15:37:12.644"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:12.713">index=1
host=9.3.21.61
encoding=UTF-8
timeout=25 seconds
newline=

term_type=vt100
path_separator=/
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170918 15:37:12.713">Executing command 'cat /etc/timestamp'.</msg>
<msg level="INFO" timestamp="20170918 15:37:12.792">Command exited with return code 0.</msg>
<status starttime="20170918 15:37:12.676" status="PASS" endtime="20170918 15:37:12.792"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:12.792">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:12.792">${ret_values} = (u'20170918151606', u'', 0)</msg>
<status starttime="20170918 15:37:12.645" status="PASS" endtime="20170918 15:37:12.792"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:12.793">${stdout} = 20170918151606</msg>
<status starttime="20170918 15:37:12.792" status="PASS" endtime="20170918 15:37:12.793"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:12.793">${stderr} = </msg>
<status starttime="20170918 15:37:12.793" status="PASS" endtime="20170918 15:37:12.793"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:12.800">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:12.800" status="PASS" endtime="20170918 15:37:12.800"></status>
</kw>
<status starttime="20170918 15:37:12.799" status="PASS" endtime="20170918 15:37:12.800"></status>
</kw>
<status starttime="20170918 15:37:12.794" status="PASS" endtime="20170918 15:37:12.800"></status>
</kw>
<status starttime="20170918 15:37:12.636" status="PASS" endtime="20170918 15:37:12.801"></status>
</kw>
<status starttime="20170918 15:37:12.636" status="PASS" endtime="20170918 15:37:12.801"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:12.803">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:12.803" status="PASS" endtime="20170918 15:37:12.804"></status>
</kw>
<status starttime="20170918 15:37:12.803" status="PASS" endtime="20170918 15:37:12.804"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:12.805">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:12.805" status="PASS" endtime="20170918 15:37:12.805"></status>
</kw>
<status starttime="20170918 15:37:12.804" status="PASS" endtime="20170918 15:37:12.805"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:12.807">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:12.806" status="PASS" endtime="20170918 15:37:12.807"></status>
</kw>
<status starttime="20170918 15:37:12.806" status="PASS" endtime="20170918 15:37:12.807"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:12.808">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:12.807" status="PASS" endtime="20170918 15:37:12.808"></status>
</kw>
<status starttime="20170918 15:37:12.807" status="PASS" endtime="20170918 15:37:12.808"></status>
</kw>
<status starttime="20170918 15:37:12.802" status="PASS" endtime="20170918 15:37:12.808"></status>
</kw>
<status starttime="20170918 15:37:12.802" status="PASS" endtime="20170918 15:37:12.808"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:12.809">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status starttime="20170918 15:37:12.808" status="PASS" endtime="20170918 15:37:12.809"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:12.878">index=1
host=9.3.21.61
encoding=UTF-8
timeout=25 seconds
newline=

term_type=vt100
path_separator=/
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170918 15:37:12.878">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170918 15:37:12.935">Command exited with return code 0.</msg>
<status starttime="20170918 15:37:12.841" status="PASS" endtime="20170918 15:37:12.935"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:12.935">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:12.935">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-17"\nVERSION_ID="v1.99.10-17-gef5bc1e"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status starttime="20170918 15:37:12.809" status="PASS" endtime="20170918 15:37:12.935"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:12.936">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-17"
VERSION_ID="v1.99.10-17-gef5bc1e"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status starttime="20170918 15:37:12.935" status="PASS" endtime="20170918 15:37:12.936"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:12.936">${stderr} = </msg>
<status starttime="20170918 15:37:12.936" status="PASS" endtime="20170918 15:37:12.936"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:12.944">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:12.944" status="PASS" endtime="20170918 15:37:12.944"></status>
</kw>
<status starttime="20170918 15:37:12.942" status="PASS" endtime="20170918 15:37:12.944"></status>
</kw>
<status starttime="20170918 15:37:12.937" status="PASS" endtime="20170918 15:37:12.944"></status>
</kw>
<status starttime="20170918 15:37:12.801" status="PASS" endtime="20170918 15:37:12.945"></status>
</kw>
<status starttime="20170918 15:37:12.801" status="PASS" endtime="20170918 15:37:12.945"></status>
</kw>
<status starttime="20170918 15:37:12.635" status="PASS" endtime="20170918 15:37:12.945"></status>
</kw>
<status starttime="20170918 15:37:12.634" status="PASS" endtime="20170918 15:37:12.945"></status>
</kw>
<status starttime="20170918 15:37:12.634" status="PASS" endtime="20170918 15:37:12.945"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:12.946">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170918 15:37:12.946" status="PASS" endtime="20170918 15:37:12.946"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:12.947">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170918 15:37:12.946" status="PASS" endtime="20170918 15:37:12.947"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:12.950">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:12.949" status="PASS" endtime="20170918 15:37:12.950"></status>
</kw>
<status starttime="20170918 15:37:12.949" status="PASS" endtime="20170918 15:37:12.950"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:12.951">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:12.951" status="PASS" endtime="20170918 15:37:12.951"></status>
</kw>
<status starttime="20170918 15:37:12.950" status="PASS" endtime="20170918 15:37:12.951"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:12.953">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:12.952" status="PASS" endtime="20170918 15:37:12.953"></status>
</kw>
<status starttime="20170918 15:37:12.951" status="PASS" endtime="20170918 15:37:12.953"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:12.954">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:12.954" status="PASS" endtime="20170918 15:37:12.954"></status>
</kw>
<status starttime="20170918 15:37:12.953" status="PASS" endtime="20170918 15:37:12.954"></status>
</kw>
<status starttime="20170918 15:37:12.948" status="PASS" endtime="20170918 15:37:12.954"></status>
</kw>
<status starttime="20170918 15:37:12.948" status="PASS" endtime="20170918 15:37:12.954"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:12.955">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status starttime="20170918 15:37:12.955" status="PASS" endtime="20170918 15:37:12.955"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:13.023">index=1
host=9.3.21.61
encoding=UTF-8
timeout=25 seconds
newline=

term_type=vt100
path_separator=/
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170918 15:37:13.023">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170918 15:37:13.081">Command exited with return code 0.</msg>
<status starttime="20170918 15:37:12.987" status="PASS" endtime="20170918 15:37:13.082"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:13.082">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:13.082">${ret_values} = (u' 15:37:22 up 3 min,  load average: 1.66, 1.89, 0.85', u'', 0)</msg>
<status starttime="20170918 15:37:12.955" status="PASS" endtime="20170918 15:37:13.082"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:13.082">${stdout} =  15:37:22 up 3 min,  load average: 1.66, 1.89, 0.85</msg>
<status starttime="20170918 15:37:13.082" status="PASS" endtime="20170918 15:37:13.082"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:13.083">${stderr} = </msg>
<status starttime="20170918 15:37:13.083" status="PASS" endtime="20170918 15:37:13.083"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:13.090">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:13.089" status="PASS" endtime="20170918 15:37:13.090"></status>
</kw>
<status starttime="20170918 15:37:13.089" status="PASS" endtime="20170918 15:37:13.090"></status>
</kw>
<status starttime="20170918 15:37:13.083" status="PASS" endtime="20170918 15:37:13.090"></status>
</kw>
<status starttime="20170918 15:37:12.947" status="PASS" endtime="20170918 15:37:13.090"></status>
</kw>
<status starttime="20170918 15:37:12.947" status="PASS" endtime="20170918 15:37:13.090"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:13.094">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:13.094" status="PASS" endtime="20170918 15:37:13.094"></status>
</kw>
<status starttime="20170918 15:37:13.093" status="PASS" endtime="20170918 15:37:13.095"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:13.096">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:13.095" status="PASS" endtime="20170918 15:37:13.096"></status>
</kw>
<status starttime="20170918 15:37:13.095" status="PASS" endtime="20170918 15:37:13.096"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:13.097">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:13.097" status="PASS" endtime="20170918 15:37:13.097"></status>
</kw>
<status starttime="20170918 15:37:13.096" status="PASS" endtime="20170918 15:37:13.097"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:13.098">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:13.098" status="PASS" endtime="20170918 15:37:13.098"></status>
</kw>
<status starttime="20170918 15:37:13.097" status="PASS" endtime="20170918 15:37:13.098"></status>
</kw>
<status starttime="20170918 15:37:13.092" status="PASS" endtime="20170918 15:37:13.099"></status>
</kw>
<status starttime="20170918 15:37:13.092" status="PASS" endtime="20170918 15:37:13.099"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:13.099">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status starttime="20170918 15:37:13.099" status="PASS" endtime="20170918 15:37:13.099"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:13.175">index=1
host=9.3.21.61
encoding=UTF-8
timeout=25 seconds
newline=

term_type=vt100
path_separator=/
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170918 15:37:13.176">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170918 15:37:13.234">Command exited with return code 0.</msg>
<status starttime="20170918 15:37:13.131" status="PASS" endtime="20170918 15:37:13.234"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:13.234">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:13.234">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status starttime="20170918 15:37:13.100" status="PASS" endtime="20170918 15:37:13.234"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:13.235">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<status starttime="20170918 15:37:13.234" status="PASS" endtime="20170918 15:37:13.235"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:13.235">${stderr} = </msg>
<status starttime="20170918 15:37:13.235" status="PASS" endtime="20170918 15:37:13.235"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:13.242">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:13.242" status="PASS" endtime="20170918 15:37:13.242"></status>
</kw>
<status starttime="20170918 15:37:13.241" status="PASS" endtime="20170918 15:37:13.242"></status>
</kw>
<status starttime="20170918 15:37:13.236" status="PASS" endtime="20170918 15:37:13.242"></status>
</kw>
<status starttime="20170918 15:37:13.091" status="PASS" endtime="20170918 15:37:13.242"></status>
</kw>
<status starttime="20170918 15:37:13.090" status="PASS" endtime="20170918 15:37:13.243"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:13.245">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:13.245" status="PASS" endtime="20170918 15:37:13.246"></status>
</kw>
<status starttime="20170918 15:37:13.245" status="PASS" endtime="20170918 15:37:13.246"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:13.247">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:13.247" status="PASS" endtime="20170918 15:37:13.247"></status>
</kw>
<status starttime="20170918 15:37:13.246" status="PASS" endtime="20170918 15:37:13.247"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:13.248">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:13.248" status="PASS" endtime="20170918 15:37:13.249"></status>
</kw>
<status starttime="20170918 15:37:13.248" status="PASS" endtime="20170918 15:37:13.249"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:13.250">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:13.249" status="PASS" endtime="20170918 15:37:13.250"></status>
</kw>
<status starttime="20170918 15:37:13.249" status="PASS" endtime="20170918 15:37:13.250"></status>
</kw>
<status starttime="20170918 15:37:13.244" status="PASS" endtime="20170918 15:37:13.250"></status>
</kw>
<status starttime="20170918 15:37:13.244" status="PASS" endtime="20170918 15:37:13.250"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:13.251">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status starttime="20170918 15:37:13.251" status="PASS" endtime="20170918 15:37:13.251"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:13.324">index=1
host=9.3.21.61
encoding=UTF-8
timeout=25 seconds
newline=

term_type=vt100
path_separator=/
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170918 15:37:13.324">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170918 15:37:13.392">Command exited with return code 0.</msg>
<status starttime="20170918 15:37:13.287" status="PASS" endtime="20170918 15:37:13.392"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:13.392">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:13.392">${ret_values} = (u'Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Mon Sep 18 15:14:20 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status starttime="20170918 15:37:13.251" status="PASS" endtime="20170918 15:37:13.392"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:13.392">${stdout} = Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Mon Sep 18 15:14:20 UTC 2017 armv6l GNU/Linux</msg>
<status starttime="20170918 15:37:13.392" status="PASS" endtime="20170918 15:37:13.393"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:13.393">${stderr} = </msg>
<status starttime="20170918 15:37:13.393" status="PASS" endtime="20170918 15:37:13.393"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:13.403">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:13.402" status="PASS" endtime="20170918 15:37:13.403"></status>
</kw>
<status starttime="20170918 15:37:13.401" status="PASS" endtime="20170918 15:37:13.403"></status>
</kw>
<status starttime="20170918 15:37:13.393" status="PASS" endtime="20170918 15:37:13.403"></status>
</kw>
<status starttime="20170918 15:37:13.243" status="PASS" endtime="20170918 15:37:13.403"></status>
</kw>
<status starttime="20170918 15:37:13.243" status="PASS" endtime="20170918 15:37:13.403"></status>
</kw>
<status starttime="20170918 15:37:12.947" status="PASS" endtime="20170918 15:37:13.403"></status>
</kw>
<status starttime="20170918 15:37:12.945" status="PASS" endtime="20170918 15:37:13.403"></status>
</kw>
<status starttime="20170918 15:37:12.945" status="PASS" endtime="20170918 15:37:13.403"></status>
</kw>
<status starttime="20170918 15:37:11.171" status="PASS" endtime="20170918 15:37:13.403"></status>
</kw>
<status starttime="20170918 15:37:11.170" status="PASS" endtime="20170918 15:37:13.403"></status>
</kw>
<status starttime="20170918 15:37:11.144" status="PASS" endtime="20170918 15:37:13.404"></status>
</kw>
<status starttime="20170918 15:37:11.141" status="PASS" endtime="20170918 15:37:13.404"></status>
</kw>
<status starttime="20170918 15:37:11.141" status="PASS" endtime="20170918 15:37:13.404"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170918 15:37:13.405" status="PASS" endtime="20170918 15:37:13.405"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:13.406">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:13.406">${ret_values} = None</msg>
<status starttime="20170918 15:37:13.405" status="PASS" endtime="20170918 15:37:13.406"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170918 15:37:13.406" status="PASS" endtime="20170918 15:37:13.406"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:13.433">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170918 15:37:13.432" status="PASS" endtime="20170918 15:37:13.433"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:13.434">@{cmd_list} = [ ('BMC_journalctl_pretty', 'journalctl -o json-pretty') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/'...</msg>
<status starttime="20170918 15:37:13.434" status="PASS" endtime="20170918 15:37:13.434"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:13.435">${logpath} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_journalctl_pretty.txt</msg>
<status starttime="20170918 15:37:13.435" status="PASS" endtime="20170918 15:37:13.435"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170918 15:37:13.436" status="PASS" endtime="20170918 15:37:13.436"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:13.437">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status starttime="20170918 15:37:13.437" status="PASS" endtime="20170918 15:37:13.437"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:13.508">index=1
host=9.3.21.61
encoding=UTF-8
timeout=25 seconds
newline=

term_type=vt100
path_separator=/
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170918 15:37:13.508">Executing command 'journalctl -o json-pretty'.</msg>
<msg level="INFO" timestamp="20170918 15:37:16.106">Command exited with return code 0.</msg>
<status starttime="20170918 15:37:13.469" status="PASS" endtime="20170918 15:37:16.107"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:16.108">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:16.122">${ret_values} = (u'{\n\t"__CURSOR" : "s=5d638b063c46417fb361a7513e8de2ec;i=1;b=00c55bbb2eb549f1be592be982d6fb01;m=d6ba5c;t=55978784f561a;x=f69565ae4f02142",\n\t"__REALTIME_TIMESTAMP" : "1505748832966170",\n\t"__MONOT...</msg>
<status starttime="20170918 15:37:13.437" status="PASS" endtime="20170918 15:37:16.122"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:16.126">${stdout} = {
	"__CURSOR" : "s=5d638b063c46417fb361a7513e8de2ec;i=1;b=00c55bbb2eb549f1be592be982d6fb01;m=d6ba5c;t=55978784f561a;x=f69565ae4f02142",
	"__REALTIME_TIMESTAMP" : "1505748832966170",
	"__MONOTONIC_TIME...</msg>
<status starttime="20170918 15:37:16.123" status="PASS" endtime="20170918 15:37:16.126"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:16.127">${stderr} = </msg>
<status starttime="20170918 15:37:16.127" status="PASS" endtime="20170918 15:37:16.127"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:16.144">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_journalctl_pretty.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:16.141" status="PASS" endtime="20170918 15:37:16.144"></status>
</kw>
<status starttime="20170918 15:37:16.136" status="PASS" endtime="20170918 15:37:16.145"></status>
</kw>
<status starttime="20170918 15:37:16.128" status="PASS" endtime="20170918 15:37:16.145"></status>
</kw>
<status starttime="20170918 15:37:13.435" status="PASS" endtime="20170918 15:37:16.145"></status>
</kw>
<status starttime="20170918 15:37:13.434" status="PASS" endtime="20170918 15:37:16.145"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:16.146">${logpath} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_journalctl_nopager.txt</msg>
<status starttime="20170918 15:37:16.145" status="PASS" endtime="20170918 15:37:16.146"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170918 15:37:16.147" status="PASS" endtime="20170918 15:37:16.147"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:16.148">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status starttime="20170918 15:37:16.147" status="PASS" endtime="20170918 15:37:16.148"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:16.217">index=1
host=9.3.21.61
encoding=UTF-8
timeout=25 seconds
newline=

term_type=vt100
path_separator=/
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170918 15:37:16.218">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170918 15:37:17.308">Command exited with return code 0.</msg>
<status starttime="20170918 15:37:16.179" status="PASS" endtime="20170918 15:37:17.309"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:17.309">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:17.310">${ret_values} = (u'-- Logs begin at Mon 2017-09-18 15:33:52 UTC, end at Mon 2017-09-18 15:37:20 UTC. --\nSep 18 15:33:52 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 18 15:33:52 witherspoon kernel: Linu...</msg>
<status starttime="20170918 15:37:16.148" status="PASS" endtime="20170918 15:37:17.310"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:17.311">${stdout} = -- Logs begin at Mon 2017-09-18 15:33:52 UTC, end at Mon 2017-09-18 15:37:20 UTC. --
Sep 18 15:33:52 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 18 15:33:52 witherspoon kernel: Linux ver...</msg>
<status starttime="20170918 15:37:17.311" status="PASS" endtime="20170918 15:37:17.312"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:17.312">${stderr} = </msg>
<status starttime="20170918 15:37:17.312" status="PASS" endtime="20170918 15:37:17.312"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:17.320">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_journalctl_nopager.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:17.319" status="PASS" endtime="20170918 15:37:17.320"></status>
</kw>
<status starttime="20170918 15:37:17.318" status="PASS" endtime="20170918 15:37:17.320"></status>
</kw>
<status starttime="20170918 15:37:17.312" status="PASS" endtime="20170918 15:37:17.320"></status>
</kw>
<status starttime="20170918 15:37:16.146" status="PASS" endtime="20170918 15:37:17.320"></status>
</kw>
<status starttime="20170918 15:37:16.145" status="PASS" endtime="20170918 15:37:17.320"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:17.321">${logpath} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_meminfo.txt</msg>
<status starttime="20170918 15:37:17.321" status="PASS" endtime="20170918 15:37:17.321"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170918 15:37:17.322" status="PASS" endtime="20170918 15:37:17.322"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:17.323">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status starttime="20170918 15:37:17.323" status="PASS" endtime="20170918 15:37:17.323"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:17.393">index=1
host=9.3.21.61
encoding=UTF-8
timeout=25 seconds
newline=

term_type=vt100
path_separator=/
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170918 15:37:17.394">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170918 15:37:17.451">Command exited with return code 0.</msg>
<status starttime="20170918 15:37:17.357" status="PASS" endtime="20170918 15:37:17.451"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:17.451">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:17.452">${ret_values} = (u'MemTotal:         432240 kB\nMemFree:          276536 kB\nMemAvailable:     323900 kB\nBuffers:           11564 kB\nCached:            52664 kB\nSwapCached:            0 kB\nActive:            9361...</msg>
<status starttime="20170918 15:37:17.324" status="PASS" endtime="20170918 15:37:17.452"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:17.452">${stdout} = MemTotal:         432240 kB
MemFree:          276536 kB
MemAvailable:     323900 kB
Buffers:           11564 kB
Cached:            52664 kB
SwapCached:            0 kB
Active:            93612 kB
Inac...</msg>
<status starttime="20170918 15:37:17.452" status="PASS" endtime="20170918 15:37:17.452"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:17.453">${stderr} = </msg>
<status starttime="20170918 15:37:17.453" status="PASS" endtime="20170918 15:37:17.453"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:17.462">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_meminfo.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:17.461" status="PASS" endtime="20170918 15:37:17.462"></status>
</kw>
<status starttime="20170918 15:37:17.460" status="PASS" endtime="20170918 15:37:17.462"></status>
</kw>
<status starttime="20170918 15:37:17.453" status="PASS" endtime="20170918 15:37:17.462"></status>
</kw>
<status starttime="20170918 15:37:17.321" status="PASS" endtime="20170918 15:37:17.462"></status>
</kw>
<status starttime="20170918 15:37:17.320" status="PASS" endtime="20170918 15:37:17.462"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:17.463">${logpath} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_proc_fd_active_list.txt</msg>
<status starttime="20170918 15:37:17.463" status="PASS" endtime="20170918 15:37:17.463"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170918 15:37:17.464" status="PASS" endtime="20170918 15:37:17.464"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:17.465">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status starttime="20170918 15:37:17.465" status="PASS" endtime="20170918 15:37:17.465"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:17.534">index=1
host=9.3.21.61
encoding=UTF-8
timeout=25 seconds
newline=

term_type=vt100
path_separator=/
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170918 15:37:17.534">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170918 15:37:18.045">Command exited with return code 0.</msg>
<status starttime="20170918 15:37:17.497" status="PASS" endtime="20170918 15:37:18.045"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:18.046">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:18.047">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 18 15:37 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 18 15:37 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status starttime="20170918 15:37:17.465" status="PASS" endtime="20170918 15:37:18.047"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.048">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 18 15:37 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 18 15:37 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status starttime="20170918 15:37:18.047" status="PASS" endtime="20170918 15:37:18.048"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.048">${stderr} = ls: /proc/1328/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status starttime="20170918 15:37:18.048" status="PASS" endtime="20170918 15:37:18.048"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:18.056">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:18.055" status="PASS" endtime="20170918 15:37:18.056"></status>
</kw>
<status starttime="20170918 15:37:18.054" status="PASS" endtime="20170918 15:37:18.056"></status>
</kw>
<status starttime="20170918 15:37:18.048" status="PASS" endtime="20170918 15:37:18.056"></status>
</kw>
<status starttime="20170918 15:37:17.463" status="PASS" endtime="20170918 15:37:18.056"></status>
</kw>
<status starttime="20170918 15:37:17.462" status="PASS" endtime="20170918 15:37:18.056"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.057">${logpath} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_procinfo.txt</msg>
<status starttime="20170918 15:37:18.057" status="PASS" endtime="20170918 15:37:18.057"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170918 15:37:18.058" status="PASS" endtime="20170918 15:37:18.059"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.059">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status starttime="20170918 15:37:18.059" status="PASS" endtime="20170918 15:37:18.059"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:18.128">index=1
host=9.3.21.61
encoding=UTF-8
timeout=25 seconds
newline=

term_type=vt100
path_separator=/
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170918 15:37:18.129">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170918 15:37:18.176">Command exited with return code 0.</msg>
<status starttime="20170918 15:37:18.092" status="PASS" endtime="20170918 15:37:18.176"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:18.176">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:18.176">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status starttime="20170918 15:37:18.060" status="PASS" endtime="20170918 15:37:18.176"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.177">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status starttime="20170918 15:37:18.177" status="PASS" endtime="20170918 15:37:18.177"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.178">${stderr} = </msg>
<status starttime="20170918 15:37:18.177" status="PASS" endtime="20170918 15:37:18.178"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:18.187">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_procinfo.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:18.187" status="PASS" endtime="20170918 15:37:18.187"></status>
</kw>
<status starttime="20170918 15:37:18.186" status="PASS" endtime="20170918 15:37:18.187"></status>
</kw>
<status starttime="20170918 15:37:18.178" status="PASS" endtime="20170918 15:37:18.187"></status>
</kw>
<status starttime="20170918 15:37:18.057" status="PASS" endtime="20170918 15:37:18.188"></status>
</kw>
<status starttime="20170918 15:37:18.057" status="PASS" endtime="20170918 15:37:18.188"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.188">${logpath} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_dmesg.txt</msg>
<status starttime="20170918 15:37:18.188" status="PASS" endtime="20170918 15:37:18.188"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170918 15:37:18.189" status="PASS" endtime="20170918 15:37:18.190"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.190">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status starttime="20170918 15:37:18.190" status="PASS" endtime="20170918 15:37:18.190"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:18.259">index=1
host=9.3.21.61
encoding=UTF-8
timeout=25 seconds
newline=

term_type=vt100
path_separator=/
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170918 15:37:18.259">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170918 15:37:18.348">Command exited with return code 0.</msg>
<status starttime="20170918 15:37:18.222" status="PASS" endtime="20170918 15:37:18.348"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:18.348">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:18.348">${ret_values} = (u'[    0.000000] CPU: PIPT / VIPT nonaliasing data cache, VIPT nonaliasing instruction cache\n[    0.000000] OF: fdt:Machine model: Witherspoon BMC\n[    0.000000] Memory policy: Data cache writeback...</msg>
<status starttime="20170918 15:37:18.191" status="PASS" endtime="20170918 15:37:18.348"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.349">${stdout} = [    0.000000] CPU: PIPT / VIPT nonaliasing data cache, VIPT nonaliasing instruction cache
[    0.000000] OF: fdt:Machine model: Witherspoon BMC
[    0.000000] Memory policy: Data cache writeback
[   ...</msg>
<status starttime="20170918 15:37:18.349" status="PASS" endtime="20170918 15:37:18.349"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.349">${stderr} = </msg>
<status starttime="20170918 15:37:18.349" status="PASS" endtime="20170918 15:37:18.350"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:18.357">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_dmesg.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:18.356" status="PASS" endtime="20170918 15:37:18.357"></status>
</kw>
<status starttime="20170918 15:37:18.355" status="PASS" endtime="20170918 15:37:18.357"></status>
</kw>
<status starttime="20170918 15:37:18.350" status="PASS" endtime="20170918 15:37:18.357"></status>
</kw>
<status starttime="20170918 15:37:18.189" status="PASS" endtime="20170918 15:37:18.357"></status>
</kw>
<status starttime="20170918 15:37:18.188" status="PASS" endtime="20170918 15:37:18.357"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.358">${logpath} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_proc_list.txt</msg>
<status starttime="20170918 15:37:18.357" status="PASS" endtime="20170918 15:37:18.358"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170918 15:37:18.359" status="PASS" endtime="20170918 15:37:18.359"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.360">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status starttime="20170918 15:37:18.359" status="PASS" endtime="20170918 15:37:18.360"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:18.430">index=1
host=9.3.21.61
encoding=UTF-8
timeout=25 seconds
newline=

term_type=vt100
path_separator=/
width=80
prompt=# 
port=22
height=24
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170918 15:37:18.430">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170918 15:37:18.736">Command exited with return code 0.</msg>
<status starttime="20170918 15:37:18.393" status="PASS" endtime="20170918 15:37:18.736"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:18.736">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:18.737">${ret_values} = (u'Mem: 155828K used, 276412K free, 14416K shrd, 11564K buff, 52668K cached\nCPU:   8% usr  16% sys   0% nic  75% idle   0% io   0% irq   0% sirq\nLoad average: 1.53 1.87 0.85 1/155 1331\n  PID  PPID ...</msg>
<status starttime="20170918 15:37:18.360" status="PASS" endtime="20170918 15:37:18.737"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.737">${stdout} = Mem: 155828K used, 276412K free, 14416K shrd, 11564K buff, 52668K cached
CPU:   8% usr  16% sys   0% nic  75% idle   0% io   0% irq   0% sirq
Load average: 1.53 1.87 0.85 1/155 1331
  PID  PPID USER  ...</msg>
<status starttime="20170918 15:37:18.737" status="PASS" endtime="20170918 15:37:18.737"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.738">${stderr} = </msg>
<status starttime="20170918 15:37:18.738" status="PASS" endtime="20170918 15:37:18.738"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:18.745">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_proc_list.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:18.745" status="PASS" endtime="20170918 15:37:18.745"></status>
</kw>
<status starttime="20170918 15:37:18.744" status="PASS" endtime="20170918 15:37:18.746"></status>
</kw>
<status starttime="20170918 15:37:18.738" status="PASS" endtime="20170918 15:37:18.746"></status>
</kw>
<status starttime="20170918 15:37:18.358" status="PASS" endtime="20170918 15:37:18.746"></status>
</kw>
<status starttime="20170918 15:37:18.357" status="PASS" endtime="20170918 15:37:18.746"></status>
</kw>
<status starttime="20170918 15:37:13.434" status="PASS" endtime="20170918 15:37:18.746"></status>
</kw>
<status starttime="20170918 15:37:13.433" status="PASS" endtime="20170918 15:37:18.746"></status>
</kw>
<status starttime="20170918 15:37:13.433" status="PASS" endtime="20170918 15:37:18.746"></status>
</kw>
<status starttime="20170918 15:37:13.433" status="PASS" endtime="20170918 15:37:18.746"></status>
</kw>
<status starttime="20170918 15:37:13.432" status="PASS" endtime="20170918 15:37:18.746"></status>
</kw>
<status starttime="20170918 15:37:13.406" status="PASS" endtime="20170918 15:37:18.746"></status>
</kw>
<status starttime="20170918 15:37:13.404" status="PASS" endtime="20170918 15:37:18.747"></status>
</kw>
<status starttime="20170918 15:37:13.404" status="PASS" endtime="20170918 15:37:18.747"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170918 15:37:18.749" status="PASS" endtime="20170918 15:37:18.749"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:18.749">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:18.750">${ret_values} = None</msg>
<status starttime="20170918 15:37:18.748" status="PASS" endtime="20170918 15:37:18.750"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170918 15:37:18.750" status="PASS" endtime="20170918 15:37:18.750"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.777">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170918 15:37:18.777" status="PASS" endtime="20170918 15:37:18.777"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.778">@{cmd_list} = [ ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xyz/openbmc_project/led/enumerate') | ('BMC_sensor_list...</msg>
<status starttime="20170918 15:37:18.778" status="PASS" endtime="20170918 15:37:18.778"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.779">${logpath} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_inventory.txt</msg>
<status starttime="20170918 15:37:18.779" status="PASS" endtime="20170918 15:37:18.780"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:18.782">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170918 15:37:18.782" status="PASS" endtime="20170918 15:37:18.822"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.823">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170918 15:37:18.823" status="PASS" endtime="20170918 15:37:18.823"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.824">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170918 15:37:18.824" status="PASS" endtime="20170918 15:37:18.824"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:18.825">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170918 15:37:18.825" status="PASS" endtime="20170918 15:37:18.825"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:19.004">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170918 15:37:18.826" status="PASS" endtime="20170918 15:37:19.004"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:19.004">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:19.004">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:18.826" status="PASS" endtime="20170918 15:37:19.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:19.005">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:19.004" status="PASS" endtime="20170918 15:37:19.005"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:19.005">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:19.005" status="PASS" endtime="20170918 15:37:19.005"></status>
</kw>
<status starttime="20170918 15:37:18.781" status="PASS" endtime="20170918 15:37:19.006"></status>
</kw>
<status starttime="20170918 15:37:18.781" status="PASS" endtime="20170918 15:37:19.006"></status>
</kw>
<status starttime="20170918 15:37:18.780" status="PASS" endtime="20170918 15:37:19.006"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:19.006">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170918 15:37:19.006" status="PASS" endtime="20170918 15:37:19.006"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170918 15:37:19.007" status="PASS" endtime="20170918 15:37:19.007"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:19.314">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 15:37:19.314">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:19.007" status="PASS" endtime="20170918 15:37:19.314"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170918 15:37:19.315" status="PASS" endtime="20170918 15:37:19.315"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 15:37:19.315">Delete All Sessions</msg>
<status starttime="20170918 15:37:19.315" status="PASS" endtime="20170918 15:37:19.316"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:19.316">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:18.780" status="PASS" endtime="20170918 15:37:19.316"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:19.317">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:19.317" status="PASS" endtime="20170918 15:37:19.317"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:19.317">${status} = True</msg>
<status starttime="20170918 15:37:19.316" status="PASS" endtime="20170918 15:37:19.317"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170918 15:37:19.317" status="PASS" endtime="20170918 15:37:19.318"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:19.319">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 15:37:19.319">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170918 15:37:19.319">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": ""
        },
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
        ...</msg>
<status starttime="20170918 15:37:19.318" status="PASS" endtime="20170918 15:37:19.319"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:19.320">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_inventory.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:19.320" status="PASS" endtime="20170918 15:37:19.320"></status>
</kw>
<status starttime="20170918 15:37:19.319" status="PASS" endtime="20170918 15:37:19.321"></status>
</kw>
<status starttime="20170918 15:37:18.779" status="PASS" endtime="20170918 15:37:19.321"></status>
</kw>
<kw name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:19.321">${logpath} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_control_list.txt</msg>
<status starttime="20170918 15:37:19.321" status="PASS" endtime="20170918 15:37:19.321"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:19.324">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170918 15:37:19.324" status="PASS" endtime="20170918 15:37:19.325"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:19.326">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170918 15:37:19.325" status="PASS" endtime="20170918 15:37:19.326"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:19.327">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170918 15:37:19.326" status="PASS" endtime="20170918 15:37:19.327"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:19.328">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170918 15:37:19.327" status="PASS" endtime="20170918 15:37:19.328"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:19.569">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170918 15:37:19.329" status="PASS" endtime="20170918 15:37:19.570"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:19.570">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:19.570">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:19.328" status="PASS" endtime="20170918 15:37:19.570"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:19.571">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:19.570" status="PASS" endtime="20170918 15:37:19.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:19.571">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:19.571" status="PASS" endtime="20170918 15:37:19.571"></status>
</kw>
<status starttime="20170918 15:37:19.323" status="PASS" endtime="20170918 15:37:19.572"></status>
</kw>
<status starttime="20170918 15:37:19.323" status="PASS" endtime="20170918 15:37:19.572"></status>
</kw>
<status starttime="20170918 15:37:19.322" status="PASS" endtime="20170918 15:37:19.572"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:19.572">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status starttime="20170918 15:37:19.572" status="PASS" endtime="20170918 15:37:19.572"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170918 15:37:19.573" status="PASS" endtime="20170918 15:37:19.573"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:19.846">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 15:37:19.847">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:19.573" status="PASS" endtime="20170918 15:37:19.847"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170918 15:37:19.847" status="PASS" endtime="20170918 15:37:19.847"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 15:37:19.848">Delete All Sessions</msg>
<status starttime="20170918 15:37:19.848" status="PASS" endtime="20170918 15:37:19.848"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:19.848">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:19.322" status="PASS" endtime="20170918 15:37:19.848"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:19.849">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:19.849" status="PASS" endtime="20170918 15:37:19.849"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:19.849">${status} = True</msg>
<status starttime="20170918 15:37:19.848" status="PASS" endtime="20170918 15:37:19.849"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170918 15:37:19.850" status="PASS" endtime="20170918 15:37:19.850"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:19.851">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.AlwaysOff"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 15:37:19.851">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170918 15:37:19.851">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status starttime="20170918 15:37:19.850" status="PASS" endtime="20170918 15:37:19.851"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:19.853">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_control_list.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:19.852" status="PASS" endtime="20170918 15:37:19.853"></status>
</kw>
<status starttime="20170918 15:37:19.851" status="PASS" endtime="20170918 15:37:19.853"></status>
</kw>
<status starttime="20170918 15:37:19.321" status="PASS" endtime="20170918 15:37:19.853"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:19.854">${logpath} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_led.txt</msg>
<status starttime="20170918 15:37:19.853" status="PASS" endtime="20170918 15:37:19.854"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:19.857">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170918 15:37:19.856" status="PASS" endtime="20170918 15:37:19.857"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:19.858">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170918 15:37:19.857" status="PASS" endtime="20170918 15:37:19.858"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:19.858">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170918 15:37:19.858" status="PASS" endtime="20170918 15:37:19.858"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:19.859">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170918 15:37:19.859" status="PASS" endtime="20170918 15:37:19.859"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:20.049">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170918 15:37:19.860" status="PASS" endtime="20170918 15:37:20.050"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:20.050">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:20.050">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:19.859" status="PASS" endtime="20170918 15:37:20.050"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:20.051">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:20.050" status="PASS" endtime="20170918 15:37:20.051"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:20.051">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:20.051" status="PASS" endtime="20170918 15:37:20.051"></status>
</kw>
<status starttime="20170918 15:37:19.856" status="PASS" endtime="20170918 15:37:20.052"></status>
</kw>
<status starttime="20170918 15:37:19.855" status="PASS" endtime="20170918 15:37:20.052"></status>
</kw>
<status starttime="20170918 15:37:19.854" status="PASS" endtime="20170918 15:37:20.052"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:20.052">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status starttime="20170918 15:37:20.052" status="PASS" endtime="20170918 15:37:20.052"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170918 15:37:20.053" status="PASS" endtime="20170918 15:37:20.053"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:21.757">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 15:37:21.757">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:20.054" status="PASS" endtime="20170918 15:37:21.758"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170918 15:37:21.758" status="PASS" endtime="20170918 15:37:21.759"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 15:37:21.759">Delete All Sessions</msg>
<status starttime="20170918 15:37:21.759" status="PASS" endtime="20170918 15:37:21.759"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:21.760">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:19.854" status="PASS" endtime="20170918 15:37:21.760"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:21.761">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:21.761" status="PASS" endtime="20170918 15:37:21.761"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:21.762">${status} = True</msg>
<status starttime="20170918 15:37:21.760" status="PASS" endtime="20170918 15:37:21.762"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170918 15:37:21.762" status="PASS" endtime="20170918 15:37:21.762"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:21.766">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 15:37:21.767">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170918 15:37:21.767">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status starttime="20170918 15:37:21.763" status="PASS" endtime="20170918 15:37:21.767"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:21.768">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_led.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:21.768" status="PASS" endtime="20170918 15:37:21.769"></status>
</kw>
<status starttime="20170918 15:37:21.767" status="PASS" endtime="20170918 15:37:21.769"></status>
</kw>
<status starttime="20170918 15:37:19.853" status="PASS" endtime="20170918 15:37:21.769"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:21.770">${logpath} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_sensor_list.txt</msg>
<status starttime="20170918 15:37:21.769" status="PASS" endtime="20170918 15:37:21.770"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:21.774">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170918 15:37:21.773" status="PASS" endtime="20170918 15:37:21.774"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:21.775">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170918 15:37:21.775" status="PASS" endtime="20170918 15:37:21.775"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:21.776">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170918 15:37:21.776" status="PASS" endtime="20170918 15:37:21.776"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:21.777">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170918 15:37:21.777" status="PASS" endtime="20170918 15:37:21.777"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:21.981">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170918 15:37:21.778" status="PASS" endtime="20170918 15:37:21.981"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:21.981">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:21.981">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:21.778" status="PASS" endtime="20170918 15:37:21.981"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:21.982">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:21.982" status="PASS" endtime="20170918 15:37:21.982"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:21.983">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:21.982" status="PASS" endtime="20170918 15:37:21.983"></status>
</kw>
<status starttime="20170918 15:37:21.773" status="PASS" endtime="20170918 15:37:21.983"></status>
</kw>
<status starttime="20170918 15:37:21.772" status="PASS" endtime="20170918 15:37:21.983"></status>
</kw>
<status starttime="20170918 15:37:21.771" status="PASS" endtime="20170918 15:37:21.983"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:21.984">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status starttime="20170918 15:37:21.983" status="PASS" endtime="20170918 15:37:21.984"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170918 15:37:21.984" status="PASS" endtime="20170918 15:37:21.984"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:22.561">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 15:37:22.561">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:21.985" status="PASS" endtime="20170918 15:37:22.561"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170918 15:37:22.561" status="PASS" endtime="20170918 15:37:22.562"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 15:37:22.562">Delete All Sessions</msg>
<status starttime="20170918 15:37:22.562" status="PASS" endtime="20170918 15:37:22.562"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:22.562">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:21.770" status="PASS" endtime="20170918 15:37:22.562"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:22.564">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:22.563" status="PASS" endtime="20170918 15:37:22.564"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:22.564">${status} = True</msg>
<status starttime="20170918 15:37:22.563" status="PASS" endtime="20170918 15:37:22.564"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170918 15:37:22.564" status="PASS" endtime="20170918 15:37:22.564"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:22.566">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 24000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30080
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 2000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 207500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 15:37:22.566">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170918 15:37:22.566">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status starttime="20170918 15:37:22.565" status="PASS" endtime="20170918 15:37:22.566"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:22.567">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_sensor_list.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:22.567" status="PASS" endtime="20170918 15:37:22.567"></status>
</kw>
<status starttime="20170918 15:37:22.566" status="PASS" endtime="20170918 15:37:22.568"></status>
</kw>
<status starttime="20170918 15:37:21.769" status="PASS" endtime="20170918 15:37:22.568"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:22.569">${logpath} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_BMC_elog.txt</msg>
<status starttime="20170918 15:37:22.568" status="PASS" endtime="20170918 15:37:22.569"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:22.573">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170918 15:37:22.572" status="PASS" endtime="20170918 15:37:22.573"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:22.574">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170918 15:37:22.574" status="PASS" endtime="20170918 15:37:22.574"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:22.575">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170918 15:37:22.575" status="PASS" endtime="20170918 15:37:22.575"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:22.576">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170918 15:37:22.576" status="PASS" endtime="20170918 15:37:22.576"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:22.757">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170918 15:37:22.577" status="PASS" endtime="20170918 15:37:22.757"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:22.757">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:22.757">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:22.577" status="PASS" endtime="20170918 15:37:22.757"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:22.758">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:22.757" status="PASS" endtime="20170918 15:37:22.758"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:22.758">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:22.758" status="PASS" endtime="20170918 15:37:22.758"></status>
</kw>
<status starttime="20170918 15:37:22.571" status="PASS" endtime="20170918 15:37:22.759"></status>
</kw>
<status starttime="20170918 15:37:22.571" status="PASS" endtime="20170918 15:37:22.759"></status>
</kw>
<status starttime="20170918 15:37:22.570" status="PASS" endtime="20170918 15:37:22.759"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:22.759">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170918 15:37:22.759" status="PASS" endtime="20170918 15:37:22.759"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170918 15:37:22.760" status="PASS" endtime="20170918 15:37:22.760"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:22.805">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 15:37:22.805">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170918 15:37:22.760" status="PASS" endtime="20170918 15:37:22.805"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170918 15:37:22.806" status="PASS" endtime="20170918 15:37:22.806"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 15:37:22.806">Delete All Sessions</msg>
<status starttime="20170918 15:37:22.806" status="PASS" endtime="20170918 15:37:22.806"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:22.807">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170918 15:37:22.569" status="PASS" endtime="20170918 15:37:22.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:22.808">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 15:37:22.808">404 != 200</msg>
<status starttime="20170918 15:37:22.807" status="FAIL" endtime="20170918 15:37:22.808"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:22.808">${status} = False</msg>
<status starttime="20170918 15:37:22.807" status="PASS" endtime="20170918 15:37:22.808"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170918 15:37:22.809">Continuing for loop from the next iteration.</msg>
<status starttime="20170918 15:37:22.809" status="PASS" endtime="20170918 15:37:22.809"></status>
</kw>
<status starttime="20170918 15:37:22.808" status="PASS" endtime="20170918 15:37:22.809"></status>
</kw>
<status starttime="20170918 15:37:22.568" status="PASS" endtime="20170918 15:37:22.809"></status>
</kw>
<kw name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:22.810">${logpath} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_FIRMWARE_list.txt</msg>
<status starttime="20170918 15:37:22.810" status="PASS" endtime="20170918 15:37:22.810"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:22.813">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170918 15:37:22.813" status="PASS" endtime="20170918 15:37:22.813"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:22.814">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170918 15:37:22.814" status="PASS" endtime="20170918 15:37:22.814"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:22.814">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170918 15:37:22.814" status="PASS" endtime="20170918 15:37:22.815"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:22.815">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170918 15:37:22.815" status="PASS" endtime="20170918 15:37:22.815"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:22.993">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170918 15:37:22.816" status="PASS" endtime="20170918 15:37:22.994"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:22.994">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:22.994">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:22.815" status="PASS" endtime="20170918 15:37:22.994"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:22.994">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:22.994" status="PASS" endtime="20170918 15:37:22.995"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:22.995">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:22.995" status="PASS" endtime="20170918 15:37:22.995"></status>
</kw>
<status starttime="20170918 15:37:22.812" status="PASS" endtime="20170918 15:37:22.995"></status>
</kw>
<status starttime="20170918 15:37:22.812" status="PASS" endtime="20170918 15:37:22.995"></status>
</kw>
<status starttime="20170918 15:37:22.811" status="PASS" endtime="20170918 15:37:22.996"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:22.996">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status starttime="20170918 15:37:22.996" status="PASS" endtime="20170918 15:37:22.996"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170918 15:37:22.996" status="PASS" endtime="20170918 15:37:22.997"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.171">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 15:37:23.172">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:22.997" status="PASS" endtime="20170918 15:37:23.172"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170918 15:37:23.172" status="PASS" endtime="20170918 15:37:23.172"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 15:37:23.173">Delete All Sessions</msg>
<status starttime="20170918 15:37:23.173" status="PASS" endtime="20170918 15:37:23.173"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:23.173">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:22.810" status="PASS" endtime="20170918 15:37:23.173"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:23.174">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:23.174" status="PASS" endtime="20170918 15:37:23.174"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:23.175">${status} = True</msg>
<status starttime="20170918 15:37:23.174" status="PASS" endtime="20170918 15:37:23.175"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170918 15:37:23.175" status="PASS" endtime="20170918 15:37:23.175"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.176">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170918 15:37:23.176">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170918 15:37:23.176">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/8764baa3": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-v1....</msg>
<status starttime="20170918 15:37:23.175" status="PASS" endtime="20170918 15:37:23.176"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:23.178">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_FIRMWARE_list.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/20170918153709982269_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:23.177" status="PASS" endtime="20170918 15:37:23.178"></status>
</kw>
<status starttime="20170918 15:37:23.176" status="PASS" endtime="20170918 15:37:23.178"></status>
</kw>
<status starttime="20170918 15:37:22.809" status="PASS" endtime="20170918 15:37:23.178"></status>
</kw>
<status starttime="20170918 15:37:18.779" status="PASS" endtime="20170918 15:37:23.178"></status>
</kw>
<status starttime="20170918 15:37:18.778" status="PASS" endtime="20170918 15:37:23.178"></status>
</kw>
<status starttime="20170918 15:37:18.777" status="PASS" endtime="20170918 15:37:23.178"></status>
</kw>
<status starttime="20170918 15:37:18.777" status="PASS" endtime="20170918 15:37:23.178"></status>
</kw>
<status starttime="20170918 15:37:18.776" status="PASS" endtime="20170918 15:37:23.178"></status>
</kw>
<status starttime="20170918 15:37:18.751" status="PASS" endtime="20170918 15:37:23.178"></status>
</kw>
<status starttime="20170918 15:37:18.747" status="PASS" endtime="20170918 15:37:23.178"></status>
</kw>
<status starttime="20170918 15:37:18.747" status="PASS" endtime="20170918 15:37:23.178"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170918 15:37:23.181" status="PASS" endtime="20170918 15:37:23.181"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:23.181">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:23.181">${ret_values} = None</msg>
<status starttime="20170918 15:37:23.180" status="PASS" endtime="20170918 15:37:23.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170918 15:37:23.182" status="PASS" endtime="20170918 15:37:23.182"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:23.211">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170918 15:37:23.211" status="PASS" endtime="20170918 15:37:23.212"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.213">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170918 15:37:23.212" status="PASS" endtime="20170918 15:37:23.213"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.213">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170918 15:37:23.213" status="PASS" endtime="20170918 15:37:23.213"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.214">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170918 15:37:23.213" status="PASS" endtime="20170918 15:37:23.214"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:23.520">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170918 15:37:23.215" status="PASS" endtime="20170918 15:37:23.521"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:23.521">${status} = PASS</msg>
<msg level="INFO" timestamp="20170918 15:37:23.521">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170918 15:37:23.214" status="PASS" endtime="20170918 15:37:23.521"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:23.522">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:23.521" status="PASS" endtime="20170918 15:37:23.522"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:23.522">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170918 15:37:23.522" status="PASS" endtime="20170918 15:37:23.522"></status>
</kw>
<status starttime="20170918 15:37:23.210" status="PASS" endtime="20170918 15:37:23.522"></status>
</kw>
<status starttime="20170918 15:37:23.210" status="PASS" endtime="20170918 15:37:23.523"></status>
</kw>
<status starttime="20170918 15:37:23.209" status="PASS" endtime="20170918 15:37:23.523"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.523">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170918 15:37:23.523" status="PASS" endtime="20170918 15:37:23.523"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170918 15:37:23.524" status="PASS" endtime="20170918 15:37:23.524"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.567">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170918 15:37:23.567">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170918 15:37:23.524" status="PASS" endtime="20170918 15:37:23.567"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170918 15:37:23.567" status="PASS" endtime="20170918 15:37:23.567"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170918 15:37:23.568">Delete All Sessions</msg>
<status starttime="20170918 15:37:23.568" status="PASS" endtime="20170918 15:37:23.568"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:23.568">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170918 15:37:23.209" status="PASS" endtime="20170918 15:37:23.568"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:23.569">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170918 15:37:23.569">404 != 200</msg>
<status starttime="20170918 15:37:23.569" status="FAIL" endtime="20170918 15:37:23.569"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:23.570">${status} = False</msg>
<status starttime="20170918 15:37:23.568" status="PASS" endtime="20170918 15:37:23.570"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:23.570">Returning from the enclosing user keyword.</msg>
<status starttime="20170918 15:37:23.570" status="PASS" endtime="20170918 15:37:23.570"></status>
</kw>
<status starttime="20170918 15:37:23.208" status="PASS" endtime="20170918 15:37:23.570"></status>
</kw>
<status starttime="20170918 15:37:23.182" status="PASS" endtime="20170918 15:37:23.570"></status>
</kw>
<status starttime="20170918 15:37:23.179" status="PASS" endtime="20170918 15:37:23.571"></status>
</kw>
<status starttime="20170918 15:37:23.179" status="PASS" endtime="20170918 15:37:23.571"></status>
</kw>
<status starttime="20170918 15:37:10.218" status="PASS" endtime="20170918 15:37:23.571"></status>
</kw>
<status starttime="20170918 15:37:10.216" status="PASS" endtime="20170918 15:37:23.571"></status>
</kw>
<status starttime="20170918 15:37:10.208" status="PASS" endtime="20170918 15:37:23.571"></status>
</kw>
<status starttime="20170918 15:37:10.208" status="PASS" endtime="20170918 15:37:23.571"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20170918 15:37:23.578" status="PASS" endtime="20170918 15:37:23.578"></status>
</kw>
<status starttime="20170918 15:37:23.571" status="PASS" endtime="20170918 15:37:23.578"></status>
</kw>
<status starttime="20170918 15:37:10.207" status="PASS" endtime="20170918 15:37:23.579"></status>
</kw>
<status starttime="20170918 15:37:06.902" status="PASS" endtime="20170918 15:37:23.579"></status>
</kw>
<status starttime="20170918 15:37:06.902" status="PASS" endtime="20170918 15:37:23.579"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170918 15:37:23.579" status="PASS" endtime="20170918 15:37:23.579"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.597">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170918 15:37:23.580" status="PASS" endtime="20170918 15:37:23.597"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.598">${FFDC_DIR_PATH} = /tmp/fspcibld/17001/obmc-robot/logs/20170918153709982269_TestsTestBasicPoweron/20170918153709982269_PowerOnTest/</msg>
<status starttime="20170918 15:37:23.597" status="PASS" endtime="20170918 15:37:23.598"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170918 15:37:23.598" status="PASS" endtime="20170918 15:37:23.598"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170918 15:37:23.599" status="PASS" endtime="20170918 15:37:23.599"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:23.600">Directory '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs"&gt;/tmp/fspcibld/17001/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170918 15:37:23.600" status="PASS" endtime="20170918 15:37:23.600"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:23.601">File '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170918 15:37:23.601" status="PASS" endtime="20170918 15:37:23.601"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:23.601">${exist} = True</msg>
<status starttime="20170918 15:37:23.600" status="PASS" endtime="20170918 15:37:23.601"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170918 15:37:23.601" status="PASS" endtime="20170918 15:37:23.602"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170918 15:37:23.602" status="PASS" endtime="20170918 15:37:23.602"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.603">${cur_time} = 2017-09-18 15:37:23:603009</msg>
<status starttime="20170918 15:37:23.603" status="PASS" endtime="20170918 15:37:23.603"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.604">${cur_time} = 20170918153723603009</msg>
<status starttime="20170918 15:37:23.603" status="PASS" endtime="20170918 15:37:23.604"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:23.604">${cur_time} = 20170918153723603009</msg>
<status starttime="20170918 15:37:23.602" status="PASS" endtime="20170918 15:37:23.604"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:23.605">Appended to file '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:23.604" status="PASS" endtime="20170918 15:37:23.605"></status>
</kw>
<status starttime="20170918 15:37:23.579" status="PASS" endtime="20170918 15:37:23.605"></status>
</kw>
<status starttime="20170918 15:37:06.553" status="PASS" endtime="20170918 15:37:23.605"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.607">${default_file_path} = /tmp/9.3.21.61_os_console.txt</msg>
<status starttime="20170918 15:37:23.607" status="PASS" endtime="20170918 15:37:23.607"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.608">${log_file_path} = /tmp/9.3.21.61_os_console.txt</msg>
<status starttime="20170918 15:37:23.607" status="PASS" endtime="20170918 15:37:23.608"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:23.608">${log_file_path} = /tmp/9.3.21.61_os_console.txt</msg>
<status starttime="20170918 15:37:23.606" status="PASS" endtime="20170918 15:37:23.608"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.609">${ssh_pw_file_path} = ssh_pw</msg>
<status starttime="20170918 15:37:23.609" status="PASS" endtime="20170918 15:37:23.609"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.610">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170918 15:37:23.610" status="PASS" endtime="20170918 15:37:23.610"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170918 15:37:23.610" status="PASS" endtime="20170918 15:37:23.610"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.614">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 15:37:23.618">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 15:37:23.618">${output} = /tmp/fspcibld/17001/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170918 15:37:23.611" status="PASS" endtime="20170918 15:37:23.619"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170918 15:37:23.620" status="PASS" endtime="20170918 15:37:23.621"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != ${0}</arg>
<arg>Set Variable</arg>
<arg>${EXECDIR}${/}bin/ssh_pw</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.622">${ssh_pw_file_path} = None</msg>
<status starttime="20170918 15:37:23.622" status="PASS" endtime="20170918 15:37:23.622"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.623">${cmd_buf} = None 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170918 15:37:23.623" status="PASS" endtime="20170918 15:37:23.623"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:23.624">${search_string} = None 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170918 15:37:23.608" status="PASS" endtime="20170918 15:37:23.624"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.624">${search_string} = None 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.21.61</msg>
<status starttime="20170918 15:37:23.624" status="PASS" endtime="20170918 15:37:23.624"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.625">${cmd_buf} = echo $(ps -ef | egrep 'None 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170918 15:37:23.625" status="PASS" endtime="20170918 15:37:23.625"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170918 15:37:23.625" status="PASS" endtime="20170918 15:37:23.626"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.629">Running command 'echo $(ps -ef | egrep 'None 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170918 15:37:23.635">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 15:37:23.635">${os_con_pid} = </msg>
<status starttime="20170918 15:37:23.626" status="PASS" endtime="20170918 15:37:23.636"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170918 15:37:23.638" status="PASS" endtime="20170918 15:37:23.639"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:23.639">${os_con_pid} = </msg>
<status starttime="20170918 15:37:23.608" status="PASS" endtime="20170918 15:37:23.639"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.642">${cmd_buf} = kill -9 </msg>
<status starttime="20170918 15:37:23.640" status="PASS" endtime="20170918 15:37:23.642"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170918 15:37:23.643" status="PASS" endtime="20170918 15:37:23.643"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.645">${rc} = None</msg>
<msg level="INFO" timestamp="20170918 15:37:23.645">${output} = None</msg>
<status starttime="20170918 15:37:23.645" status="PASS" endtime="20170918 15:37:23.645"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170918 15:37:23.646" status="PASS" endtime="20170918 15:37:23.646"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170918 15:37:23.654">Copied file from '&lt;a href="file:///tmp/9.3.21.61_os_console.txt"&gt;/tmp/9.3.21.61_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/17001/obmc-robot/logs/9.3.21.61_os_console.txt"&gt;/tmp/fspcibld/17001/obmc-robot/logs/9.3.21.61_os_console.txt&lt;/a&gt;'.</msg>
<status starttime="20170918 15:37:23.649" status="PASS" endtime="20170918 15:37:23.654"></status>
</kw>
<status starttime="20170918 15:37:23.648" status="PASS" endtime="20170918 15:37:23.654"></status>
</kw>
<status starttime="20170918 15:37:23.647" status="PASS" endtime="20170918 15:37:23.654"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.655">${output} = </msg>
<status starttime="20170918 15:37:23.655" status="PASS" endtime="20170918 15:37:23.655"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170918 15:37:23.656">${loc_quiet} = 1</msg>
<status starttime="20170918 15:37:23.655" status="PASS" endtime="20170918 15:37:23.656"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170918 15:37:23.656" status="PASS" endtime="20170918 15:37:23.716"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:23.723">${rc} = 0</msg>
<msg level="INFO" timestamp="20170918 15:37:23.724">${output} = sh: 1: None: not found
</msg>
<status starttime="20170918 15:37:23.656" status="PASS" endtime="20170918 15:37:23.724"></status>
</kw>
<msg level="INFO" timestamp="20170918 15:37:23.726">${sol_log} = sh: 1: None: not found
</msg>
<status starttime="20170918 15:37:23.605" status="PASS" endtime="20170918 15:37:23.726"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170918 15:37:23.736">sh: 1: None: not found
</msg>
<status starttime="20170918 15:37:23.735" status="PASS" endtime="20170918 15:37:23.736"></status>
</kw>
<status starttime="20170918 15:37:06.552" status="PASS" endtime="20170918 15:37:23.737"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170918 15:37:05.388" critical="yes" status="FAIL" endtime="20170918 15:37:23.737">Setup failed:
'' should not be empty.</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170918 15:37:05.354" status="FAIL" endtime="20170918 15:37:23.741"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170918 15:36:58.301" status="FAIL" endtime="20170918 15:37:23.750"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat name="Tests" pass="1" fail="1" id="s1">Tests</stat>
<stat name="Security" pass="1" fail="0" id="s1-s1">Tests.Security</stat>
<stat name="Test Ssl" pass="1" fail="0" id="s1-s1-s1">Tests.Security.Test Ssl</stat>
<stat name="Test Basic Poweron" pass="0" fail="1" id="s1-s2">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
