<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170928 21:00:01.714" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:00:02.858" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:00:02.859" starttime="20170928 21:00:02.858"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:00:02.860" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:00:02.860" starttime="20170928 21:00:02.859"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:00:02.861" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:00:02.861" starttime="20170928 21:00:02.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:00:02.861" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:00:02.861" starttime="20170928 21:00:02.861"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:00:03.158" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:00:03.159" starttime="20170928 21:00:02.862"></status>
</kw>
<msg timestamp="20170928 21:00:03.159" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:03.159" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:03.159" starttime="20170928 21:00:02.862"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:00:03.160" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:03.160" starttime="20170928 21:00:03.159"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:03.160" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:03.160" starttime="20170928 21:00:03.160"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:03.160" starttime="20170928 21:00:02.857"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:03.161" starttime="20170928 21:00:02.857"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:03.161" starttime="20170928 21:00:02.856"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:00:03.161" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170928 21:00:03.161" starttime="20170928 21:00:03.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:03.162" starttime="20170928 21:00:03.162"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:00:03.245" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170928 21:00:03.246" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:03.246" starttime="20170928 21:00:03.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:03.246" starttime="20170928 21:00:03.246"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:00:03.247" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:00:03.247" starttime="20170928 21:00:03.247"></status>
</kw>
<msg timestamp="20170928 21:00:03.247" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:03.247" starttime="20170928 21:00:02.855"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170928 21:00:03.248" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 21:00:03.248" starttime="20170928 21:00:03.247"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:03.248" starttime="20170928 21:00:02.855"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:03.248" starttime="20170928 21:00:02.854"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20170928 21:00:03.253" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170928 21:00:03.253" starttime="20170928 21:00:03.253"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20170928 21:00:03.287" level="INFO">${image_version} = v1.99.10-63-g5b52475</msg>
<status status="PASS" endtime="20170928 21:00:03.287" starttime="20170928 21:00:03.254"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170928 21:00:03.288" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170928 21:00:13.862" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20170928 21:00:13.862" starttime="20170928 21:00:03.288"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:00:13.865" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:00:13.866" starttime="20170928 21:00:13.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:00:13.866" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:00:13.866" starttime="20170928 21:00:13.866"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:00:13.867" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:00:13.867" starttime="20170928 21:00:13.867"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:00:13.868" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:00:13.868" starttime="20170928 21:00:13.867"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:00:14.089" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:00:14.089" starttime="20170928 21:00:13.869"></status>
</kw>
<msg timestamp="20170928 21:00:14.089" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:14.089" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:14.089" starttime="20170928 21:00:13.868"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:00:14.090" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:14.090" starttime="20170928 21:00:14.090"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:14.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:14.091" starttime="20170928 21:00:14.090"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:14.091" starttime="20170928 21:00:13.864"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:14.091" starttime="20170928 21:00:13.864"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:14.091" starttime="20170928 21:00:13.863"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:00:14.092" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170928 21:00:14.092" starttime="20170928 21:00:14.091"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:00:14.092" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170928 21:00:14.092" starttime="20170928 21:00:14.092"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:14.093" starttime="20170928 21:00:14.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:14.094" starttime="20170928 21:00:14.093"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:00:24.110" level="FAIL">SSLError: ('The write operation timed out',)</msg>
<status status="FAIL" endtime="20170928 21:00:24.110" starttime="20170928 21:00:14.094"></status>
</kw>
<status status="FAIL" endtime="20170928 21:00:24.111" starttime="20170928 21:00:13.862"></status>
</kw>
<status status="FAIL" endtime="20170928 21:00:24.111" starttime="20170928 21:00:03.248"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170928 21:00:24.134" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170928 21:00:24.134" starttime="20170928 21:00:24.133"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170928 21:00:24.152" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170928 21:00:27.172" level="INFO">${RC} = 0</msg>
<msg timestamp="20170928 21:00:27.172" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=3.15 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=13.1 ms
64 bytes from 9.3.86.161: icmp_seq=...</msg>
<status status="PASS" endtime="20170928 21:00:27.172" starttime="20170928 21:00:24.138"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170928 21:00:27.189" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=3.15 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=13.1 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.709 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=19.6 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.709/9.165/19.632/7.635 ms</msg>
<status status="PASS" endtime="20170928 21:00:27.189" starttime="20170928 21:00:27.186"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:27.191" starttime="20170928 21:00:27.190"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:27.191" starttime="20170928 21:00:24.133"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170928 21:00:27.224" level="INFO">${cur_time} = 2017-09-28 21:00:27:223205</msg>
<status status="PASS" endtime="20170928 21:00:27.224" starttime="20170928 21:00:27.223"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170928 21:00:27.224" level="INFO">${cur_time} = 20170928210027223205</msg>
<status status="PASS" endtime="20170928 21:00:27.224" starttime="20170928 21:00:27.224"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:27.225" starttime="20170928 21:00:27.222"></status>
</kw>
<msg timestamp="20170928 21:00:27.233" level="INFO">${FFDC_TIME} = 20170928210027223205</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170928 21:00:27.234" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20170928 21:00:27.234" starttime="20170928 21:00:27.234"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170928 21:00:27.235" level="INFO">${suite_name} = 20170928210027223205_BmcCodeUpdate</msg>
<status status="PASS" endtime="20170928 21:00:27.235" starttime="20170928 21:00:27.235"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170928 21:00:27.236" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170928 21:00:27.236" starttime="20170928 21:00:27.235"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170928 21:00:27.236" level="INFO">${test_name} = 20170928210027223205_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170928 21:00:27.236" starttime="20170928 21:00:27.236"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:27.237" starttime="20170928 21:00:27.233"></status>
</kw>
<msg timestamp="20170928 21:00:27.242" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/</msg>
<msg timestamp="20170928 21:00:27.247" level="INFO">${FFDC_PREFIX} = 20170928210027223205_</msg>
<msg timestamp="20170928 21:00:27.269" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20170928 21:00:27.270" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:27.270" starttime="20170928 21:00:27.269"></status>
</kw>
<msg timestamp="20170928 21:00:27.277" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:27.290" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:27.290" starttime="20170928 21:00:27.289"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:27.290" starttime="20170928 21:00:27.289"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:27.292" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:27.292" starttime="20170928 21:00:27.291"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:27.292" starttime="20170928 21:00:27.291"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:27.293" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:27.293" starttime="20170928 21:00:27.293"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:27.293" starttime="20170928 21:00:27.292"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:27.294" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:27.294" starttime="20170928 21:00:27.294"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:27.295" starttime="20170928 21:00:27.293"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:27.296" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:27.296" starttime="20170928 21:00:27.295"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:27.296" starttime="20170928 21:00:27.295"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:27.297" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:27.297" starttime="20170928 21:00:27.297"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:27.298" starttime="20170928 21:00:27.296"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:27.299" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:27.299" starttime="20170928 21:00:27.298"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:27.299" starttime="20170928 21:00:27.298"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:27.300" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:27.301" starttime="20170928 21:00:27.300"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:27.301" starttime="20170928 21:00:27.299"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:27.302" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:27.302" starttime="20170928 21:00:27.301"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:27.302" starttime="20170928 21:00:27.301"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:27.304" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:27.304" starttime="20170928 21:00:27.303"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:27.304" starttime="20170928 21:00:27.303"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:27.305" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:27.305" starttime="20170928 21:00:27.305"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:27.305" starttime="20170928 21:00:27.304"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:27.306" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:27.306" starttime="20170928 21:00:27.306"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:27.306" starttime="20170928 21:00:27.305"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:27.308" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:27.308" starttime="20170928 21:00:27.307"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:27.308" starttime="20170928 21:00:27.307"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170928 21:00:27.336" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:00:27.336" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170928 21:00:28.267" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170928 21:00:28.267" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170928 21:00:28.384" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170928 21:00:28.397" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170928 21:00:28.397" level="INFO">${stderr} = </msg>
<msg timestamp="20170928 21:00:28.398" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170928 21:00:28.398" starttime="20170928 21:00:27.310"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170928 21:00:28.398" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170928 21:00:28.398" starttime="20170928 21:00:28.398"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170928 21:00:28.399" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170928 21:00:28.399" starttime="20170928 21:00:28.399"></status>
</kw>
<msg timestamp="20170928 21:00:28.399" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170928 21:00:28.399" starttime="20170928 21:00:27.309"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:28.401" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:28.401" starttime="20170928 21:00:28.400"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.401" starttime="20170928 21:00:28.400"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.401" starttime="20170928 21:00:27.302"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:28.402" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:28.403" starttime="20170928 21:00:28.402"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.403" starttime="20170928 21:00:28.401"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 21:00:28.403" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170928 21:00:28.403" starttime="20170928 21:00:28.403"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:28.405" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:28.405" starttime="20170928 21:00:28.404"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.405" starttime="20170928 21:00:28.404"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:28.406" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:28.406" starttime="20170928 21:00:28.406"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.406" starttime="20170928 21:00:28.405"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.406" starttime="20170928 21:00:28.403"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:28.408" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:28.408" starttime="20170928 21:00:28.407"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.408" starttime="20170928 21:00:28.406"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:28.409" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:28.409" starttime="20170928 21:00:28.409"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.409" starttime="20170928 21:00:28.408"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.409" starttime="20170928 21:00:28.406"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:28.411" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:28.411" starttime="20170928 21:00:28.410"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.411" starttime="20170928 21:00:28.410"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:28.412" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:28.412" starttime="20170928 21:00:28.412"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.413" starttime="20170928 21:00:28.411"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.413" starttime="20170928 21:00:28.409"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.413" starttime="20170928 21:00:28.403"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:28.414" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:28.414" starttime="20170928 21:00:28.414"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.414" starttime="20170928 21:00:28.413"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.414" starttime="20170928 21:00:27.288"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 21:00:28.421" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170928 21:00:28.421" starttime="20170928 21:00:28.421"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170928 21:00:28.423" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170928 21:00:28.423" starttime="20170928 21:00:28.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:28.424" starttime="20170928 21:00:28.424"></status>
</kw>
<msg timestamp="20170928 21:00:28.424" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170928 21:00:28.424" starttime="20170928 21:00:28.423"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:28.426" starttime="20170928 21:00:28.426"></status>
</kw>
<msg timestamp="20170928 21:00:28.426" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:28.426" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 21:00:28.427" starttime="20170928 21:00:28.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:28.427" starttime="20170928 21:00:28.427"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 21:00:28.447" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170928 21:00:28.447" starttime="20170928 21:00:28.447"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 21:00:28.449" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170928 21:00:28.449" starttime="20170928 21:00:28.449"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170928 21:00:28.455" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170928 21:00:28.455" starttime="20170928 21:00:28.449"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:28.460" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:28.460" starttime="20170928 21:00:28.459"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.460" starttime="20170928 21:00:28.459"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:28.461" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:28.462" starttime="20170928 21:00:28.461"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.462" starttime="20170928 21:00:28.460"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:28.463" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:28.463" starttime="20170928 21:00:28.462"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.463" starttime="20170928 21:00:28.462"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:28.465" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:28.465" starttime="20170928 21:00:28.464"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.465" starttime="20170928 21:00:28.463"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.466" starttime="20170928 21:00:28.458"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:28.466" starttime="20170928 21:00:28.458"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:00:28.466" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:00:28.467" starttime="20170928 21:00:28.466"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:00:28.530" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:00:28.530" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170928 21:00:29.939" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:00:29.939" starttime="20170928 21:00:28.493"></status>
</kw>
<msg timestamp="20170928 21:00:29.939" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:29.939" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170928 21:00:29.939" starttime="20170928 21:00:28.467"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:00:29.940" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170928 21:00:29.940" starttime="20170928 21:00:29.940"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:00:29.941" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:00:29.941" starttime="20170928 21:00:29.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:29.948" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:29.949" starttime="20170928 21:00:29.948"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:29.949" starttime="20170928 21:00:29.947"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:29.949" starttime="20170928 21:00:29.941"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:29.949" starttime="20170928 21:00:28.456"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:29.949" starttime="20170928 21:00:28.455"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:29.949" starttime="20170928 21:00:28.455"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:29.949" starttime="20170928 21:00:28.448"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:29.949" starttime="20170928 21:00:28.448"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 21:00:29.950" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170928 21:00:29.950" starttime="20170928 21:00:29.950"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170928 21:00:29.951" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170928 21:00:29.952" starttime="20170928 21:00:29.951"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:29.955" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:29.955" starttime="20170928 21:00:29.955"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:29.955" starttime="20170928 21:00:29.954"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:29.957" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:29.957" starttime="20170928 21:00:29.956"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:29.957" starttime="20170928 21:00:29.956"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:29.958" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:29.958" starttime="20170928 21:00:29.958"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:29.958" starttime="20170928 21:00:29.957"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:29.959" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:29.960" starttime="20170928 21:00:29.959"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:29.960" starttime="20170928 21:00:29.958"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:29.960" starttime="20170928 21:00:29.954"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:29.960" starttime="20170928 21:00:29.953"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:00:29.961" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:00:29.961" starttime="20170928 21:00:29.960"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:00:30.021" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:00:30.021" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170928 21:00:30.161" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:00:30.161" starttime="20170928 21:00:29.986"></status>
</kw>
<msg timestamp="20170928 21:00:30.161" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:30.161" level="INFO">${ret_values} = (u'20170928200242', u'', 0)</msg>
<status status="PASS" endtime="20170928 21:00:30.161" starttime="20170928 21:00:29.961"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:00:30.162" level="INFO">${stdout} = 20170928200242</msg>
<status status="PASS" endtime="20170928 21:00:30.162" starttime="20170928 21:00:30.161"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:00:30.162" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:00:30.162" starttime="20170928 21:00:30.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.170" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.170" starttime="20170928 21:00:30.170"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.170" starttime="20170928 21:00:30.169"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.170" starttime="20170928 21:00:30.163"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.170" starttime="20170928 21:00:29.952"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.171" starttime="20170928 21:00:29.952"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.174" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.174" starttime="20170928 21:00:30.173"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.174" starttime="20170928 21:00:30.173"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.175" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.175" starttime="20170928 21:00:30.175"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.175" starttime="20170928 21:00:30.174"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.176" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.176" starttime="20170928 21:00:30.176"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.177" starttime="20170928 21:00:30.175"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.178" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.178" starttime="20170928 21:00:30.177"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.178" starttime="20170928 21:00:30.177"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.178" starttime="20170928 21:00:30.172"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.178" starttime="20170928 21:00:30.172"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:00:30.179" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:00:30.179" starttime="20170928 21:00:30.178"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:00:30.242" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:00:30.242" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170928 21:00:30.370" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:00:30.370" starttime="20170928 21:00:30.205"></status>
</kw>
<msg timestamp="20170928 21:00:30.371" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:30.371" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-62"\nVERSION_ID="v1.99.10-62-g5b0adc7"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170928 21:00:30.371" starttime="20170928 21:00:30.179"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:00:30.371" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-62"
VERSION_ID="v1.99.10-62-g5b0adc7"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170928 21:00:30.372" starttime="20170928 21:00:30.371"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:00:30.372" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:00:30.372" starttime="20170928 21:00:30.372"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.380" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.380" starttime="20170928 21:00:30.379"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.380" starttime="20170928 21:00:30.379"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.380" starttime="20170928 21:00:30.373"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.380" starttime="20170928 21:00:30.171"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.380" starttime="20170928 21:00:30.171"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.380" starttime="20170928 21:00:29.952"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.380" starttime="20170928 21:00:29.949"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.380" starttime="20170928 21:00:29.949"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 21:00:30.381" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170928 21:00:30.381" starttime="20170928 21:00:30.381"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.382" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170928 21:00:30.382" starttime="20170928 21:00:30.382"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.385" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.385" starttime="20170928 21:00:30.385"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.386" starttime="20170928 21:00:30.384"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.387" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.387" starttime="20170928 21:00:30.387"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.387" starttime="20170928 21:00:30.386"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.388" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.388" starttime="20170928 21:00:30.388"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.388" starttime="20170928 21:00:30.387"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.390" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.390" starttime="20170928 21:00:30.389"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.390" starttime="20170928 21:00:30.389"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.390" starttime="20170928 21:00:30.384"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.390" starttime="20170928 21:00:30.384"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:00:30.391" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:00:30.391" starttime="20170928 21:00:30.390"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:00:30.449" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:00:30.450" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170928 21:00:30.526" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:00:30.526" starttime="20170928 21:00:30.416"></status>
</kw>
<msg timestamp="20170928 21:00:30.527" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:30.527" level="INFO">${ret_values} = (u' 21:00:44 up 35 min,  load average: 0.33, 0.36, 0.73', u'', 0)</msg>
<status status="PASS" endtime="20170928 21:00:30.527" starttime="20170928 21:00:30.391"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:00:30.527" level="INFO">${stdout} =  21:00:44 up 35 min,  load average: 0.33, 0.36, 0.73</msg>
<status status="PASS" endtime="20170928 21:00:30.527" starttime="20170928 21:00:30.527"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:00:30.528" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:00:30.528" starttime="20170928 21:00:30.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.535" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.536" starttime="20170928 21:00:30.535"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.536" starttime="20170928 21:00:30.534"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.536" starttime="20170928 21:00:30.528"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.536" starttime="20170928 21:00:30.383"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.536" starttime="20170928 21:00:30.382"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.539" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.539" starttime="20170928 21:00:30.539"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.539" starttime="20170928 21:00:30.538"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.540" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.540" starttime="20170928 21:00:30.540"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.541" starttime="20170928 21:00:30.539"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.542" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.542" starttime="20170928 21:00:30.541"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.542" starttime="20170928 21:00:30.541"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.543" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.543" starttime="20170928 21:00:30.543"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.543" starttime="20170928 21:00:30.542"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.543" starttime="20170928 21:00:30.537"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.543" starttime="20170928 21:00:30.537"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:00:30.544" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:00:30.544" starttime="20170928 21:00:30.544"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:00:30.605" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:00:30.606" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170928 21:00:30.697" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:00:30.697" starttime="20170928 21:00:30.570"></status>
</kw>
<msg timestamp="20170928 21:00:30.697" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:30.697" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.3M     14.3M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20170928 21:00:30.697" starttime="20170928 21:00:30.545"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:00:30.698" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.3M     14.3M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20170928 21:00:30.698" starttime="20170928 21:00:30.698"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:00:30.699" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:00:30.699" starttime="20170928 21:00:30.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.706" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.706" starttime="20170928 21:00:30.706"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.706" starttime="20170928 21:00:30.705"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.706" starttime="20170928 21:00:30.699"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.706" starttime="20170928 21:00:30.536"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.706" starttime="20170928 21:00:30.536"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.710" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.710" starttime="20170928 21:00:30.709"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.710" starttime="20170928 21:00:30.709"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.711" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.711" starttime="20170928 21:00:30.711"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.711" starttime="20170928 21:00:30.710"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.712" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.712" starttime="20170928 21:00:30.712"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.713" starttime="20170928 21:00:30.711"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.714" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.714" starttime="20170928 21:00:30.713"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.714" starttime="20170928 21:00:30.713"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.714" starttime="20170928 21:00:30.708"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.714" starttime="20170928 21:00:30.708"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:00:30.715" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:00:30.715" starttime="20170928 21:00:30.714"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:00:30.774" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:00:30.775" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170928 21:00:30.842" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:00:30.842" starttime="20170928 21:00:30.741"></status>
</kw>
<msg timestamp="20170928 21:00:30.842" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:30.842" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170928 21:00:30.842" starttime="20170928 21:00:30.715"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:00:30.843" level="INFO">${stdout} = Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170928 21:00:30.843" starttime="20170928 21:00:30.843"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:00:30.843" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:00:30.844" starttime="20170928 21:00:30.843"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:30.851" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:30.851" starttime="20170928 21:00:30.851"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.852" starttime="20170928 21:00:30.850"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.852" starttime="20170928 21:00:30.844"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.852" starttime="20170928 21:00:30.707"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.852" starttime="20170928 21:00:30.707"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.852" starttime="20170928 21:00:30.382"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.852" starttime="20170928 21:00:30.381"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.852" starttime="20170928 21:00:30.380"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.852" starttime="20170928 21:00:28.447"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.852" starttime="20170928 21:00:28.446"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.852" starttime="20170928 21:00:28.427"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.852" starttime="20170928 21:00:28.425"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:30.852" starttime="20170928 21:00:28.424"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:30.854" starttime="20170928 21:00:30.854"></status>
</kw>
<msg timestamp="20170928 21:00:30.854" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:30.854" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 21:00:30.854" starttime="20170928 21:00:30.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:30.855" starttime="20170928 21:00:30.855"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 21:00:30.875" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170928 21:00:30.875" starttime="20170928 21:00:30.874"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 21:00:30.876" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20170928 21:00:30.876" starttime="20170928 21:00:30.876"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:00:30.877" level="INFO">${logpath} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170928 21:00:30.877" starttime="20170928 21:00:30.876"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:00:30.881" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:00:30.882" starttime="20170928 21:00:30.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:00:30.882" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:00:30.882" starttime="20170928 21:00:30.882"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:00:30.883" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:00:30.883" starttime="20170928 21:00:30.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:00:30.884" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:00:30.884" starttime="20170928 21:00:30.883"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:00:31.133" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:00:31.133" starttime="20170928 21:00:30.885"></status>
</kw>
<msg timestamp="20170928 21:00:31.133" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:31.133" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:31.133" starttime="20170928 21:00:30.884"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:00:31.134" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:31.134" starttime="20170928 21:00:31.134"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:31.135" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:31.135" starttime="20170928 21:00:31.135"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:31.135" starttime="20170928 21:00:30.879"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:31.135" starttime="20170928 21:00:30.879"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:31.135" starttime="20170928 21:00:30.878"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:00:31.136" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170928 21:00:31.136" starttime="20170928 21:00:31.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:31.137" starttime="20170928 21:00:31.136"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:00:31.733" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 21:00:31.733" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:31.733" starttime="20170928 21:00:31.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:31.733" starttime="20170928 21:00:31.733"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:00:31.734" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:00:31.734" starttime="20170928 21:00:31.734"></status>
</kw>
<msg timestamp="20170928 21:00:31.734" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:31.734" starttime="20170928 21:00:30.877"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:31.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:31.735" starttime="20170928 21:00:31.735"></status>
</kw>
<msg timestamp="20170928 21:00:31.736" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 21:00:31.736" starttime="20170928 21:00:31.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:31.736" starttime="20170928 21:00:31.736"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 21:00:31.738" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 4000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 26580
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 209000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 312
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 21:00:31.738" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 21:00:31.738" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170928 21:00:31.738" starttime="20170928 21:00:31.736"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:31.740" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:31.740" starttime="20170928 21:00:31.739"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:31.740" starttime="20170928 21:00:31.738"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:31.740" starttime="20170928 21:00:30.876"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:00:31.741" level="INFO">${logpath} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_OCC_state.txt</msg>
<status status="PASS" endtime="20170928 21:00:31.741" starttime="20170928 21:00:31.740"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:00:31.745" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:00:31.746" starttime="20170928 21:00:31.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:00:31.746" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:00:31.746" starttime="20170928 21:00:31.746"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:00:31.747" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:00:31.748" starttime="20170928 21:00:31.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:00:31.749" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:00:31.749" starttime="20170928 21:00:31.748"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:00:31.992" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:00:31.992" starttime="20170928 21:00:31.750"></status>
</kw>
<msg timestamp="20170928 21:00:31.992" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:31.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:31.992" starttime="20170928 21:00:31.749"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:00:31.993" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:31.993" starttime="20170928 21:00:31.993"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:31.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:31.994" starttime="20170928 21:00:31.994"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:31.994" starttime="20170928 21:00:31.744"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:31.994" starttime="20170928 21:00:31.743"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:31.994" starttime="20170928 21:00:31.742"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:00:31.995" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20170928 21:00:31.995" starttime="20170928 21:00:31.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:31.996" starttime="20170928 21:00:31.995"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:00:32.153" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 21:00:32.153" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:32.153" starttime="20170928 21:00:31.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:32.154" starttime="20170928 21:00:32.153"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:00:32.154" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:00:32.154" starttime="20170928 21:00:32.154"></status>
</kw>
<msg timestamp="20170928 21:00:32.154" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:32.154" starttime="20170928 21:00:31.741"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:32.155" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:32.155" starttime="20170928 21:00:32.155"></status>
</kw>
<msg timestamp="20170928 21:00:32.156" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 21:00:32.156" starttime="20170928 21:00:32.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:32.156" starttime="20170928 21:00:32.156"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 21:00:32.157" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 21:00:32.157" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 21:00:32.157" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" endtime="20170928 21:00:32.157" starttime="20170928 21:00:32.157"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:32.159" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_OCC_state.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:32.159" starttime="20170928 21:00:32.158"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:32.159" starttime="20170928 21:00:32.157"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:32.159" starttime="20170928 21:00:31.740"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:00:32.160" level="INFO">${logpath} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170928 21:00:32.160" starttime="20170928 21:00:32.159"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:00:32.162" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:00:32.163" starttime="20170928 21:00:32.162"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:00:32.163" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:00:32.163" starttime="20170928 21:00:32.163"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:00:32.164" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:00:32.164" starttime="20170928 21:00:32.164"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:00:32.165" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:00:32.165" starttime="20170928 21:00:32.164"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:00:32.433" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:00:32.433" starttime="20170928 21:00:32.166"></status>
</kw>
<msg timestamp="20170928 21:00:32.434" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:32.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:32.434" starttime="20170928 21:00:32.165"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:00:32.434" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:32.434" starttime="20170928 21:00:32.434"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:32.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:32.435" starttime="20170928 21:00:32.435"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:32.435" starttime="20170928 21:00:32.161"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:32.435" starttime="20170928 21:00:32.161"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:32.436" starttime="20170928 21:00:32.160"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:00:32.436" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170928 21:00:32.436" starttime="20170928 21:00:32.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:32.437" starttime="20170928 21:00:32.437"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:00:32.774" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 21:00:32.774" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:32.774" starttime="20170928 21:00:32.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:32.775" starttime="20170928 21:00:32.775"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:00:32.775" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:00:32.775" starttime="20170928 21:00:32.775"></status>
</kw>
<msg timestamp="20170928 21:00:32.776" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:32.776" starttime="20170928 21:00:32.160"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:32.777" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:32.777" starttime="20170928 21:00:32.776"></status>
</kw>
<msg timestamp="20170928 21:00:32.777" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 21:00:32.777" starttime="20170928 21:00:32.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:32.778" starttime="20170928 21:00:32.777"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 21:00:32.778" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 21:00:32.778" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 21:00:32.779" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170928 21:00:32.779" starttime="20170928 21:00:32.778"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:32.780" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:32.780" starttime="20170928 21:00:32.780"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:32.780" starttime="20170928 21:00:32.779"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:32.780" starttime="20170928 21:00:32.159"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:00:32.781" level="INFO">${logpath} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_led.txt</msg>
<status status="PASS" endtime="20170928 21:00:32.781" starttime="20170928 21:00:32.781"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:00:32.784" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:00:32.784" starttime="20170928 21:00:32.784"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:00:32.785" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:00:32.785" starttime="20170928 21:00:32.785"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:00:32.786" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:00:32.786" starttime="20170928 21:00:32.785"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:00:32.786" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:00:32.786" starttime="20170928 21:00:32.786"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:00:32.986" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:00:32.986" starttime="20170928 21:00:32.787"></status>
</kw>
<msg timestamp="20170928 21:00:32.987" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:32.987" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:32.987" starttime="20170928 21:00:32.787"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:00:32.987" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:32.987" starttime="20170928 21:00:32.987"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:32.988" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:32.988" starttime="20170928 21:00:32.988"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:32.988" starttime="20170928 21:00:32.783"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:32.988" starttime="20170928 21:00:32.783"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:32.988" starttime="20170928 21:00:32.782"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:00:32.989" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20170928 21:00:32.989" starttime="20170928 21:00:32.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:32.990" starttime="20170928 21:00:32.989"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:00:34.611" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 21:00:34.611" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:34.611" starttime="20170928 21:00:32.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:34.612" starttime="20170928 21:00:34.612"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:00:34.613" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:00:34.613" starttime="20170928 21:00:34.613"></status>
</kw>
<msg timestamp="20170928 21:00:34.613" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:34.613" starttime="20170928 21:00:32.781"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:34.614" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:34.614" starttime="20170928 21:00:34.614"></status>
</kw>
<msg timestamp="20170928 21:00:34.614" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 21:00:34.614" starttime="20170928 21:00:34.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:34.615" starttime="20170928 21:00:34.615"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 21:00:34.617" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 21:00:34.617" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 21:00:34.618" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20170928 21:00:34.618" starttime="20170928 21:00:34.615"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:34.619" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_led.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:34.619" starttime="20170928 21:00:34.619"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:34.619" starttime="20170928 21:00:34.618"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:34.619" starttime="20170928 21:00:32.780"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:00:34.620" level="INFO">${logpath} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20170928 21:00:34.620" starttime="20170928 21:00:34.620"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:00:34.623" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:00:34.623" starttime="20170928 21:00:34.623"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:00:34.624" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:00:34.624" starttime="20170928 21:00:34.624"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:00:34.625" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:00:34.625" starttime="20170928 21:00:34.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:00:34.625" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:00:34.626" starttime="20170928 21:00:34.625"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:00:34.863" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:00:34.863" starttime="20170928 21:00:34.626"></status>
</kw>
<msg timestamp="20170928 21:00:34.863" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:34.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:34.863" starttime="20170928 21:00:34.626"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:00:34.864" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:34.864" starttime="20170928 21:00:34.863"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:34.864" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:34.865" starttime="20170928 21:00:34.864"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:34.865" starttime="20170928 21:00:34.622"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:34.865" starttime="20170928 21:00:34.622"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:34.865" starttime="20170928 21:00:34.621"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:00:34.865" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170928 21:00:34.865" starttime="20170928 21:00:34.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:34.866" starttime="20170928 21:00:34.866"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:00:35.279" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 21:00:35.279" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:35.279" starttime="20170928 21:00:34.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:35.280" starttime="20170928 21:00:35.280"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:00:35.281" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:00:35.281" starttime="20170928 21:00:35.280"></status>
</kw>
<msg timestamp="20170928 21:00:35.281" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:35.281" starttime="20170928 21:00:34.620"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:35.282" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:35.282" starttime="20170928 21:00:35.282"></status>
</kw>
<msg timestamp="20170928 21:00:35.282" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 21:00:35.282" starttime="20170928 21:00:35.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:35.283" starttime="20170928 21:00:35.282"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 21:00:35.284" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/87ef4844": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-62-g02e574d", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/87ef4844/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/87ef4844/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/a4417d5c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-62-g5b0adc7", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/a4417d5c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/a4417d5c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/87ef4844", 
        "/xyz/openbmc_project/software/a4417d5c", 
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/a4417d5c"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 21:00:35.284" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 21:00:35.285" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/7a9ef57c": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-57a...</msg>
<status status="PASS" endtime="20170928 21:00:35.285" starttime="20170928 21:00:35.283"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:35.286" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:35.286" starttime="20170928 21:00:35.286"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:35.286" starttime="20170928 21:00:35.285"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:35.286" starttime="20170928 21:00:34.619"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:00:35.287" level="INFO">${logpath} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_elog.txt</msg>
<status status="PASS" endtime="20170928 21:00:35.287" starttime="20170928 21:00:35.287"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:00:35.290" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:00:35.291" starttime="20170928 21:00:35.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:00:35.292" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:00:35.292" starttime="20170928 21:00:35.291"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:00:35.292" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:00:35.292" starttime="20170928 21:00:35.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:00:35.293" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:00:35.293" starttime="20170928 21:00:35.293"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:00:35.500" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:00:35.500" starttime="20170928 21:00:35.294"></status>
</kw>
<msg timestamp="20170928 21:00:35.500" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:35.500" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:35.500" starttime="20170928 21:00:35.293"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:00:35.501" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:35.501" starttime="20170928 21:00:35.501"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:35.502" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:35.502" starttime="20170928 21:00:35.501"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:35.502" starttime="20170928 21:00:35.290"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:35.502" starttime="20170928 21:00:35.289"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:35.502" starttime="20170928 21:00:35.288"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:00:35.503" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170928 21:00:35.503" starttime="20170928 21:00:35.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:35.503" starttime="20170928 21:00:35.503"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:00:35.561" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 21:00:35.562" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:35.562" starttime="20170928 21:00:35.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:35.562" starttime="20170928 21:00:35.562"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:00:35.563" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:00:35.563" starttime="20170928 21:00:35.563"></status>
</kw>
<msg timestamp="20170928 21:00:35.563" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:35.563" starttime="20170928 21:00:35.287"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:35.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170928 21:00:35.564" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170928 21:00:35.565" starttime="20170928 21:00:35.564"></status>
</kw>
<msg timestamp="20170928 21:00:35.565" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170928 21:00:35.565" starttime="20170928 21:00:35.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170928 21:00:35.566" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170928 21:00:35.566" starttime="20170928 21:00:35.565"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:35.566" starttime="20170928 21:00:35.565"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:35.566" starttime="20170928 21:00:35.286"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:00:35.567" level="INFO">${logpath} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170928 21:00:35.567" starttime="20170928 21:00:35.566"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:00:35.570" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:00:35.572" starttime="20170928 21:00:35.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:00:35.572" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:00:35.573" starttime="20170928 21:00:35.572"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:00:35.573" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:00:35.573" starttime="20170928 21:00:35.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:00:35.574" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:00:35.574" starttime="20170928 21:00:35.573"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:00:35.867" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:00:35.867" starttime="20170928 21:00:35.575"></status>
</kw>
<msg timestamp="20170928 21:00:35.867" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:35.867" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:35.867" starttime="20170928 21:00:35.574"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:00:35.868" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:35.868" starttime="20170928 21:00:35.867"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:35.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:35.869" starttime="20170928 21:00:35.868"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:35.869" starttime="20170928 21:00:35.569"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:35.869" starttime="20170928 21:00:35.568"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:35.869" starttime="20170928 21:00:35.568"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:00:35.869" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170928 21:00:35.870" starttime="20170928 21:00:35.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:35.870" starttime="20170928 21:00:35.870"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:00:38.104" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 21:00:38.104" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:38.104" starttime="20170928 21:00:35.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:38.105" starttime="20170928 21:00:38.104"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:00:38.105" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:00:38.105" starttime="20170928 21:00:38.105"></status>
</kw>
<msg timestamp="20170928 21:00:38.106" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:38.106" starttime="20170928 21:00:35.567"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:38.107" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:38.107" starttime="20170928 21:00:38.106"></status>
</kw>
<msg timestamp="20170928 21:00:38.107" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 21:00:38.107" starttime="20170928 21:00:38.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:38.108" starttime="20170928 21:00:38.107"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 21:00:38.111" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/87ef4844", 
        "/xyz/openbmc_project/software/a4417d5c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 21:00:38.111" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 21:00:38.111" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20170928 21:00:38.111" starttime="20170928 21:00:38.108"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:38.113" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:38.113" starttime="20170928 21:00:38.113"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:38.113" starttime="20170928 21:00:38.112"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:38.113" starttime="20170928 21:00:35.566"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:38.113" starttime="20170928 21:00:30.876"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:38.113" starttime="20170928 21:00:30.875"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:38.113" starttime="20170928 21:00:30.875"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:38.114" starttime="20170928 21:00:30.875"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:38.114" starttime="20170928 21:00:30.873"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:38.114" starttime="20170928 21:00:30.855"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:38.114" starttime="20170928 21:00:30.853"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:38.114" starttime="20170928 21:00:30.852"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:38.116" starttime="20170928 21:00:38.115"></status>
</kw>
<msg timestamp="20170928 21:00:38.116" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:38.116" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 21:00:38.116" starttime="20170928 21:00:38.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:38.117" starttime="20170928 21:00:38.116"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:38.138" starttime="20170928 21:00:38.135"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170928 21:00:38.141" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170928 21:00:38.141" starttime="20170928 21:00:38.139"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:38.141" starttime="20170928 21:00:38.135"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:38.141" starttime="20170928 21:00:38.117"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:38.141" starttime="20170928 21:00:38.114"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:38.141" starttime="20170928 21:00:38.114"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:38.143" starttime="20170928 21:00:38.143"></status>
</kw>
<msg timestamp="20170928 21:00:38.143" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:38.143" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 21:00:38.143" starttime="20170928 21:00:38.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:38.144" starttime="20170928 21:00:38.144"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170928 21:00:38.194" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:00:38.194" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170928 21:00:38.242" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170928 21:00:38.255" level="INFO">${core_files} = None</msg>
<msg timestamp="20170928 21:00:38.255" level="INFO">${stderr} = None</msg>
<msg timestamp="20170928 21:00:38.255" level="INFO">${rc} = None</msg>
<msg timestamp="20170928 21:00:38.255" level="FAIL">#(UTC) 2017/09/28 21:00:38.253912 -    0.060278 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170928 21:00:38.255" starttime="20170928 21:00:38.164"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170928 21:00:38.256" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170928 21:00:38.256" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170928 21:00:38.256" starttime="20170928 21:00:38.256"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:38.279" starttime="20170928 21:00:38.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:39.047" starttime="20170928 21:00:38.280"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:39.047" starttime="20170928 21:00:38.279"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:39.047" starttime="20170928 21:00:38.268"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:39.047" starttime="20170928 21:00:38.257"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170928 21:00:39.047" starttime="20170928 21:00:39.047"></status>
</kw>
<status status="FAIL" endtime="20170928 21:00:39.048" starttime="20170928 21:00:38.163"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:39.048" starttime="20170928 21:00:38.144"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:39.048" starttime="20170928 21:00:38.141"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:39.048" starttime="20170928 21:00:38.141"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:39.050" starttime="20170928 21:00:39.050"></status>
</kw>
<msg timestamp="20170928 21:00:39.050" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:39.050" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 21:00:39.050" starttime="20170928 21:00:39.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:39.051" starttime="20170928 21:00:39.051"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 21:00:39.071" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170928 21:00:39.071" starttime="20170928 21:00:39.070"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 21:00:39.073" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20170928 21:00:39.074" starttime="20170928 21:00:39.072"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:00:39.074" level="INFO">${logpath} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170928 21:00:39.075" starttime="20170928 21:00:39.074"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:39.076" starttime="20170928 21:00:39.076"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:00:39.077" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:00:39.077" starttime="20170928 21:00:39.076"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:00:39.140" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:00:39.140" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170928 21:00:39.214" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:00:39.214" starttime="20170928 21:00:39.105"></status>
</kw>
<msg timestamp="20170928 21:00:39.214" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:39.214" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170928 21:00:39.215" starttime="20170928 21:00:39.077"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:00:39.215" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170928 21:00:39.215" starttime="20170928 21:00:39.215"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:00:39.216" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:00:39.216" starttime="20170928 21:00:39.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:39.224" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:39.224" starttime="20170928 21:00:39.223"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:39.224" starttime="20170928 21:00:39.222"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:39.224" starttime="20170928 21:00:39.216"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:39.224" starttime="20170928 21:00:39.075"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:39.224" starttime="20170928 21:00:39.074"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:00:39.225" level="INFO">${logpath} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170928 21:00:39.225" starttime="20170928 21:00:39.224"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:39.226" starttime="20170928 21:00:39.226"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:00:39.227" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:00:39.227" starttime="20170928 21:00:39.227"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:00:39.285" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:00:39.286" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170928 21:00:39.749" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:00:39.749" starttime="20170928 21:00:39.252"></status>
</kw>
<msg timestamp="20170928 21:00:39.749" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:39.750" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 28 20:40 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 28 20:40 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170928 21:00:39.750" starttime="20170928 21:00:39.227"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:00:39.751" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 28 20:40 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 28 20:40 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170928 21:00:39.751" starttime="20170928 21:00:39.750"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:00:39.752" level="INFO">${stderr} = ls: /proc/2602/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170928 21:00:39.752" starttime="20170928 21:00:39.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:39.760" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:39.760" starttime="20170928 21:00:39.759"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:39.760" starttime="20170928 21:00:39.758"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:39.760" starttime="20170928 21:00:39.752"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:39.760" starttime="20170928 21:00:39.225"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:39.760" starttime="20170928 21:00:39.224"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:00:39.761" level="INFO">${logpath} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170928 21:00:39.761" starttime="20170928 21:00:39.761"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:39.762" starttime="20170928 21:00:39.762"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:00:39.763" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:00:39.763" starttime="20170928 21:00:39.763"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:00:39.822" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:00:39.823" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170928 21:00:43.012" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:00:43.012" starttime="20170928 21:00:39.787"></status>
</kw>
<msg timestamp="20170928 21:00:43.013" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:43.017" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-09-28 20:25:23 UTC, end at Thu 2017-09-28 21:00:53 UTC. --\nSep 28 20:25:23 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 28 20:25:23 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170928 21:00:43.017" starttime="20170928 21:00:39.763"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:00:43.019" level="INFO">${stdout} = -- Logs begin at Thu 2017-09-28 20:25:23 UTC, end at Thu 2017-09-28 21:00:53 UTC. --
Sep 28 20:25:23 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 28 20:25:23 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170928 21:00:43.019" starttime="20170928 21:00:43.018"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:00:43.020" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:00:43.020" starttime="20170928 21:00:43.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:43.029" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:43.030" starttime="20170928 21:00:43.028"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:43.030" starttime="20170928 21:00:43.026"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:43.030" starttime="20170928 21:00:43.020"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:43.030" starttime="20170928 21:00:39.761"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:43.030" starttime="20170928 21:00:39.760"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:00:43.031" level="INFO">${logpath} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170928 21:00:43.031" starttime="20170928 21:00:43.030"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:43.032" starttime="20170928 21:00:43.032"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:00:43.033" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:00:43.033" starttime="20170928 21:00:43.033"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:00:43.092" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:00:43.093" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170928 21:00:52.285" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:00:52.291" starttime="20170928 21:00:43.058"></status>
</kw>
<msg timestamp="20170928 21:00:52.292" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:52.343" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=2f76639e41444fc0afee467c3e35567b;i=1;b=c7428ed82f494d8ea56d5e8b204c4a77;m=cd4b00;t=55a45b544de01;x=2a2abe35eae45ba9",\n\t"__REALTIME_TIMESTAMP" : "1506630323985921",\n\t"__MONO...</msg>
<status status="PASS" endtime="20170928 21:00:52.343" starttime="20170928 21:00:43.033"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:00:52.356" level="INFO">${stdout} = {
	"__CURSOR" : "s=2f76639e41444fc0afee467c3e35567b;i=1;b=c7428ed82f494d8ea56d5e8b204c4a77;m=cd4b00;t=55a45b544de01;x=2a2abe35eae45ba9",
	"__REALTIME_TIMESTAMP" : "1506630323985921",
	"__MONOTONIC_TIM...</msg>
<status status="PASS" endtime="20170928 21:00:52.356" starttime="20170928 21:00:52.344"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:00:52.357" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:00:52.357" starttime="20170928 21:00:52.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:52.389" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:52.389" starttime="20170928 21:00:52.381"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:52.389" starttime="20170928 21:00:52.367"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:52.389" starttime="20170928 21:00:52.358"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:52.390" starttime="20170928 21:00:43.031"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:52.390" starttime="20170928 21:00:43.030"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:00:52.391" level="INFO">${logpath} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170928 21:00:52.391" starttime="20170928 21:00:52.390"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:52.392" starttime="20170928 21:00:52.392"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:00:52.393" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:00:52.393" starttime="20170928 21:00:52.392"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:00:52.452" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:00:52.452" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170928 21:00:52.578" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:00:52.579" starttime="20170928 21:00:52.418"></status>
</kw>
<msg timestamp="20170928 21:00:52.579" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:52.579" level="INFO">${ret_values} = (u'MemTotal:         432244 kB\nMemFree:          220988 kB\nMemAvailable:     323176 kB\nBuffers:           31708 kB\nCached:            81036 kB\nSwapCached:            0 kB\nActive:           16136...</msg>
<status status="PASS" endtime="20170928 21:00:52.579" starttime="20170928 21:00:52.393"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:00:52.580" level="INFO">${stdout} = MemTotal:         432244 kB
MemFree:          220988 kB
MemAvailable:     323176 kB
Buffers:           31708 kB
Cached:            81036 kB
SwapCached:            0 kB
Active:           161364 kB
Inac...</msg>
<status status="PASS" endtime="20170928 21:00:52.580" starttime="20170928 21:00:52.579"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:00:52.580" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:00:52.580" starttime="20170928 21:00:52.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:52.589" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:52.589" starttime="20170928 21:00:52.588"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:52.589" starttime="20170928 21:00:52.588"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:52.589" starttime="20170928 21:00:52.581"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:52.589" starttime="20170928 21:00:52.391"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:52.589" starttime="20170928 21:00:52.390"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:00:52.590" level="INFO">${logpath} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170928 21:00:52.590" starttime="20170928 21:00:52.590"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:52.592" starttime="20170928 21:00:52.591"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:00:52.592" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:00:52.592" starttime="20170928 21:00:52.592"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:00:52.652" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:00:52.653" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170928 21:00:53.113" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:00:53.113" starttime="20170928 21:00:52.618"></status>
</kw>
<msg timestamp="20170928 21:00:53.113" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:53.114" level="INFO">${ret_values} = (u'Mem: 211256K used, 220988K free, 8944K shrd, 31708K buff, 81036K cached\nCPU:   0% usr  33% sys   0% nic  66% idle   0% io   0% irq   0% sirq\nLoad average: 0.74 0.46 0.76 1/154 2606\n  PID  PPID U...</msg>
<status status="PASS" endtime="20170928 21:00:53.114" starttime="20170928 21:00:52.593"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:00:53.114" level="INFO">${stdout} = Mem: 211256K used, 220988K free, 8944K shrd, 31708K buff, 81036K cached
CPU:   0% usr  33% sys   0% nic  66% idle   0% io   0% irq   0% sirq
Load average: 0.74 0.46 0.76 1/154 2606
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20170928 21:00:53.115" starttime="20170928 21:00:53.114"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:00:53.115" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:00:53.115" starttime="20170928 21:00:53.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:53.123" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:53.123" starttime="20170928 21:00:53.122"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.123" starttime="20170928 21:00:53.121"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.123" starttime="20170928 21:00:53.115"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.123" starttime="20170928 21:00:52.590"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.123" starttime="20170928 21:00:52.589"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 21:00:53.124" level="INFO">${logpath} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170928 21:00:53.124" starttime="20170928 21:00:53.124"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:53.125" starttime="20170928 21:00:53.125"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 21:00:53.126" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170928 21:00:53.126" starttime="20170928 21:00:53.126"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 21:00:53.187" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 21:00:53.188" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170928 21:00:53.305" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 21:00:53.305" starttime="20170928 21:00:53.150"></status>
</kw>
<msg timestamp="20170928 21:00:53.305" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:53.305" level="INFO">${ret_values} = (u'[    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16550A\n[    0.290000] 1e78d000.serial: ttyS1 at MMIO 0x1e78d000 (irq = 24, base_baud = 1500000) is a 1...</msg>
<status status="PASS" endtime="20170928 21:00:53.305" starttime="20170928 21:00:53.127"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 21:00:53.306" level="INFO">${stdout} = [    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16550A
[    0.290000] 1e78d000.serial: ttyS1 at MMIO 0x1e78d000 (irq = 24, base_baud = 1500000) is a 16550...</msg>
<status status="PASS" endtime="20170928 21:00:53.306" starttime="20170928 21:00:53.306"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 21:00:53.307" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 21:00:53.307" starttime="20170928 21:00:53.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 21:00:53.314" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/20170928210027223205_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:53.315" starttime="20170928 21:00:53.314"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.315" starttime="20170928 21:00:53.313"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.315" starttime="20170928 21:00:53.307"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.315" starttime="20170928 21:00:53.124"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.315" starttime="20170928 21:00:53.123"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.315" starttime="20170928 21:00:39.074"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.315" starttime="20170928 21:00:39.071"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.315" starttime="20170928 21:00:39.071"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.315" starttime="20170928 21:00:39.071"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.315" starttime="20170928 21:00:39.069"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.315" starttime="20170928 21:00:39.051"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.315" starttime="20170928 21:00:39.048"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.315" starttime="20170928 21:00:39.048"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:53.317" starttime="20170928 21:00:53.317"></status>
</kw>
<msg timestamp="20170928 21:00:53.318" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:53.318" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 21:00:53.318" starttime="20170928 21:00:53.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:53.318" starttime="20170928 21:00:53.318"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:00:53.340" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:00:53.341" starttime="20170928 21:00:53.339"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:00:53.342" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:00:53.342" starttime="20170928 21:00:53.341"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:00:53.342" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:00:53.342" starttime="20170928 21:00:53.342"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:00:53.343" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:00:53.343" starttime="20170928 21:00:53.343"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:00:53.585" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:00:53.585" starttime="20170928 21:00:53.344"></status>
</kw>
<msg timestamp="20170928 21:00:53.586" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:53.586" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:53.586" starttime="20170928 21:00:53.343"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:00:53.586" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:53.586" starttime="20170928 21:00:53.586"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:53.587" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:53.587" starttime="20170928 21:00:53.587"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.587" starttime="20170928 21:00:53.339"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.588" starttime="20170928 21:00:53.338"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.588" starttime="20170928 21:00:53.337"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:00:53.589" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170928 21:00:53.589" starttime="20170928 21:00:53.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:53.590" starttime="20170928 21:00:53.589"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:00:53.672" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170928 21:00:53.673" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:53.673" starttime="20170928 21:00:53.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:53.673" starttime="20170928 21:00:53.673"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:00:53.674" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:00:53.674" starttime="20170928 21:00:53.674"></status>
</kw>
<msg timestamp="20170928 21:00:53.674" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:53.674" starttime="20170928 21:00:53.336"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:53.675" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170928 21:00:53.676" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170928 21:00:53.676" starttime="20170928 21:00:53.675"></status>
</kw>
<msg timestamp="20170928 21:00:53.676" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170928 21:00:53.676" starttime="20170928 21:00:53.674"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170928 21:00:53.676" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 21:00:53.677" starttime="20170928 21:00:53.676"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.677" starttime="20170928 21:00:53.336"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.677" starttime="20170928 21:00:53.319"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.677" starttime="20170928 21:00:53.316"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.677" starttime="20170928 21:00:53.316"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:53.679" starttime="20170928 21:00:53.679"></status>
</kw>
<msg timestamp="20170928 21:00:53.679" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:53.679" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 21:00:53.679" starttime="20170928 21:00:53.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:53.680" starttime="20170928 21:00:53.679"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170928 21:00:53.699" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 21:00:53.699" starttime="20170928 21:00:53.698"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.699" starttime="20170928 21:00:53.698"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.700" starttime="20170928 21:00:53.680"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.700" starttime="20170928 21:00:53.677"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.700" starttime="20170928 21:00:53.677"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.700" starttime="20170928 21:00:28.424"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.700" starttime="20170928 21:00:28.422"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.701" starttime="20170928 21:00:28.421"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.701" starttime="20170928 21:00:28.421"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170928 21:00:53.709" starttime="20170928 21:00:53.709"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.709" starttime="20170928 21:00:53.701"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.709" starttime="20170928 21:00:28.420"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.709" starttime="20170928 21:00:24.118"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.709" starttime="20170928 21:00:24.117"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170928 21:00:53.711" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170928 21:00:53.711" starttime="20170928 21:00:53.710"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170928 21:00:53.711" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170928210027223205_BmcCodeUpdate/20170928210027223205_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20170928 21:00:53.711" starttime="20170928 21:00:53.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:53.712" starttime="20170928 21:00:53.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:53.713" starttime="20170928 21:00:53.713"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170928 21:00:53.714" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170928 21:00:53.714" starttime="20170928 21:00:53.713"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170928 21:00:53.715" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170928 21:00:53.715" starttime="20170928 21:00:53.714"></status>
</kw>
<msg timestamp="20170928 21:00:53.715" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170928 21:00:53.715" starttime="20170928 21:00:53.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170928 21:00:53.718" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:53.718" starttime="20170928 21:00:53.716"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.718" starttime="20170928 21:00:53.715"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:53.719" starttime="20170928 21:00:53.719"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170928 21:00:53.720" level="INFO">${cur_time} = 2017-09-28 21:00:53:720060</msg>
<status status="PASS" endtime="20170928 21:00:53.720" starttime="20170928 21:00:53.720"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170928 21:00:53.721" level="INFO">${cur_time} = 20170928210053720060</msg>
<status status="PASS" endtime="20170928 21:00:53.721" starttime="20170928 21:00:53.721"></status>
</kw>
<msg timestamp="20170928 21:00:53.721" level="INFO">${cur_time} = 20170928210053720060</msg>
<status status="PASS" endtime="20170928 21:00:53.721" starttime="20170928 21:00:53.719"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170928 21:00:53.722" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 21:00:53.722" starttime="20170928 21:00:53.722"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:53.722" starttime="20170928 21:00:53.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:00:53.728" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:00:53.729" starttime="20170928 21:00:53.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:00:53.729" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:00:53.729" starttime="20170928 21:00:53.729"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:00:53.730" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:00:53.730" starttime="20170928 21:00:53.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:00:53.731" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:00:53.731" starttime="20170928 21:00:53.730"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:00:54.116" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:00:54.116" starttime="20170928 21:00:53.731"></status>
</kw>
<msg timestamp="20170928 21:00:54.116" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:54.116" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:54.116" starttime="20170928 21:00:53.731"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:00:54.117" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:54.117" starttime="20170928 21:00:54.116"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:54.118" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:54.118" starttime="20170928 21:00:54.117"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:54.118" starttime="20170928 21:00:53.727"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:54.118" starttime="20170928 21:00:53.726"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:54.118" starttime="20170928 21:00:53.726"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:00:54.119" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170928 21:00:54.119" starttime="20170928 21:00:54.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:54.119" starttime="20170928 21:00:54.119"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:00:54.204" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170928 21:00:54.205" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:54.205" starttime="20170928 21:00:54.120"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:54.205" starttime="20170928 21:00:54.205"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:00:54.206" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:00:54.206" starttime="20170928 21:00:54.206"></status>
</kw>
<msg timestamp="20170928 21:00:54.206" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:54.206" starttime="20170928 21:00:53.725"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170928 21:00:54.207" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 21:00:54.207" starttime="20170928 21:00:54.206"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:54.207" starttime="20170928 21:00:53.724"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 21:00:54.210" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 21:00:54.211" starttime="20170928 21:00:54.210"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 21:00:54.211" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 21:00:54.211" starttime="20170928 21:00:54.211"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 21:00:54.212" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 21:00:54.212" starttime="20170928 21:00:54.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 21:00:54.213" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 21:00:54.213" starttime="20170928 21:00:54.212"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 21:00:54.635" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 21:00:54.635" starttime="20170928 21:00:54.213"></status>
</kw>
<msg timestamp="20170928 21:00:54.635" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 21:00:54.635" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:54.635" starttime="20170928 21:00:54.213"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 21:00:54.636" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:54.636" starttime="20170928 21:00:54.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 21:00:54.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 21:00:54.637" starttime="20170928 21:00:54.636"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:54.637" starttime="20170928 21:00:54.209"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:54.637" starttime="20170928 21:00:54.209"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:54.637" starttime="20170928 21:00:54.208"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 21:00:54.638" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170928 21:00:54.638" starttime="20170928 21:00:54.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:54.638" starttime="20170928 21:00:54.638"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 21:00:54.700" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170928 21:00:54.701" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:54.701" starttime="20170928 21:00:54.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:54.701" starttime="20170928 21:00:54.701"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 21:00:54.702" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 21:00:54.702" starttime="20170928 21:00:54.702"></status>
</kw>
<msg timestamp="20170928 21:00:54.702" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 21:00:54.702" starttime="20170928 21:00:54.208"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170928 21:00:54.703" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 21:00:54.703" starttime="20170928 21:00:54.702"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:54.703" starttime="20170928 21:00:54.207"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:54.703" starttime="20170928 21:00:53.723"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:54.703" starttime="20170928 21:00:53.723"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:54.703" starttime="20170928 21:00:24.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20170928 21:00:54.704" starttime="20170928 21:00:54.704"></status>
</kw>
<status status="PASS" endtime="20170928 21:00:54.705" starttime="20170928 21:00:24.112"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170928 21:00:54.705" critical="yes" starttime="20170928 21:00:02.854">SSLError: ('The write operation timed out',)</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20170928 21:00:54.706" starttime="20170928 21:00:01.715"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
