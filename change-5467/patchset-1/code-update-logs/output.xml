<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170725 02:32:07.453" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/test_bios_update.robot" id="s1" name="Test Bios Update">
<test id="s1-t1" name="Host BIOS Update">
<kw name="Validate Parameters">
<doc>Validate parameter and file existence.</doc>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=PNOR image path not set</arg>
</arguments>
<msg timestamp="20170725 02:32:08.487" level="INFO">Length is 42</msg>
<status status="PASS" endtime="20170725 02:32:08.487" starttime="20170725 02:32:08.487"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=${PNOR_IMAGE_PATH} File not found</arg>
</arguments>
<msg timestamp="20170725 02:32:08.488" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon_910_golden.pnor"&gt;/home/fspcibld/witherspoon_910_golden.pnor&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170725 02:32:08.488" starttime="20170725 02:32:08.488"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:08.488" starttime="20170725 02:32:08.486"></status>
</kw>
<kw name="Prepare BMC For Update">
<doc>Prepare system for PNOR update.</doc>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power Off</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power Off</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170725 02:32:08.496" level="INFO">${boot_stack} = REST Power Off</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170725 02:32:08.562" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:32:08.563" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170725 02:32:09.375" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170725 02:32:09.375" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170725 02:32:09.464" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170725 02:32:09.475" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170725 02:32:09.477" level="INFO">${stderr} = </msg>
<msg timestamp="20170725 02:32:09.477" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170725 02:32:09.477" starttime="20170725 02:32:08.542"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170725 02:32:09.479" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170725 02:32:09.479" starttime="20170725 02:32:09.478"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170725 02:32:09.479" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170725 02:32:09.479" starttime="20170725 02:32:09.479"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:09.479" starttime="20170725 02:32:08.540"></status>
</kw>
<msg timestamp="20170725 02:32:09.480" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170725 02:32:09.844" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170725 02:32:09.868" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170725 02:32:09.868" starttime="20170725 02:32:09.867"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:32:09.869" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170725 02:32:09.869" starttime="20170725 02:32:09.869"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:32:09.872" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:32:09.873" starttime="20170725 02:32:09.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:32:09.874" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:32:09.874" starttime="20170725 02:32:09.873"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:32:09.874" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:32:09.874" starttime="20170725 02:32:09.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:32:09.875" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:32:09.875" starttime="20170725 02:32:09.875"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:32:10.059" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:32:10.059" starttime="20170725 02:32:09.876"></status>
</kw>
<msg timestamp="20170725 02:32:10.059" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:32:10.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.060" starttime="20170725 02:32:09.875"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:32:10.060" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.060" starttime="20170725 02:32:10.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:10.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.062" starttime="20170725 02:32:10.061"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:10.062" starttime="20170725 02:32:09.871"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:10.062" starttime="20170725 02:32:09.871"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:10.062" starttime="20170725 02:32:09.870"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:32:10.063" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170725 02:32:10.063" starttime="20170725 02:32:10.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:32:10.064" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:32:10.064" starttime="20170725 02:32:10.063"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:10.065" starttime="20170725 02:32:10.064"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 02:32:10.067" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170725 02:32:10.067" starttime="20170725 02:32:10.066"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 02:32:10.068" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170725 02:32:10.069" starttime="20170725 02:32:10.068"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:10.069" starttime="20170725 02:32:10.067"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:10.069" starttime="20170725 02:32:10.065"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:32:10.261" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170725 02:32:10.261" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.261" starttime="20170725 02:32:10.069"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 02:32:10.262" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 02:32:10.262" starttime="20170725 02:32:10.262"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 02:32:10.263" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 02:32:10.263" starttime="20170725 02:32:10.263"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:10.264" starttime="20170725 02:32:10.263"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:10.264" starttime="20170725 02:32:10.261"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:32:10.264" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:32:10.264" starttime="20170725 02:32:10.264"></status>
</kw>
<msg timestamp="20170725 02:32:10.265" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.265" starttime="20170725 02:32:09.869"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:10.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.265" starttime="20170725 02:32:10.265"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170725 02:32:10.266" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:32:10.266" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:32:10.266" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170725 02:32:10.266" starttime="20170725 02:32:10.266"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:10.266" starttime="20170725 02:32:09.868"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:32:10.270" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:32:10.270" starttime="20170725 02:32:10.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:32:10.271" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:32:10.271" starttime="20170725 02:32:10.271"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:32:10.272" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:32:10.272" starttime="20170725 02:32:10.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:32:10.273" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:32:10.273" starttime="20170725 02:32:10.273"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:32:10.451" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:32:10.451" starttime="20170725 02:32:10.274"></status>
</kw>
<msg timestamp="20170725 02:32:10.452" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:32:10.452" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.452" starttime="20170725 02:32:10.274"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:32:10.452" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.452" starttime="20170725 02:32:10.452"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:10.453" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.453" starttime="20170725 02:32:10.453"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:10.453" starttime="20170725 02:32:10.269"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:10.453" starttime="20170725 02:32:10.268"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:10.453" starttime="20170725 02:32:10.268"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:32:10.454" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170725 02:32:10.454" starttime="20170725 02:32:10.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:10.455" starttime="20170725 02:32:10.454"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:32:10.546" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170725 02:32:10.546" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.547" starttime="20170725 02:32:10.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:10.547" starttime="20170725 02:32:10.547"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:32:10.548" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:32:10.548" starttime="20170725 02:32:10.547"></status>
</kw>
<msg timestamp="20170725 02:32:10.548" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.548" starttime="20170725 02:32:10.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:10.549" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.549" starttime="20170725 02:32:10.548"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:32:10.549" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:32:10.549" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:32:10.549" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170725 02:32:10.549" starttime="20170725 02:32:10.549"></status>
</kw>
<msg timestamp="20170725 02:32:10.550" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170725 02:32:10.550" starttime="20170725 02:32:10.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170725 02:32:10.550" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.550" starttime="20170725 02:32:10.550"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:10.550" starttime="20170725 02:32:09.865"></status>
</kw>
<msg timestamp="20170725 02:32:10.614" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170725 02:32:10.636" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170725 02:32:10.641" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170725 02:32:10.641" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:32:10.676" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:32:10.677" starttime="20170725 02:32:10.675"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:32:10.677" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:32:10.677" starttime="20170725 02:32:10.677"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:32:10.678" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:32:10.678" starttime="20170725 02:32:10.678"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:32:10.679" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:32:10.679" starttime="20170725 02:32:10.678"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:32:10.866" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:32:10.867" starttime="20170725 02:32:10.679"></status>
</kw>
<msg timestamp="20170725 02:32:10.867" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:32:10.867" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.867" starttime="20170725 02:32:10.679"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:32:10.868" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.869" starttime="20170725 02:32:10.868"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:10.870" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.870" starttime="20170725 02:32:10.869"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:10.870" starttime="20170725 02:32:10.674"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:10.870" starttime="20170725 02:32:10.673"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:10.870" starttime="20170725 02:32:10.672"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:32:10.871" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:32:10.871" starttime="20170725 02:32:10.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:10.872" starttime="20170725 02:32:10.871"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:32:10.935" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:32:10.936" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.936" starttime="20170725 02:32:10.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:10.936" starttime="20170725 02:32:10.936"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:32:10.937" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:32:10.937" starttime="20170725 02:32:10.937"></status>
</kw>
<msg timestamp="20170725 02:32:10.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.937" starttime="20170725 02:32:10.671"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:10.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:10.938" starttime="20170725 02:32:10.937"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:32:10.938" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:32:10.938" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:32:10.938" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170725 02:32:10.938" starttime="20170725 02:32:10.938"></status>
</kw>
<msg timestamp="20170725 02:32:10.939" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170725 02:32:10.939" starttime="20170725 02:32:10.671"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:10.939" starttime="20170725 02:32:10.669"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:32:10.943" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:32:10.944" starttime="20170725 02:32:10.943"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:32:10.944" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:32:10.944" starttime="20170725 02:32:10.944"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:32:10.945" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:32:10.945" starttime="20170725 02:32:10.945"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:32:10.946" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:32:10.946" starttime="20170725 02:32:10.945"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:32:11.122" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:32:11.122" starttime="20170725 02:32:10.946"></status>
</kw>
<msg timestamp="20170725 02:32:11.122" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:32:11.122" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.123" starttime="20170725 02:32:10.946"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:32:11.123" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.123" starttime="20170725 02:32:11.123"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:11.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.124" starttime="20170725 02:32:11.123"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:11.124" starttime="20170725 02:32:10.942"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:11.124" starttime="20170725 02:32:10.942"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:11.124" starttime="20170725 02:32:10.941"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:32:11.125" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170725 02:32:11.125" starttime="20170725 02:32:11.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:11.126" starttime="20170725 02:32:11.125"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:32:11.190" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170725 02:32:11.190" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.190" starttime="20170725 02:32:11.126"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:11.191" starttime="20170725 02:32:11.190"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:32:11.191" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:32:11.191" starttime="20170725 02:32:11.191"></status>
</kw>
<msg timestamp="20170725 02:32:11.191" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.191" starttime="20170725 02:32:10.941"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:11.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.192" starttime="20170725 02:32:11.192"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:32:11.192" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:32:11.193" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:32:11.193" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170725 02:32:11.193" starttime="20170725 02:32:11.192"></status>
</kw>
<msg timestamp="20170725 02:32:11.193" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170725 02:32:11.193" starttime="20170725 02:32:10.940"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:11.193" starttime="20170725 02:32:10.940"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:32:11.197" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:32:11.198" starttime="20170725 02:32:11.197"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:32:11.198" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:32:11.198" starttime="20170725 02:32:11.198"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:32:11.199" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:32:11.199" starttime="20170725 02:32:11.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:32:11.200" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:32:11.200" starttime="20170725 02:32:11.199"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:32:11.378" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:32:11.378" starttime="20170725 02:32:11.200"></status>
</kw>
<msg timestamp="20170725 02:32:11.378" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:32:11.378" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.378" starttime="20170725 02:32:11.200"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:32:11.379" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.380" starttime="20170725 02:32:11.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:11.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.380" starttime="20170725 02:32:11.380"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:11.380" starttime="20170725 02:32:11.196"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:11.380" starttime="20170725 02:32:11.196"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:11.381" starttime="20170725 02:32:11.195"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:32:11.381" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:32:11.381" starttime="20170725 02:32:11.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:11.382" starttime="20170725 02:32:11.382"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:32:11.447" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:32:11.447" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.447" starttime="20170725 02:32:11.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:11.448" starttime="20170725 02:32:11.447"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:32:11.448" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:32:11.448" starttime="20170725 02:32:11.448"></status>
</kw>
<msg timestamp="20170725 02:32:11.448" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.448" starttime="20170725 02:32:11.195"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:11.449" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.449" starttime="20170725 02:32:11.449"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:32:11.450" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:32:11.450" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:32:11.450" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 02:32:11.450" starttime="20170725 02:32:11.449"></status>
</kw>
<msg timestamp="20170725 02:32:11.450" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 02:32:11.450" starttime="20170725 02:32:11.194"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:11.450" starttime="20170725 02:32:11.193"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:32:11.454" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:32:11.455" starttime="20170725 02:32:11.454"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:32:11.455" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:32:11.455" starttime="20170725 02:32:11.455"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:32:11.456" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:32:11.456" starttime="20170725 02:32:11.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:32:11.457" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:32:11.457" starttime="20170725 02:32:11.456"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:32:11.700" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:32:11.700" starttime="20170725 02:32:11.457"></status>
</kw>
<msg timestamp="20170725 02:32:11.700" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:32:11.700" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.700" starttime="20170725 02:32:11.457"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:32:11.701" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.701" starttime="20170725 02:32:11.700"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:11.701" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.701" starttime="20170725 02:32:11.701"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:11.701" starttime="20170725 02:32:11.453"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:11.702" starttime="20170725 02:32:11.453"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:11.702" starttime="20170725 02:32:11.452"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:32:11.702" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:32:11.702" starttime="20170725 02:32:11.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:11.703" starttime="20170725 02:32:11.703"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:32:11.765" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:32:11.765" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.765" starttime="20170725 02:32:11.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:11.765" starttime="20170725 02:32:11.765"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:32:11.766" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:32:11.766" starttime="20170725 02:32:11.766"></status>
</kw>
<msg timestamp="20170725 02:32:11.766" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.766" starttime="20170725 02:32:11.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:11.767" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:11.767" starttime="20170725 02:32:11.766"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:32:11.767" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:32:11.767" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:32:11.767" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170725 02:32:11.767" starttime="20170725 02:32:11.767"></status>
</kw>
<msg timestamp="20170725 02:32:11.768" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170725 02:32:11.768" starttime="20170725 02:32:11.451"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:11.768" starttime="20170725 02:32:11.450"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:11.806" starttime="20170725 02:32:08.496"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170725 02:32:11.811" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170725 02:32:11.813" starttime="20170725 02:32:11.807"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:11.813" starttime="20170725 02:32:08.495"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:11.813" starttime="20170725 02:32:08.489"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Delete Error logs</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:32:11.825" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:32:11.826" starttime="20170725 02:32:11.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:32:11.826" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:32:11.826" starttime="20170725 02:32:11.826"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:32:11.827" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:32:11.827" starttime="20170725 02:32:11.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:32:11.828" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:32:11.828" starttime="20170725 02:32:11.827"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:32:12.008" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:32:12.008" starttime="20170725 02:32:11.828"></status>
</kw>
<msg timestamp="20170725 02:32:12.008" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:32:12.008" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.008" starttime="20170725 02:32:11.828"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:32:12.009" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.009" starttime="20170725 02:32:12.009"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:12.010" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.010" starttime="20170725 02:32:12.009"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.010" starttime="20170725 02:32:11.824"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.010" starttime="20170725 02:32:11.824"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.010" starttime="20170725 02:32:11.823"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:32:12.011" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170725 02:32:12.011" starttime="20170725 02:32:12.010"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:12.011" starttime="20170725 02:32:12.011"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:32:12.063" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170725 02:32:12.063" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.063" starttime="20170725 02:32:12.012"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:12.064" starttime="20170725 02:32:12.064"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:32:12.064" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:32:12.064" starttime="20170725 02:32:12.064"></status>
</kw>
<msg timestamp="20170725 02:32:12.065" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.065" starttime="20170725 02:32:11.823"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:12.065" starttime="20170725 02:32:12.065"></status>
</kw>
<kw name="Get URL List" library="utils">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:32:12.069" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:32:12.069" starttime="20170725 02:32:12.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:32:12.070" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:32:12.070" starttime="20170725 02:32:12.069"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:32:12.070" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:32:12.070" starttime="20170725 02:32:12.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:32:12.071" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:32:12.071" starttime="20170725 02:32:12.071"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:32:12.249" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:32:12.249" starttime="20170725 02:32:12.072"></status>
</kw>
<msg timestamp="20170725 02:32:12.249" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:32:12.250" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.250" starttime="20170725 02:32:12.071"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:32:12.250" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.250" starttime="20170725 02:32:12.250"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:12.251" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.251" starttime="20170725 02:32:12.251"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.251" starttime="20170725 02:32:12.068"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.251" starttime="20170725 02:32:12.068"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.252" starttime="20170725 02:32:12.067"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:32:12.253" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170725 02:32:12.253" starttime="20170725 02:32:12.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:12.253" starttime="20170725 02:32:12.253"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:32:12.306" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170725 02:32:12.306" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.306" starttime="20170725 02:32:12.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:12.307" starttime="20170725 02:32:12.307"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:32:12.308" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:32:12.308" starttime="20170725 02:32:12.308"></status>
</kw>
<msg timestamp="20170725 02:32:12.308" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.308" starttime="20170725 02:32:12.066"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:12.309" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.309" starttime="20170725 02:32:12.308"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:32:12.309" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/2"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:32:12.309" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:32:12.309" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'/xyz/openbmc_project/logging/entry/2']}</msg>
<status status="PASS" endtime="20170725 02:32:12.310" starttime="20170725 02:32:12.309"></status>
</kw>
<msg timestamp="20170725 02:32:12.310" level="INFO">${url_list} = [u'/xyz/openbmc_project/logging/entry/2']</msg>
<status status="PASS" endtime="20170725 02:32:12.310" starttime="20170725 02:32:12.066"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:12.310" starttime="20170725 02:32:12.310"></status>
</kw>
<msg timestamp="20170725 02:32:12.310" level="INFO">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/2']</msg>
<status status="PASS" endtime="20170725 02:32:12.311" starttime="20170725 02:32:12.065"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/2">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:12.312" starttime="20170725 02:32:12.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:32:12.312" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170725 02:32:12.313" starttime="20170725 02:32:12.312"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:32:12.315" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:32:12.315" starttime="20170725 02:32:12.315"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:32:12.316" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:32:12.316" starttime="20170725 02:32:12.316"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:32:12.317" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:32:12.317" starttime="20170725 02:32:12.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:32:12.317" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:32:12.317" starttime="20170725 02:32:12.317"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:32:12.494" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:32:12.494" starttime="20170725 02:32:12.318"></status>
</kw>
<msg timestamp="20170725 02:32:12.494" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:32:12.494" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.494" starttime="20170725 02:32:12.318"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:32:12.495" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.495" starttime="20170725 02:32:12.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:12.496" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.496" starttime="20170725 02:32:12.495"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.496" starttime="20170725 02:32:12.314"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.496" starttime="20170725 02:32:12.314"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.496" starttime="20170725 02:32:12.313"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:32:12.497" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2</msg>
<status status="PASS" endtime="20170725 02:32:12.497" starttime="20170725 02:32:12.496"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 02:32:12.501" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20170725 02:32:12.501" starttime="20170725 02:32:12.498"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 02:32:12.502" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20170725 02:32:12.502" starttime="20170725 02:32:12.502"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.502" starttime="20170725 02:32:12.501"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.502" starttime="20170725 02:32:12.497"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:32:12.604" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20170725 02:32:12.605" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.605" starttime="20170725 02:32:12.503"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 02:32:12.606" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 02:32:12.606" starttime="20170725 02:32:12.605"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 02:32:12.607" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 02:32:12.607" starttime="20170725 02:32:12.607"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.607" starttime="20170725 02:32:12.606"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.607" starttime="20170725 02:32:12.605"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:32:12.608" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:32:12.608" starttime="20170725 02:32:12.608"></status>
</kw>
<msg timestamp="20170725 02:32:12.608" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.608" starttime="20170725 02:32:12.313"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:12.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:12.609" starttime="20170725 02:32:12.608"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.609" starttime="20170725 02:32:12.311"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.609" starttime="20170725 02:32:12.311"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.609" starttime="20170725 02:32:12.311"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.609" starttime="20170725 02:32:11.822"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.609" starttime="20170725 02:32:11.814"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:12.609" starttime="20170725 02:32:08.489"></status>
</kw>
<kw name="Update PNOR Image">
<doc>Copy the PNOR image to the BMC /tmp dir and flash it.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Copy PNOR to BMC</arg>
</arguments>
<kw name="Copy PNOR to BMC" library="utils">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:12.631" starttime="20170725 02:32:12.622"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:12.632" starttime="20170725 02:32:12.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:13.332" starttime="20170725 02:32:12.633"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:13.333" starttime="20170725 02:32:12.633"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:13.333" starttime="20170725 02:32:12.631"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Copying ${PNOR_IMAGE_PATH} to /tmp</arg>
</arguments>
<msg timestamp="20170725 02:32:13.333" level="INFO">Copying /home/fspcibld/witherspoon_910_golden.pnor to /tmp</msg>
<status status="PASS" endtime="20170725 02:32:13.334" starttime="20170725 02:32:13.333"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>/tmp</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:42.999" starttime="20170725 02:32:13.334"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:43.000" starttime="20170725 02:32:12.621"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:43.000" starttime="20170725 02:32:12.611"></status>
</kw>
<kw name="Split Path" library="OperatingSystem">
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
</arguments>
<assign>
<var>${pnor_path}</var>
<var>${pnor_basename}</var>
</assign>
<msg timestamp="20170725 02:32:43.002" level="INFO">${pnor_path} = /home/fspcibld</msg>
<msg timestamp="20170725 02:32:43.002" level="INFO">${pnor_basename} = witherspoon_910_golden.pnor</msg>
<status status="PASS" endtime="20170725 02:32:43.002" starttime="20170725 02:32:43.001"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Flash PNOR \ /tmp/${pnor_basename}</arg>
</arguments>
<kw name="Flash PNOR" library="utils">
<doc>Calls flash bios update method to flash PNOR image</doc>
<arguments>
<arg>/tmp/witherspoon_910_golden.pnor</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${pnor_image}</arg>
</arguments>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170725 02:32:43.014" level="INFO">@{arglist} = [ /tmp/witherspoon_910_golden.pnor ]</msg>
<status status="PASS" endtime="20170725 02:32:43.014" starttime="20170725 02:32:43.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170725 02:32:43.015" level="INFO">${args} = {u'data': [u'/tmp/witherspoon_910_golden.pnor']}</msg>
<status status="PASS" endtime="20170725 02:32:43.015" starttime="20170725 02:32:43.014"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios/</arg>
<arg>update</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:32:43.016" level="INFO">${base_uri} = /org/openbmc/control/flash/bios/</msg>
<status status="PASS" endtime="20170725 02:32:43.016" starttime="20170725 02:32:43.016"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:32:43.019" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:32:43.020" starttime="20170725 02:32:43.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:32:43.021" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:32:43.021" starttime="20170725 02:32:43.020"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:32:43.022" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:32:43.022" starttime="20170725 02:32:43.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:32:43.022" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:32:43.022" starttime="20170725 02:32:43.022"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:32:43.252" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:32:43.252" starttime="20170725 02:32:43.023"></status>
</kw>
<msg timestamp="20170725 02:32:43.252" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:32:43.252" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:43.252" starttime="20170725 02:32:43.023"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:32:43.253" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:43.253" starttime="20170725 02:32:43.253"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:43.254" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:43.254" starttime="20170725 02:32:43.254"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:43.255" starttime="20170725 02:32:43.018"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:43.255" starttime="20170725 02:32:43.018"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:43.255" starttime="20170725 02:32:43.017"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:32:43.256" level="INFO">${base_uri} = /org/openbmc/control/flash/bios//action/update</msg>
<status status="PASS" endtime="20170725 02:32:43.256" starttime="20170725 02:32:43.255"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:32:43.257" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:32:43.257" starttime="20170725 02:32:43.256"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:43.257" starttime="20170725 02:32:43.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:43.258" starttime="20170725 02:32:43.258"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:32:43.574" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios//action/update, data={"data": ["/tmp/witherspoon_910_golden.pnor"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170725 02:32:43.574" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:43.574" starttime="20170725 02:32:43.259"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:43.575" starttime="20170725 02:32:43.574"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:32:43.575" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:32:43.575" starttime="20170725 02:32:43.575"></status>
</kw>
<msg timestamp="20170725 02:32:43.575" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:43.575" starttime="20170725 02:32:43.016"></status>
</kw>
<msg timestamp="20170725 02:32:43.575" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:43.575" starttime="20170725 02:32:43.015"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:43.576" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:43.576" starttime="20170725 02:32:43.576"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>2 min</arg>
<arg>10 sec</arg>
<arg>Is PNOR Flashing</arg>
</arguments>
<kw name="Is PNOR Flashing" library="utils">
<doc>Get BIOS 'Flashing' status. This indicates that PNOR</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:32:43.582" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:32:43.583" starttime="20170725 02:32:43.582"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:32:43.584" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:32:43.584" starttime="20170725 02:32:43.583"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:32:43.585" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:32:43.585" starttime="20170725 02:32:43.584"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:32:43.585" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:32:43.585" starttime="20170725 02:32:43.585"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:32:44.081" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:32:44.081" starttime="20170725 02:32:43.586"></status>
</kw>
<msg timestamp="20170725 02:32:44.081" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:32:44.081" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:44.081" starttime="20170725 02:32:43.586"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:32:44.082" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:44.082" starttime="20170725 02:32:44.081"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:44.082" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:44.083" starttime="20170725 02:32:44.082"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:44.083" starttime="20170725 02:32:43.581"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:44.083" starttime="20170725 02:32:43.580"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:44.083" starttime="20170725 02:32:43.579"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:32:44.083" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:32:44.084" starttime="20170725 02:32:44.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:44.084" starttime="20170725 02:32:44.084"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:32:44.329" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:32:44.329" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:44.329" starttime="20170725 02:32:44.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:44.330" starttime="20170725 02:32:44.329"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:32:44.330" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:32:44.330" starttime="20170725 02:32:44.330"></status>
</kw>
<msg timestamp="20170725 02:32:44.330" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:44.330" starttime="20170725 02:32:43.578"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:44.331" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:44.331" starttime="20170725 02:32:44.331"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:32:44.332" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:32:44.332" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:32:44.332" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 02:32:44.332" starttime="20170725 02:32:44.331"></status>
</kw>
<msg timestamp="20170725 02:32:44.332" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 02:32:44.332" starttime="20170725 02:32:43.578"></status>
</kw>
<msg timestamp="20170725 02:32:44.333" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 02:32:44.333" starttime="20170725 02:32:43.577"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flashing</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:44.333" starttime="20170725 02:32:44.333"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:44.333" starttime="20170725 02:32:43.577"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:44.333" starttime="20170725 02:32:43.577"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:44.333" starttime="20170725 02:32:43.013"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:44.334" starttime="20170725 02:32:43.003"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds \ 7 min \ 10 sec \ Is PNOR Flash Done</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>7 min</arg>
<arg>10 sec</arg>
<arg>Is PNOR Flash Done</arg>
</arguments>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:32:44.347" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:32:44.348" starttime="20170725 02:32:44.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:32:44.349" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:32:44.349" starttime="20170725 02:32:44.349"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:32:44.350" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:32:44.350" starttime="20170725 02:32:44.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:32:44.351" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:32:44.351" starttime="20170725 02:32:44.350"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:32:44.690" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:32:44.690" starttime="20170725 02:32:44.352"></status>
</kw>
<msg timestamp="20170725 02:32:44.690" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:32:44.690" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:44.690" starttime="20170725 02:32:44.351"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:32:44.691" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:44.691" starttime="20170725 02:32:44.690"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:44.691" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:44.691" starttime="20170725 02:32:44.691"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:44.692" starttime="20170725 02:32:44.346"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:44.692" starttime="20170725 02:32:44.346"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:44.692" starttime="20170725 02:32:44.345"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:32:44.692" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:32:44.692" starttime="20170725 02:32:44.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:44.693" starttime="20170725 02:32:44.693"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:32:44.907" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:32:44.907" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:44.907" starttime="20170725 02:32:44.693"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:44.908" starttime="20170725 02:32:44.908"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:32:44.909" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:32:44.909" starttime="20170725 02:32:44.909"></status>
</kw>
<msg timestamp="20170725 02:32:44.909" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:44.909" starttime="20170725 02:32:44.345"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:44.910" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:44.910" starttime="20170725 02:32:44.910"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:32:44.911" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:32:44.911" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:32:44.911" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 02:32:44.911" starttime="20170725 02:32:44.911"></status>
</kw>
<msg timestamp="20170725 02:32:44.912" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 02:32:44.912" starttime="20170725 02:32:44.344"></status>
</kw>
<msg timestamp="20170725 02:32:44.912" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 02:32:44.912" starttime="20170725 02:32:44.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:32:44.913" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:32:44.913" starttime="20170725 02:32:44.913"></status>
</kw>
<status status="FAIL" endtime="20170725 02:32:44.914" starttime="20170725 02:32:44.344"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:32:54.919" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:32:54.919" starttime="20170725 02:32:54.918"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:32:54.920" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:32:54.920" starttime="20170725 02:32:54.920"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:32:54.921" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:32:54.921" starttime="20170725 02:32:54.920"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:32:54.921" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:32:54.921" starttime="20170725 02:32:54.921"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:32:55.494" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:32:55.494" starttime="20170725 02:32:54.922"></status>
</kw>
<msg timestamp="20170725 02:32:55.494" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:32:55.495" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:55.495" starttime="20170725 02:32:54.922"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:32:55.495" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:55.495" starttime="20170725 02:32:55.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:55.496" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:55.496" starttime="20170725 02:32:55.496"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:55.496" starttime="20170725 02:32:54.918"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:55.496" starttime="20170725 02:32:54.917"></status>
</kw>
<status status="PASS" endtime="20170725 02:32:55.497" starttime="20170725 02:32:54.917"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:32:55.497" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:32:55.497" starttime="20170725 02:32:55.497"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:55.498" starttime="20170725 02:32:55.498"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:32:55.586" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:32:55.586" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:55.586" starttime="20170725 02:32:55.498"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:32:55.587" starttime="20170725 02:32:55.587"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:32:55.588" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:32:55.588" starttime="20170725 02:32:55.587"></status>
</kw>
<msg timestamp="20170725 02:32:55.588" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:32:55.588" starttime="20170725 02:32:54.916"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:32:55.589" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:32:55.589" starttime="20170725 02:32:55.588"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:32:55.589" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:32:55.589" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:32:55.589" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 02:32:55.589" starttime="20170725 02:32:55.589"></status>
</kw>
<msg timestamp="20170725 02:32:55.590" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 02:32:55.590" starttime="20170725 02:32:54.915"></status>
</kw>
<msg timestamp="20170725 02:32:55.590" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 02:32:55.590" starttime="20170725 02:32:54.915"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:32:55.591" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:32:55.591" starttime="20170725 02:32:55.590"></status>
</kw>
<status status="FAIL" endtime="20170725 02:32:55.591" starttime="20170725 02:32:54.914"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:33:05.596" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:33:05.597" starttime="20170725 02:33:05.596"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:33:05.597" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:33:05.598" starttime="20170725 02:33:05.597"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:33:05.598" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:33:05.598" starttime="20170725 02:33:05.598"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:33:05.599" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:33:05.599" starttime="20170725 02:33:05.598"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:33:05.802" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:33:05.802" starttime="20170725 02:33:05.600"></status>
</kw>
<msg timestamp="20170725 02:33:05.803" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:33:05.803" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:05.803" starttime="20170725 02:33:05.599"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:33:05.803" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:05.803" starttime="20170725 02:33:05.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:33:05.804" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:05.804" starttime="20170725 02:33:05.804"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:05.804" starttime="20170725 02:33:05.595"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:05.804" starttime="20170725 02:33:05.595"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:05.805" starttime="20170725 02:33:05.594"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:33:05.805" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:33:05.805" starttime="20170725 02:33:05.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:33:05.806" starttime="20170725 02:33:05.806"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:33:05.892" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:33:05.892" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:05.892" starttime="20170725 02:33:05.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:33:05.893" starttime="20170725 02:33:05.892"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:33:05.893" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:33:05.893" starttime="20170725 02:33:05.893"></status>
</kw>
<msg timestamp="20170725 02:33:05.893" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:05.893" starttime="20170725 02:33:05.593"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:33:05.894" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:05.894" starttime="20170725 02:33:05.894"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:33:05.895" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:33:05.895" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:33:05.895" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 02:33:05.895" starttime="20170725 02:33:05.894"></status>
</kw>
<msg timestamp="20170725 02:33:05.895" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 02:33:05.895" starttime="20170725 02:33:05.593"></status>
</kw>
<msg timestamp="20170725 02:33:05.896" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 02:33:05.896" starttime="20170725 02:33:05.592"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:33:05.896" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:33:05.896" starttime="20170725 02:33:05.896"></status>
</kw>
<status status="FAIL" endtime="20170725 02:33:05.897" starttime="20170725 02:33:05.592"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:33:15.902" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:33:15.902" starttime="20170725 02:33:15.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:33:15.903" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:33:15.903" starttime="20170725 02:33:15.903"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:33:15.904" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:33:15.904" starttime="20170725 02:33:15.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:33:15.904" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:33:15.904" starttime="20170725 02:33:15.904"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:33:16.173" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:33:16.173" starttime="20170725 02:33:15.905"></status>
</kw>
<msg timestamp="20170725 02:33:16.173" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:33:16.173" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:16.173" starttime="20170725 02:33:15.905"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:33:16.174" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:16.174" starttime="20170725 02:33:16.174"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:33:16.175" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:16.175" starttime="20170725 02:33:16.174"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:16.175" starttime="20170725 02:33:15.901"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:16.175" starttime="20170725 02:33:15.900"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:16.175" starttime="20170725 02:33:15.899"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:33:16.176" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:33:16.176" starttime="20170725 02:33:16.176"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:33:16.177" starttime="20170725 02:33:16.176"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:33:16.261" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:33:16.261" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:16.261" starttime="20170725 02:33:16.177"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:33:16.262" starttime="20170725 02:33:16.262"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:33:16.263" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:33:16.263" starttime="20170725 02:33:16.262"></status>
</kw>
<msg timestamp="20170725 02:33:16.263" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:16.263" starttime="20170725 02:33:15.899"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:33:16.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:16.264" starttime="20170725 02:33:16.263"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:33:16.264" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:33:16.264" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:33:16.264" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 02:33:16.264" starttime="20170725 02:33:16.264"></status>
</kw>
<msg timestamp="20170725 02:33:16.265" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 02:33:16.265" starttime="20170725 02:33:15.898"></status>
</kw>
<msg timestamp="20170725 02:33:16.265" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 02:33:16.265" starttime="20170725 02:33:15.898"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:33:16.266" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:33:16.266" starttime="20170725 02:33:16.265"></status>
</kw>
<status status="FAIL" endtime="20170725 02:33:16.266" starttime="20170725 02:33:15.897"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:33:26.272" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:33:26.273" starttime="20170725 02:33:26.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:33:26.274" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:33:26.274" starttime="20170725 02:33:26.273"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:33:26.275" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:33:26.275" starttime="20170725 02:33:26.274"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:33:26.276" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:33:26.276" starttime="20170725 02:33:26.275"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:33:26.462" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:33:26.462" starttime="20170725 02:33:26.277"></status>
</kw>
<msg timestamp="20170725 02:33:26.462" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:33:26.463" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:26.463" starttime="20170725 02:33:26.276"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:33:26.463" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:26.463" starttime="20170725 02:33:26.463"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:33:26.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:26.464" starttime="20170725 02:33:26.464"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:26.464" starttime="20170725 02:33:26.270"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:26.464" starttime="20170725 02:33:26.270"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:26.465" starttime="20170725 02:33:26.269"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:33:26.465" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:33:26.465" starttime="20170725 02:33:26.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:33:26.466" starttime="20170725 02:33:26.466"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:33:26.548" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:33:26.548" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:26.548" starttime="20170725 02:33:26.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:33:26.549" starttime="20170725 02:33:26.548"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:33:26.549" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:33:26.549" starttime="20170725 02:33:26.549"></status>
</kw>
<msg timestamp="20170725 02:33:26.549" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:26.549" starttime="20170725 02:33:26.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:33:26.550" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:26.550" starttime="20170725 02:33:26.550"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:33:26.551" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:33:26.551" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:33:26.551" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 02:33:26.551" starttime="20170725 02:33:26.550"></status>
</kw>
<msg timestamp="20170725 02:33:26.551" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 02:33:26.551" starttime="20170725 02:33:26.268"></status>
</kw>
<msg timestamp="20170725 02:33:26.551" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 02:33:26.551" starttime="20170725 02:33:26.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:33:26.552" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:33:26.552" starttime="20170725 02:33:26.552"></status>
</kw>
<status status="FAIL" endtime="20170725 02:33:26.552" starttime="20170725 02:33:26.267"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:33:36.559" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:33:36.560" starttime="20170725 02:33:36.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:33:36.561" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:33:36.561" starttime="20170725 02:33:36.560"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:33:36.562" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:33:36.562" starttime="20170725 02:33:36.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:33:36.563" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:33:36.563" starttime="20170725 02:33:36.562"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:33:36.751" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:33:36.751" starttime="20170725 02:33:36.564"></status>
</kw>
<msg timestamp="20170725 02:33:36.751" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:33:36.751" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:36.751" starttime="20170725 02:33:36.563"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:33:36.752" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:36.752" starttime="20170725 02:33:36.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:33:36.753" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:36.753" starttime="20170725 02:33:36.752"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:36.753" starttime="20170725 02:33:36.557"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:36.753" starttime="20170725 02:33:36.557"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:36.753" starttime="20170725 02:33:36.556"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:33:36.754" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:33:36.754" starttime="20170725 02:33:36.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:33:36.754" starttime="20170725 02:33:36.754"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:33:36.895" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:33:36.896" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:36.896" starttime="20170725 02:33:36.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:33:36.896" starttime="20170725 02:33:36.896"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:33:36.897" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:33:36.897" starttime="20170725 02:33:36.897"></status>
</kw>
<msg timestamp="20170725 02:33:36.897" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:36.897" starttime="20170725 02:33:36.555"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:33:36.898" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:36.898" starttime="20170725 02:33:36.897"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:33:36.898" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:33:36.898" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:33:36.899" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 02:33:36.899" starttime="20170725 02:33:36.898"></status>
</kw>
<msg timestamp="20170725 02:33:36.899" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 02:33:36.899" starttime="20170725 02:33:36.554"></status>
</kw>
<msg timestamp="20170725 02:33:36.899" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 02:33:36.899" starttime="20170725 02:33:36.554"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:33:36.900" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:33:36.900" starttime="20170725 02:33:36.899"></status>
</kw>
<status status="FAIL" endtime="20170725 02:33:36.900" starttime="20170725 02:33:36.553"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:33:46.906" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:33:46.906" starttime="20170725 02:33:46.906"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:33:46.907" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:33:46.907" starttime="20170725 02:33:46.907"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:33:46.908" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:33:46.908" starttime="20170725 02:33:46.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:33:46.908" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:33:46.908" starttime="20170725 02:33:46.908"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:33:47.920" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:33:47.921" starttime="20170725 02:33:46.909"></status>
</kw>
<msg timestamp="20170725 02:33:47.921" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:33:47.921" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:47.921" starttime="20170725 02:33:46.909"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:33:47.922" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:47.922" starttime="20170725 02:33:47.921"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:33:47.922" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:47.922" starttime="20170725 02:33:47.922"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:47.922" starttime="20170725 02:33:46.905"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:47.923" starttime="20170725 02:33:46.904"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:47.923" starttime="20170725 02:33:46.903"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:33:47.923" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:33:47.923" starttime="20170725 02:33:47.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:33:47.924" starttime="20170725 02:33:47.924"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:33:48.004" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:33:48.004" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:48.004" starttime="20170725 02:33:47.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:33:48.005" starttime="20170725 02:33:48.004"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:33:48.005" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:33:48.005" starttime="20170725 02:33:48.005"></status>
</kw>
<msg timestamp="20170725 02:33:48.005" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:48.005" starttime="20170725 02:33:46.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:33:48.006" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:48.006" starttime="20170725 02:33:48.006"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:33:48.007" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:33:48.007" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:33:48.007" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 02:33:48.007" starttime="20170725 02:33:48.006"></status>
</kw>
<msg timestamp="20170725 02:33:48.007" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 02:33:48.007" starttime="20170725 02:33:46.902"></status>
</kw>
<msg timestamp="20170725 02:33:48.008" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 02:33:48.008" starttime="20170725 02:33:46.901"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:33:48.008" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:33:48.008" starttime="20170725 02:33:48.008"></status>
</kw>
<status status="FAIL" endtime="20170725 02:33:48.009" starttime="20170725 02:33:46.901"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:33:58.014" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:33:58.014" starttime="20170725 02:33:58.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:33:58.015" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:33:58.015" starttime="20170725 02:33:58.014"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:33:58.015" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:33:58.015" starttime="20170725 02:33:58.015"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:33:58.016" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:33:58.016" starttime="20170725 02:33:58.016"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:33:58.191" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:33:58.192" starttime="20170725 02:33:58.017"></status>
</kw>
<msg timestamp="20170725 02:33:58.192" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:33:58.192" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:58.192" starttime="20170725 02:33:58.016"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:33:58.193" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:58.193" starttime="20170725 02:33:58.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:33:58.193" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:58.193" starttime="20170725 02:33:58.193"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:58.193" starttime="20170725 02:33:58.013"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:58.194" starttime="20170725 02:33:58.012"></status>
</kw>
<status status="PASS" endtime="20170725 02:33:58.194" starttime="20170725 02:33:58.011"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:33:58.194" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:33:58.194" starttime="20170725 02:33:58.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:33:58.195" starttime="20170725 02:33:58.195"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:33:58.278" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:33:58.278" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:58.278" starttime="20170725 02:33:58.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:33:58.278" starttime="20170725 02:33:58.278"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:33:58.279" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:33:58.279" starttime="20170725 02:33:58.279"></status>
</kw>
<msg timestamp="20170725 02:33:58.279" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:33:58.279" starttime="20170725 02:33:58.010"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:33:58.280" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:33:58.280" starttime="20170725 02:33:58.280"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:33:58.281" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:33:58.281" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:33:58.281" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 02:33:58.281" starttime="20170725 02:33:58.280"></status>
</kw>
<msg timestamp="20170725 02:33:58.281" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 02:33:58.281" starttime="20170725 02:33:58.010"></status>
</kw>
<msg timestamp="20170725 02:33:58.281" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 02:33:58.281" starttime="20170725 02:33:58.010"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:33:58.282" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:33:58.282" starttime="20170725 02:33:58.282"></status>
</kw>
<status status="FAIL" endtime="20170725 02:33:58.282" starttime="20170725 02:33:58.009"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:34:08.293" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:34:08.293" starttime="20170725 02:34:08.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:34:08.294" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:34:08.294" starttime="20170725 02:34:08.294"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:34:08.295" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:34:08.295" starttime="20170725 02:34:08.294"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:34:08.295" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:34:08.295" starttime="20170725 02:34:08.295"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:34:09.457" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:34:09.457" starttime="20170725 02:34:08.296"></status>
</kw>
<msg timestamp="20170725 02:34:09.457" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:34:09.457" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:34:09.457" starttime="20170725 02:34:08.296"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:34:09.458" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:34:09.458" starttime="20170725 02:34:09.457"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:34:09.458" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:34:09.459" starttime="20170725 02:34:09.458"></status>
</kw>
<status status="PASS" endtime="20170725 02:34:09.459" starttime="20170725 02:34:08.292"></status>
</kw>
<status status="PASS" endtime="20170725 02:34:09.459" starttime="20170725 02:34:08.291"></status>
</kw>
<status status="PASS" endtime="20170725 02:34:09.459" starttime="20170725 02:34:08.285"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:34:09.460" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:34:09.460" starttime="20170725 02:34:09.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:34:09.460" starttime="20170725 02:34:09.460"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:34:09.566" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:34:09.566" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:34:09.566" starttime="20170725 02:34:09.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:34:09.567" starttime="20170725 02:34:09.566"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:34:09.567" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:34:09.567" starttime="20170725 02:34:09.567"></status>
</kw>
<msg timestamp="20170725 02:34:09.567" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:34:09.567" starttime="20170725 02:34:08.284"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:34:09.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:34:09.568" starttime="20170725 02:34:09.568"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:34:09.569" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:34:09.569" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:34:09.569" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 02:34:09.569" starttime="20170725 02:34:09.568"></status>
</kw>
<msg timestamp="20170725 02:34:09.569" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 02:34:09.569" starttime="20170725 02:34:08.284"></status>
</kw>
<msg timestamp="20170725 02:34:09.570" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 02:34:09.570" starttime="20170725 02:34:08.283"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:34:09.570" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:34:09.570" starttime="20170725 02:34:09.570"></status>
</kw>
<status status="FAIL" endtime="20170725 02:34:09.570" starttime="20170725 02:34:08.283"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:34:19.575" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:34:19.576" starttime="20170725 02:34:19.575"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:34:19.577" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:34:19.577" starttime="20170725 02:34:19.576"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:34:19.577" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:34:19.577" starttime="20170725 02:34:19.577"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:34:19.578" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:34:19.578" starttime="20170725 02:34:19.577"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:34:20.843" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:34:20.843" starttime="20170725 02:34:19.579"></status>
</kw>
<msg timestamp="20170725 02:34:20.843" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:34:20.843" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:34:20.843" starttime="20170725 02:34:19.578"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:34:20.844" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:34:20.844" starttime="20170725 02:34:20.844"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:34:20.845" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:34:20.845" starttime="20170725 02:34:20.844"></status>
</kw>
<status status="PASS" endtime="20170725 02:34:20.845" starttime="20170725 02:34:19.575"></status>
</kw>
<status status="PASS" endtime="20170725 02:34:20.845" starttime="20170725 02:34:19.574"></status>
</kw>
<status status="PASS" endtime="20170725 02:34:20.845" starttime="20170725 02:34:19.573"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:34:20.846" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:34:20.846" starttime="20170725 02:34:20.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:34:20.846" starttime="20170725 02:34:20.846"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:34:20.943" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:34:20.943" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:34:20.943" starttime="20170725 02:34:20.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:34:20.944" starttime="20170725 02:34:20.944"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:34:20.945" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:34:20.945" starttime="20170725 02:34:20.944"></status>
</kw>
<msg timestamp="20170725 02:34:20.945" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:34:20.945" starttime="20170725 02:34:19.573"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:34:20.945" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:34:20.946" starttime="20170725 02:34:20.945"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:34:20.946" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:34:20.946" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:34:20.946" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 02:34:20.946" starttime="20170725 02:34:20.946"></status>
</kw>
<msg timestamp="20170725 02:34:20.947" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 02:34:20.947" starttime="20170725 02:34:19.572"></status>
</kw>
<msg timestamp="20170725 02:34:20.947" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 02:34:20.947" starttime="20170725 02:34:19.572"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:34:20.948" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:34:20.948" starttime="20170725 02:34:20.947"></status>
</kw>
<status status="FAIL" endtime="20170725 02:34:20.948" starttime="20170725 02:34:19.571"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:34:30.953" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:34:30.954" starttime="20170725 02:34:30.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:34:30.954" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:34:30.954" starttime="20170725 02:34:30.954"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:34:30.955" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:34:30.955" starttime="20170725 02:34:30.955"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:34:30.956" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:34:30.956" starttime="20170725 02:34:30.955"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:34:31.153" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:34:31.154" starttime="20170725 02:34:30.957"></status>
</kw>
<msg timestamp="20170725 02:34:31.154" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:34:31.154" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:34:31.154" starttime="20170725 02:34:30.956"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:34:31.154" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:34:31.154" starttime="20170725 02:34:31.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:34:31.155" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:34:31.155" starttime="20170725 02:34:31.155"></status>
</kw>
<status status="PASS" endtime="20170725 02:34:31.155" starttime="20170725 02:34:30.952"></status>
</kw>
<status status="PASS" endtime="20170725 02:34:31.155" starttime="20170725 02:34:30.952"></status>
</kw>
<status status="PASS" endtime="20170725 02:34:31.155" starttime="20170725 02:34:30.951"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:34:31.156" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:34:31.156" starttime="20170725 02:34:31.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:34:31.157" starttime="20170725 02:34:31.156"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:34:31.239" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:34:31.239" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:34:31.239" starttime="20170725 02:34:31.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:34:31.240" starttime="20170725 02:34:31.240"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:34:31.241" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:34:31.241" starttime="20170725 02:34:31.240"></status>
</kw>
<msg timestamp="20170725 02:34:31.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:34:31.241" starttime="20170725 02:34:30.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:34:31.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:34:31.242" starttime="20170725 02:34:31.241"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:34:31.242" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:34:31.242" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:34:31.242" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 02:34:31.242" starttime="20170725 02:34:31.242"></status>
</kw>
<msg timestamp="20170725 02:34:31.243" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 02:34:31.243" starttime="20170725 02:34:30.949"></status>
</kw>
<msg timestamp="20170725 02:34:31.243" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 02:34:31.243" starttime="20170725 02:34:30.949"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:34:31.244" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:34:31.244" starttime="20170725 02:34:31.243"></status>
</kw>
<status status="FAIL" endtime="20170725 02:34:31.244" starttime="20170725 02:34:30.948"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:34:41.251" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:34:41.251" starttime="20170725 02:34:41.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:34:41.252" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:34:41.252" starttime="20170725 02:34:41.251"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:34:41.253" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:34:41.253" starttime="20170725 02:34:41.253"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:34:41.254" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:34:41.254" starttime="20170725 02:34:41.254"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:34:41.431" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:34:41.431" starttime="20170725 02:34:41.255"></status>
</kw>
<msg timestamp="20170725 02:34:41.431" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:34:41.432" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:34:41.432" starttime="20170725 02:34:41.255"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:34:41.432" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:34:41.432" starttime="20170725 02:34:41.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:34:41.433" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:34:41.433" starttime="20170725 02:34:41.433"></status>
</kw>
<status status="PASS" endtime="20170725 02:34:41.433" starttime="20170725 02:34:41.249"></status>
</kw>
<status status="PASS" endtime="20170725 02:34:41.433" starttime="20170725 02:34:41.249"></status>
</kw>
<status status="PASS" endtime="20170725 02:34:41.433" starttime="20170725 02:34:41.247"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:34:41.434" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:34:41.434" starttime="20170725 02:34:41.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:34:41.435" starttime="20170725 02:34:41.434"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:34:41.516" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:34:41.517" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:34:41.517" starttime="20170725 02:34:41.435"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:34:41.517" starttime="20170725 02:34:41.517"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:34:41.518" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:34:41.518" starttime="20170725 02:34:41.518"></status>
</kw>
<msg timestamp="20170725 02:34:41.518" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:34:41.518" starttime="20170725 02:34:41.246"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:34:41.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:34:41.519" starttime="20170725 02:34:41.518"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:34:41.519" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:34:41.519" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:34:41.520" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 02:34:41.520" starttime="20170725 02:34:41.519"></status>
</kw>
<msg timestamp="20170725 02:34:41.520" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 02:34:41.520" starttime="20170725 02:34:41.246"></status>
</kw>
<msg timestamp="20170725 02:34:41.520" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 02:34:41.520" starttime="20170725 02:34:41.245"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:34:41.521" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:34:41.521" starttime="20170725 02:34:41.520"></status>
</kw>
<status status="FAIL" endtime="20170725 02:34:41.521" starttime="20170725 02:34:41.244"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:34:51.527" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:34:51.527" starttime="20170725 02:34:51.526"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:34:51.528" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:34:51.528" starttime="20170725 02:34:51.527"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:34:51.528" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:34:51.528" starttime="20170725 02:34:51.528"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:34:51.529" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:34:51.529" starttime="20170725 02:34:51.529"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:34:51.754" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:34:51.754" starttime="20170725 02:34:51.530"></status>
</kw>
<msg timestamp="20170725 02:34:51.754" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:34:51.754" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:34:51.754" starttime="20170725 02:34:51.529"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:34:51.755" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:34:51.755" starttime="20170725 02:34:51.755"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:34:51.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:34:51.756" starttime="20170725 02:34:51.755"></status>
</kw>
<status status="PASS" endtime="20170725 02:34:51.756" starttime="20170725 02:34:51.526"></status>
</kw>
<status status="PASS" endtime="20170725 02:34:51.756" starttime="20170725 02:34:51.525"></status>
</kw>
<status status="PASS" endtime="20170725 02:34:51.756" starttime="20170725 02:34:51.524"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:34:51.757" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:34:51.757" starttime="20170725 02:34:51.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:34:51.758" starttime="20170725 02:34:51.757"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:34:51.840" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:34:51.840" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:34:51.840" starttime="20170725 02:34:51.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:34:51.841" starttime="20170725 02:34:51.840"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:34:51.841" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:34:51.841" starttime="20170725 02:34:51.841"></status>
</kw>
<msg timestamp="20170725 02:34:51.841" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:34:51.841" starttime="20170725 02:34:51.523"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:34:51.842" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:34:51.842" starttime="20170725 02:34:51.842"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:34:51.843" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:34:51.843" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:34:51.843" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 02:34:51.843" starttime="20170725 02:34:51.842"></status>
</kw>
<msg timestamp="20170725 02:34:51.843" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 02:34:51.843" starttime="20170725 02:34:51.523"></status>
</kw>
<msg timestamp="20170725 02:34:51.843" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 02:34:51.843" starttime="20170725 02:34:51.522"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:34:51.844" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:34:51.844" starttime="20170725 02:34:51.844"></status>
</kw>
<status status="FAIL" endtime="20170725 02:34:51.844" starttime="20170725 02:34:51.522"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:35:01.850" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:35:01.850" starttime="20170725 02:35:01.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:35:01.851" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:35:01.851" starttime="20170725 02:35:01.850"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:35:01.851" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:35:01.851" starttime="20170725 02:35:01.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:35:01.852" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:35:01.852" starttime="20170725 02:35:01.852"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:35:02.078" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:35:02.079" starttime="20170725 02:35:01.853"></status>
</kw>
<msg timestamp="20170725 02:35:02.079" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:35:02.079" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:02.079" starttime="20170725 02:35:01.852"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:35:02.080" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:02.080" starttime="20170725 02:35:02.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:35:02.080" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:02.080" starttime="20170725 02:35:02.080"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:02.081" starttime="20170725 02:35:01.849"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:02.081" starttime="20170725 02:35:01.848"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:02.081" starttime="20170725 02:35:01.847"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:35:02.081" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:35:02.081" starttime="20170725 02:35:02.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:35:02.082" starttime="20170725 02:35:02.082"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:35:02.175" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:35:02.176" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:02.176" starttime="20170725 02:35:02.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:35:02.176" starttime="20170725 02:35:02.176"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:35:02.177" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:35:02.177" starttime="20170725 02:35:02.177"></status>
</kw>
<msg timestamp="20170725 02:35:02.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:02.177" starttime="20170725 02:35:01.846"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:35:02.178" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:02.178" starttime="20170725 02:35:02.177"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:35:02.178" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:35:02.178" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:35:02.179" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 02:35:02.179" starttime="20170725 02:35:02.178"></status>
</kw>
<msg timestamp="20170725 02:35:02.179" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 02:35:02.179" starttime="20170725 02:35:01.846"></status>
</kw>
<msg timestamp="20170725 02:35:02.179" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 02:35:02.179" starttime="20170725 02:35:01.846"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:35:02.180" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:35:02.180" starttime="20170725 02:35:02.179"></status>
</kw>
<status status="FAIL" endtime="20170725 02:35:02.180" starttime="20170725 02:35:01.845"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:35:12.186" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:35:12.186" starttime="20170725 02:35:12.185"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:35:12.187" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:35:12.187" starttime="20170725 02:35:12.186"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:35:12.188" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:35:12.188" starttime="20170725 02:35:12.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:35:12.188" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:35:12.188" starttime="20170725 02:35:12.188"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:35:12.400" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:35:12.400" starttime="20170725 02:35:12.189"></status>
</kw>
<msg timestamp="20170725 02:35:12.400" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:35:12.401" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:12.401" starttime="20170725 02:35:12.189"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:35:12.401" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:12.401" starttime="20170725 02:35:12.401"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:35:12.402" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:12.402" starttime="20170725 02:35:12.402"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:12.402" starttime="20170725 02:35:12.185"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:12.402" starttime="20170725 02:35:12.184"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:12.402" starttime="20170725 02:35:12.183"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:35:12.403" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:35:12.403" starttime="20170725 02:35:12.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:35:12.404" starttime="20170725 02:35:12.403"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:35:12.488" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:35:12.488" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:12.488" starttime="20170725 02:35:12.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:35:12.489" starttime="20170725 02:35:12.489"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:35:12.489" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:35:12.489" starttime="20170725 02:35:12.489"></status>
</kw>
<msg timestamp="20170725 02:35:12.490" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:12.490" starttime="20170725 02:35:12.182"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:35:12.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:12.490" starttime="20170725 02:35:12.490"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:35:12.491" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:35:12.491" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:35:12.491" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u...</msg>
<status status="PASS" endtime="20170725 02:35:12.491" starttime="20170725 02:35:12.491"></status>
</kw>
<msg timestamp="20170725 02:35:12.491" level="INFO">${data} = {u'status': u'Flashing', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flasher...</msg>
<status status="PASS" endtime="20170725 02:35:12.491" starttime="20170725 02:35:12.182"></status>
</kw>
<msg timestamp="20170725 02:35:12.492" level="INFO">${status} = Flashing</msg>
<status status="PASS" endtime="20170725 02:35:12.492" starttime="20170725 02:35:12.182"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:35:12.492" level="FAIL">Flashing != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:35:12.492" starttime="20170725 02:35:12.492"></status>
</kw>
<status status="FAIL" endtime="20170725 02:35:12.493" starttime="20170725 02:35:12.181"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:35:22.498" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:35:22.498" starttime="20170725 02:35:22.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:35:22.499" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:35:22.499" starttime="20170725 02:35:22.499"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:35:22.499" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:35:22.500" starttime="20170725 02:35:22.499"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:35:22.500" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:35:22.500" starttime="20170725 02:35:22.500"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:35:22.857" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:35:22.857" starttime="20170725 02:35:22.501"></status>
</kw>
<msg timestamp="20170725 02:35:22.857" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:35:22.857" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:22.857" starttime="20170725 02:35:22.501"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:35:22.858" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:22.858" starttime="20170725 02:35:22.857"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:35:22.859" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:22.859" starttime="20170725 02:35:22.858"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:22.859" starttime="20170725 02:35:22.497"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:22.859" starttime="20170725 02:35:22.496"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:22.859" starttime="20170725 02:35:22.495"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:35:22.860" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:35:22.860" starttime="20170725 02:35:22.859"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:35:22.860" starttime="20170725 02:35:22.860"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:35:23.001" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:35:23.001" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:23.001" starttime="20170725 02:35:22.860"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:35:23.002" starttime="20170725 02:35:23.002"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:35:23.003" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:35:23.003" starttime="20170725 02:35:23.002"></status>
</kw>
<msg timestamp="20170725 02:35:23.003" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:23.003" starttime="20170725 02:35:22.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:35:23.003" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:23.004" starttime="20170725 02:35:23.003"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:35:23.004" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 11%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:35:23.004" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:35:23.004" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 11%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_pat...</msg>
<status status="PASS" endtime="20170725 02:35:23.004" starttime="20170725 02:35:23.004"></status>
</kw>
<msg timestamp="20170725 02:35:23.005" level="INFO">${data} = {u'status': u'Flashing: 11%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'fl...</msg>
<status status="PASS" endtime="20170725 02:35:23.005" starttime="20170725 02:35:22.494"></status>
</kw>
<msg timestamp="20170725 02:35:23.005" level="INFO">${status} = Flashing: 11%</msg>
<status status="PASS" endtime="20170725 02:35:23.005" starttime="20170725 02:35:22.494"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:35:23.006" level="FAIL">Flashing: 11% != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:35:23.006" starttime="20170725 02:35:23.005"></status>
</kw>
<status status="FAIL" endtime="20170725 02:35:23.006" starttime="20170725 02:35:22.493"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:35:33.011" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:35:33.012" starttime="20170725 02:35:33.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:35:33.012" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:35:33.012" starttime="20170725 02:35:33.012"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:35:33.013" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:35:33.013" starttime="20170725 02:35:33.012"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:35:33.013" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:35:33.014" starttime="20170725 02:35:33.013"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:35:33.202" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:35:33.202" starttime="20170725 02:35:33.014"></status>
</kw>
<msg timestamp="20170725 02:35:33.202" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:35:33.203" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:33.203" starttime="20170725 02:35:33.014"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:35:33.203" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:33.203" starttime="20170725 02:35:33.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:35:33.204" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:33.204" starttime="20170725 02:35:33.204"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:33.204" starttime="20170725 02:35:33.010"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:33.204" starttime="20170725 02:35:33.010"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:33.204" starttime="20170725 02:35:33.009"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:35:33.205" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:35:33.205" starttime="20170725 02:35:33.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:35:33.206" starttime="20170725 02:35:33.205"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:35:33.304" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:35:33.304" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:33.304" starttime="20170725 02:35:33.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:35:33.305" starttime="20170725 02:35:33.304"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:35:33.305" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:35:33.305" starttime="20170725 02:35:33.305"></status>
</kw>
<msg timestamp="20170725 02:35:33.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:33.306" starttime="20170725 02:35:33.008"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:35:33.306" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:33.306" starttime="20170725 02:35:33.306"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:35:33.307" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 26%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:35:33.307" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:35:33.307" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 26%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_pat...</msg>
<status status="PASS" endtime="20170725 02:35:33.307" starttime="20170725 02:35:33.307"></status>
</kw>
<msg timestamp="20170725 02:35:33.308" level="INFO">${data} = {u'status': u'Flashing: 26%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'fl...</msg>
<status status="PASS" endtime="20170725 02:35:33.308" starttime="20170725 02:35:33.008"></status>
</kw>
<msg timestamp="20170725 02:35:33.308" level="INFO">${status} = Flashing: 26%</msg>
<status status="PASS" endtime="20170725 02:35:33.308" starttime="20170725 02:35:33.007"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:35:33.309" level="FAIL">Flashing: 26% != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:35:33.309" starttime="20170725 02:35:33.309"></status>
</kw>
<status status="FAIL" endtime="20170725 02:35:33.309" starttime="20170725 02:35:33.006"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:35:43.315" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:35:43.315" starttime="20170725 02:35:43.314"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:35:43.315" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:35:43.316" starttime="20170725 02:35:43.315"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:35:43.316" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:35:43.316" starttime="20170725 02:35:43.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:35:43.317" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:35:43.317" starttime="20170725 02:35:43.316"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:35:43.507" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:35:43.507" starttime="20170725 02:35:43.318"></status>
</kw>
<msg timestamp="20170725 02:35:43.507" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:35:43.507" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:43.507" starttime="20170725 02:35:43.317"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:35:43.508" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:43.508" starttime="20170725 02:35:43.508"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:35:43.509" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:43.509" starttime="20170725 02:35:43.508"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:43.509" starttime="20170725 02:35:43.314"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:43.509" starttime="20170725 02:35:43.313"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:43.509" starttime="20170725 02:35:43.312"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:35:43.510" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:35:43.510" starttime="20170725 02:35:43.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:35:43.511" starttime="20170725 02:35:43.510"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:35:43.593" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:35:43.594" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:43.594" starttime="20170725 02:35:43.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:35:43.594" starttime="20170725 02:35:43.594"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:35:43.595" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:35:43.595" starttime="20170725 02:35:43.595"></status>
</kw>
<msg timestamp="20170725 02:35:43.595" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:43.595" starttime="20170725 02:35:43.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:35:43.596" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:43.596" starttime="20170725 02:35:43.595"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:35:43.596" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 41%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:35:43.596" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:35:43.597" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 41%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_pat...</msg>
<status status="PASS" endtime="20170725 02:35:43.597" starttime="20170725 02:35:43.596"></status>
</kw>
<msg timestamp="20170725 02:35:43.597" level="INFO">${data} = {u'status': u'Flashing: 41%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'fl...</msg>
<status status="PASS" endtime="20170725 02:35:43.597" starttime="20170725 02:35:43.311"></status>
</kw>
<msg timestamp="20170725 02:35:43.597" level="INFO">${status} = Flashing: 41%</msg>
<status status="PASS" endtime="20170725 02:35:43.597" starttime="20170725 02:35:43.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:35:43.598" level="FAIL">Flashing: 41% != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:35:43.598" starttime="20170725 02:35:43.597"></status>
</kw>
<status status="FAIL" endtime="20170725 02:35:43.598" starttime="20170725 02:35:43.310"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:35:53.603" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:35:53.604" starttime="20170725 02:35:53.603"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:35:53.604" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:35:53.604" starttime="20170725 02:35:53.604"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:35:53.605" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:35:53.605" starttime="20170725 02:35:53.605"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:35:53.606" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:35:53.606" starttime="20170725 02:35:53.605"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:35:53.798" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:35:53.798" starttime="20170725 02:35:53.606"></status>
</kw>
<msg timestamp="20170725 02:35:53.798" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:35:53.798" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:53.798" starttime="20170725 02:35:53.606"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:35:53.799" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:53.799" starttime="20170725 02:35:53.799"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:35:53.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:53.800" starttime="20170725 02:35:53.799"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:53.800" starttime="20170725 02:35:53.602"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:53.800" starttime="20170725 02:35:53.602"></status>
</kw>
<status status="PASS" endtime="20170725 02:35:53.800" starttime="20170725 02:35:53.601"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:35:53.801" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:35:53.801" starttime="20170725 02:35:53.800"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:35:53.801" starttime="20170725 02:35:53.801"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:35:53.895" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:35:53.895" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:53.895" starttime="20170725 02:35:53.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:35:53.896" starttime="20170725 02:35:53.895"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:35:53.896" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:35:53.896" starttime="20170725 02:35:53.896"></status>
</kw>
<msg timestamp="20170725 02:35:53.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:35:53.896" starttime="20170725 02:35:53.600"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:35:53.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:35:53.897" starttime="20170725 02:35:53.897"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:35:53.898" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 54%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:35:53.898" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:35:53.898" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 54%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_pat...</msg>
<status status="PASS" endtime="20170725 02:35:53.898" starttime="20170725 02:35:53.897"></status>
</kw>
<msg timestamp="20170725 02:35:53.898" level="INFO">${data} = {u'status': u'Flashing: 54%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'fl...</msg>
<status status="PASS" endtime="20170725 02:35:53.898" starttime="20170725 02:35:53.600"></status>
</kw>
<msg timestamp="20170725 02:35:53.898" level="INFO">${status} = Flashing: 54%</msg>
<status status="PASS" endtime="20170725 02:35:53.898" starttime="20170725 02:35:53.599"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:35:53.899" level="FAIL">Flashing: 54% != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:35:53.899" starttime="20170725 02:35:53.899"></status>
</kw>
<status status="FAIL" endtime="20170725 02:35:53.899" starttime="20170725 02:35:53.599"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:03.905" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:03.905" starttime="20170725 02:36:03.904"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:03.906" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:03.906" starttime="20170725 02:36:03.905"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:03.906" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:03.906" starttime="20170725 02:36:03.906"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:03.907" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:03.907" starttime="20170725 02:36:03.906"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:04.107" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:04.107" starttime="20170725 02:36:03.908"></status>
</kw>
<msg timestamp="20170725 02:36:04.107" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:04.107" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:04.107" starttime="20170725 02:36:03.907"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:04.108" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:04.108" starttime="20170725 02:36:04.108"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:04.109" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:04.109" starttime="20170725 02:36:04.108"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:04.109" starttime="20170725 02:36:03.904"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:04.109" starttime="20170725 02:36:03.903"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:04.109" starttime="20170725 02:36:03.902"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:04.110" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:36:04.110" starttime="20170725 02:36:04.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:04.111" starttime="20170725 02:36:04.110"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:04.207" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:36:04.208" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:04.208" starttime="20170725 02:36:04.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:04.208" starttime="20170725 02:36:04.208"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:04.209" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:04.209" starttime="20170725 02:36:04.209"></status>
</kw>
<msg timestamp="20170725 02:36:04.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:04.209" starttime="20170725 02:36:03.901"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:04.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:04.210" starttime="20170725 02:36:04.209"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:04.210" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flashing: 10%"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:04.211" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:04.211" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flashing: 10%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_pat...</msg>
<status status="PASS" endtime="20170725 02:36:04.211" starttime="20170725 02:36:04.210"></status>
</kw>
<msg timestamp="20170725 02:36:04.211" level="INFO">${data} = {u'status': u'Flashing: 10%', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'fl...</msg>
<status status="PASS" endtime="20170725 02:36:04.211" starttime="20170725 02:36:03.901"></status>
</kw>
<msg timestamp="20170725 02:36:04.211" level="INFO">${status} = Flashing: 10%</msg>
<status status="PASS" endtime="20170725 02:36:04.211" starttime="20170725 02:36:03.901"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<msg timestamp="20170725 02:36:04.212" level="FAIL">Flashing: 10% != Flash Done</msg>
<status status="FAIL" endtime="20170725 02:36:04.212" starttime="20170725 02:36:04.212"></status>
</kw>
<status status="FAIL" endtime="20170725 02:36:04.212" starttime="20170725 02:36:03.900"></status>
</kw>
<kw name="Is PNOR Flash Done" library="utils">
<doc>Get BIOS 'Flash Done' status. This indicates that the</doc>
<kw name="Get Flash BIOS Status" library="utils">
<doc>Returns the status of the flash BIOS API as a string. For</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:14.221" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:14.222" starttime="20170725 02:36:14.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:14.223" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:14.223" starttime="20170725 02:36:14.222"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:14.224" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:14.224" starttime="20170725 02:36:14.223"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:14.224" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:14.224" starttime="20170725 02:36:14.224"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:14.442" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:14.442" starttime="20170725 02:36:14.225"></status>
</kw>
<msg timestamp="20170725 02:36:14.442" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:14.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:14.442" starttime="20170725 02:36:14.225"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:14.443" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:14.443" starttime="20170725 02:36:14.443"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:14.444" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:14.444" starttime="20170725 02:36:14.443"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:14.444" starttime="20170725 02:36:14.221"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:14.444" starttime="20170725 02:36:14.220"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:14.444" starttime="20170725 02:36:14.215"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:14.445" level="INFO">${base_uri} = /org/openbmc/control/flash/bios</msg>
<status status="PASS" endtime="20170725 02:36:14.445" starttime="20170725 02:36:14.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:14.446" starttime="20170725 02:36:14.445"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:14.536" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios, headers=None json=None</msg>
<msg timestamp="20170725 02:36:14.536" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:14.536" starttime="20170725 02:36:14.446"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:14.537" starttime="20170725 02:36:14.536"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:14.537" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:14.537" starttime="20170725 02:36:14.537"></status>
</kw>
<msg timestamp="20170725 02:36:14.537" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:14.537" starttime="20170725 02:36:14.214"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:14.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:14.538" starttime="20170725 02:36:14.538"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:14.539" level="INFO">To JSON using : content={
  "data": {
    "filename": "/tmp/witherspoon_910_golden.pnor", 
    "flasher_instance": "bios", 
    "flasher_name": "flasher.exe", 
    "flasher_path": "/usr/sbin/flasher.exe", 
    "lock": 0, 
    "name": "", 
    "status": "Flash Done"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:14.539" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:14.539" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Flash Done', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path':...</msg>
<status status="PASS" endtime="20170725 02:36:14.539" starttime="20170725 02:36:14.538"></status>
</kw>
<msg timestamp="20170725 02:36:14.539" level="INFO">${data} = {u'status': u'Flash Done', u'name': u'', u'lock': 0, u'flasher_instance': u'bios', u'filename': u'/tmp/witherspoon_910_golden.pnor', u'flasher_path': u'/usr/sbin/flasher.exe', u'flasher_name': u'flash...</msg>
<status status="PASS" endtime="20170725 02:36:14.539" starttime="20170725 02:36:14.214"></status>
</kw>
<msg timestamp="20170725 02:36:14.540" level="INFO">${status} = Flash Done</msg>
<status status="PASS" endtime="20170725 02:36:14.540" starttime="20170725 02:36:14.213"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>Flash Done</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:14.540" starttime="20170725 02:36:14.540"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:14.540" starttime="20170725 02:36:14.213"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:14.541" starttime="20170725 02:32:44.343"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:14.541" starttime="20170725 02:32:44.334"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:14.541" starttime="20170725 02:32:12.610"></status>
</kw>
<kw name="Verify PNOR Update" library="utils">
<doc>Verify that the PNOR is not corrupted.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170725 02:36:14.543" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170725 02:36:14.543" starttime="20170725 02:36:14.543"></status>
</kw>
<msg timestamp="20170725 02:36:14.543" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170725 02:36:14.543" starttime="20170725 02:36:14.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:14.544" starttime="20170725 02:36:14.544"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:14.545" starttime="20170725 02:36:14.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:14.545" starttime="20170725 02:36:14.545"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170725 02:36:14.546" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170725 02:36:14.546" starttime="20170725 02:36:14.546"></status>
</kw>
<msg timestamp="20170725 02:36:14.546" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170725 02:36:14.546" starttime="20170725 02:36:14.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:14.549" starttime="20170725 02:36:14.548"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:14.549" starttime="20170725 02:36:14.547"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:14.549" starttime="20170725 02:36:14.547"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170725 02:36:14.550" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170725 02:36:16.271" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170725 02:36:16.271" starttime="20170725 02:36:14.549"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:16.271" starttime="20170725 02:36:14.541"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${pflash_cmd}</arg>
</arguments>
<assign>
<var>${pnor_info}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:36:16.273" level="INFO">Executing command '/usr/sbin/pflash -r /dev/stdout -P VERSION'.</msg>
<msg timestamp="20170725 02:36:16.382" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170725 02:36:16.382" level="INFO">${stdout} = Reading to "/dev/stdout" from 0x02820000..0x02821000 !
[                                                  ] 0%IBM-witherspoon-redbud-ibm-OP9_v1.17_1.68
	op-build-v1.17-177-gdd8f32b-dirty
	buildroot-2...</msg>
<msg timestamp="20170725 02:36:16.382" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:36:16.382" starttime="20170725 02:36:16.272"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170725 02:36:16.383" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170725 02:36:16.383" starttime="20170725 02:36:16.382"></status>
</kw>
<msg timestamp="20170725 02:36:16.383" level="INFO">${pnor_info} = Reading to "/dev/stdout" from 0x02820000..0x02821000 !
[                                                  ] 0%IBM-witherspoon-redbud-ibm-OP9_v1.17_1.68
	op-build-v1.17-177-gdd8f32b-dirty
	buildroot-2...</msg>
<status status="PASS" endtime="20170725 02:36:16.383" starttime="20170725 02:36:16.272"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${pnor_info}</arg>
<arg>Flash header not found</arg>
<arg>Error</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.384" starttime="20170725 02:36:16.383"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:16.384" starttime="20170725 02:36:14.541"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170725 02:36:16.385" starttime="20170725 02:36:16.385"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:16.402" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:16.402" starttime="20170725 02:36:16.401"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:16.403" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:16.403" starttime="20170725 02:36:16.402"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:16.403" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:16.403" starttime="20170725 02:36:16.403"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:16.404" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:16.404" starttime="20170725 02:36:16.404"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:16.586" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:16.586" starttime="20170725 02:36:16.405"></status>
</kw>
<msg timestamp="20170725 02:36:16.586" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:16.586" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:16.586" starttime="20170725 02:36:16.405"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:16.587" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:16.587" starttime="20170725 02:36:16.587"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:16.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:16.588" starttime="20170725 02:36:16.588"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:16.588" starttime="20170725 02:36:16.401"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:16.588" starttime="20170725 02:36:16.400"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:16.588" starttime="20170725 02:36:16.399"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:16.589" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:36:16.590" starttime="20170725 02:36:16.589"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.590" starttime="20170725 02:36:16.590"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:16.674" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:36:16.674" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:16.674" starttime="20170725 02:36:16.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.675" starttime="20170725 02:36:16.674"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:16.675" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:16.675" starttime="20170725 02:36:16.675"></status>
</kw>
<msg timestamp="20170725 02:36:16.676" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:16.676" starttime="20170725 02:36:16.399"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:16.677" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:16.677" starttime="20170725 02:36:16.676"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:16.678" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:16.678" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:16.678" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170725 02:36:16.678" starttime="20170725 02:36:16.677"></status>
</kw>
<msg timestamp="20170725 02:36:16.678" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170725 02:36:16.678" starttime="20170725 02:36:16.398"></status>
</kw>
<msg timestamp="20170725 02:36:16.679" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170725 02:36:16.679" starttime="20170725 02:36:16.398"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170725 02:36:16.681" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170725 02:36:16.681" starttime="20170725 02:36:16.680"></status>
</kw>
<msg timestamp="20170725 02:36:16.681" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 02:36:16.681" starttime="20170725 02:36:16.679"></status>
</kw>
<msg timestamp="20170725 02:36:16.681" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 02:36:16.681" starttime="20170725 02:36:16.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.682" starttime="20170725 02:36:16.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.683" starttime="20170725 02:36:16.683"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170725 02:36:16.685" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170725 02:36:16.685" starttime="20170725 02:36:16.684"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170725 02:36:16.686" level="INFO">${FFDC_DIR_PATH} = ./</msg>
<status status="PASS" endtime="20170725 02:36:16.686" starttime="20170725 02:36:16.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.687" starttime="20170725 02:36:16.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.687" starttime="20170725 02:36:16.687"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170725 02:36:16.688" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170725 02:36:16.688" starttime="20170725 02:36:16.688"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170725 02:36:16.689" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170725 02:36:16.689" starttime="20170725 02:36:16.689"></status>
</kw>
<msg timestamp="20170725 02:36:16.689" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170725 02:36:16.689" starttime="20170725 02:36:16.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.690" starttime="20170725 02:36:16.689"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.691" starttime="20170725 02:36:16.690"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170725 02:36:16.692" level="INFO">${cur_time} = 2017-07-25 02:36:16:691539</msg>
<status status="PASS" endtime="20170725 02:36:16.692" starttime="20170725 02:36:16.691"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170725 02:36:16.694" level="INFO">${cur_time} = 20170725023616691539</msg>
<status status="PASS" endtime="20170725 02:36:16.694" starttime="20170725 02:36:16.694"></status>
</kw>
<msg timestamp="20170725 02:36:16.694" level="INFO">${cur_time} = 20170725023616691539</msg>
<status status="PASS" endtime="20170725 02:36:16.694" starttime="20170725 02:36:16.691"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170725 02:36:16.696" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:36:16.696" starttime="20170725 02:36:16.695"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:16.696" starttime="20170725 02:36:16.683"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:16.696" starttime="20170725 02:36:16.397"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:16.696" starttime="20170725 02:36:16.385"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:16.696" starttime="20170725 02:36:16.384"></status>
</kw>
<doc>Update PNOR image and verify.</doc>
<tags>
<tag>BIOS_Code_Update</tag>
<tag>Host_BIOS_Update</tag>
<tag>open-power</tag>
</tags>
<status status="PASS" endtime="20170725 02:36:16.696" critical="yes" starttime="20170725 02:32:08.485"></status>
</test>
<test id="s1-t2" name="Host BIOS Power On">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PREV_TEST_STATUS}' == 'PASS'</arg>
<arg>Validate Power On</arg>
</arguments>
<kw name="Validate Power On">
<doc>Power the host on, and validate that the sytem booted.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Start SOL Console Logging</arg>
</arguments>
<kw name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170725 02:36:16.712" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 02:36:16.714" starttime="20170725 02:36:16.712"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170725 02:36:16.715" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 02:36:16.715" starttime="20170725 02:36:16.714"></status>
</kw>
<msg timestamp="20170725 02:36:16.715" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 02:36:16.715" starttime="20170725 02:36:16.711"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170725 02:36:16.717" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 02:36:16.717" starttime="20170725 02:36:16.717"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170725 02:36:16.719" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 02:36:16.719" starttime="20170725 02:36:16.717"></status>
</kw>
<msg timestamp="20170725 02:36:16.720" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 02:36:16.720" starttime="20170725 02:36:16.716"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:36:16.721" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170725 02:36:16.721" starttime="20170725 02:36:16.721"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.721" starttime="20170725 02:36:16.721"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170725 02:36:16.742" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170725 02:36:16.756" level="INFO">${rc} = 0</msg>
<msg timestamp="20170725 02:36:16.757" level="INFO">${output} = /home/fspcibld/openbmc-test-automation/bin//ssh_pw</msg>
<status status="PASS" endtime="20170725 02:36:16.758" starttime="20170725 02:36:16.722"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.774" starttime="20170725 02:36:16.769"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.777" starttime="20170725 02:36:16.775"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:36:16.778" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" endtime="20170725 02:36:16.778" starttime="20170725 02:36:16.778"></status>
</kw>
<msg timestamp="20170725 02:36:16.780" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" endtime="20170725 02:36:16.780" starttime="20170725 02:36:16.720"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:36:16.781" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170725 02:36:16.781" starttime="20170725 02:36:16.780"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.781" starttime="20170725 02:36:16.781"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170725 02:36:16.802" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170725 02:36:16.821" level="INFO">${rc} = 0</msg>
<msg timestamp="20170725 02:36:16.821" level="INFO">${os_con_pid} = </msg>
<status status="PASS" endtime="20170725 02:36:16.821" starttime="20170725 02:36:16.782"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.825" starttime="20170725 02:36:16.824"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:36:16.825" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170725 02:36:16.825" starttime="20170725 02:36:16.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.827" starttime="20170725 02:36:16.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170725 02:36:16.827" level="INFO">${rc} = None</msg>
<msg timestamp="20170725 02:36:16.827" level="INFO">${output} = None</msg>
<status status="PASS" endtime="20170725 02:36:16.827" starttime="20170725 02:36:16.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.828" starttime="20170725 02:36:16.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170725 02:36:16.830" level="FAIL">Source file '/tmp/9.41.166.169_os_console' does not exist.</msg>
<status status="FAIL" endtime="20170725 02:36:16.830" starttime="20170725 02:36:16.830"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:16.830" starttime="20170725 02:36:16.829"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:16.830" starttime="20170725 02:36:16.829"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170725 02:36:16.831" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170725 02:36:16.831" starttime="20170725 02:36:16.831"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170725 02:36:16.832" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170725 02:36:16.832" starttime="20170725 02:36:16.831"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.889" starttime="20170725 02:36:16.833"></status>
</kw>
<msg timestamp="20170725 02:36:16.890" level="INFO">${rc} = 1</msg>
<msg timestamp="20170725 02:36:16.894" level="INFO">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status status="PASS" endtime="20170725 02:36:16.894" starttime="20170725 02:36:16.832"></status>
</kw>
<msg timestamp="20170725 02:36:16.898" level="INFO">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status status="PASS" endtime="20170725 02:36:16.898" starttime="20170725 02:36:16.715"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170725 02:36:16.905" html="yes" level="INFO">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:36:16.906" starttime="20170725 02:36:16.904"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:36:16.907" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170725 02:36:16.907" starttime="20170725 02:36:16.907"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.909" starttime="20170725 02:36:16.908"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170725 02:36:16.913" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170725 02:36:16.916" level="INFO">${rc} = 0</msg>
<msg timestamp="20170725 02:36:16.916" level="INFO">${output} = /home/fspcibld/openbmc-test-automation/bin//ssh_pw</msg>
<status status="PASS" endtime="20170725 02:36:16.916" starttime="20170725 02:36:16.909"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.921" starttime="20170725 02:36:16.919"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.922" starttime="20170725 02:36:16.921"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:36:16.922" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" endtime="20170725 02:36:16.922" starttime="20170725 02:36:16.922"></status>
</kw>
<msg timestamp="20170725 02:36:16.923" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" endtime="20170725 02:36:16.923" starttime="20170725 02:36:16.906"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:36:16.923" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" endtime="20170725 02:36:16.924" starttime="20170725 02:36:16.923"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.924" starttime="20170725 02:36:16.924"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170725 02:36:16.928" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170725 02:36:16.931" level="INFO">${rc} = 0</msg>
<msg timestamp="20170725 02:36:16.932" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170725 02:36:16.932" starttime="20170725 02:36:16.924"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:16.935" starttime="20170725 02:36:16.934"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:16.936" starttime="20170725 02:36:16.711"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:16.936" starttime="20170725 02:36:16.700"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power On</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power On</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170725 02:36:16.945" level="INFO">${boot_stack} = REST Power On</msg>
<msg timestamp="20170725 02:36:17.377" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170725 02:36:17.397" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170725 02:36:17.397" starttime="20170725 02:36:17.396"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:17.398" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170725 02:36:17.398" starttime="20170725 02:36:17.398"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:17.401" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:17.403" starttime="20170725 02:36:17.401"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:17.404" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:17.404" starttime="20170725 02:36:17.403"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:17.405" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:17.405" starttime="20170725 02:36:17.404"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:17.406" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:17.406" starttime="20170725 02:36:17.405"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:17.732" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:17.733" starttime="20170725 02:36:17.407"></status>
</kw>
<msg timestamp="20170725 02:36:17.733" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:17.733" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:17.733" starttime="20170725 02:36:17.406"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:17.734" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:17.734" starttime="20170725 02:36:17.733"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:17.734" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:17.734" starttime="20170725 02:36:17.734"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:17.734" starttime="20170725 02:36:17.400"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:17.735" starttime="20170725 02:36:17.400"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:17.735" starttime="20170725 02:36:17.399"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:17.735" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170725 02:36:17.735" starttime="20170725 02:36:17.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:17.736" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:17.736" starttime="20170725 02:36:17.736"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:17.736" starttime="20170725 02:36:17.736"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 02:36:17.738" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170725 02:36:17.738" starttime="20170725 02:36:17.737"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 02:36:17.739" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170725 02:36:17.739" starttime="20170725 02:36:17.739"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:17.739" starttime="20170725 02:36:17.738"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:17.739" starttime="20170725 02:36:17.737"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:18.007" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170725 02:36:18.008" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.008" starttime="20170725 02:36:17.740"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 02:36:18.009" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 02:36:18.010" starttime="20170725 02:36:18.009"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 02:36:18.011" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 02:36:18.011" starttime="20170725 02:36:18.010"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:18.011" starttime="20170725 02:36:18.010"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:18.011" starttime="20170725 02:36:18.008"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:18.012" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:18.012" starttime="20170725 02:36:18.011"></status>
</kw>
<msg timestamp="20170725 02:36:18.012" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.012" starttime="20170725 02:36:17.398"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:18.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.013" starttime="20170725 02:36:18.012"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170725 02:36:18.013" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:18.013" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:18.014" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170725 02:36:18.014" starttime="20170725 02:36:18.013"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:18.014" starttime="20170725 02:36:17.397"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:18.018" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:18.018" starttime="20170725 02:36:18.017"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:18.019" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:18.019" starttime="20170725 02:36:18.019"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:18.020" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:18.020" starttime="20170725 02:36:18.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:18.021" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:18.021" starttime="20170725 02:36:18.021"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:18.202" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:18.202" starttime="20170725 02:36:18.022"></status>
</kw>
<msg timestamp="20170725 02:36:18.203" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:18.203" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.203" starttime="20170725 02:36:18.022"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:18.203" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.203" starttime="20170725 02:36:18.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:18.204" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.204" starttime="20170725 02:36:18.204"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:18.204" starttime="20170725 02:36:18.017"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:18.204" starttime="20170725 02:36:18.016"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:18.205" starttime="20170725 02:36:18.015"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:18.205" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170725 02:36:18.205" starttime="20170725 02:36:18.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:18.206" starttime="20170725 02:36:18.205"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:18.312" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170725 02:36:18.312" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.312" starttime="20170725 02:36:18.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:18.313" starttime="20170725 02:36:18.313"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:18.314" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:18.314" starttime="20170725 02:36:18.313"></status>
</kw>
<msg timestamp="20170725 02:36:18.314" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.314" starttime="20170725 02:36:18.014"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:18.314" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.315" starttime="20170725 02:36:18.314"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:18.315" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:18.315" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:18.315" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170725 02:36:18.315" starttime="20170725 02:36:18.315"></status>
</kw>
<msg timestamp="20170725 02:36:18.316" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170725 02:36:18.316" starttime="20170725 02:36:18.014"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170725 02:36:18.316" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.316" starttime="20170725 02:36:18.316"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:18.316" starttime="20170725 02:36:17.394"></status>
</kw>
<msg timestamp="20170725 02:36:18.340" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170725 02:36:18.345" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170725 02:36:18.345" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170725 02:36:18.345" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:18.390" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:18.391" starttime="20170725 02:36:18.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:18.391" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:18.391" starttime="20170725 02:36:18.391"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:18.392" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:18.392" starttime="20170725 02:36:18.392"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:18.393" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:18.393" starttime="20170725 02:36:18.392"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:18.625" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:18.625" starttime="20170725 02:36:18.394"></status>
</kw>
<msg timestamp="20170725 02:36:18.625" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:18.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.626" starttime="20170725 02:36:18.393"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:18.626" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.626" starttime="20170725 02:36:18.626"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:18.627" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.627" starttime="20170725 02:36:18.627"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:18.627" starttime="20170725 02:36:18.388"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:18.627" starttime="20170725 02:36:18.388"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:18.628" starttime="20170725 02:36:18.387"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:18.628" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:36:18.628" starttime="20170725 02:36:18.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:18.629" starttime="20170725 02:36:18.629"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:18.707" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:36:18.708" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.708" starttime="20170725 02:36:18.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:18.708" starttime="20170725 02:36:18.708"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:18.709" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:18.709" starttime="20170725 02:36:18.709"></status>
</kw>
<msg timestamp="20170725 02:36:18.709" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.709" starttime="20170725 02:36:18.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:18.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.710" starttime="20170725 02:36:18.709"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:18.710" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:18.710" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:18.711" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170725 02:36:18.711" starttime="20170725 02:36:18.710"></status>
</kw>
<msg timestamp="20170725 02:36:18.711" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170725 02:36:18.711" starttime="20170725 02:36:18.385"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:18.711" starttime="20170725 02:36:18.379"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:18.715" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:18.715" starttime="20170725 02:36:18.715"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:18.716" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:18.716" starttime="20170725 02:36:18.716"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:18.717" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:18.717" starttime="20170725 02:36:18.716"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:18.717" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:18.717" starttime="20170725 02:36:18.717"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:18.959" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:18.960" starttime="20170725 02:36:18.718"></status>
</kw>
<msg timestamp="20170725 02:36:18.960" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:18.960" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.960" starttime="20170725 02:36:18.718"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:18.960" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.961" starttime="20170725 02:36:18.960"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:18.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:18.961" starttime="20170725 02:36:18.961"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:18.961" starttime="20170725 02:36:18.714"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:18.961" starttime="20170725 02:36:18.714"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:18.962" starttime="20170725 02:36:18.713"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:18.962" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170725 02:36:18.962" starttime="20170725 02:36:18.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:18.963" starttime="20170725 02:36:18.963"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:19.049" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170725 02:36:19.050" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.050" starttime="20170725 02:36:18.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:19.050" starttime="20170725 02:36:19.050"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:19.051" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:19.051" starttime="20170725 02:36:19.051"></status>
</kw>
<msg timestamp="20170725 02:36:19.051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.051" starttime="20170725 02:36:18.713"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:19.052" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.052" starttime="20170725 02:36:19.051"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:19.052" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:19.052" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:19.052" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170725 02:36:19.052" starttime="20170725 02:36:19.052"></status>
</kw>
<msg timestamp="20170725 02:36:19.053" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170725 02:36:19.053" starttime="20170725 02:36:18.712"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:19.053" starttime="20170725 02:36:18.712"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:19.057" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:19.057" starttime="20170725 02:36:19.057"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:19.058" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:19.058" starttime="20170725 02:36:19.058"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:19.059" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:19.059" starttime="20170725 02:36:19.058"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:19.059" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:19.059" starttime="20170725 02:36:19.059"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:19.249" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:19.249" starttime="20170725 02:36:19.060"></status>
</kw>
<msg timestamp="20170725 02:36:19.249" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:19.249" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.249" starttime="20170725 02:36:19.060"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:19.250" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.250" starttime="20170725 02:36:19.250"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:19.251" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.251" starttime="20170725 02:36:19.250"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:19.251" starttime="20170725 02:36:19.056"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:19.251" starttime="20170725 02:36:19.056"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:19.251" starttime="20170725 02:36:19.055"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:19.252" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:36:19.252" starttime="20170725 02:36:19.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:19.252" starttime="20170725 02:36:19.252"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:19.316" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:36:19.316" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.316" starttime="20170725 02:36:19.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:19.317" starttime="20170725 02:36:19.316"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:19.317" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:19.317" starttime="20170725 02:36:19.317"></status>
</kw>
<msg timestamp="20170725 02:36:19.317" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.317" starttime="20170725 02:36:19.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:19.318" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.318" starttime="20170725 02:36:19.318"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:19.319" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:19.319" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:19.319" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 02:36:19.319" starttime="20170725 02:36:19.318"></status>
</kw>
<msg timestamp="20170725 02:36:19.319" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 02:36:19.319" starttime="20170725 02:36:19.054"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:19.319" starttime="20170725 02:36:19.053"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:19.323" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:19.324" starttime="20170725 02:36:19.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:19.324" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:19.324" starttime="20170725 02:36:19.324"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:19.325" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:19.325" starttime="20170725 02:36:19.324"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:19.326" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:19.326" starttime="20170725 02:36:19.325"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:19.541" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:19.541" starttime="20170725 02:36:19.327"></status>
</kw>
<msg timestamp="20170725 02:36:19.541" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:19.542" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.542" starttime="20170725 02:36:19.326"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:19.542" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.542" starttime="20170725 02:36:19.542"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:19.543" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.544" starttime="20170725 02:36:19.543"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:19.544" starttime="20170725 02:36:19.322"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:19.544" starttime="20170725 02:36:19.322"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:19.544" starttime="20170725 02:36:19.321"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:19.545" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:36:19.545" starttime="20170725 02:36:19.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:19.546" starttime="20170725 02:36:19.545"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:19.639" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:36:19.639" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.639" starttime="20170725 02:36:19.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:19.639" starttime="20170725 02:36:19.639"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:19.640" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:19.640" starttime="20170725 02:36:19.640"></status>
</kw>
<msg timestamp="20170725 02:36:19.640" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.640" starttime="20170725 02:36:19.321"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:19.641" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.641" starttime="20170725 02:36:19.640"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:19.641" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:19.642" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:19.642" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170725 02:36:19.642" starttime="20170725 02:36:19.641"></status>
</kw>
<msg timestamp="20170725 02:36:19.642" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170725 02:36:19.642" starttime="20170725 02:36:19.320"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:19.642" starttime="20170725 02:36:19.320"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>REST Power On</arg>
</arguments>
<msg timestamp="20170725 02:36:19.649" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170725 02:36:19.666" level="INFO">${QUIET} = 1</msg>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<arguments>
<arg>wait=${0}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170725 02:36:19.669" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" endtime="20170725 02:36:19.669" starttime="20170725 02:36:19.668"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:19.670" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170725 02:36:19.670" starttime="20170725 02:36:19.669"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:19.673" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:19.673" starttime="20170725 02:36:19.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:19.674" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:19.674" starttime="20170725 02:36:19.674"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:19.675" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:19.675" starttime="20170725 02:36:19.674"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:19.675" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:19.675" starttime="20170725 02:36:19.675"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:19.885" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:19.885" starttime="20170725 02:36:19.676"></status>
</kw>
<msg timestamp="20170725 02:36:19.885" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:19.885" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.885" starttime="20170725 02:36:19.676"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:19.886" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.886" starttime="20170725 02:36:19.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:19.886" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:19.886" starttime="20170725 02:36:19.886"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:19.887" starttime="20170725 02:36:19.672"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:19.887" starttime="20170725 02:36:19.671"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:19.887" starttime="20170725 02:36:19.671"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:19.887" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170725 02:36:19.887" starttime="20170725 02:36:19.887"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:19.888" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:19.888" starttime="20170725 02:36:19.888"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:19.889" starttime="20170725 02:36:19.888"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 02:36:19.890" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Typ...</msg>
<status status="PASS" endtime="20170725 02:36:19.890" starttime="20170725 02:36:19.889"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 02:36:19.891" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170725 02:36:19.891" starttime="20170725 02:36:19.891"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:19.891" starttime="20170725 02:36:19.890"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:19.892" starttime="20170725 02:36:19.889"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:20.135" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170725 02:36:20.135" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:20.135" starttime="20170725 02:36:19.892"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170725 02:36:20.136" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 02:36:20.137" starttime="20170725 02:36:20.136"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170725 02:36:20.137" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170725 02:36:20.138" starttime="20170725 02:36:20.137"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:20.138" starttime="20170725 02:36:20.137"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:20.138" starttime="20170725 02:36:20.135"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:20.138" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:20.139" starttime="20170725 02:36:20.138"></status>
</kw>
<msg timestamp="20170725 02:36:20.139" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:20.139" starttime="20170725 02:36:19.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:20.139" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:20.139" starttime="20170725 02:36:20.139"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170725 02:36:20.140" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:20.140" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:20.140" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170725 02:36:20.140" starttime="20170725 02:36:20.140"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:20.140" starttime="20170725 02:36:19.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170725 02:36:20.142" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170725 02:36:20.142" starttime="20170725 02:36:20.141"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:20.142" starttime="20170725 02:36:20.141"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:20.142" starttime="20170725 02:36:19.667"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:20.156" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:20.156" starttime="20170725 02:36:20.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:20.157" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:20.157" starttime="20170725 02:36:20.157"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:20.158" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:20.158" starttime="20170725 02:36:20.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:20.159" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:20.159" starttime="20170725 02:36:20.158"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:20.539" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:20.539" starttime="20170725 02:36:20.161"></status>
</kw>
<msg timestamp="20170725 02:36:20.539" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:20.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:20.539" starttime="20170725 02:36:20.159"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:20.540" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:20.540" starttime="20170725 02:36:20.539"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:20.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:20.540" starttime="20170725 02:36:20.540"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:20.541" starttime="20170725 02:36:20.155"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:20.541" starttime="20170725 02:36:20.155"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:20.541" starttime="20170725 02:36:20.154"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:20.541" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:36:20.542" starttime="20170725 02:36:20.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:20.542" starttime="20170725 02:36:20.542"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:20.626" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:36:20.626" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:20.626" starttime="20170725 02:36:20.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:20.627" starttime="20170725 02:36:20.627"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:20.627" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:20.628" starttime="20170725 02:36:20.627"></status>
</kw>
<msg timestamp="20170725 02:36:20.628" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:20.628" starttime="20170725 02:36:20.153"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:20.628" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:20.629" starttime="20170725 02:36:20.628"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:20.629" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:20.629" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:20.629" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170725 02:36:20.629" starttime="20170725 02:36:20.629"></status>
</kw>
<msg timestamp="20170725 02:36:20.630" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170725 02:36:20.630" starttime="20170725 02:36:20.153"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:20.630" starttime="20170725 02:36:20.153"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:20.636" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:20.636" starttime="20170725 02:36:20.635"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:20.637" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:20.637" starttime="20170725 02:36:20.636"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:20.637" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:20.637" starttime="20170725 02:36:20.637"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:20.638" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:20.638" starttime="20170725 02:36:20.637"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:22.834" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:22.834" starttime="20170725 02:36:20.639"></status>
</kw>
<msg timestamp="20170725 02:36:22.834" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:22.834" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:22.834" starttime="20170725 02:36:20.638"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:22.835" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:22.835" starttime="20170725 02:36:22.835"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:22.836" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:22.836" starttime="20170725 02:36:22.836"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:22.836" starttime="20170725 02:36:20.635"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:22.836" starttime="20170725 02:36:20.634"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:22.836" starttime="20170725 02:36:20.633"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:22.837" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170725 02:36:22.837" starttime="20170725 02:36:22.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:22.838" starttime="20170725 02:36:22.837"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:29.292" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170725 02:36:29.292" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:29.292" starttime="20170725 02:36:22.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:29.293" starttime="20170725 02:36:29.293"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:29.294" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:29.294" starttime="20170725 02:36:29.294"></status>
</kw>
<msg timestamp="20170725 02:36:29.294" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:29.294" starttime="20170725 02:36:20.632"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:29.295" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:29.295" starttime="20170725 02:36:29.294"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:29.295" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:29.295" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:29.295" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170725 02:36:29.296" starttime="20170725 02:36:29.295"></status>
</kw>
<msg timestamp="20170725 02:36:29.296" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170725 02:36:29.296" starttime="20170725 02:36:20.631"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:29.296" starttime="20170725 02:36:20.631"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:29.300" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:29.300" starttime="20170725 02:36:29.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:29.301" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:29.301" starttime="20170725 02:36:29.301"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:29.302" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:29.302" starttime="20170725 02:36:29.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:29.302" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:29.302" starttime="20170725 02:36:29.302"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:29.867" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:29.867" starttime="20170725 02:36:29.303"></status>
</kw>
<msg timestamp="20170725 02:36:29.867" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:29.867" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:29.867" starttime="20170725 02:36:29.303"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:29.868" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:29.868" starttime="20170725 02:36:29.868"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:29.869" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:29.869" starttime="20170725 02:36:29.868"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:29.869" starttime="20170725 02:36:29.299"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:29.869" starttime="20170725 02:36:29.299"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:29.869" starttime="20170725 02:36:29.298"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:29.870" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:36:29.870" starttime="20170725 02:36:29.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:29.870" starttime="20170725 02:36:29.870"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:30.486" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:36:30.486" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:30.486" starttime="20170725 02:36:29.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:30.487" starttime="20170725 02:36:30.487"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:30.488" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:30.488" starttime="20170725 02:36:30.487"></status>
</kw>
<msg timestamp="20170725 02:36:30.488" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:30.488" starttime="20170725 02:36:29.297"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:30.489" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:30.489" starttime="20170725 02:36:30.488"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:30.489" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:30.489" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:30.490" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 02:36:30.490" starttime="20170725 02:36:30.489"></status>
</kw>
<msg timestamp="20170725 02:36:30.490" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 02:36:30.490" starttime="20170725 02:36:29.297"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:30.490" starttime="20170725 02:36:29.296"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:30.494" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:30.494" starttime="20170725 02:36:30.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:30.495" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:30.495" starttime="20170725 02:36:30.494"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:30.495" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:30.495" starttime="20170725 02:36:30.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:30.496" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:30.496" starttime="20170725 02:36:30.496"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:30.681" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:30.681" starttime="20170725 02:36:30.497"></status>
</kw>
<msg timestamp="20170725 02:36:30.681" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:30.681" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:30.681" starttime="20170725 02:36:30.496"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:30.682" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:30.682" starttime="20170725 02:36:30.682"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:30.683" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:30.683" starttime="20170725 02:36:30.682"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:30.683" starttime="20170725 02:36:30.493"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:30.683" starttime="20170725 02:36:30.492"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:30.683" starttime="20170725 02:36:30.492"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:30.684" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:36:30.684" starttime="20170725 02:36:30.683"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:30.684" starttime="20170725 02:36:30.684"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:31.243" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:36:31.243" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:31.243" starttime="20170725 02:36:30.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:31.244" starttime="20170725 02:36:31.243"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:31.244" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:31.244" starttime="20170725 02:36:31.244"></status>
</kw>
<msg timestamp="20170725 02:36:31.245" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:31.245" starttime="20170725 02:36:30.491"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:31.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:31.245" starttime="20170725 02:36:31.245"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:31.246" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:31.246" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:31.246" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170725 02:36:31.246" starttime="20170725 02:36:31.246"></status>
</kw>
<msg timestamp="20170725 02:36:31.246" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170725 02:36:31.246" starttime="20170725 02:36:30.491"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:31.247" starttime="20170725 02:36:30.490"></status>
</kw>
<msg timestamp="20170725 02:36:31.248" level="FAIL">
#(UTC) 2017/07/25 02:36:31.247121 -   11.603191 - **ERROR** The current state of the machine matches the match state:
state:
  state[rest]:                                    1
  state[chassis]:                                 Off
  state[bmc]:                                     Ready
  state[boot_progress]:                           Off
  state[host]:                                    Off
</msg>
<status status="FAIL" endtime="20170725 02:36:31.248" starttime="20170725 02:36:20.151"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$', 'chassis': '^Off$', 'bmc': '^Ready$', 'boot_progress': '^Off$', 'host': '^Off$'}</arg>
<arg>invert=${1}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:41.255" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:41.255" starttime="20170725 02:36:41.255"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:41.256" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:41.256" starttime="20170725 02:36:41.256"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:41.257" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:41.257" starttime="20170725 02:36:41.256"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:41.257" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:41.257" starttime="20170725 02:36:41.257"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:41.507" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:41.507" starttime="20170725 02:36:41.258"></status>
</kw>
<msg timestamp="20170725 02:36:41.508" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:41.508" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:41.508" starttime="20170725 02:36:41.258"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:41.508" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:41.509" starttime="20170725 02:36:41.508"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:41.509" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:41.509" starttime="20170725 02:36:41.509"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:41.509" starttime="20170725 02:36:41.254"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:41.509" starttime="20170725 02:36:41.254"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:41.510" starttime="20170725 02:36:41.253"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:41.510" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:36:41.510" starttime="20170725 02:36:41.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:41.511" starttime="20170725 02:36:41.511"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:41.575" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:36:41.575" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:41.575" starttime="20170725 02:36:41.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:41.576" starttime="20170725 02:36:41.576"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:41.576" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:41.577" starttime="20170725 02:36:41.576"></status>
</kw>
<msg timestamp="20170725 02:36:41.577" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:41.577" starttime="20170725 02:36:41.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:41.577" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:41.578" starttime="20170725 02:36:41.577"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:41.578" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:41.578" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:41.578" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:36:41.578" starttime="20170725 02:36:41.578"></status>
</kw>
<msg timestamp="20170725 02:36:41.579" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:36:41.579" starttime="20170725 02:36:41.252"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:41.579" starttime="20170725 02:36:41.251"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:41.583" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:41.583" starttime="20170725 02:36:41.582"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:41.584" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:41.584" starttime="20170725 02:36:41.583"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:41.584" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:41.584" starttime="20170725 02:36:41.584"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:41.585" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:41.585" starttime="20170725 02:36:41.585"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:41.770" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:41.771" starttime="20170725 02:36:41.586"></status>
</kw>
<msg timestamp="20170725 02:36:41.771" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:41.771" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:41.771" starttime="20170725 02:36:41.585"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:41.771" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:41.772" starttime="20170725 02:36:41.771"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:41.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:41.772" starttime="20170725 02:36:41.772"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:41.772" starttime="20170725 02:36:41.582"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:41.772" starttime="20170725 02:36:41.581"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:41.773" starttime="20170725 02:36:41.581"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:41.773" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170725 02:36:41.773" starttime="20170725 02:36:41.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:41.774" starttime="20170725 02:36:41.774"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:41.836" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170725 02:36:41.836" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:41.836" starttime="20170725 02:36:41.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:41.837" starttime="20170725 02:36:41.837"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:41.837" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:41.838" starttime="20170725 02:36:41.837"></status>
</kw>
<msg timestamp="20170725 02:36:41.838" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:41.838" starttime="20170725 02:36:41.580"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:41.838" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:41.838" starttime="20170725 02:36:41.838"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:41.839" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:41.839" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:41.839" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170725 02:36:41.839" starttime="20170725 02:36:41.839"></status>
</kw>
<msg timestamp="20170725 02:36:41.839" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170725 02:36:41.840" starttime="20170725 02:36:41.580"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:41.840" starttime="20170725 02:36:41.579"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:41.844" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:41.845" starttime="20170725 02:36:41.844"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:41.846" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:41.846" starttime="20170725 02:36:41.845"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:41.847" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:41.847" starttime="20170725 02:36:41.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:41.848" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:41.848" starttime="20170725 02:36:41.847"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:42.048" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:42.048" starttime="20170725 02:36:41.849"></status>
</kw>
<msg timestamp="20170725 02:36:42.048" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:42.048" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.048" starttime="20170725 02:36:41.848"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:42.049" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.049" starttime="20170725 02:36:42.049"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:42.050" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.050" starttime="20170725 02:36:42.049"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:42.050" starttime="20170725 02:36:41.843"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:42.050" starttime="20170725 02:36:41.843"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:42.050" starttime="20170725 02:36:41.842"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:42.051" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:36:42.051" starttime="20170725 02:36:42.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:42.052" starttime="20170725 02:36:42.052"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:42.141" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:36:42.141" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.141" starttime="20170725 02:36:42.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:42.142" starttime="20170725 02:36:42.142"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:42.142" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:42.142" starttime="20170725 02:36:42.142"></status>
</kw>
<msg timestamp="20170725 02:36:42.143" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.143" starttime="20170725 02:36:41.841"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:42.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.143" starttime="20170725 02:36:42.143"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:42.144" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:42.144" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:42.144" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 02:36:42.144" starttime="20170725 02:36:42.144"></status>
</kw>
<msg timestamp="20170725 02:36:42.144" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 02:36:42.144" starttime="20170725 02:36:41.840"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:42.145" starttime="20170725 02:36:41.840"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:42.148" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:42.149" starttime="20170725 02:36:42.148"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:42.149" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:42.149" starttime="20170725 02:36:42.149"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:42.150" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:42.150" starttime="20170725 02:36:42.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:42.151" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:42.151" starttime="20170725 02:36:42.150"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:42.362" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:42.362" starttime="20170725 02:36:42.152"></status>
</kw>
<msg timestamp="20170725 02:36:42.362" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:42.362" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.362" starttime="20170725 02:36:42.151"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:42.363" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.363" starttime="20170725 02:36:42.363"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:42.364" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.364" starttime="20170725 02:36:42.363"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:42.364" starttime="20170725 02:36:42.148"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:42.364" starttime="20170725 02:36:42.147"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:42.364" starttime="20170725 02:36:42.146"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:42.365" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:36:42.365" starttime="20170725 02:36:42.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:42.366" starttime="20170725 02:36:42.366"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:42.430" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:36:42.430" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.430" starttime="20170725 02:36:42.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:42.431" starttime="20170725 02:36:42.430"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:42.431" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:42.431" starttime="20170725 02:36:42.431"></status>
</kw>
<msg timestamp="20170725 02:36:42.431" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.431" starttime="20170725 02:36:42.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:42.432" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.432" starttime="20170725 02:36:42.432"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:42.432" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:42.433" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:42.433" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:36:42.433" starttime="20170725 02:36:42.432"></status>
</kw>
<msg timestamp="20170725 02:36:42.433" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:36:42.433" starttime="20170725 02:36:42.145"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:42.433" starttime="20170725 02:36:42.145"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:42.434" starttime="20170725 02:36:41.249"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:42.447" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:42.448" starttime="20170725 02:36:42.447"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:42.449" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:42.449" starttime="20170725 02:36:42.449"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:42.450" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:42.450" starttime="20170725 02:36:42.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:42.451" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:42.451" starttime="20170725 02:36:42.450"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:42.677" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:42.677" starttime="20170725 02:36:42.451"></status>
</kw>
<msg timestamp="20170725 02:36:42.678" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:42.678" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.678" starttime="20170725 02:36:42.451"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:42.678" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.679" starttime="20170725 02:36:42.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:42.679" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.679" starttime="20170725 02:36:42.679"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:42.679" starttime="20170725 02:36:42.446"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:42.679" starttime="20170725 02:36:42.446"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:42.680" starttime="20170725 02:36:42.445"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:42.680" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:36:42.680" starttime="20170725 02:36:42.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:42.681" starttime="20170725 02:36:42.681"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:42.743" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:36:42.743" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.743" starttime="20170725 02:36:42.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:42.744" starttime="20170725 02:36:42.743"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:42.744" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:42.744" starttime="20170725 02:36:42.744"></status>
</kw>
<msg timestamp="20170725 02:36:42.744" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.744" starttime="20170725 02:36:42.445"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:42.745" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.745" starttime="20170725 02:36:42.745"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:42.746" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:42.746" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:42.746" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:36:42.746" starttime="20170725 02:36:42.745"></status>
</kw>
<msg timestamp="20170725 02:36:42.746" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:36:42.746" starttime="20170725 02:36:42.444"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:42.746" starttime="20170725 02:36:42.444"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:42.750" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:42.751" starttime="20170725 02:36:42.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:42.751" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:42.751" starttime="20170725 02:36:42.751"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:42.752" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:42.752" starttime="20170725 02:36:42.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:42.752" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:42.752" starttime="20170725 02:36:42.752"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:42.989" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:42.989" starttime="20170725 02:36:42.753"></status>
</kw>
<msg timestamp="20170725 02:36:42.989" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:42.989" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.989" starttime="20170725 02:36:42.753"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:42.990" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.990" starttime="20170725 02:36:42.990"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:42.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:42.991" starttime="20170725 02:36:42.991"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:42.991" starttime="20170725 02:36:42.749"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:42.991" starttime="20170725 02:36:42.749"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:42.991" starttime="20170725 02:36:42.748"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:42.992" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:36:42.992" starttime="20170725 02:36:42.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:42.993" starttime="20170725 02:36:42.992"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:43.076" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:36:43.077" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:43.077" starttime="20170725 02:36:42.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:43.077" starttime="20170725 02:36:43.077"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:43.078" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:43.078" starttime="20170725 02:36:43.078"></status>
</kw>
<msg timestamp="20170725 02:36:43.078" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:43.078" starttime="20170725 02:36:42.748"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:43.079" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:43.079" starttime="20170725 02:36:43.078"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:43.079" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:43.079" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:43.080" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 02:36:43.080" starttime="20170725 02:36:43.079"></status>
</kw>
<msg timestamp="20170725 02:36:43.080" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 02:36:43.080" starttime="20170725 02:36:42.747"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:43.080" starttime="20170725 02:36:42.747"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:43.084" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:43.084" starttime="20170725 02:36:43.083"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:43.085" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:43.085" starttime="20170725 02:36:43.084"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:43.085" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:43.085" starttime="20170725 02:36:43.085"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:43.086" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:43.086" starttime="20170725 02:36:43.086"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:43.324" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:43.324" starttime="20170725 02:36:43.087"></status>
</kw>
<msg timestamp="20170725 02:36:43.324" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:43.324" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:43.324" starttime="20170725 02:36:43.086"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:43.325" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:43.325" starttime="20170725 02:36:43.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:43.326" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:43.326" starttime="20170725 02:36:43.325"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:43.326" starttime="20170725 02:36:43.083"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:43.326" starttime="20170725 02:36:43.082"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:43.326" starttime="20170725 02:36:43.082"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:43.327" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:36:43.327" starttime="20170725 02:36:43.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:43.327" starttime="20170725 02:36:43.327"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:43.389" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:36:43.389" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:43.389" starttime="20170725 02:36:43.327"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:43.390" starttime="20170725 02:36:43.389"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:43.390" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:43.390" starttime="20170725 02:36:43.390"></status>
</kw>
<msg timestamp="20170725 02:36:43.390" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:43.390" starttime="20170725 02:36:43.081"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:43.391" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:43.391" starttime="20170725 02:36:43.391"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:43.392" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:43.392" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:43.392" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:36:43.392" starttime="20170725 02:36:43.391"></status>
</kw>
<msg timestamp="20170725 02:36:43.392" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:36:43.392" starttime="20170725 02:36:43.081"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:43.392" starttime="20170725 02:36:43.080"></status>
</kw>
<msg timestamp="20170725 02:36:43.393" level="FAIL">
#(UTC) 2017/07/25 02:36:43.392553 -   12.145432 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:36:43.393" starttime="20170725 02:36:42.442"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:53.399" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:53.400" starttime="20170725 02:36:53.399"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:53.400" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:53.400" starttime="20170725 02:36:53.400"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:53.401" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:53.401" starttime="20170725 02:36:53.400"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:53.401" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:53.402" starttime="20170725 02:36:53.401"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:53.792" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:53.792" starttime="20170725 02:36:53.402"></status>
</kw>
<msg timestamp="20170725 02:36:53.792" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:53.792" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:53.792" starttime="20170725 02:36:53.402"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:53.793" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:53.793" starttime="20170725 02:36:53.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:53.794" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:53.794" starttime="20170725 02:36:53.794"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:53.794" starttime="20170725 02:36:53.398"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:53.794" starttime="20170725 02:36:53.398"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:53.794" starttime="20170725 02:36:53.397"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:53.795" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:36:53.795" starttime="20170725 02:36:53.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:53.796" starttime="20170725 02:36:53.795"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:53.892" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:36:53.892" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:53.892" starttime="20170725 02:36:53.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:53.893" starttime="20170725 02:36:53.892"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:53.893" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:53.893" starttime="20170725 02:36:53.893"></status>
</kw>
<msg timestamp="20170725 02:36:53.893" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:53.894" starttime="20170725 02:36:53.397"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:53.894" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:53.894" starttime="20170725 02:36:53.894"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:53.895" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:53.895" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:53.895" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:36:53.895" starttime="20170725 02:36:53.894"></status>
</kw>
<msg timestamp="20170725 02:36:53.895" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:36:53.895" starttime="20170725 02:36:53.396"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:53.896" starttime="20170725 02:36:53.395"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:53.899" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:53.900" starttime="20170725 02:36:53.899"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:53.900" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:53.900" starttime="20170725 02:36:53.900"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:53.901" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:53.901" starttime="20170725 02:36:53.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:53.902" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:53.902" starttime="20170725 02:36:53.901"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:54.404" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:54.404" starttime="20170725 02:36:53.902"></status>
</kw>
<msg timestamp="20170725 02:36:54.404" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:54.405" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:54.405" starttime="20170725 02:36:53.902"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:54.405" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:54.405" starttime="20170725 02:36:54.405"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:54.406" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:54.406" starttime="20170725 02:36:54.406"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:54.406" starttime="20170725 02:36:53.899"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:54.406" starttime="20170725 02:36:53.898"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:54.407" starttime="20170725 02:36:53.897"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:54.407" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:36:54.407" starttime="20170725 02:36:54.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:54.408" starttime="20170725 02:36:54.407"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:54.630" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:36:54.630" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:54.630" starttime="20170725 02:36:54.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:54.631" starttime="20170725 02:36:54.631"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:54.632" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:54.632" starttime="20170725 02:36:54.631"></status>
</kw>
<msg timestamp="20170725 02:36:54.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:54.632" starttime="20170725 02:36:53.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:54.633" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:54.633" starttime="20170725 02:36:54.632"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:54.633" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:54.633" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:54.634" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170725 02:36:54.634" starttime="20170725 02:36:54.633"></status>
</kw>
<msg timestamp="20170725 02:36:54.634" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170725 02:36:54.634" starttime="20170725 02:36:53.896"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:54.634" starttime="20170725 02:36:53.896"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:36:54.638" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:36:54.639" starttime="20170725 02:36:54.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:36:54.639" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:36:54.639" starttime="20170725 02:36:54.639"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:36:54.640" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:36:54.640" starttime="20170725 02:36:54.640"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:36:54.641" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:36:54.641" starttime="20170725 02:36:54.640"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:36:54.928" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:36:54.928" starttime="20170725 02:36:54.641"></status>
</kw>
<msg timestamp="20170725 02:36:54.928" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:36:54.928" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:54.928" starttime="20170725 02:36:54.641"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:36:54.929" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:54.929" starttime="20170725 02:36:54.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:54.930" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:54.930" starttime="20170725 02:36:54.929"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:54.930" starttime="20170725 02:36:54.637"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:54.930" starttime="20170725 02:36:54.637"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:54.930" starttime="20170725 02:36:54.636"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:36:54.931" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:36:54.931" starttime="20170725 02:36:54.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:54.931" starttime="20170725 02:36:54.931"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:36:55.041" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:36:55.042" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:55.042" starttime="20170725 02:36:54.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:36:55.042" starttime="20170725 02:36:55.042"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:36:55.043" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:36:55.043" starttime="20170725 02:36:55.043"></status>
</kw>
<msg timestamp="20170725 02:36:55.043" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:36:55.043" starttime="20170725 02:36:54.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:36:55.044" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:36:55.044" starttime="20170725 02:36:55.043"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:36:55.044" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:36:55.044" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:36:55.045" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:36:55.045" starttime="20170725 02:36:55.044"></status>
</kw>
<msg timestamp="20170725 02:36:55.045" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:36:55.045" starttime="20170725 02:36:54.635"></status>
</kw>
<status status="PASS" endtime="20170725 02:36:55.045" starttime="20170725 02:36:54.634"></status>
</kw>
<msg timestamp="20170725 02:36:55.046" level="FAIL">
#(UTC) 2017/07/25 02:36:55.045372 -   11.652819 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           Off
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:36:55.046" starttime="20170725 02:36:53.394"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:37:05.052" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:37:05.053" starttime="20170725 02:37:05.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:37:05.054" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:37:05.054" starttime="20170725 02:37:05.053"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:37:05.054" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:37:05.054" starttime="20170725 02:37:05.054"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:37:05.055" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:37:05.055" starttime="20170725 02:37:05.055"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:37:05.317" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:37:05.317" starttime="20170725 02:37:05.056"></status>
</kw>
<msg timestamp="20170725 02:37:05.318" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:37:05.318" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:05.318" starttime="20170725 02:37:05.055"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:37:05.318" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:05.318" starttime="20170725 02:37:05.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:05.319" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:05.319" starttime="20170725 02:37:05.319"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:05.319" starttime="20170725 02:37:05.052"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:05.319" starttime="20170725 02:37:05.051"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:05.320" starttime="20170725 02:37:05.051"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:37:05.320" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:37:05.320" starttime="20170725 02:37:05.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:05.321" starttime="20170725 02:37:05.320"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:37:05.383" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:37:05.384" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:05.384" starttime="20170725 02:37:05.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:05.384" starttime="20170725 02:37:05.384"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:37:05.385" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:37:05.385" starttime="20170725 02:37:05.385"></status>
</kw>
<msg timestamp="20170725 02:37:05.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:05.385" starttime="20170725 02:37:05.050"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:05.386" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:05.386" starttime="20170725 02:37:05.385"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:37:05.386" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:37:05.386" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:37:05.387" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:37:05.387" starttime="20170725 02:37:05.386"></status>
</kw>
<msg timestamp="20170725 02:37:05.387" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:37:05.387" starttime="20170725 02:37:05.049"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:05.387" starttime="20170725 02:37:05.049"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:37:05.393" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:37:05.393" starttime="20170725 02:37:05.392"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:37:05.394" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:37:05.394" starttime="20170725 02:37:05.393"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:37:05.394" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:37:05.394" starttime="20170725 02:37:05.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:37:05.395" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:37:05.395" starttime="20170725 02:37:05.395"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:37:05.635" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:37:05.635" starttime="20170725 02:37:05.396"></status>
</kw>
<msg timestamp="20170725 02:37:05.635" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:37:05.635" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:05.635" starttime="20170725 02:37:05.395"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:37:05.636" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:05.636" starttime="20170725 02:37:05.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:05.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:05.637" starttime="20170725 02:37:05.636"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:05.637" starttime="20170725 02:37:05.392"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:05.637" starttime="20170725 02:37:05.391"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:05.637" starttime="20170725 02:37:05.390"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:37:05.637" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:37:05.637" starttime="20170725 02:37:05.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:05.638" starttime="20170725 02:37:05.638"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:37:05.705" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:37:05.705" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:05.705" starttime="20170725 02:37:05.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:05.706" starttime="20170725 02:37:05.705"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:37:05.706" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:37:05.706" starttime="20170725 02:37:05.706"></status>
</kw>
<msg timestamp="20170725 02:37:05.706" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:05.706" starttime="20170725 02:37:05.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:05.707" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:05.707" starttime="20170725 02:37:05.707"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:37:05.707" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:37:05.708" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:37:05.708" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:37:05.708" starttime="20170725 02:37:05.707"></status>
</kw>
<msg timestamp="20170725 02:37:05.708" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:37:05.708" starttime="20170725 02:37:05.389"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:05.708" starttime="20170725 02:37:05.388"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:37:05.712" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:37:05.712" starttime="20170725 02:37:05.712"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:37:05.713" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:37:05.713" starttime="20170725 02:37:05.713"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:37:05.714" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:37:05.714" starttime="20170725 02:37:05.714"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:37:05.715" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:37:05.715" starttime="20170725 02:37:05.714"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:37:05.896" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:37:05.896" starttime="20170725 02:37:05.715"></status>
</kw>
<msg timestamp="20170725 02:37:05.896" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:37:05.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:05.896" starttime="20170725 02:37:05.715"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:37:05.897" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:05.897" starttime="20170725 02:37:05.896"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:05.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:05.897" starttime="20170725 02:37:05.897"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:05.897" starttime="20170725 02:37:05.711"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:05.898" starttime="20170725 02:37:05.711"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:05.898" starttime="20170725 02:37:05.710"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:37:05.898" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:37:05.899" starttime="20170725 02:37:05.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:05.900" starttime="20170725 02:37:05.899"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:37:05.999" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:37:05.999" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:05.999" starttime="20170725 02:37:05.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:06.000" starttime="20170725 02:37:06.000"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:37:06.000" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:37:06.000" starttime="20170725 02:37:06.000"></status>
</kw>
<msg timestamp="20170725 02:37:06.001" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:06.001" starttime="20170725 02:37:05.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:06.002" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:06.002" starttime="20170725 02:37:06.001"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:37:06.002" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:37:06.002" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:37:06.003" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:37:06.003" starttime="20170725 02:37:06.002"></status>
</kw>
<msg timestamp="20170725 02:37:06.003" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:37:06.003" starttime="20170725 02:37:05.709"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:06.003" starttime="20170725 02:37:05.709"></status>
</kw>
<msg timestamp="20170725 02:37:06.004" level="FAIL">
#(UTC) 2017/07/25 02:37:06.003359 -   10.957987 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:37:06.004" starttime="20170725 02:37:05.047"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:37:16.010" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:37:16.010" starttime="20170725 02:37:16.009"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:37:16.011" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:37:16.011" starttime="20170725 02:37:16.010"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:37:16.011" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:37:16.011" starttime="20170725 02:37:16.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:37:16.012" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:37:16.012" starttime="20170725 02:37:16.012"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:37:16.418" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:37:16.418" starttime="20170725 02:37:16.013"></status>
</kw>
<msg timestamp="20170725 02:37:16.418" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:37:16.418" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:16.418" starttime="20170725 02:37:16.012"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:37:16.419" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:16.419" starttime="20170725 02:37:16.418"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:16.420" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:16.420" starttime="20170725 02:37:16.419"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:16.420" starttime="20170725 02:37:16.009"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:16.420" starttime="20170725 02:37:16.008"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:16.420" starttime="20170725 02:37:16.008"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:37:16.421" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:37:16.421" starttime="20170725 02:37:16.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:16.421" starttime="20170725 02:37:16.421"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:37:16.927" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:37:16.927" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:16.927" starttime="20170725 02:37:16.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:16.928" starttime="20170725 02:37:16.927"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:37:16.928" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:37:16.928" starttime="20170725 02:37:16.928"></status>
</kw>
<msg timestamp="20170725 02:37:16.928" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:16.928" starttime="20170725 02:37:16.007"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:16.929" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:16.929" starttime="20170725 02:37:16.929"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:37:16.930" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:37:16.930" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:37:16.930" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:37:16.930" starttime="20170725 02:37:16.929"></status>
</kw>
<msg timestamp="20170725 02:37:16.930" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:37:16.930" starttime="20170725 02:37:16.007"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:16.931" starttime="20170725 02:37:16.006"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:37:16.934" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:37:16.935" starttime="20170725 02:37:16.934"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:37:16.935" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:37:16.935" starttime="20170725 02:37:16.935"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:37:16.936" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:37:16.936" starttime="20170725 02:37:16.936"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:37:16.937" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:37:16.937" starttime="20170725 02:37:16.936"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:37:17.380" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:37:17.380" starttime="20170725 02:37:16.937"></status>
</kw>
<msg timestamp="20170725 02:37:17.380" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:37:17.380" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:17.380" starttime="20170725 02:37:16.937"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:37:17.381" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:17.381" starttime="20170725 02:37:17.380"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:17.381" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:17.381" starttime="20170725 02:37:17.381"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:17.382" starttime="20170725 02:37:16.933"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:17.382" starttime="20170725 02:37:16.933"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:17.382" starttime="20170725 02:37:16.932"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:37:17.382" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:37:17.382" starttime="20170725 02:37:17.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:17.383" starttime="20170725 02:37:17.383"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:37:17.700" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:37:17.700" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:17.700" starttime="20170725 02:37:17.383"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:17.700" starttime="20170725 02:37:17.700"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:37:17.701" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:37:17.701" starttime="20170725 02:37:17.701"></status>
</kw>
<msg timestamp="20170725 02:37:17.701" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:17.701" starttime="20170725 02:37:16.932"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:17.702" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:17.702" starttime="20170725 02:37:17.701"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:37:17.702" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:37:17.702" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:37:17.703" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:37:17.703" starttime="20170725 02:37:17.702"></status>
</kw>
<msg timestamp="20170725 02:37:17.703" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:37:17.703" starttime="20170725 02:37:16.931"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:17.703" starttime="20170725 02:37:16.931"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:37:17.707" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:37:17.707" starttime="20170725 02:37:17.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:37:17.708" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:37:17.708" starttime="20170725 02:37:17.707"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:37:17.709" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:37:17.709" starttime="20170725 02:37:17.708"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:37:17.710" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:37:17.710" starttime="20170725 02:37:17.709"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:37:18.123" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:37:18.123" starttime="20170725 02:37:17.711"></status>
</kw>
<msg timestamp="20170725 02:37:18.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:37:18.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:18.123" starttime="20170725 02:37:17.710"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:37:18.124" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:18.124" starttime="20170725 02:37:18.124"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:18.125" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:18.125" starttime="20170725 02:37:18.125"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:18.125" starttime="20170725 02:37:17.706"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:18.125" starttime="20170725 02:37:17.706"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:18.125" starttime="20170725 02:37:17.705"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:37:18.126" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:37:18.126" starttime="20170725 02:37:18.126"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:18.127" starttime="20170725 02:37:18.126"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:37:18.274" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:37:18.275" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:18.275" starttime="20170725 02:37:18.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:18.275" starttime="20170725 02:37:18.275"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:37:18.276" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:37:18.276" starttime="20170725 02:37:18.276"></status>
</kw>
<msg timestamp="20170725 02:37:18.276" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:18.276" starttime="20170725 02:37:17.704"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:18.277" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:18.277" starttime="20170725 02:37:18.276"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:37:18.277" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:37:18.277" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:37:18.277" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:37:18.277" starttime="20170725 02:37:18.277"></status>
</kw>
<msg timestamp="20170725 02:37:18.278" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:37:18.278" starttime="20170725 02:37:17.704"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:18.278" starttime="20170725 02:37:17.703"></status>
</kw>
<msg timestamp="20170725 02:37:18.279" level="FAIL">
#(UTC) 2017/07/25 02:37:18.278274 -   12.274915 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:37:18.279" starttime="20170725 02:37:16.004"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:37:28.285" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:37:28.285" starttime="20170725 02:37:28.284"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:37:28.286" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:37:28.286" starttime="20170725 02:37:28.285"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:37:28.286" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:37:28.286" starttime="20170725 02:37:28.286"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:37:28.287" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:37:28.287" starttime="20170725 02:37:28.287"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:37:28.501" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:37:28.501" starttime="20170725 02:37:28.288"></status>
</kw>
<msg timestamp="20170725 02:37:28.502" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:37:28.502" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:28.502" starttime="20170725 02:37:28.287"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:37:28.502" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:28.502" starttime="20170725 02:37:28.502"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:28.503" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:28.503" starttime="20170725 02:37:28.503"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:28.503" starttime="20170725 02:37:28.284"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:28.503" starttime="20170725 02:37:28.283"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:28.503" starttime="20170725 02:37:28.283"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:37:28.504" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:37:28.504" starttime="20170725 02:37:28.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:28.505" starttime="20170725 02:37:28.504"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:37:28.567" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:37:28.567" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:28.567" starttime="20170725 02:37:28.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:28.567" starttime="20170725 02:37:28.567"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:37:28.568" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:37:28.568" starttime="20170725 02:37:28.568"></status>
</kw>
<msg timestamp="20170725 02:37:28.568" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:28.568" starttime="20170725 02:37:28.282"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:28.569" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:28.569" starttime="20170725 02:37:28.568"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:37:28.569" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:37:28.570" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:37:28.570" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:37:28.570" starttime="20170725 02:37:28.569"></status>
</kw>
<msg timestamp="20170725 02:37:28.570" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:37:28.570" starttime="20170725 02:37:28.282"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:28.570" starttime="20170725 02:37:28.281"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:37:28.574" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:37:28.574" starttime="20170725 02:37:28.574"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:37:28.575" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:37:28.575" starttime="20170725 02:37:28.575"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:37:28.576" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:37:28.576" starttime="20170725 02:37:28.575"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:37:28.576" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:37:28.576" starttime="20170725 02:37:28.576"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:37:28.819" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:37:28.819" starttime="20170725 02:37:28.577"></status>
</kw>
<msg timestamp="20170725 02:37:28.819" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:37:28.819" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:28.819" starttime="20170725 02:37:28.577"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:37:28.820" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:28.820" starttime="20170725 02:37:28.820"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:28.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:28.821" starttime="20170725 02:37:28.820"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:28.821" starttime="20170725 02:37:28.573"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:28.821" starttime="20170725 02:37:28.573"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:28.821" starttime="20170725 02:37:28.572"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:37:28.822" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:37:28.822" starttime="20170725 02:37:28.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:28.822" starttime="20170725 02:37:28.822"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:37:28.900" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:37:28.900" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:28.900" starttime="20170725 02:37:28.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:28.901" starttime="20170725 02:37:28.901"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:37:28.901" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:37:28.902" starttime="20170725 02:37:28.901"></status>
</kw>
<msg timestamp="20170725 02:37:28.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:28.902" starttime="20170725 02:37:28.571"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:28.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:28.902" starttime="20170725 02:37:28.902"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:37:28.903" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:37:28.903" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:37:28.903" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:37:28.903" starttime="20170725 02:37:28.903"></status>
</kw>
<msg timestamp="20170725 02:37:28.903" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:37:28.904" starttime="20170725 02:37:28.571"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:28.904" starttime="20170725 02:37:28.571"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:37:28.908" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:37:28.908" starttime="20170725 02:37:28.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:37:28.909" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:37:28.909" starttime="20170725 02:37:28.908"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:37:28.909" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:37:28.909" starttime="20170725 02:37:28.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:37:28.910" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:37:28.910" starttime="20170725 02:37:28.910"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:37:29.150" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:37:29.150" starttime="20170725 02:37:28.911"></status>
</kw>
<msg timestamp="20170725 02:37:29.150" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:37:29.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:29.150" starttime="20170725 02:37:28.910"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:37:29.151" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:29.151" starttime="20170725 02:37:29.151"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:29.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:29.152" starttime="20170725 02:37:29.151"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:29.152" starttime="20170725 02:37:28.907"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:29.152" starttime="20170725 02:37:28.906"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:29.152" starttime="20170725 02:37:28.906"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:37:29.153" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:37:29.153" starttime="20170725 02:37:29.152"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:29.153" starttime="20170725 02:37:29.153"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:37:29.235" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:37:29.235" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:29.235" starttime="20170725 02:37:29.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:29.236" starttime="20170725 02:37:29.236"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:37:29.236" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:37:29.236" starttime="20170725 02:37:29.236"></status>
</kw>
<msg timestamp="20170725 02:37:29.237" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:29.237" starttime="20170725 02:37:28.905"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:29.237" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:29.237" starttime="20170725 02:37:29.237"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:37:29.238" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:37:29.238" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:37:29.238" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:37:29.238" starttime="20170725 02:37:29.238"></status>
</kw>
<msg timestamp="20170725 02:37:29.238" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:37:29.239" starttime="20170725 02:37:28.904"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:29.239" starttime="20170725 02:37:28.904"></status>
</kw>
<msg timestamp="20170725 02:37:29.240" level="FAIL">
#(UTC) 2017/07/25 02:37:29.239098 -   10.960824 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:37:29.240" starttime="20170725 02:37:28.279"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:37:39.246" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:37:39.247" starttime="20170725 02:37:39.246"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:37:39.247" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:37:39.248" starttime="20170725 02:37:39.247"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:37:39.248" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:37:39.249" starttime="20170725 02:37:39.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:37:39.250" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:37:39.250" starttime="20170725 02:37:39.249"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:37:39.500" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:37:39.500" starttime="20170725 02:37:39.251"></status>
</kw>
<msg timestamp="20170725 02:37:39.500" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:37:39.500" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:39.500" starttime="20170725 02:37:39.250"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:37:39.501" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:39.501" starttime="20170725 02:37:39.501"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:39.502" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:39.502" starttime="20170725 02:37:39.501"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:39.502" starttime="20170725 02:37:39.245"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:39.502" starttime="20170725 02:37:39.244"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:39.502" starttime="20170725 02:37:39.243"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:37:39.503" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:37:39.503" starttime="20170725 02:37:39.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:39.503" starttime="20170725 02:37:39.503"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:37:39.597" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:37:39.597" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:39.597" starttime="20170725 02:37:39.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:39.598" starttime="20170725 02:37:39.598"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:37:39.598" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:37:39.598" starttime="20170725 02:37:39.598"></status>
</kw>
<msg timestamp="20170725 02:37:39.599" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:39.599" starttime="20170725 02:37:39.243"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:39.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:39.599" starttime="20170725 02:37:39.599"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:37:39.600" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:37:39.600" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:37:39.600" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:37:39.600" starttime="20170725 02:37:39.600"></status>
</kw>
<msg timestamp="20170725 02:37:39.600" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:37:39.600" starttime="20170725 02:37:39.242"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:39.601" starttime="20170725 02:37:39.242"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:37:39.605" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:37:39.605" starttime="20170725 02:37:39.604"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:37:39.605" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:37:39.606" starttime="20170725 02:37:39.605"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:37:39.606" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:37:39.606" starttime="20170725 02:37:39.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:37:39.607" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:37:39.607" starttime="20170725 02:37:39.606"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:37:39.925" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:37:39.926" starttime="20170725 02:37:39.608"></status>
</kw>
<msg timestamp="20170725 02:37:39.926" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:37:39.926" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:39.926" starttime="20170725 02:37:39.607"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:37:39.927" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:39.927" starttime="20170725 02:37:39.926"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:39.927" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:39.927" starttime="20170725 02:37:39.927"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:39.927" starttime="20170725 02:37:39.604"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:39.928" starttime="20170725 02:37:39.603"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:39.928" starttime="20170725 02:37:39.603"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:37:39.928" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:37:39.928" starttime="20170725 02:37:39.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:39.929" starttime="20170725 02:37:39.929"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:37:39.996" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:37:39.996" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:39.996" starttime="20170725 02:37:39.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:39.997" starttime="20170725 02:37:39.997"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:37:39.997" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:37:39.997" starttime="20170725 02:37:39.997"></status>
</kw>
<msg timestamp="20170725 02:37:39.998" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:39.998" starttime="20170725 02:37:39.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:39.998" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:39.998" starttime="20170725 02:37:39.998"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:37:39.999" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:37:39.999" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:37:39.999" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:37:39.999" starttime="20170725 02:37:39.999"></status>
</kw>
<msg timestamp="20170725 02:37:39.999" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:37:39.999" starttime="20170725 02:37:39.601"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:40.000" starttime="20170725 02:37:39.601"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:37:40.003" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:37:40.004" starttime="20170725 02:37:40.003"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:37:40.004" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:37:40.004" starttime="20170725 02:37:40.004"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:37:40.005" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:37:40.005" starttime="20170725 02:37:40.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:37:40.006" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:37:40.006" starttime="20170725 02:37:40.005"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:37:40.272" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:37:40.272" starttime="20170725 02:37:40.006"></status>
</kw>
<msg timestamp="20170725 02:37:40.272" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:37:40.272" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:40.273" starttime="20170725 02:37:40.006"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:37:40.273" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:40.273" starttime="20170725 02:37:40.273"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:40.274" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:40.274" starttime="20170725 02:37:40.274"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:40.274" starttime="20170725 02:37:40.003"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:40.274" starttime="20170725 02:37:40.002"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:40.274" starttime="20170725 02:37:40.002"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:37:40.275" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:37:40.275" starttime="20170725 02:37:40.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:40.276" starttime="20170725 02:37:40.275"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:37:40.370" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:37:40.370" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:40.370" starttime="20170725 02:37:40.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:40.371" starttime="20170725 02:37:40.370"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:37:40.371" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:37:40.372" starttime="20170725 02:37:40.371"></status>
</kw>
<msg timestamp="20170725 02:37:40.372" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:40.372" starttime="20170725 02:37:40.001"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:40.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:40.373" starttime="20170725 02:37:40.373"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:37:40.374" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:37:40.374" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:37:40.374" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:37:40.374" starttime="20170725 02:37:40.374"></status>
</kw>
<msg timestamp="20170725 02:37:40.375" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:37:40.375" starttime="20170725 02:37:40.000"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:40.375" starttime="20170725 02:37:40.000"></status>
</kw>
<msg timestamp="20170725 02:37:40.376" level="FAIL">
#(UTC) 2017/07/25 02:37:40.375340 -   11.136242 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:37:40.376" starttime="20170725 02:37:39.240"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:37:50.382" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:37:50.383" starttime="20170725 02:37:50.382"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:37:50.383" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:37:50.383" starttime="20170725 02:37:50.383"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:37:50.384" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:37:50.384" starttime="20170725 02:37:50.383"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:37:50.384" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:37:50.385" starttime="20170725 02:37:50.384"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:37:50.725" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:37:50.725" starttime="20170725 02:37:50.385"></status>
</kw>
<msg timestamp="20170725 02:37:50.725" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:37:50.725" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:50.725" starttime="20170725 02:37:50.385"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:37:50.726" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:50.726" starttime="20170725 02:37:50.725"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:50.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:50.727" starttime="20170725 02:37:50.726"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:50.727" starttime="20170725 02:37:50.381"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:50.727" starttime="20170725 02:37:50.381"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:50.727" starttime="20170725 02:37:50.380"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:37:50.727" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:37:50.727" starttime="20170725 02:37:50.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:50.728" starttime="20170725 02:37:50.728"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:37:50.796" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:37:50.797" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:50.797" starttime="20170725 02:37:50.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:50.797" starttime="20170725 02:37:50.797"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:37:50.798" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:37:50.798" starttime="20170725 02:37:50.798"></status>
</kw>
<msg timestamp="20170725 02:37:50.798" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:50.798" starttime="20170725 02:37:50.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:50.799" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:50.799" starttime="20170725 02:37:50.798"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:37:50.799" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:37:50.799" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:37:50.799" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:37:50.800" starttime="20170725 02:37:50.799"></status>
</kw>
<msg timestamp="20170725 02:37:50.800" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:37:50.800" starttime="20170725 02:37:50.379"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:50.800" starttime="20170725 02:37:50.378"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:37:50.804" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:37:50.804" starttime="20170725 02:37:50.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:37:50.805" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:37:50.805" starttime="20170725 02:37:50.804"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:37:50.805" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:37:50.805" starttime="20170725 02:37:50.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:37:50.806" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:37:50.806" starttime="20170725 02:37:50.806"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:37:51.036" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:37:51.036" starttime="20170725 02:37:50.807"></status>
</kw>
<msg timestamp="20170725 02:37:51.036" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:37:51.036" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:51.036" starttime="20170725 02:37:50.806"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:37:51.037" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:51.037" starttime="20170725 02:37:51.037"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:51.038" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:51.038" starttime="20170725 02:37:51.037"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:51.038" starttime="20170725 02:37:50.803"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:51.038" starttime="20170725 02:37:50.803"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:51.038" starttime="20170725 02:37:50.802"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:37:51.039" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:37:51.039" starttime="20170725 02:37:51.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:51.039" starttime="20170725 02:37:51.039"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:37:51.115" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:37:51.115" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:51.115" starttime="20170725 02:37:51.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:51.115" starttime="20170725 02:37:51.115"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:37:51.116" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:37:51.116" starttime="20170725 02:37:51.116"></status>
</kw>
<msg timestamp="20170725 02:37:51.116" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:51.116" starttime="20170725 02:37:50.801"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:51.117" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:51.117" starttime="20170725 02:37:51.117"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:37:51.117" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:37:51.118" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:37:51.118" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:37:51.118" starttime="20170725 02:37:51.117"></status>
</kw>
<msg timestamp="20170725 02:37:51.118" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:37:51.118" starttime="20170725 02:37:50.801"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:51.118" starttime="20170725 02:37:50.800"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:37:51.122" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:37:51.122" starttime="20170725 02:37:51.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:37:51.123" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:37:51.123" starttime="20170725 02:37:51.123"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:37:51.124" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:37:51.124" starttime="20170725 02:37:51.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:37:51.124" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:37:51.124" starttime="20170725 02:37:51.124"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:37:51.335" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:37:51.335" starttime="20170725 02:37:51.125"></status>
</kw>
<msg timestamp="20170725 02:37:51.335" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:37:51.335" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:51.335" starttime="20170725 02:37:51.125"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:37:51.336" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:51.336" starttime="20170725 02:37:51.336"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:51.337" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:51.337" starttime="20170725 02:37:51.336"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:51.337" starttime="20170725 02:37:51.121"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:51.337" starttime="20170725 02:37:51.121"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:51.337" starttime="20170725 02:37:51.120"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:37:51.338" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:37:51.338" starttime="20170725 02:37:51.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:51.338" starttime="20170725 02:37:51.338"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:37:51.403" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:37:51.403" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:51.403" starttime="20170725 02:37:51.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:37:51.404" starttime="20170725 02:37:51.404"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:37:51.405" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:37:51.405" starttime="20170725 02:37:51.404"></status>
</kw>
<msg timestamp="20170725 02:37:51.405" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:37:51.405" starttime="20170725 02:37:51.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:37:51.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:37:51.406" starttime="20170725 02:37:51.405"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:37:51.406" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:37:51.406" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:37:51.406" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:37:51.406" starttime="20170725 02:37:51.406"></status>
</kw>
<msg timestamp="20170725 02:37:51.407" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:37:51.407" starttime="20170725 02:37:51.119"></status>
</kw>
<status status="PASS" endtime="20170725 02:37:51.407" starttime="20170725 02:37:51.118"></status>
</kw>
<msg timestamp="20170725 02:37:51.408" level="FAIL">
#(UTC) 2017/07/25 02:37:51.407195 -   11.031855 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:37:51.408" starttime="20170725 02:37:50.377"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:01.414" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:01.414" starttime="20170725 02:38:01.413"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:01.415" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:01.415" starttime="20170725 02:38:01.414"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:01.415" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:01.415" starttime="20170725 02:38:01.415"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:01.416" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:01.416" starttime="20170725 02:38:01.416"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:01.762" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:01.762" starttime="20170725 02:38:01.417"></status>
</kw>
<msg timestamp="20170725 02:38:01.762" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:01.762" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:01.763" starttime="20170725 02:38:01.416"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:01.763" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:01.763" starttime="20170725 02:38:01.763"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:01.764" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:01.764" starttime="20170725 02:38:01.764"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:01.764" starttime="20170725 02:38:01.413"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:01.764" starttime="20170725 02:38:01.412"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:01.764" starttime="20170725 02:38:01.412"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:01.765" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:38:01.765" starttime="20170725 02:38:01.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:01.766" starttime="20170725 02:38:01.765"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:01.829" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:38:01.829" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:01.829" starttime="20170725 02:38:01.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:01.830" starttime="20170725 02:38:01.829"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:01.830" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:01.830" starttime="20170725 02:38:01.830"></status>
</kw>
<msg timestamp="20170725 02:38:01.830" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:01.830" starttime="20170725 02:38:01.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:01.831" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:01.831" starttime="20170725 02:38:01.831"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:01.832" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:01.832" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:01.832" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:38:01.832" starttime="20170725 02:38:01.831"></status>
</kw>
<msg timestamp="20170725 02:38:01.832" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:38:01.832" starttime="20170725 02:38:01.411"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:01.832" starttime="20170725 02:38:01.410"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:01.836" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:01.837" starttime="20170725 02:38:01.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:01.837" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:01.837" starttime="20170725 02:38:01.837"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:01.838" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:01.838" starttime="20170725 02:38:01.837"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:01.838" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:01.838" starttime="20170725 02:38:01.838"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:02.055" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:02.055" starttime="20170725 02:38:01.839"></status>
</kw>
<msg timestamp="20170725 02:38:02.055" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:02.055" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:02.055" starttime="20170725 02:38:01.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:02.056" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:02.056" starttime="20170725 02:38:02.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:02.056" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:02.056" starttime="20170725 02:38:02.056"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:02.057" starttime="20170725 02:38:01.835"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:02.057" starttime="20170725 02:38:01.835"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:02.057" starttime="20170725 02:38:01.834"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:02.057" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:38:02.057" starttime="20170725 02:38:02.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:02.058" starttime="20170725 02:38:02.058"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:02.148" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:38:02.148" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:02.148" starttime="20170725 02:38:02.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:02.149" starttime="20170725 02:38:02.148"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:02.149" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:02.149" starttime="20170725 02:38:02.149"></status>
</kw>
<msg timestamp="20170725 02:38:02.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:02.150" starttime="20170725 02:38:01.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:02.150" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:02.150" starttime="20170725 02:38:02.150"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:02.151" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:02.151" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:02.151" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:38:02.151" starttime="20170725 02:38:02.151"></status>
</kw>
<msg timestamp="20170725 02:38:02.151" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:38:02.151" starttime="20170725 02:38:01.833"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:02.152" starttime="20170725 02:38:01.833"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:02.155" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:02.156" starttime="20170725 02:38:02.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:02.156" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:02.156" starttime="20170725 02:38:02.156"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:02.157" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:02.157" starttime="20170725 02:38:02.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:02.158" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:02.158" starttime="20170725 02:38:02.157"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:02.401" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:02.401" starttime="20170725 02:38:02.158"></status>
</kw>
<msg timestamp="20170725 02:38:02.401" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:02.401" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:02.402" starttime="20170725 02:38:02.158"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:02.402" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:02.402" starttime="20170725 02:38:02.402"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:02.403" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:02.403" starttime="20170725 02:38:02.403"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:02.403" starttime="20170725 02:38:02.154"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:02.403" starttime="20170725 02:38:02.154"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:02.403" starttime="20170725 02:38:02.153"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:02.404" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:38:02.404" starttime="20170725 02:38:02.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:02.405" starttime="20170725 02:38:02.404"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:02.493" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:38:02.493" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:02.493" starttime="20170725 02:38:02.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:02.493" starttime="20170725 02:38:02.493"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:02.494" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:02.494" starttime="20170725 02:38:02.494"></status>
</kw>
<msg timestamp="20170725 02:38:02.494" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:02.494" starttime="20170725 02:38:02.153"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:02.495" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:02.495" starttime="20170725 02:38:02.494"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:02.495" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:02.496" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:02.496" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:38:02.496" starttime="20170725 02:38:02.495"></status>
</kw>
<msg timestamp="20170725 02:38:02.496" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:38:02.496" starttime="20170725 02:38:02.152"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:02.496" starttime="20170725 02:38:02.152"></status>
</kw>
<msg timestamp="20170725 02:38:02.497" level="FAIL">
#(UTC) 2017/07/25 02:38:02.496515 -   11.089320 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:38:02.497" starttime="20170725 02:38:01.408"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:12.504" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:12.504" starttime="20170725 02:38:12.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:12.505" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:12.505" starttime="20170725 02:38:12.504"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:12.505" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:12.505" starttime="20170725 02:38:12.505"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:12.506" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:12.506" starttime="20170725 02:38:12.506"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:12.805" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:12.805" starttime="20170725 02:38:12.507"></status>
</kw>
<msg timestamp="20170725 02:38:12.805" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:12.805" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:12.805" starttime="20170725 02:38:12.506"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:12.806" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:12.806" starttime="20170725 02:38:12.806"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:12.807" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:12.807" starttime="20170725 02:38:12.806"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:12.807" starttime="20170725 02:38:12.503"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:12.807" starttime="20170725 02:38:12.502"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:12.807" starttime="20170725 02:38:12.502"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:12.808" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:38:12.808" starttime="20170725 02:38:12.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:12.808" starttime="20170725 02:38:12.808"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:12.885" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:38:12.885" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:12.885" starttime="20170725 02:38:12.809"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:12.886" starttime="20170725 02:38:12.885"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:12.886" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:12.886" starttime="20170725 02:38:12.886"></status>
</kw>
<msg timestamp="20170725 02:38:12.886" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:12.886" starttime="20170725 02:38:12.501"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:12.887" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:12.887" starttime="20170725 02:38:12.887"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:12.888" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:12.888" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:12.888" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:38:12.888" starttime="20170725 02:38:12.887"></status>
</kw>
<msg timestamp="20170725 02:38:12.888" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:38:12.888" starttime="20170725 02:38:12.501"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:12.888" starttime="20170725 02:38:12.500"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:12.892" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:12.893" starttime="20170725 02:38:12.892"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:12.893" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:12.893" starttime="20170725 02:38:12.893"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:12.894" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:12.894" starttime="20170725 02:38:12.893"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:12.895" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:12.895" starttime="20170725 02:38:12.894"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:13.109" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:13.109" starttime="20170725 02:38:12.895"></status>
</kw>
<msg timestamp="20170725 02:38:13.110" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:13.110" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:13.110" starttime="20170725 02:38:12.895"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:13.111" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:13.111" starttime="20170725 02:38:13.110"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:13.111" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:13.111" starttime="20170725 02:38:13.111"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:13.112" starttime="20170725 02:38:12.891"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:13.112" starttime="20170725 02:38:12.891"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:13.112" starttime="20170725 02:38:12.890"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:13.112" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:38:13.112" starttime="20170725 02:38:13.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:13.113" starttime="20170725 02:38:13.113"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:13.178" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:38:13.178" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:13.178" starttime="20170725 02:38:13.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:13.178" starttime="20170725 02:38:13.178"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:13.179" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:13.179" starttime="20170725 02:38:13.179"></status>
</kw>
<msg timestamp="20170725 02:38:13.179" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:13.179" starttime="20170725 02:38:12.890"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:13.180" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:13.180" starttime="20170725 02:38:13.179"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:13.180" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:13.181" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:13.181" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:38:13.181" starttime="20170725 02:38:13.180"></status>
</kw>
<msg timestamp="20170725 02:38:13.181" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:38:13.181" starttime="20170725 02:38:12.889"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:13.181" starttime="20170725 02:38:12.889"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:13.185" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:13.185" starttime="20170725 02:38:13.185"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:13.186" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:13.186" starttime="20170725 02:38:13.186"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:13.187" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:13.187" starttime="20170725 02:38:13.186"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:13.187" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:13.187" starttime="20170725 02:38:13.187"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:13.516" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:13.517" starttime="20170725 02:38:13.188"></status>
</kw>
<msg timestamp="20170725 02:38:13.517" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:13.517" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:13.517" starttime="20170725 02:38:13.188"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:13.517" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:13.518" starttime="20170725 02:38:13.517"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:13.518" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:13.518" starttime="20170725 02:38:13.518"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:13.519" starttime="20170725 02:38:13.184"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:13.519" starttime="20170725 02:38:13.184"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:13.519" starttime="20170725 02:38:13.183"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:13.520" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:38:13.520" starttime="20170725 02:38:13.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:13.521" starttime="20170725 02:38:13.520"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:13.629" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:38:13.629" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:13.629" starttime="20170725 02:38:13.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:13.629" starttime="20170725 02:38:13.629"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:13.630" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:13.630" starttime="20170725 02:38:13.630"></status>
</kw>
<msg timestamp="20170725 02:38:13.630" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:13.630" starttime="20170725 02:38:13.182"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:13.631" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:13.631" starttime="20170725 02:38:13.630"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:13.631" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:13.631" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:13.632" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:38:13.632" starttime="20170725 02:38:13.631"></status>
</kw>
<msg timestamp="20170725 02:38:13.632" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:38:13.632" starttime="20170725 02:38:13.182"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:13.632" starttime="20170725 02:38:13.181"></status>
</kw>
<msg timestamp="20170725 02:38:13.633" level="FAIL">
#(UTC) 2017/07/25 02:38:13.632422 -   11.135907 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:38:13.633" starttime="20170725 02:38:12.498"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:23.639" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:23.639" starttime="20170725 02:38:23.639"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:23.640" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:23.640" starttime="20170725 02:38:23.640"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:23.641" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:23.641" starttime="20170725 02:38:23.640"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:23.641" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:23.641" starttime="20170725 02:38:23.641"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:23.828" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:23.828" starttime="20170725 02:38:23.642"></status>
</kw>
<msg timestamp="20170725 02:38:23.828" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:23.828" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:23.828" starttime="20170725 02:38:23.642"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:23.829" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:23.829" starttime="20170725 02:38:23.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:23.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:23.830" starttime="20170725 02:38:23.829"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:23.830" starttime="20170725 02:38:23.638"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:23.830" starttime="20170725 02:38:23.638"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:23.830" starttime="20170725 02:38:23.637"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:23.831" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:38:23.831" starttime="20170725 02:38:23.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:23.831" starttime="20170725 02:38:23.831"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:23.894" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:38:23.894" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:23.894" starttime="20170725 02:38:23.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:23.895" starttime="20170725 02:38:23.895"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:23.895" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:23.895" starttime="20170725 02:38:23.895"></status>
</kw>
<msg timestamp="20170725 02:38:23.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:23.896" starttime="20170725 02:38:23.636"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:23.896" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:23.896" starttime="20170725 02:38:23.896"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:23.897" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:23.897" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:23.897" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:38:23.897" starttime="20170725 02:38:23.897"></status>
</kw>
<msg timestamp="20170725 02:38:23.897" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:38:23.897" starttime="20170725 02:38:23.636"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:23.898" starttime="20170725 02:38:23.635"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:23.902" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:23.902" starttime="20170725 02:38:23.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:23.902" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:23.903" starttime="20170725 02:38:23.902"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:23.903" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:23.903" starttime="20170725 02:38:23.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:23.904" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:23.904" starttime="20170725 02:38:23.903"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:24.144" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:24.145" starttime="20170725 02:38:23.905"></status>
</kw>
<msg timestamp="20170725 02:38:24.145" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:24.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:24.145" starttime="20170725 02:38:23.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:24.146" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:24.146" starttime="20170725 02:38:24.145"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:24.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:24.146" starttime="20170725 02:38:24.146"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:24.147" starttime="20170725 02:38:23.901"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:24.147" starttime="20170725 02:38:23.900"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:24.147" starttime="20170725 02:38:23.900"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:24.147" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:38:24.147" starttime="20170725 02:38:24.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:24.148" starttime="20170725 02:38:24.148"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:24.288" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:38:24.288" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:24.288" starttime="20170725 02:38:24.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:24.289" starttime="20170725 02:38:24.288"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:24.289" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:24.289" starttime="20170725 02:38:24.289"></status>
</kw>
<msg timestamp="20170725 02:38:24.289" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:24.289" starttime="20170725 02:38:23.899"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:24.290" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:24.290" starttime="20170725 02:38:24.290"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:24.291" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:24.291" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:24.291" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:38:24.291" starttime="20170725 02:38:24.290"></status>
</kw>
<msg timestamp="20170725 02:38:24.291" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:38:24.291" starttime="20170725 02:38:23.898"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:24.292" starttime="20170725 02:38:23.898"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:24.295" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:24.296" starttime="20170725 02:38:24.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:24.296" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:24.296" starttime="20170725 02:38:24.296"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:24.297" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:24.297" starttime="20170725 02:38:24.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:24.298" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:24.298" starttime="20170725 02:38:24.297"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:24.478" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:24.478" starttime="20170725 02:38:24.298"></status>
</kw>
<msg timestamp="20170725 02:38:24.478" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:24.478" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:24.479" starttime="20170725 02:38:24.298"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:24.479" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:24.479" starttime="20170725 02:38:24.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:24.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:24.480" starttime="20170725 02:38:24.480"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:24.480" starttime="20170725 02:38:24.294"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:24.480" starttime="20170725 02:38:24.294"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:24.480" starttime="20170725 02:38:24.293"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:24.481" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:38:24.481" starttime="20170725 02:38:24.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:24.482" starttime="20170725 02:38:24.481"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:24.543" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:38:24.543" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:24.544" starttime="20170725 02:38:24.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:24.544" starttime="20170725 02:38:24.544"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:24.545" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:24.545" starttime="20170725 02:38:24.545"></status>
</kw>
<msg timestamp="20170725 02:38:24.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:24.545" starttime="20170725 02:38:24.293"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:24.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:24.546" starttime="20170725 02:38:24.545"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:24.546" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:24.546" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:24.546" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:38:24.546" starttime="20170725 02:38:24.546"></status>
</kw>
<msg timestamp="20170725 02:38:24.547" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:38:24.547" starttime="20170725 02:38:24.292"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:24.547" starttime="20170725 02:38:24.292"></status>
</kw>
<msg timestamp="20170725 02:38:24.548" level="FAIL">
#(UTC) 2017/07/25 02:38:24.547269 -   10.914847 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:38:24.548" starttime="20170725 02:38:23.634"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:34.554" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:34.554" starttime="20170725 02:38:34.554"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:34.555" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:34.555" starttime="20170725 02:38:34.555"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:34.556" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:34.556" starttime="20170725 02:38:34.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:34.556" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:34.556" starttime="20170725 02:38:34.556"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:34.736" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:34.737" starttime="20170725 02:38:34.557"></status>
</kw>
<msg timestamp="20170725 02:38:34.737" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:34.737" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:34.737" starttime="20170725 02:38:34.557"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:34.738" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:34.738" starttime="20170725 02:38:34.737"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:34.738" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:34.738" starttime="20170725 02:38:34.738"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:34.739" starttime="20170725 02:38:34.553"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:34.739" starttime="20170725 02:38:34.553"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:34.739" starttime="20170725 02:38:34.552"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:34.739" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:38:34.739" starttime="20170725 02:38:34.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:34.740" starttime="20170725 02:38:34.740"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:34.880" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:38:34.880" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:34.880" starttime="20170725 02:38:34.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:34.881" starttime="20170725 02:38:34.881"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:34.882" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:34.882" starttime="20170725 02:38:34.881"></status>
</kw>
<msg timestamp="20170725 02:38:34.882" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:34.882" starttime="20170725 02:38:34.551"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:34.882" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:34.883" starttime="20170725 02:38:34.882"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:34.883" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:34.883" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:34.883" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:38:34.883" starttime="20170725 02:38:34.883"></status>
</kw>
<msg timestamp="20170725 02:38:34.884" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:38:34.884" starttime="20170725 02:38:34.551"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:34.884" starttime="20170725 02:38:34.550"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:34.888" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:34.888" starttime="20170725 02:38:34.887"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:34.889" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:34.889" starttime="20170725 02:38:34.888"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:34.889" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:34.889" starttime="20170725 02:38:34.889"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:34.890" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:34.890" starttime="20170725 02:38:34.890"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:35.092" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:35.092" starttime="20170725 02:38:34.891"></status>
</kw>
<msg timestamp="20170725 02:38:35.093" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:35.093" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:35.093" starttime="20170725 02:38:34.890"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:35.093" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:35.093" starttime="20170725 02:38:35.093"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:35.094" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:35.094" starttime="20170725 02:38:35.094"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:35.094" starttime="20170725 02:38:34.887"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:35.094" starttime="20170725 02:38:34.886"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:35.094" starttime="20170725 02:38:34.886"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:35.095" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:38:35.095" starttime="20170725 02:38:35.095"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:35.096" starttime="20170725 02:38:35.095"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:35.161" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:38:35.161" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:35.161" starttime="20170725 02:38:35.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:35.162" starttime="20170725 02:38:35.162"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:35.162" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:35.162" starttime="20170725 02:38:35.162"></status>
</kw>
<msg timestamp="20170725 02:38:35.163" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:35.163" starttime="20170725 02:38:34.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:35.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:35.163" starttime="20170725 02:38:35.163"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:35.164" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:35.164" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:35.164" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:38:35.164" starttime="20170725 02:38:35.164"></status>
</kw>
<msg timestamp="20170725 02:38:35.164" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:38:35.164" starttime="20170725 02:38:34.885"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:35.165" starttime="20170725 02:38:34.884"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:35.168" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:35.169" starttime="20170725 02:38:35.168"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:35.169" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:35.169" starttime="20170725 02:38:35.169"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:35.170" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:35.170" starttime="20170725 02:38:35.170"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:35.171" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:35.171" starttime="20170725 02:38:35.170"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:35.365" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:35.365" starttime="20170725 02:38:35.171"></status>
</kw>
<msg timestamp="20170725 02:38:35.365" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:35.365" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:35.365" starttime="20170725 02:38:35.171"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:35.366" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:35.366" starttime="20170725 02:38:35.366"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:35.367" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:35.367" starttime="20170725 02:38:35.366"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:35.367" starttime="20170725 02:38:35.167"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:35.367" starttime="20170725 02:38:35.167"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:35.367" starttime="20170725 02:38:35.166"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:35.368" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:38:35.368" starttime="20170725 02:38:35.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:35.368" starttime="20170725 02:38:35.368"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:35.455" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:38:35.455" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:35.455" starttime="20170725 02:38:35.368"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:35.456" starttime="20170725 02:38:35.455"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:35.456" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:35.456" starttime="20170725 02:38:35.456"></status>
</kw>
<msg timestamp="20170725 02:38:35.456" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:35.456" starttime="20170725 02:38:35.166"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:35.457" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:35.457" starttime="20170725 02:38:35.457"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:35.457" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:35.458" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:35.458" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:38:35.458" starttime="20170725 02:38:35.457"></status>
</kw>
<msg timestamp="20170725 02:38:35.458" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:38:35.458" starttime="20170725 02:38:35.165"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:35.458" starttime="20170725 02:38:35.165"></status>
</kw>
<msg timestamp="20170725 02:38:35.459" level="FAIL">
#(UTC) 2017/07/25 02:38:35.458501 -   10.911232 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:38:35.459" starttime="20170725 02:38:34.548"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:45.466" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:45.466" starttime="20170725 02:38:45.465"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:45.467" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:45.467" starttime="20170725 02:38:45.467"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:45.468" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:45.468" starttime="20170725 02:38:45.468"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:45.469" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:45.469" starttime="20170725 02:38:45.469"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:45.648" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:45.648" starttime="20170725 02:38:45.470"></status>
</kw>
<msg timestamp="20170725 02:38:45.648" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:45.648" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:45.648" starttime="20170725 02:38:45.470"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:45.649" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:45.649" starttime="20170725 02:38:45.648"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:45.649" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:45.650" starttime="20170725 02:38:45.649"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:45.650" starttime="20170725 02:38:45.464"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:45.650" starttime="20170725 02:38:45.464"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:45.650" starttime="20170725 02:38:45.463"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:45.651" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:38:45.651" starttime="20170725 02:38:45.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:45.651" starttime="20170725 02:38:45.651"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:45.721" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:38:45.721" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:45.721" starttime="20170725 02:38:45.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:45.721" starttime="20170725 02:38:45.721"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:45.722" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:45.722" starttime="20170725 02:38:45.722"></status>
</kw>
<msg timestamp="20170725 02:38:45.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:45.722" starttime="20170725 02:38:45.462"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:45.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:45.723" starttime="20170725 02:38:45.722"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:45.723" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:45.724" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:45.724" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:38:45.724" starttime="20170725 02:38:45.723"></status>
</kw>
<msg timestamp="20170725 02:38:45.724" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:38:45.724" starttime="20170725 02:38:45.462"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:45.724" starttime="20170725 02:38:45.461"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:45.728" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:45.728" starttime="20170725 02:38:45.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:45.729" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:45.729" starttime="20170725 02:38:45.729"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:45.729" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:45.730" starttime="20170725 02:38:45.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:45.730" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:45.730" starttime="20170725 02:38:45.730"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:45.953" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:45.953" starttime="20170725 02:38:45.731"></status>
</kw>
<msg timestamp="20170725 02:38:45.953" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:45.953" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:45.953" starttime="20170725 02:38:45.731"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:45.954" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:45.954" starttime="20170725 02:38:45.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:45.954" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:45.954" starttime="20170725 02:38:45.954"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:45.955" starttime="20170725 02:38:45.727"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:45.955" starttime="20170725 02:38:45.727"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:45.955" starttime="20170725 02:38:45.726"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:45.955" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:38:45.955" starttime="20170725 02:38:45.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:45.956" starttime="20170725 02:38:45.956"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:46.024" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:38:46.024" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:46.024" starttime="20170725 02:38:45.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:46.025" starttime="20170725 02:38:46.024"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:46.025" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:46.025" starttime="20170725 02:38:46.025"></status>
</kw>
<msg timestamp="20170725 02:38:46.025" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:46.026" starttime="20170725 02:38:45.725"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:46.026" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:46.026" starttime="20170725 02:38:46.026"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:46.027" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:46.027" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:46.027" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:38:46.027" starttime="20170725 02:38:46.026"></status>
</kw>
<msg timestamp="20170725 02:38:46.027" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:38:46.027" starttime="20170725 02:38:45.725"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:46.027" starttime="20170725 02:38:45.724"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:46.031" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:46.032" starttime="20170725 02:38:46.031"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:46.032" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:46.032" starttime="20170725 02:38:46.032"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:46.033" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:46.033" starttime="20170725 02:38:46.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:46.033" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:46.033" starttime="20170725 02:38:46.033"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:46.228" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:46.228" starttime="20170725 02:38:46.034"></status>
</kw>
<msg timestamp="20170725 02:38:46.228" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:46.228" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:46.228" starttime="20170725 02:38:46.034"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:46.229" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:46.229" starttime="20170725 02:38:46.229"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:46.230" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:46.230" starttime="20170725 02:38:46.229"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:46.230" starttime="20170725 02:38:46.030"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:46.230" starttime="20170725 02:38:46.030"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:46.230" starttime="20170725 02:38:46.029"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:46.231" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:38:46.231" starttime="20170725 02:38:46.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:46.231" starttime="20170725 02:38:46.231"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:46.301" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:38:46.301" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:46.301" starttime="20170725 02:38:46.232"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:46.302" starttime="20170725 02:38:46.301"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:46.302" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:46.302" starttime="20170725 02:38:46.302"></status>
</kw>
<msg timestamp="20170725 02:38:46.302" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:46.302" starttime="20170725 02:38:46.029"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:46.303" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:46.303" starttime="20170725 02:38:46.303"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:46.303" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:46.304" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:46.304" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:38:46.304" starttime="20170725 02:38:46.303"></status>
</kw>
<msg timestamp="20170725 02:38:46.304" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:38:46.304" starttime="20170725 02:38:46.028"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:46.304" starttime="20170725 02:38:46.028"></status>
</kw>
<msg timestamp="20170725 02:38:46.305" level="FAIL">
#(UTC) 2017/07/25 02:38:46.304467 -   10.845966 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:38:46.305" starttime="20170725 02:38:45.460"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:56.311" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:56.312" starttime="20170725 02:38:56.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:56.313" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:56.313" starttime="20170725 02:38:56.312"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:56.313" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:56.313" starttime="20170725 02:38:56.313"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:56.314" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:56.314" starttime="20170725 02:38:56.314"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:56.579" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:56.579" starttime="20170725 02:38:56.315"></status>
</kw>
<msg timestamp="20170725 02:38:56.579" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:56.579" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:56.579" starttime="20170725 02:38:56.314"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:56.580" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:56.580" starttime="20170725 02:38:56.580"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:56.581" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:56.581" starttime="20170725 02:38:56.580"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:56.581" starttime="20170725 02:38:56.310"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:56.581" starttime="20170725 02:38:56.310"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:56.581" starttime="20170725 02:38:56.309"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:56.582" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:38:56.582" starttime="20170725 02:38:56.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:56.583" starttime="20170725 02:38:56.582"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:56.657" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:38:56.658" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:56.658" starttime="20170725 02:38:56.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:56.658" starttime="20170725 02:38:56.658"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:56.659" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:56.659" starttime="20170725 02:38:56.659"></status>
</kw>
<msg timestamp="20170725 02:38:56.659" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:56.659" starttime="20170725 02:38:56.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:56.660" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:56.660" starttime="20170725 02:38:56.659"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:56.660" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:56.660" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:56.660" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:38:56.661" starttime="20170725 02:38:56.660"></status>
</kw>
<msg timestamp="20170725 02:38:56.661" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:38:56.661" starttime="20170725 02:38:56.308"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:56.661" starttime="20170725 02:38:56.308"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:56.666" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:56.667" starttime="20170725 02:38:56.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:56.668" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:56.668" starttime="20170725 02:38:56.667"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:56.669" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:56.669" starttime="20170725 02:38:56.668"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:56.670" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:56.670" starttime="20170725 02:38:56.669"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:57.045" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:57.045" starttime="20170725 02:38:56.671"></status>
</kw>
<msg timestamp="20170725 02:38:57.046" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:57.046" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:57.046" starttime="20170725 02:38:56.670"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:57.046" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:57.046" starttime="20170725 02:38:57.046"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:57.047" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:57.047" starttime="20170725 02:38:57.047"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:57.047" starttime="20170725 02:38:56.665"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:57.047" starttime="20170725 02:38:56.665"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:57.048" starttime="20170725 02:38:56.664"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:57.048" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:38:57.048" starttime="20170725 02:38:57.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:57.049" starttime="20170725 02:38:57.048"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:57.135" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:38:57.135" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:57.135" starttime="20170725 02:38:57.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:57.136" starttime="20170725 02:38:57.136"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:57.137" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:57.137" starttime="20170725 02:38:57.136"></status>
</kw>
<msg timestamp="20170725 02:38:57.137" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:57.137" starttime="20170725 02:38:56.663"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:57.138" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:57.138" starttime="20170725 02:38:57.137"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:57.138" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:57.138" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:57.138" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:38:57.138" starttime="20170725 02:38:57.138"></status>
</kw>
<msg timestamp="20170725 02:38:57.139" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:38:57.139" starttime="20170725 02:38:56.662"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:57.139" starttime="20170725 02:38:56.661"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:38:57.143" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:38:57.143" starttime="20170725 02:38:57.143"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:38:57.144" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:38:57.144" starttime="20170725 02:38:57.144"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:38:57.144" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:38:57.145" starttime="20170725 02:38:57.144"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:38:57.145" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:38:57.145" starttime="20170725 02:38:57.145"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:38:57.352" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:38:57.352" starttime="20170725 02:38:57.146"></status>
</kw>
<msg timestamp="20170725 02:38:57.352" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:38:57.352" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:57.352" starttime="20170725 02:38:57.146"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:38:57.353" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:57.353" starttime="20170725 02:38:57.353"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:57.354" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:57.354" starttime="20170725 02:38:57.353"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:57.354" starttime="20170725 02:38:57.142"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:57.354" starttime="20170725 02:38:57.142"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:57.354" starttime="20170725 02:38:57.141"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:38:57.355" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:38:57.355" starttime="20170725 02:38:57.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:57.355" starttime="20170725 02:38:57.355"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:38:57.437" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:38:57.437" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:57.437" starttime="20170725 02:38:57.356"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:38:57.438" starttime="20170725 02:38:57.438"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:38:57.438" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:38:57.438" starttime="20170725 02:38:57.438"></status>
</kw>
<msg timestamp="20170725 02:38:57.439" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:38:57.439" starttime="20170725 02:38:57.140"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:38:57.439" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:38:57.439" starttime="20170725 02:38:57.439"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:38:57.440" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:38:57.440" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:38:57.440" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:38:57.440" starttime="20170725 02:38:57.440"></status>
</kw>
<msg timestamp="20170725 02:38:57.440" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:38:57.440" starttime="20170725 02:38:57.140"></status>
</kw>
<status status="PASS" endtime="20170725 02:38:57.441" starttime="20170725 02:38:57.139"></status>
</kw>
<msg timestamp="20170725 02:38:57.442" level="FAIL">
#(UTC) 2017/07/25 02:38:57.441004 -   11.136537 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:38:57.442" starttime="20170725 02:38:56.306"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:39:07.448" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:39:07.448" starttime="20170725 02:39:07.447"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:39:07.449" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:39:07.449" starttime="20170725 02:39:07.448"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:39:07.449" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:39:07.449" starttime="20170725 02:39:07.449"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:39:07.450" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:39:07.450" starttime="20170725 02:39:07.450"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:39:08.751" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:39:08.751" starttime="20170725 02:39:07.451"></status>
</kw>
<msg timestamp="20170725 02:39:08.751" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:39:08.751" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:08.751" starttime="20170725 02:39:07.450"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:39:08.752" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:08.752" starttime="20170725 02:39:08.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:08.753" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:08.753" starttime="20170725 02:39:08.752"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:08.753" starttime="20170725 02:39:07.447"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:08.753" starttime="20170725 02:39:07.446"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:08.753" starttime="20170725 02:39:07.446"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:39:08.754" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:39:08.754" starttime="20170725 02:39:08.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:08.754" starttime="20170725 02:39:08.754"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:39:15.045" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:39:15.046" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:15.046" starttime="20170725 02:39:08.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:15.047" starttime="20170725 02:39:15.046"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:39:15.047" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:39:15.047" starttime="20170725 02:39:15.047"></status>
</kw>
<msg timestamp="20170725 02:39:15.048" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:15.048" starttime="20170725 02:39:07.445"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:15.048" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:15.048" starttime="20170725 02:39:15.048"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:39:15.049" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:39:15.049" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:39:15.049" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:39:15.049" starttime="20170725 02:39:15.049"></status>
</kw>
<msg timestamp="20170725 02:39:15.049" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:39:15.049" starttime="20170725 02:39:07.444"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:15.050" starttime="20170725 02:39:07.444"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:39:15.054" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:39:15.054" starttime="20170725 02:39:15.053"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:39:15.055" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:39:15.055" starttime="20170725 02:39:15.054"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:39:15.055" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:39:15.055" starttime="20170725 02:39:15.055"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:39:15.056" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:39:15.056" starttime="20170725 02:39:15.055"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:39:15.892" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:39:15.892" starttime="20170725 02:39:15.057"></status>
</kw>
<msg timestamp="20170725 02:39:15.892" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:39:15.892" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:15.892" starttime="20170725 02:39:15.056"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:39:15.893" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:15.893" starttime="20170725 02:39:15.893"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:15.894" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:15.894" starttime="20170725 02:39:15.893"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:15.894" starttime="20170725 02:39:15.053"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:15.894" starttime="20170725 02:39:15.052"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:15.894" starttime="20170725 02:39:15.052"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:39:15.895" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:39:15.895" starttime="20170725 02:39:15.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:15.895" starttime="20170725 02:39:15.895"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:39:16.696" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:39:16.696" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:16.696" starttime="20170725 02:39:15.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:16.697" starttime="20170725 02:39:16.696"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:39:16.697" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:39:16.697" starttime="20170725 02:39:16.697"></status>
</kw>
<msg timestamp="20170725 02:39:16.698" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:16.698" starttime="20170725 02:39:15.051"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:16.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:16.698" starttime="20170725 02:39:16.698"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:39:16.699" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:39:16.699" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:39:16.699" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:39:16.699" starttime="20170725 02:39:16.699"></status>
</kw>
<msg timestamp="20170725 02:39:16.700" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:39:16.700" starttime="20170725 02:39:15.050"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:16.700" starttime="20170725 02:39:15.050"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:39:16.706" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:39:16.706" starttime="20170725 02:39:16.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:39:16.707" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:39:16.707" starttime="20170725 02:39:16.707"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:39:16.708" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:39:16.708" starttime="20170725 02:39:16.707"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:39:16.709" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:39:16.709" starttime="20170725 02:39:16.708"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:39:16.901" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:39:16.901" starttime="20170725 02:39:16.710"></status>
</kw>
<msg timestamp="20170725 02:39:16.901" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:39:16.901" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:16.901" starttime="20170725 02:39:16.709"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:39:16.902" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:16.902" starttime="20170725 02:39:16.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:16.903" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:16.903" starttime="20170725 02:39:16.902"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:16.903" starttime="20170725 02:39:16.704"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:16.903" starttime="20170725 02:39:16.704"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:16.903" starttime="20170725 02:39:16.703"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:39:16.904" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:39:16.904" starttime="20170725 02:39:16.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:16.905" starttime="20170725 02:39:16.904"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:39:17.829" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:39:17.829" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:17.829" starttime="20170725 02:39:16.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:17.830" starttime="20170725 02:39:17.830"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:39:17.831" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:39:17.831" starttime="20170725 02:39:17.831"></status>
</kw>
<msg timestamp="20170725 02:39:17.831" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:17.831" starttime="20170725 02:39:16.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:17.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:17.832" starttime="20170725 02:39:17.831"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:39:17.833" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:39:17.833" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:39:17.833" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:39:17.833" starttime="20170725 02:39:17.832"></status>
</kw>
<msg timestamp="20170725 02:39:17.833" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:39:17.833" starttime="20170725 02:39:16.701"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:17.833" starttime="20170725 02:39:16.700"></status>
</kw>
<msg timestamp="20170725 02:39:17.834" level="FAIL">
#(UTC) 2017/07/25 02:39:17.833590 -   20.392586 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:39:17.834" starttime="20170725 02:39:07.442"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:39:27.840" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:39:27.840" starttime="20170725 02:39:27.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:39:27.841" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:39:27.841" starttime="20170725 02:39:27.841"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:39:27.842" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:39:27.842" starttime="20170725 02:39:27.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:39:27.842" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:39:27.842" starttime="20170725 02:39:27.842"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:39:28.042" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:39:28.042" starttime="20170725 02:39:27.843"></status>
</kw>
<msg timestamp="20170725 02:39:28.042" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:39:28.042" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.042" starttime="20170725 02:39:27.843"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:39:28.043" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.043" starttime="20170725 02:39:28.043"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:28.044" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.044" starttime="20170725 02:39:28.043"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:28.044" starttime="20170725 02:39:27.839"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:28.044" starttime="20170725 02:39:27.839"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:28.044" starttime="20170725 02:39:27.838"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:39:28.045" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:39:28.045" starttime="20170725 02:39:28.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:28.046" starttime="20170725 02:39:28.045"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:39:28.108" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:39:28.108" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.108" starttime="20170725 02:39:28.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:28.109" starttime="20170725 02:39:28.108"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:39:28.109" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:39:28.109" starttime="20170725 02:39:28.109"></status>
</kw>
<msg timestamp="20170725 02:39:28.109" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.109" starttime="20170725 02:39:27.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:28.110" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.110" starttime="20170725 02:39:28.110"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:39:28.111" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:39:28.111" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:39:28.111" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:39:28.111" starttime="20170725 02:39:28.110"></status>
</kw>
<msg timestamp="20170725 02:39:28.111" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:39:28.111" starttime="20170725 02:39:27.837"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:28.111" starttime="20170725 02:39:27.836"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:39:28.115" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:39:28.116" starttime="20170725 02:39:28.115"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:39:28.116" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:39:28.116" starttime="20170725 02:39:28.116"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:39:28.117" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:39:28.117" starttime="20170725 02:39:28.116"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:39:28.117" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:39:28.117" starttime="20170725 02:39:28.117"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:39:28.295" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:39:28.295" starttime="20170725 02:39:28.118"></status>
</kw>
<msg timestamp="20170725 02:39:28.296" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:39:28.296" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.296" starttime="20170725 02:39:28.118"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:39:28.296" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.297" starttime="20170725 02:39:28.296"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:28.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.297" starttime="20170725 02:39:28.297"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:28.297" starttime="20170725 02:39:28.114"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:28.297" starttime="20170725 02:39:28.114"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:28.298" starttime="20170725 02:39:28.113"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:39:28.298" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:39:28.298" starttime="20170725 02:39:28.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:28.299" starttime="20170725 02:39:28.299"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:39:28.367" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:39:28.367" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.367" starttime="20170725 02:39:28.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:28.368" starttime="20170725 02:39:28.368"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:39:28.368" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:39:28.368" starttime="20170725 02:39:28.368"></status>
</kw>
<msg timestamp="20170725 02:39:28.369" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.369" starttime="20170725 02:39:28.113"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:28.369" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.369" starttime="20170725 02:39:28.369"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:39:28.370" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:39:28.370" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:39:28.370" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:39:28.370" starttime="20170725 02:39:28.370"></status>
</kw>
<msg timestamp="20170725 02:39:28.370" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:39:28.370" starttime="20170725 02:39:28.112"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:28.371" starttime="20170725 02:39:28.112"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:39:28.374" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:39:28.375" starttime="20170725 02:39:28.374"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:39:28.375" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:39:28.375" starttime="20170725 02:39:28.375"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:39:28.376" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:39:28.376" starttime="20170725 02:39:28.376"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:39:28.377" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:39:28.377" starttime="20170725 02:39:28.376"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:39:28.555" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:39:28.555" starttime="20170725 02:39:28.378"></status>
</kw>
<msg timestamp="20170725 02:39:28.555" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:39:28.555" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.555" starttime="20170725 02:39:28.377"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:39:28.556" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.556" starttime="20170725 02:39:28.556"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:28.557" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.557" starttime="20170725 02:39:28.556"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:28.557" starttime="20170725 02:39:28.374"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:28.557" starttime="20170725 02:39:28.373"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:28.557" starttime="20170725 02:39:28.373"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:39:28.558" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:39:28.558" starttime="20170725 02:39:28.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:28.558" starttime="20170725 02:39:28.558"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:39:28.630" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:39:28.630" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.630" starttime="20170725 02:39:28.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:28.631" starttime="20170725 02:39:28.631"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:39:28.631" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:39:28.631" starttime="20170725 02:39:28.631"></status>
</kw>
<msg timestamp="20170725 02:39:28.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.632" starttime="20170725 02:39:28.372"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:28.632" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:28.632" starttime="20170725 02:39:28.632"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:39:28.633" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:39:28.633" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:39:28.633" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:39:28.633" starttime="20170725 02:39:28.633"></status>
</kw>
<msg timestamp="20170725 02:39:28.633" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:39:28.634" starttime="20170725 02:39:28.371"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:28.634" starttime="20170725 02:39:28.371"></status>
</kw>
<msg timestamp="20170725 02:39:28.634" level="FAIL">
#(UTC) 2017/07/25 02:39:28.634017 -   10.800427 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:39:28.635" starttime="20170725 02:39:27.835"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:39:38.641" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:39:38.641" starttime="20170725 02:39:38.640"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:39:38.642" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:39:38.642" starttime="20170725 02:39:38.641"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:39:38.643" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:39:38.643" starttime="20170725 02:39:38.642"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:39:38.644" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:39:38.644" starttime="20170725 02:39:38.643"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:39:39.220" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:39:39.220" starttime="20170725 02:39:38.645"></status>
</kw>
<msg timestamp="20170725 02:39:39.220" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:39:39.220" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:39.220" starttime="20170725 02:39:38.644"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:39:39.221" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:39.221" starttime="20170725 02:39:39.220"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:39.221" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:39.222" starttime="20170725 02:39:39.221"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:39.222" starttime="20170725 02:39:38.640"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:39.222" starttime="20170725 02:39:38.639"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:39.222" starttime="20170725 02:39:38.639"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:39:39.222" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:39:39.223" starttime="20170725 02:39:39.222"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:39.223" starttime="20170725 02:39:39.223"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:39:39.349" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:39:39.349" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:39.349" starttime="20170725 02:39:39.223"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:39.350" starttime="20170725 02:39:39.349"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:39:39.350" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:39:39.350" starttime="20170725 02:39:39.350"></status>
</kw>
<msg timestamp="20170725 02:39:39.351" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:39.351" starttime="20170725 02:39:38.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:39.351" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:39.351" starttime="20170725 02:39:39.351"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:39:39.352" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:39:39.352" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:39:39.352" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:39:39.352" starttime="20170725 02:39:39.352"></status>
</kw>
<msg timestamp="20170725 02:39:39.352" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:39:39.352" starttime="20170725 02:39:38.637"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:39.353" starttime="20170725 02:39:38.637"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:39:39.357" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:39:39.357" starttime="20170725 02:39:39.356"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:39:39.357" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:39:39.358" starttime="20170725 02:39:39.357"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:39:39.358" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:39:39.358" starttime="20170725 02:39:39.358"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:39:39.359" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:39:39.359" starttime="20170725 02:39:39.358"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:39:39.729" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:39:39.729" starttime="20170725 02:39:39.360"></status>
</kw>
<msg timestamp="20170725 02:39:39.729" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:39:39.729" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:39.730" starttime="20170725 02:39:39.359"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:39:39.730" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:39.730" starttime="20170725 02:39:39.730"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:39.731" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:39.731" starttime="20170725 02:39:39.731"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:39.731" starttime="20170725 02:39:39.356"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:39.731" starttime="20170725 02:39:39.355"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:39.731" starttime="20170725 02:39:39.355"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:39:39.732" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:39:39.732" starttime="20170725 02:39:39.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:39.733" starttime="20170725 02:39:39.732"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:39:39.797" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:39:39.797" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:39.797" starttime="20170725 02:39:39.733"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:39.798" starttime="20170725 02:39:39.797"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:39:39.798" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:39:39.798" starttime="20170725 02:39:39.798"></status>
</kw>
<msg timestamp="20170725 02:39:39.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:39.799" starttime="20170725 02:39:39.354"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:39.799" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:39.799" starttime="20170725 02:39:39.799"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:39:39.800" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:39:39.800" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:39:39.800" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:39:39.800" starttime="20170725 02:39:39.800"></status>
</kw>
<msg timestamp="20170725 02:39:39.800" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:39:39.800" starttime="20170725 02:39:39.353"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:39.801" starttime="20170725 02:39:39.353"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:39:39.804" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:39:39.805" starttime="20170725 02:39:39.804"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:39:39.805" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:39:39.805" starttime="20170725 02:39:39.805"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:39:39.806" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:39:39.806" starttime="20170725 02:39:39.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:39:39.807" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:39:39.807" starttime="20170725 02:39:39.806"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:39:40.014" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:39:40.014" starttime="20170725 02:39:39.807"></status>
</kw>
<msg timestamp="20170725 02:39:40.015" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:39:40.015" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:40.015" starttime="20170725 02:39:39.807"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:39:40.015" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:40.015" starttime="20170725 02:39:40.015"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:40.016" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:40.016" starttime="20170725 02:39:40.016"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:40.016" starttime="20170725 02:39:39.803"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:40.016" starttime="20170725 02:39:39.803"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:40.017" starttime="20170725 02:39:39.802"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:39:40.017" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:39:40.017" starttime="20170725 02:39:40.017"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:40.018" starttime="20170725 02:39:40.017"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:39:40.105" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:39:40.105" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:40.105" starttime="20170725 02:39:40.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:40.107" starttime="20170725 02:39:40.106"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:39:40.107" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:39:40.108" starttime="20170725 02:39:40.107"></status>
</kw>
<msg timestamp="20170725 02:39:40.108" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:40.108" starttime="20170725 02:39:39.802"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:40.109" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:40.109" starttime="20170725 02:39:40.109"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:39:40.110" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:39:40.110" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:39:40.110" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:39:40.110" starttime="20170725 02:39:40.110"></status>
</kw>
<msg timestamp="20170725 02:39:40.111" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:39:40.111" starttime="20170725 02:39:39.801"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:40.111" starttime="20170725 02:39:39.801"></status>
</kw>
<msg timestamp="20170725 02:39:40.112" level="FAIL">
#(UTC) 2017/07/25 02:39:40.111454 -   11.477437 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:39:40.112" starttime="20170725 02:39:38.635"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:39:50.119" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:39:50.119" starttime="20170725 02:39:50.118"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:39:50.120" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:39:50.120" starttime="20170725 02:39:50.120"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:39:50.121" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:39:50.121" starttime="20170725 02:39:50.120"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:39:50.121" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:39:50.121" starttime="20170725 02:39:50.121"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:39:50.299" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:39:50.299" starttime="20170725 02:39:50.122"></status>
</kw>
<msg timestamp="20170725 02:39:50.299" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:39:50.299" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:50.299" starttime="20170725 02:39:50.122"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:39:50.300" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:50.300" starttime="20170725 02:39:50.300"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:50.301" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:50.301" starttime="20170725 02:39:50.300"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:50.301" starttime="20170725 02:39:50.118"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:50.301" starttime="20170725 02:39:50.117"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:50.301" starttime="20170725 02:39:50.117"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:39:50.302" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:39:50.302" starttime="20170725 02:39:50.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:50.302" starttime="20170725 02:39:50.302"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:39:50.373" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:39:50.373" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:50.373" starttime="20170725 02:39:50.303"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:50.374" starttime="20170725 02:39:50.374"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:39:50.375" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:39:50.375" starttime="20170725 02:39:50.374"></status>
</kw>
<msg timestamp="20170725 02:39:50.375" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:50.375" starttime="20170725 02:39:50.116"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:50.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:50.376" starttime="20170725 02:39:50.375"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:39:50.376" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:39:50.376" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:39:50.376" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:39:50.376" starttime="20170725 02:39:50.376"></status>
</kw>
<msg timestamp="20170725 02:39:50.377" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:39:50.377" starttime="20170725 02:39:50.116"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:50.377" starttime="20170725 02:39:50.115"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:39:50.381" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:39:50.381" starttime="20170725 02:39:50.380"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:39:50.382" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:39:50.382" starttime="20170725 02:39:50.381"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:39:50.382" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:39:50.382" starttime="20170725 02:39:50.382"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:39:50.383" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:39:50.383" starttime="20170725 02:39:50.383"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:39:50.598" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:39:50.598" starttime="20170725 02:39:50.384"></status>
</kw>
<msg timestamp="20170725 02:39:50.598" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:39:50.598" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:50.598" starttime="20170725 02:39:50.383"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:39:50.599" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:50.599" starttime="20170725 02:39:50.598"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:50.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:50.600" starttime="20170725 02:39:50.599"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:50.600" starttime="20170725 02:39:50.380"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:50.600" starttime="20170725 02:39:50.379"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:50.600" starttime="20170725 02:39:50.379"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:39:50.600" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:39:50.601" starttime="20170725 02:39:50.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:50.601" starttime="20170725 02:39:50.601"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:39:50.676" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:39:50.676" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:50.676" starttime="20170725 02:39:50.601"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:50.677" starttime="20170725 02:39:50.677"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:39:50.677" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:39:50.677" starttime="20170725 02:39:50.677"></status>
</kw>
<msg timestamp="20170725 02:39:50.678" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:50.678" starttime="20170725 02:39:50.378"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:50.678" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:50.678" starttime="20170725 02:39:50.678"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:39:50.679" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:39:50.679" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:39:50.679" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:39:50.679" starttime="20170725 02:39:50.679"></status>
</kw>
<msg timestamp="20170725 02:39:50.679" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:39:50.679" starttime="20170725 02:39:50.378"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:50.680" starttime="20170725 02:39:50.377"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:39:50.683" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:39:50.684" starttime="20170725 02:39:50.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:39:50.684" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:39:50.684" starttime="20170725 02:39:50.684"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:39:50.685" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:39:50.685" starttime="20170725 02:39:50.685"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:39:50.686" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:39:50.686" starttime="20170725 02:39:50.685"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:39:51.005" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:39:51.005" starttime="20170725 02:39:50.686"></status>
</kw>
<msg timestamp="20170725 02:39:51.005" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:39:51.005" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:51.005" starttime="20170725 02:39:50.686"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:39:51.006" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:51.006" starttime="20170725 02:39:51.005"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:51.007" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:51.007" starttime="20170725 02:39:51.007"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:51.007" starttime="20170725 02:39:50.682"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:51.007" starttime="20170725 02:39:50.682"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:51.008" starttime="20170725 02:39:50.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:39:51.008" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:39:51.008" starttime="20170725 02:39:51.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:51.009" starttime="20170725 02:39:51.008"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:39:51.080" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:39:51.080" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:51.080" starttime="20170725 02:39:51.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:39:51.081" starttime="20170725 02:39:51.081"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:39:51.081" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:39:51.081" starttime="20170725 02:39:51.081"></status>
</kw>
<msg timestamp="20170725 02:39:51.082" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:39:51.082" starttime="20170725 02:39:50.681"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:39:51.082" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:39:51.082" starttime="20170725 02:39:51.082"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:39:51.083" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:39:51.083" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:39:51.083" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:39:51.083" starttime="20170725 02:39:51.082"></status>
</kw>
<msg timestamp="20170725 02:39:51.083" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:39:51.083" starttime="20170725 02:39:50.680"></status>
</kw>
<status status="PASS" endtime="20170725 02:39:51.084" starttime="20170725 02:39:50.680"></status>
</kw>
<msg timestamp="20170725 02:39:51.084" level="FAIL">
#(UTC) 2017/07/25 02:39:51.083771 -   10.972317 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:39:51.084" starttime="20170725 02:39:50.113"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:01.090" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:01.091" starttime="20170725 02:40:01.090"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:01.091" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:01.092" starttime="20170725 02:40:01.091"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:01.092" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:01.093" starttime="20170725 02:40:01.092"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:01.093" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:01.093" starttime="20170725 02:40:01.093"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:01.277" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:01.277" starttime="20170725 02:40:01.094"></status>
</kw>
<msg timestamp="20170725 02:40:01.277" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:01.277" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:01.278" starttime="20170725 02:40:01.093"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:01.278" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:01.279" starttime="20170725 02:40:01.278"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:01.280" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:01.280" starttime="20170725 02:40:01.279"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:01.280" starttime="20170725 02:40:01.089"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:01.280" starttime="20170725 02:40:01.089"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:01.280" starttime="20170725 02:40:01.088"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:01.281" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:40:01.281" starttime="20170725 02:40:01.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:01.282" starttime="20170725 02:40:01.281"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:01.352" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:40:01.352" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:01.352" starttime="20170725 02:40:01.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:01.353" starttime="20170725 02:40:01.352"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:01.353" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:01.353" starttime="20170725 02:40:01.353"></status>
</kw>
<msg timestamp="20170725 02:40:01.354" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:01.354" starttime="20170725 02:40:01.088"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:01.354" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:01.354" starttime="20170725 02:40:01.354"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:01.355" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:01.355" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:01.355" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:40:01.355" starttime="20170725 02:40:01.354"></status>
</kw>
<msg timestamp="20170725 02:40:01.355" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:40:01.355" starttime="20170725 02:40:01.087"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:01.356" starttime="20170725 02:40:01.087"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:01.359" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:01.360" starttime="20170725 02:40:01.359"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:01.361" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:01.361" starttime="20170725 02:40:01.360"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:01.361" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:01.361" starttime="20170725 02:40:01.361"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:01.362" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:01.362" starttime="20170725 02:40:01.362"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:01.653" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:01.653" starttime="20170725 02:40:01.363"></status>
</kw>
<msg timestamp="20170725 02:40:01.653" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:01.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:01.653" starttime="20170725 02:40:01.362"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:01.654" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:01.654" starttime="20170725 02:40:01.653"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:01.654" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:01.654" starttime="20170725 02:40:01.654"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:01.654" starttime="20170725 02:40:01.359"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:01.655" starttime="20170725 02:40:01.358"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:01.655" starttime="20170725 02:40:01.358"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:01.655" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:40:01.655" starttime="20170725 02:40:01.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:01.656" starttime="20170725 02:40:01.656"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:01.730" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:40:01.731" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:01.731" starttime="20170725 02:40:01.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:01.731" starttime="20170725 02:40:01.731"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:01.732" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:01.732" starttime="20170725 02:40:01.732"></status>
</kw>
<msg timestamp="20170725 02:40:01.732" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:01.732" starttime="20170725 02:40:01.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:01.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:01.733" starttime="20170725 02:40:01.732"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:01.733" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:01.733" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:01.733" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:40:01.733" starttime="20170725 02:40:01.733"></status>
</kw>
<msg timestamp="20170725 02:40:01.734" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:40:01.734" starttime="20170725 02:40:01.356"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:01.734" starttime="20170725 02:40:01.356"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:01.738" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:01.738" starttime="20170725 02:40:01.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:01.739" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:01.739" starttime="20170725 02:40:01.739"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:01.740" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:01.740" starttime="20170725 02:40:01.739"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:01.740" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:01.740" starttime="20170725 02:40:01.740"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:01.935" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:01.935" starttime="20170725 02:40:01.741"></status>
</kw>
<msg timestamp="20170725 02:40:01.935" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:01.935" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:01.936" starttime="20170725 02:40:01.741"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:01.936" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:01.936" starttime="20170725 02:40:01.936"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:01.937" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:01.937" starttime="20170725 02:40:01.937"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:01.937" starttime="20170725 02:40:01.737"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:01.937" starttime="20170725 02:40:01.737"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:01.937" starttime="20170725 02:40:01.736"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:01.938" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:40:01.938" starttime="20170725 02:40:01.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:01.939" starttime="20170725 02:40:01.938"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:02.017" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:40:02.017" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:02.017" starttime="20170725 02:40:01.939"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:02.018" starttime="20170725 02:40:02.018"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:02.018" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:02.019" starttime="20170725 02:40:02.018"></status>
</kw>
<msg timestamp="20170725 02:40:02.019" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:02.019" starttime="20170725 02:40:01.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:02.019" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:02.020" starttime="20170725 02:40:02.019"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:02.020" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:02.020" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:02.020" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:40:02.020" starttime="20170725 02:40:02.020"></status>
</kw>
<msg timestamp="20170725 02:40:02.021" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:40:02.021" starttime="20170725 02:40:01.735"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:02.021" starttime="20170725 02:40:01.734"></status>
</kw>
<msg timestamp="20170725 02:40:02.021" level="FAIL">
#(UTC) 2017/07/25 02:40:02.021092 -   10.937321 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:40:02.022" starttime="20170725 02:40:01.085"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:12.028" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:12.028" starttime="20170725 02:40:12.027"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:12.029" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:12.029" starttime="20170725 02:40:12.029"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:12.029" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:12.030" starttime="20170725 02:40:12.029"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:12.030" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:12.030" starttime="20170725 02:40:12.030"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:12.228" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:12.228" starttime="20170725 02:40:12.031"></status>
</kw>
<msg timestamp="20170725 02:40:12.228" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:12.228" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.228" starttime="20170725 02:40:12.030"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:12.229" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.229" starttime="20170725 02:40:12.228"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:12.229" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.230" starttime="20170725 02:40:12.229"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:12.230" starttime="20170725 02:40:12.026"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:12.230" starttime="20170725 02:40:12.026"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:12.230" starttime="20170725 02:40:12.025"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:12.230" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:40:12.231" starttime="20170725 02:40:12.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:12.231" starttime="20170725 02:40:12.231"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:12.363" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:40:12.363" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.363" starttime="20170725 02:40:12.231"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:12.363" starttime="20170725 02:40:12.363"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:12.364" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:12.364" starttime="20170725 02:40:12.364"></status>
</kw>
<msg timestamp="20170725 02:40:12.364" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.364" starttime="20170725 02:40:12.025"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:12.365" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.365" starttime="20170725 02:40:12.364"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:12.366" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:12.366" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:12.366" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:40:12.366" starttime="20170725 02:40:12.365"></status>
</kw>
<msg timestamp="20170725 02:40:12.366" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:40:12.366" starttime="20170725 02:40:12.024"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:12.366" starttime="20170725 02:40:12.024"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:12.370" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:12.371" starttime="20170725 02:40:12.370"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:12.371" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:12.371" starttime="20170725 02:40:12.371"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:12.372" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:12.372" starttime="20170725 02:40:12.372"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:12.373" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:12.373" starttime="20170725 02:40:12.372"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:12.569" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:12.569" starttime="20170725 02:40:12.373"></status>
</kw>
<msg timestamp="20170725 02:40:12.569" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:12.569" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.569" starttime="20170725 02:40:12.373"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:12.570" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.570" starttime="20170725 02:40:12.570"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:12.571" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.571" starttime="20170725 02:40:12.570"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:12.571" starttime="20170725 02:40:12.369"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:12.571" starttime="20170725 02:40:12.369"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:12.571" starttime="20170725 02:40:12.368"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:12.572" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:40:12.572" starttime="20170725 02:40:12.571"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:12.572" starttime="20170725 02:40:12.572"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:12.638" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:40:12.638" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.638" starttime="20170725 02:40:12.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:12.639" starttime="20170725 02:40:12.638"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:12.639" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:12.639" starttime="20170725 02:40:12.639"></status>
</kw>
<msg timestamp="20170725 02:40:12.639" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.640" starttime="20170725 02:40:12.368"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:12.640" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.640" starttime="20170725 02:40:12.640"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:12.641" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:12.641" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:12.641" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:40:12.641" starttime="20170725 02:40:12.640"></status>
</kw>
<msg timestamp="20170725 02:40:12.641" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:40:12.641" starttime="20170725 02:40:12.367"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:12.641" starttime="20170725 02:40:12.367"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:12.645" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:12.646" starttime="20170725 02:40:12.645"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:12.646" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:12.646" starttime="20170725 02:40:12.646"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:12.647" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:12.647" starttime="20170725 02:40:12.647"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:12.648" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:12.648" starttime="20170725 02:40:12.647"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:12.827" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:12.827" starttime="20170725 02:40:12.648"></status>
</kw>
<msg timestamp="20170725 02:40:12.827" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:12.827" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.827" starttime="20170725 02:40:12.648"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:12.828" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.828" starttime="20170725 02:40:12.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:12.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.828" starttime="20170725 02:40:12.828"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:12.829" starttime="20170725 02:40:12.644"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:12.829" starttime="20170725 02:40:12.644"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:12.829" starttime="20170725 02:40:12.643"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:12.829" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:40:12.829" starttime="20170725 02:40:12.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:12.830" starttime="20170725 02:40:12.830"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:12.895" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:40:12.895" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.895" starttime="20170725 02:40:12.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:12.896" starttime="20170725 02:40:12.896"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:12.896" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:12.896" starttime="20170725 02:40:12.896"></status>
</kw>
<msg timestamp="20170725 02:40:12.897" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.897" starttime="20170725 02:40:12.643"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:12.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:12.897" starttime="20170725 02:40:12.897"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:12.898" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:12.898" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:12.898" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:40:12.898" starttime="20170725 02:40:12.898"></status>
</kw>
<msg timestamp="20170725 02:40:12.899" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:40:12.899" starttime="20170725 02:40:12.642"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:12.899" starttime="20170725 02:40:12.642"></status>
</kw>
<msg timestamp="20170725 02:40:12.900" level="FAIL">
#(UTC) 2017/07/25 02:40:12.899489 -   10.878397 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:40:12.900" starttime="20170725 02:40:12.022"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:22.907" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:22.907" starttime="20170725 02:40:22.906"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:22.908" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:22.908" starttime="20170725 02:40:22.908"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:22.909" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:22.909" starttime="20170725 02:40:22.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:22.910" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:22.910" starttime="20170725 02:40:22.909"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:23.135" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:23.135" starttime="20170725 02:40:22.911"></status>
</kw>
<msg timestamp="20170725 02:40:23.135" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:23.135" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.135" starttime="20170725 02:40:22.910"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:23.136" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.136" starttime="20170725 02:40:23.136"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:23.137" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.137" starttime="20170725 02:40:23.137"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:23.137" starttime="20170725 02:40:22.905"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:23.137" starttime="20170725 02:40:22.905"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:23.137" starttime="20170725 02:40:22.904"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:23.138" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:40:23.138" starttime="20170725 02:40:23.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:23.139" starttime="20170725 02:40:23.138"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:23.203" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:40:23.203" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.203" starttime="20170725 02:40:23.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:23.204" starttime="20170725 02:40:23.204"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:23.205" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:23.205" starttime="20170725 02:40:23.205"></status>
</kw>
<msg timestamp="20170725 02:40:23.205" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.205" starttime="20170725 02:40:22.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:23.206" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.206" starttime="20170725 02:40:23.205"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:23.206" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:23.206" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:23.206" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:40:23.207" starttime="20170725 02:40:23.206"></status>
</kw>
<msg timestamp="20170725 02:40:23.207" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:40:23.207" starttime="20170725 02:40:22.903"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:23.207" starttime="20170725 02:40:22.902"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:23.212" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:23.212" starttime="20170725 02:40:23.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:23.213" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:23.213" starttime="20170725 02:40:23.213"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:23.214" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:23.214" starttime="20170725 02:40:23.213"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:23.215" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:23.215" starttime="20170725 02:40:23.214"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:23.415" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:23.415" starttime="20170725 02:40:23.216"></status>
</kw>
<msg timestamp="20170725 02:40:23.415" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:23.415" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.415" starttime="20170725 02:40:23.215"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:23.416" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.416" starttime="20170725 02:40:23.416"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:23.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.417" starttime="20170725 02:40:23.417"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:23.417" starttime="20170725 02:40:23.210"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:23.417" starttime="20170725 02:40:23.210"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:23.417" starttime="20170725 02:40:23.209"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:23.418" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:40:23.418" starttime="20170725 02:40:23.418"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:23.419" starttime="20170725 02:40:23.419"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:23.486" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:40:23.486" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.486" starttime="20170725 02:40:23.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:23.487" starttime="20170725 02:40:23.487"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:23.487" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:23.488" starttime="20170725 02:40:23.487"></status>
</kw>
<msg timestamp="20170725 02:40:23.488" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.488" starttime="20170725 02:40:23.208"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:23.488" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.488" starttime="20170725 02:40:23.488"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:23.489" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:23.489" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:23.489" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:40:23.489" starttime="20170725 02:40:23.489"></status>
</kw>
<msg timestamp="20170725 02:40:23.489" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:40:23.490" starttime="20170725 02:40:23.208"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:23.490" starttime="20170725 02:40:23.207"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:23.494" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:23.494" starttime="20170725 02:40:23.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:23.495" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:23.495" starttime="20170725 02:40:23.494"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:23.495" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:23.495" starttime="20170725 02:40:23.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:23.496" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:23.496" starttime="20170725 02:40:23.496"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:23.689" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:23.689" starttime="20170725 02:40:23.497"></status>
</kw>
<msg timestamp="20170725 02:40:23.690" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:23.690" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.690" starttime="20170725 02:40:23.496"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:23.690" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.690" starttime="20170725 02:40:23.690"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:23.691" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.691" starttime="20170725 02:40:23.691"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:23.691" starttime="20170725 02:40:23.493"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:23.691" starttime="20170725 02:40:23.492"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:23.691" starttime="20170725 02:40:23.492"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:23.692" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:40:23.692" starttime="20170725 02:40:23.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:23.693" starttime="20170725 02:40:23.692"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:23.763" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:40:23.764" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.764" starttime="20170725 02:40:23.693"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:23.764" starttime="20170725 02:40:23.764"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:23.765" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:23.765" starttime="20170725 02:40:23.765"></status>
</kw>
<msg timestamp="20170725 02:40:23.765" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.765" starttime="20170725 02:40:23.491"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:23.766" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:23.766" starttime="20170725 02:40:23.765"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:23.766" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:23.766" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:23.767" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:40:23.767" starttime="20170725 02:40:23.766"></status>
</kw>
<msg timestamp="20170725 02:40:23.767" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:40:23.767" starttime="20170725 02:40:23.490"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:23.767" starttime="20170725 02:40:23.490"></status>
</kw>
<msg timestamp="20170725 02:40:23.768" level="FAIL">
#(UTC) 2017/07/25 02:40:23.767413 -   10.867924 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:40:23.768" starttime="20170725 02:40:22.901"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:33.774" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:33.775" starttime="20170725 02:40:33.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:33.775" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:33.776" starttime="20170725 02:40:33.775"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:33.776" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:33.776" starttime="20170725 02:40:33.776"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:33.777" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:33.777" starttime="20170725 02:40:33.776"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:33.963" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:33.963" starttime="20170725 02:40:33.778"></status>
</kw>
<msg timestamp="20170725 02:40:33.964" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:33.964" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:33.964" starttime="20170725 02:40:33.777"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:33.964" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:33.964" starttime="20170725 02:40:33.964"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:33.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:33.965" starttime="20170725 02:40:33.965"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:33.965" starttime="20170725 02:40:33.773"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:33.965" starttime="20170725 02:40:33.773"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:33.965" starttime="20170725 02:40:33.772"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:33.966" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:40:33.966" starttime="20170725 02:40:33.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:33.967" starttime="20170725 02:40:33.966"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:34.029" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:40:34.030" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:34.030" starttime="20170725 02:40:33.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:34.031" starttime="20170725 02:40:34.030"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:34.031" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:34.031" starttime="20170725 02:40:34.031"></status>
</kw>
<msg timestamp="20170725 02:40:34.032" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:34.032" starttime="20170725 02:40:33.771"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:34.033" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:34.033" starttime="20170725 02:40:34.032"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:34.033" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:34.034" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:34.034" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:40:34.034" starttime="20170725 02:40:34.033"></status>
</kw>
<msg timestamp="20170725 02:40:34.034" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:40:34.034" starttime="20170725 02:40:33.771"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:34.035" starttime="20170725 02:40:33.770"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:34.040" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:34.041" starttime="20170725 02:40:34.040"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:34.042" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:34.042" starttime="20170725 02:40:34.041"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:34.043" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:34.043" starttime="20170725 02:40:34.042"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:34.044" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:34.044" starttime="20170725 02:40:34.043"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:34.242" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:34.242" starttime="20170725 02:40:34.045"></status>
</kw>
<msg timestamp="20170725 02:40:34.242" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:34.242" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:34.242" starttime="20170725 02:40:34.044"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:34.243" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:34.243" starttime="20170725 02:40:34.242"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:34.243" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:34.244" starttime="20170725 02:40:34.243"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:34.244" starttime="20170725 02:40:34.039"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:34.244" starttime="20170725 02:40:34.038"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:34.244" starttime="20170725 02:40:34.037"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:34.245" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:40:34.245" starttime="20170725 02:40:34.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:34.245" starttime="20170725 02:40:34.245"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:34.311" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:40:34.311" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:34.311" starttime="20170725 02:40:34.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:34.312" starttime="20170725 02:40:34.311"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:34.312" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:34.312" starttime="20170725 02:40:34.312"></status>
</kw>
<msg timestamp="20170725 02:40:34.312" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:34.312" starttime="20170725 02:40:34.036"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:34.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:34.313" starttime="20170725 02:40:34.313"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:34.314" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:34.314" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:34.314" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:40:34.314" starttime="20170725 02:40:34.313"></status>
</kw>
<msg timestamp="20170725 02:40:34.314" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:40:34.314" starttime="20170725 02:40:34.036"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:34.314" starttime="20170725 02:40:34.035"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:34.323" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:34.324" starttime="20170725 02:40:34.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:34.325" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:34.325" starttime="20170725 02:40:34.325"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:34.326" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:34.326" starttime="20170725 02:40:34.325"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:34.327" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:34.327" starttime="20170725 02:40:34.327"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:34.621" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:34.621" starttime="20170725 02:40:34.328"></status>
</kw>
<msg timestamp="20170725 02:40:34.621" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:34.621" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:34.621" starttime="20170725 02:40:34.328"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:34.622" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:34.622" starttime="20170725 02:40:34.622"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:34.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:34.623" starttime="20170725 02:40:34.622"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:34.623" starttime="20170725 02:40:34.319"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:34.623" starttime="20170725 02:40:34.318"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:34.623" starttime="20170725 02:40:34.317"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:34.624" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:40:34.624" starttime="20170725 02:40:34.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:34.625" starttime="20170725 02:40:34.624"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:34.706" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:40:34.706" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:34.706" starttime="20170725 02:40:34.625"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:34.707" starttime="20170725 02:40:34.706"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:34.707" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:34.707" starttime="20170725 02:40:34.707"></status>
</kw>
<msg timestamp="20170725 02:40:34.707" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:34.708" starttime="20170725 02:40:34.316"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:34.708" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:34.708" starttime="20170725 02:40:34.708"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:34.709" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:34.709" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:34.709" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:40:34.709" starttime="20170725 02:40:34.708"></status>
</kw>
<msg timestamp="20170725 02:40:34.709" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:40:34.709" starttime="20170725 02:40:34.315"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:34.710" starttime="20170725 02:40:34.315"></status>
</kw>
<msg timestamp="20170725 02:40:34.710" level="FAIL">
#(UTC) 2017/07/25 02:40:34.709763 -   10.942350 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:40:34.710" starttime="20170725 02:40:33.769"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:44.716" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:44.717" starttime="20170725 02:40:44.716"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:44.718" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:44.718" starttime="20170725 02:40:44.717"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:44.718" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:44.718" starttime="20170725 02:40:44.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:44.719" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:44.719" starttime="20170725 02:40:44.718"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:44.913" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:44.913" starttime="20170725 02:40:44.720"></status>
</kw>
<msg timestamp="20170725 02:40:44.913" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:44.914" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:44.914" starttime="20170725 02:40:44.719"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:44.914" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:44.914" starttime="20170725 02:40:44.914"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:44.915" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:44.915" starttime="20170725 02:40:44.915"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:44.915" starttime="20170725 02:40:44.715"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:44.915" starttime="20170725 02:40:44.715"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:44.915" starttime="20170725 02:40:44.714"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:44.916" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:40:44.916" starttime="20170725 02:40:44.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:44.917" starttime="20170725 02:40:44.916"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:44.979" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:40:44.979" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:44.979" starttime="20170725 02:40:44.917"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:44.980" starttime="20170725 02:40:44.980"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:44.980" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:44.980" starttime="20170725 02:40:44.980"></status>
</kw>
<msg timestamp="20170725 02:40:44.981" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:44.981" starttime="20170725 02:40:44.714"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:44.981" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:44.981" starttime="20170725 02:40:44.981"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:44.982" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:44.982" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:44.982" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:40:44.982" starttime="20170725 02:40:44.982"></status>
</kw>
<msg timestamp="20170725 02:40:44.982" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:40:44.982" starttime="20170725 02:40:44.713"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:44.983" starttime="20170725 02:40:44.713"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:44.987" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:44.987" starttime="20170725 02:40:44.986"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:44.988" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:44.988" starttime="20170725 02:40:44.988"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:44.989" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:44.989" starttime="20170725 02:40:44.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:44.989" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:44.989" starttime="20170725 02:40:44.989"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:45.180" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:45.180" starttime="20170725 02:40:44.990"></status>
</kw>
<msg timestamp="20170725 02:40:45.180" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:45.180" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:45.180" starttime="20170725 02:40:44.990"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:45.181" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:45.181" starttime="20170725 02:40:45.181"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:45.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:45.182" starttime="20170725 02:40:45.181"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:45.182" starttime="20170725 02:40:44.986"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:45.182" starttime="20170725 02:40:44.985"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:45.182" starttime="20170725 02:40:44.985"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:45.183" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:40:45.183" starttime="20170725 02:40:45.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:45.183" starttime="20170725 02:40:45.183"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:45.252" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:40:45.252" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:45.252" starttime="20170725 02:40:45.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:45.253" starttime="20170725 02:40:45.253"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:45.253" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:45.253" starttime="20170725 02:40:45.253"></status>
</kw>
<msg timestamp="20170725 02:40:45.254" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:45.254" starttime="20170725 02:40:44.984"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:45.254" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:45.254" starttime="20170725 02:40:45.254"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:45.255" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:45.255" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:45.255" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:40:45.255" starttime="20170725 02:40:45.255"></status>
</kw>
<msg timestamp="20170725 02:40:45.255" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:40:45.255" starttime="20170725 02:40:44.983"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:45.256" starttime="20170725 02:40:44.983"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:45.260" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:45.260" starttime="20170725 02:40:45.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:45.261" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:45.261" starttime="20170725 02:40:45.261"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:45.262" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:45.262" starttime="20170725 02:40:45.262"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:45.263" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:45.263" starttime="20170725 02:40:45.263"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:45.476" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:45.476" starttime="20170725 02:40:45.265"></status>
</kw>
<msg timestamp="20170725 02:40:45.476" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:45.476" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:45.476" starttime="20170725 02:40:45.264"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:45.477" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:45.477" starttime="20170725 02:40:45.476"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:45.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:45.477" starttime="20170725 02:40:45.477"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:45.478" starttime="20170725 02:40:45.259"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:45.478" starttime="20170725 02:40:45.258"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:45.478" starttime="20170725 02:40:45.258"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:45.478" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:40:45.478" starttime="20170725 02:40:45.478"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:45.479" starttime="20170725 02:40:45.479"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:45.592" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:40:45.592" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:45.592" starttime="20170725 02:40:45.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:45.593" starttime="20170725 02:40:45.592"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:45.593" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:45.593" starttime="20170725 02:40:45.593"></status>
</kw>
<msg timestamp="20170725 02:40:45.593" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:45.593" starttime="20170725 02:40:45.257"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:45.594" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:45.594" starttime="20170725 02:40:45.594"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:45.595" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:45.595" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:45.595" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:40:45.595" starttime="20170725 02:40:45.594"></status>
</kw>
<msg timestamp="20170725 02:40:45.595" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:40:45.595" starttime="20170725 02:40:45.256"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:45.595" starttime="20170725 02:40:45.256"></status>
</kw>
<msg timestamp="20170725 02:40:45.596" level="FAIL">
#(UTC) 2017/07/25 02:40:45.595618 -   10.885855 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:40:45.596" starttime="20170725 02:40:44.711"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:55.602" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:55.603" starttime="20170725 02:40:55.602"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:55.604" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:55.604" starttime="20170725 02:40:55.603"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:55.604" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:55.605" starttime="20170725 02:40:55.604"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:55.605" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:55.605" starttime="20170725 02:40:55.605"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:55.781" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:55.781" starttime="20170725 02:40:55.606"></status>
</kw>
<msg timestamp="20170725 02:40:55.781" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:55.781" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:55.781" starttime="20170725 02:40:55.605"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:55.782" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:55.782" starttime="20170725 02:40:55.781"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:55.782" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:55.783" starttime="20170725 02:40:55.782"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:55.783" starttime="20170725 02:40:55.601"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:55.783" starttime="20170725 02:40:55.601"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:55.783" starttime="20170725 02:40:55.600"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:55.783" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:40:55.784" starttime="20170725 02:40:55.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:55.784" starttime="20170725 02:40:55.784"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:55.867" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:40:55.867" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:55.867" starttime="20170725 02:40:55.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:55.868" starttime="20170725 02:40:55.868"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:55.869" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:55.869" starttime="20170725 02:40:55.868"></status>
</kw>
<msg timestamp="20170725 02:40:55.869" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:55.869" starttime="20170725 02:40:55.599"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:55.870" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:55.870" starttime="20170725 02:40:55.869"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:55.870" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:55.870" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:55.870" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:40:55.870" starttime="20170725 02:40:55.870"></status>
</kw>
<msg timestamp="20170725 02:40:55.871" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:40:55.871" starttime="20170725 02:40:55.599"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:55.871" starttime="20170725 02:40:55.598"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:55.875" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:55.875" starttime="20170725 02:40:55.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:55.876" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:55.876" starttime="20170725 02:40:55.876"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:55.877" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:55.877" starttime="20170725 02:40:55.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:55.877" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:55.877" starttime="20170725 02:40:55.877"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:56.052" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:56.052" starttime="20170725 02:40:55.878"></status>
</kw>
<msg timestamp="20170725 02:40:56.052" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:56.052" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:56.052" starttime="20170725 02:40:55.878"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:56.053" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:56.053" starttime="20170725 02:40:56.052"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:56.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:56.054" starttime="20170725 02:40:56.053"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:56.054" starttime="20170725 02:40:55.874"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:56.054" starttime="20170725 02:40:55.873"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:56.054" starttime="20170725 02:40:55.873"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:56.054" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:40:56.055" starttime="20170725 02:40:56.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:56.055" starttime="20170725 02:40:56.055"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:56.133" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:40:56.133" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:56.133" starttime="20170725 02:40:56.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:56.134" starttime="20170725 02:40:56.133"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:56.134" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:56.134" starttime="20170725 02:40:56.134"></status>
</kw>
<msg timestamp="20170725 02:40:56.134" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:56.134" starttime="20170725 02:40:55.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:56.135" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:56.135" starttime="20170725 02:40:56.135"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:56.135" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:56.136" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:56.136" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:40:56.136" starttime="20170725 02:40:56.135"></status>
</kw>
<msg timestamp="20170725 02:40:56.136" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:40:56.136" starttime="20170725 02:40:55.872"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:56.136" starttime="20170725 02:40:55.871"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:40:56.140" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:40:56.141" starttime="20170725 02:40:56.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:40:56.141" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:40:56.141" starttime="20170725 02:40:56.141"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:40:56.142" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:40:56.142" starttime="20170725 02:40:56.141"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:40:56.143" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:40:56.143" starttime="20170725 02:40:56.142"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:40:56.421" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:40:56.421" starttime="20170725 02:40:56.143"></status>
</kw>
<msg timestamp="20170725 02:40:56.421" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:40:56.422" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:56.422" starttime="20170725 02:40:56.143"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:40:56.422" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:56.422" starttime="20170725 02:40:56.422"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:56.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:56.423" starttime="20170725 02:40:56.423"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:56.423" starttime="20170725 02:40:56.139"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:56.423" starttime="20170725 02:40:56.139"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:56.423" starttime="20170725 02:40:56.138"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:40:56.424" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:40:56.424" starttime="20170725 02:40:56.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:56.425" starttime="20170725 02:40:56.424"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:40:56.502" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:40:56.502" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:56.502" starttime="20170725 02:40:56.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:40:56.503" starttime="20170725 02:40:56.502"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:40:56.503" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:40:56.503" starttime="20170725 02:40:56.503"></status>
</kw>
<msg timestamp="20170725 02:40:56.503" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:40:56.504" starttime="20170725 02:40:56.137"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:40:56.504" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:40:56.505" starttime="20170725 02:40:56.504"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:40:56.505" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:40:56.505" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:40:56.505" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:40:56.505" starttime="20170725 02:40:56.505"></status>
</kw>
<msg timestamp="20170725 02:40:56.506" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:40:56.506" starttime="20170725 02:40:56.137"></status>
</kw>
<status status="PASS" endtime="20170725 02:40:56.506" starttime="20170725 02:40:56.136"></status>
</kw>
<msg timestamp="20170725 02:40:56.507" level="FAIL">
#(UTC) 2017/07/25 02:40:56.506124 -   10.910506 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:40:56.507" starttime="20170725 02:40:55.597"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:41:06.513" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:41:06.514" starttime="20170725 02:41:06.513"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:41:06.515" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:41:06.515" starttime="20170725 02:41:06.515"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:41:06.515" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:41:06.516" starttime="20170725 02:41:06.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:41:06.516" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:41:06.516" starttime="20170725 02:41:06.516"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:41:06.754" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:41:06.754" starttime="20170725 02:41:06.517"></status>
</kw>
<msg timestamp="20170725 02:41:06.754" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:41:06.754" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:06.754" starttime="20170725 02:41:06.517"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:41:06.755" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:06.755" starttime="20170725 02:41:06.755"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:06.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:06.756" starttime="20170725 02:41:06.756"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:06.756" starttime="20170725 02:41:06.512"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:06.756" starttime="20170725 02:41:06.512"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:06.756" starttime="20170725 02:41:06.511"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:41:06.757" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:41:06.757" starttime="20170725 02:41:06.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:06.758" starttime="20170725 02:41:06.757"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:41:06.909" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:41:06.909" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:06.909" starttime="20170725 02:41:06.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:06.909" starttime="20170725 02:41:06.909"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:41:06.910" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:41:06.910" starttime="20170725 02:41:06.910"></status>
</kw>
<msg timestamp="20170725 02:41:06.910" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:06.910" starttime="20170725 02:41:06.510"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:06.911" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:06.911" starttime="20170725 02:41:06.910"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:41:06.911" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:41:06.911" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:41:06.912" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:41:06.912" starttime="20170725 02:41:06.911"></status>
</kw>
<msg timestamp="20170725 02:41:06.912" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:41:06.912" starttime="20170725 02:41:06.510"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:06.912" starttime="20170725 02:41:06.509"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:41:06.916" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:41:06.917" starttime="20170725 02:41:06.916"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:41:06.917" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:41:06.917" starttime="20170725 02:41:06.917"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:41:06.918" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:41:06.918" starttime="20170725 02:41:06.918"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:41:06.919" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:41:06.919" starttime="20170725 02:41:06.918"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:41:07.123" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:41:07.123" starttime="20170725 02:41:06.919"></status>
</kw>
<msg timestamp="20170725 02:41:07.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:41:07.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:07.123" starttime="20170725 02:41:06.919"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:41:07.124" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:07.124" starttime="20170725 02:41:07.123"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:07.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:07.125" starttime="20170725 02:41:07.124"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:07.125" starttime="20170725 02:41:06.915"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:07.125" starttime="20170725 02:41:06.915"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:07.125" starttime="20170725 02:41:06.914"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:41:07.126" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:41:07.126" starttime="20170725 02:41:07.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:07.127" starttime="20170725 02:41:07.126"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:41:07.195" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:41:07.195" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:07.195" starttime="20170725 02:41:07.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:07.196" starttime="20170725 02:41:07.195"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:41:07.196" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:41:07.196" starttime="20170725 02:41:07.196"></status>
</kw>
<msg timestamp="20170725 02:41:07.196" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:07.196" starttime="20170725 02:41:06.913"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:07.197" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:07.197" starttime="20170725 02:41:07.197"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:41:07.198" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:41:07.198" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:41:07.198" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:41:07.198" starttime="20170725 02:41:07.197"></status>
</kw>
<msg timestamp="20170725 02:41:07.198" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:41:07.198" starttime="20170725 02:41:06.913"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:07.198" starttime="20170725 02:41:06.912"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:41:07.203" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:41:07.203" starttime="20170725 02:41:07.202"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:41:07.204" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:41:07.204" starttime="20170725 02:41:07.204"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:41:07.205" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:41:07.205" starttime="20170725 02:41:07.204"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:41:07.205" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:41:07.205" starttime="20170725 02:41:07.205"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:41:07.394" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:41:07.394" starttime="20170725 02:41:07.206"></status>
</kw>
<msg timestamp="20170725 02:41:07.394" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:41:07.394" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:07.394" starttime="20170725 02:41:07.206"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:41:07.395" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:07.395" starttime="20170725 02:41:07.394"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:07.396" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:07.396" starttime="20170725 02:41:07.395"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:07.396" starttime="20170725 02:41:07.202"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:07.396" starttime="20170725 02:41:07.201"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:07.397" starttime="20170725 02:41:07.201"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:41:07.397" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:41:07.397" starttime="20170725 02:41:07.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:07.398" starttime="20170725 02:41:07.398"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:41:07.462" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:41:07.462" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:07.462" starttime="20170725 02:41:07.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:07.463" starttime="20170725 02:41:07.462"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:41:07.463" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:41:07.463" starttime="20170725 02:41:07.463"></status>
</kw>
<msg timestamp="20170725 02:41:07.463" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:07.463" starttime="20170725 02:41:07.200"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:07.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:07.464" starttime="20170725 02:41:07.464"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:41:07.465" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:41:07.465" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:41:07.465" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:41:07.465" starttime="20170725 02:41:07.464"></status>
</kw>
<msg timestamp="20170725 02:41:07.465" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:41:07.465" starttime="20170725 02:41:07.199"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:07.465" starttime="20170725 02:41:07.199"></status>
</kw>
<msg timestamp="20170725 02:41:07.466" level="FAIL">
#(UTC) 2017/07/25 02:41:07.465552 -   10.959428 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:41:07.466" starttime="20170725 02:41:06.507"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:41:17.472" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:41:17.473" starttime="20170725 02:41:17.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:41:17.474" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:41:17.474" starttime="20170725 02:41:17.474"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:41:17.474" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:41:17.475" starttime="20170725 02:41:17.474"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:41:17.475" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:41:17.475" starttime="20170725 02:41:17.475"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:41:17.664" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:41:17.664" starttime="20170725 02:41:17.476"></status>
</kw>
<msg timestamp="20170725 02:41:17.665" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:41:17.665" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:17.665" starttime="20170725 02:41:17.475"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:41:17.665" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:17.665" starttime="20170725 02:41:17.665"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:17.666" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:17.666" starttime="20170725 02:41:17.666"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:17.666" starttime="20170725 02:41:17.471"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:17.666" starttime="20170725 02:41:17.471"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:17.666" starttime="20170725 02:41:17.470"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:41:17.667" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:41:17.667" starttime="20170725 02:41:17.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:17.668" starttime="20170725 02:41:17.667"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:41:17.740" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:41:17.741" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:17.741" starttime="20170725 02:41:17.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:17.741" starttime="20170725 02:41:17.741"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:41:17.742" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:41:17.742" starttime="20170725 02:41:17.741"></status>
</kw>
<msg timestamp="20170725 02:41:17.742" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:17.742" starttime="20170725 02:41:17.470"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:17.743" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:17.743" starttime="20170725 02:41:17.742"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:41:17.743" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:41:17.743" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:41:17.743" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:41:17.743" starttime="20170725 02:41:17.743"></status>
</kw>
<msg timestamp="20170725 02:41:17.744" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:41:17.744" starttime="20170725 02:41:17.469"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:17.744" starttime="20170725 02:41:17.469"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:41:17.748" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:41:17.749" starttime="20170725 02:41:17.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:41:17.749" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:41:17.750" starttime="20170725 02:41:17.749"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:41:17.750" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:41:17.750" starttime="20170725 02:41:17.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:41:17.751" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:41:17.751" starttime="20170725 02:41:17.750"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:41:17.986" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:41:17.986" starttime="20170725 02:41:17.752"></status>
</kw>
<msg timestamp="20170725 02:41:17.986" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:41:17.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:17.987" starttime="20170725 02:41:17.751"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:41:17.987" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:17.988" starttime="20170725 02:41:17.987"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:17.988" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:17.989" starttime="20170725 02:41:17.988"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:17.989" starttime="20170725 02:41:17.747"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:17.989" starttime="20170725 02:41:17.746"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:17.989" starttime="20170725 02:41:17.746"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:41:17.990" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:41:17.990" starttime="20170725 02:41:17.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:17.991" starttime="20170725 02:41:17.991"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:41:18.061" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:41:18.061" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:18.061" starttime="20170725 02:41:17.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:18.062" starttime="20170725 02:41:18.062"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:41:18.063" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:41:18.063" starttime="20170725 02:41:18.062"></status>
</kw>
<msg timestamp="20170725 02:41:18.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:18.063" starttime="20170725 02:41:17.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:18.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:18.064" starttime="20170725 02:41:18.063"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:41:18.064" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:41:18.064" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:41:18.064" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:41:18.064" starttime="20170725 02:41:18.064"></status>
</kw>
<msg timestamp="20170725 02:41:18.065" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:41:18.065" starttime="20170725 02:41:17.745"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:18.065" starttime="20170725 02:41:17.744"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:41:18.068" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:41:18.075" starttime="20170725 02:41:18.068"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:41:18.076" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:41:18.076" starttime="20170725 02:41:18.076"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:41:18.077" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:41:18.077" starttime="20170725 02:41:18.076"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:41:18.077" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:41:18.077" starttime="20170725 02:41:18.077"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:41:18.287" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:41:18.287" starttime="20170725 02:41:18.078"></status>
</kw>
<msg timestamp="20170725 02:41:18.288" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:41:18.288" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:18.288" starttime="20170725 02:41:18.078"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:41:18.288" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:18.288" starttime="20170725 02:41:18.288"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:18.289" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:18.289" starttime="20170725 02:41:18.289"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:18.289" starttime="20170725 02:41:18.068"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:18.289" starttime="20170725 02:41:18.067"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:18.289" starttime="20170725 02:41:18.067"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:41:18.290" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:41:18.290" starttime="20170725 02:41:18.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:18.291" starttime="20170725 02:41:18.290"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:41:18.378" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:41:18.379" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:18.379" starttime="20170725 02:41:18.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:18.379" starttime="20170725 02:41:18.379"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:41:18.380" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:41:18.380" starttime="20170725 02:41:18.380"></status>
</kw>
<msg timestamp="20170725 02:41:18.380" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:18.380" starttime="20170725 02:41:18.066"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:18.381" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:18.381" starttime="20170725 02:41:18.380"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:41:18.381" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:41:18.381" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:41:18.382" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:41:18.382" starttime="20170725 02:41:18.381"></status>
</kw>
<msg timestamp="20170725 02:41:18.382" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:41:18.382" starttime="20170725 02:41:18.065"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:18.382" starttime="20170725 02:41:18.065"></status>
</kw>
<msg timestamp="20170725 02:41:18.383" level="FAIL">
#(UTC) 2017/07/25 02:41:18.382361 -   10.916809 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:41:18.383" starttime="20170725 02:41:17.467"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:41:28.389" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:41:28.389" starttime="20170725 02:41:28.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:41:28.390" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:41:28.390" starttime="20170725 02:41:28.390"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:41:28.391" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:41:28.391" starttime="20170725 02:41:28.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:41:28.391" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:41:28.391" starttime="20170725 02:41:28.391"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:41:28.686" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:41:28.686" starttime="20170725 02:41:28.392"></status>
</kw>
<msg timestamp="20170725 02:41:28.686" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:41:28.686" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:28.686" starttime="20170725 02:41:28.392"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:41:28.687" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:28.687" starttime="20170725 02:41:28.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:28.688" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:28.688" starttime="20170725 02:41:28.687"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:28.688" starttime="20170725 02:41:28.388"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:28.688" starttime="20170725 02:41:28.387"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:28.688" starttime="20170725 02:41:28.387"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:41:28.689" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:41:28.689" starttime="20170725 02:41:28.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:28.689" starttime="20170725 02:41:28.689"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:41:28.762" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:41:28.762" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:28.762" starttime="20170725 02:41:28.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:28.763" starttime="20170725 02:41:28.763"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:41:28.764" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:41:28.764" starttime="20170725 02:41:28.763"></status>
</kw>
<msg timestamp="20170725 02:41:28.764" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:28.764" starttime="20170725 02:41:28.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:28.765" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:28.765" starttime="20170725 02:41:28.764"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:41:28.765" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:41:28.765" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:41:28.765" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:41:28.765" starttime="20170725 02:41:28.765"></status>
</kw>
<msg timestamp="20170725 02:41:28.766" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:41:28.766" starttime="20170725 02:41:28.386"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:28.766" starttime="20170725 02:41:28.385"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:41:28.770" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:41:28.771" starttime="20170725 02:41:28.770"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:41:28.771" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:41:28.771" starttime="20170725 02:41:28.771"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:41:28.772" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:41:28.772" starttime="20170725 02:41:28.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:41:28.773" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:41:28.773" starttime="20170725 02:41:28.772"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:41:28.968" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:41:28.968" starttime="20170725 02:41:28.773"></status>
</kw>
<msg timestamp="20170725 02:41:28.968" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:41:28.969" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:28.969" starttime="20170725 02:41:28.773"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:41:28.969" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:28.969" starttime="20170725 02:41:28.969"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:28.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:28.970" starttime="20170725 02:41:28.970"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:28.970" starttime="20170725 02:41:28.769"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:28.970" starttime="20170725 02:41:28.769"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:28.970" starttime="20170725 02:41:28.768"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:41:28.971" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:41:28.971" starttime="20170725 02:41:28.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:28.972" starttime="20170725 02:41:28.971"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:41:29.038" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:41:29.038" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:29.038" starttime="20170725 02:41:28.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:29.039" starttime="20170725 02:41:29.039"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:41:29.039" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:41:29.040" starttime="20170725 02:41:29.039"></status>
</kw>
<msg timestamp="20170725 02:41:29.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:29.040" starttime="20170725 02:41:28.767"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:29.040" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:29.041" starttime="20170725 02:41:29.040"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:41:29.041" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:41:29.041" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:41:29.041" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:41:29.041" starttime="20170725 02:41:29.041"></status>
</kw>
<msg timestamp="20170725 02:41:29.042" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:41:29.042" starttime="20170725 02:41:28.767"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:29.042" starttime="20170725 02:41:28.766"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:41:29.046" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:41:29.046" starttime="20170725 02:41:29.045"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:41:29.047" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:41:29.047" starttime="20170725 02:41:29.046"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:41:29.048" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:41:29.048" starttime="20170725 02:41:29.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:41:29.048" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:41:29.048" starttime="20170725 02:41:29.048"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:41:29.241" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:41:29.241" starttime="20170725 02:41:29.049"></status>
</kw>
<msg timestamp="20170725 02:41:29.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:41:29.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:29.242" starttime="20170725 02:41:29.049"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:41:29.242" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:29.242" starttime="20170725 02:41:29.242"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:29.243" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:29.243" starttime="20170725 02:41:29.243"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:29.243" starttime="20170725 02:41:29.045"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:29.243" starttime="20170725 02:41:29.044"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:29.243" starttime="20170725 02:41:29.044"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:41:29.244" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:41:29.244" starttime="20170725 02:41:29.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:29.245" starttime="20170725 02:41:29.244"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:41:29.308" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:41:29.308" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:29.308" starttime="20170725 02:41:29.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:29.309" starttime="20170725 02:41:29.308"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:41:29.309" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:41:29.309" starttime="20170725 02:41:29.309"></status>
</kw>
<msg timestamp="20170725 02:41:29.309" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:29.309" starttime="20170725 02:41:29.043"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:29.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:29.310" starttime="20170725 02:41:29.310"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:41:29.311" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:41:29.311" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:41:29.311" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:41:29.311" starttime="20170725 02:41:29.310"></status>
</kw>
<msg timestamp="20170725 02:41:29.311" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:41:29.311" starttime="20170725 02:41:29.042"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:29.311" starttime="20170725 02:41:29.042"></status>
</kw>
<msg timestamp="20170725 02:41:29.312" level="FAIL">
#(UTC) 2017/07/25 02:41:29.311547 -   10.929186 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:41:29.312" starttime="20170725 02:41:28.383"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:41:39.319" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:41:39.319" starttime="20170725 02:41:39.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:41:39.320" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:41:39.320" starttime="20170725 02:41:39.320"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:41:39.321" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:41:39.321" starttime="20170725 02:41:39.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:41:39.322" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:41:39.322" starttime="20170725 02:41:39.322"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:41:39.501" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:41:39.501" starttime="20170725 02:41:39.323"></status>
</kw>
<msg timestamp="20170725 02:41:39.502" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:41:39.502" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:39.502" starttime="20170725 02:41:39.323"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:41:39.502" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:39.503" starttime="20170725 02:41:39.502"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:39.504" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:39.504" starttime="20170725 02:41:39.503"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:39.504" starttime="20170725 02:41:39.318"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:39.504" starttime="20170725 02:41:39.317"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:39.504" starttime="20170725 02:41:39.317"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:41:39.505" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:41:39.505" starttime="20170725 02:41:39.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:39.505" starttime="20170725 02:41:39.505"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:41:39.570" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:41:39.570" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:39.570" starttime="20170725 02:41:39.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:39.571" starttime="20170725 02:41:39.570"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:41:39.571" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:41:39.571" starttime="20170725 02:41:39.571"></status>
</kw>
<msg timestamp="20170725 02:41:39.571" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:39.572" starttime="20170725 02:41:39.316"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:39.572" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:39.572" starttime="20170725 02:41:39.572"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:41:39.573" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:41:39.573" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:41:39.573" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:41:39.573" starttime="20170725 02:41:39.572"></status>
</kw>
<msg timestamp="20170725 02:41:39.573" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:41:39.573" starttime="20170725 02:41:39.316"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:39.574" starttime="20170725 02:41:39.315"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:41:39.577" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:41:39.578" starttime="20170725 02:41:39.577"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:41:39.579" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:41:39.579" starttime="20170725 02:41:39.578"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:41:39.579" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:41:39.579" starttime="20170725 02:41:39.579"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:41:39.580" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:41:39.580" starttime="20170725 02:41:39.580"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:41:39.758" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:41:39.758" starttime="20170725 02:41:39.581"></status>
</kw>
<msg timestamp="20170725 02:41:39.758" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:41:39.758" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:39.758" starttime="20170725 02:41:39.580"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:41:39.758" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:39.759" starttime="20170725 02:41:39.758"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:39.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:39.759" starttime="20170725 02:41:39.759"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:39.759" starttime="20170725 02:41:39.577"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:39.759" starttime="20170725 02:41:39.576"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:39.760" starttime="20170725 02:41:39.576"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:41:39.760" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:41:39.760" starttime="20170725 02:41:39.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:39.761" starttime="20170725 02:41:39.761"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:41:39.827" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:41:39.827" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:39.827" starttime="20170725 02:41:39.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:39.828" starttime="20170725 02:41:39.828"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:41:39.828" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:41:39.828" starttime="20170725 02:41:39.828"></status>
</kw>
<msg timestamp="20170725 02:41:39.829" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:39.829" starttime="20170725 02:41:39.575"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:39.829" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:39.829" starttime="20170725 02:41:39.829"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:41:39.830" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:41:39.830" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:41:39.830" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:41:39.830" starttime="20170725 02:41:39.830"></status>
</kw>
<msg timestamp="20170725 02:41:39.830" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:41:39.830" starttime="20170725 02:41:39.574"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:39.831" starttime="20170725 02:41:39.574"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:41:39.834" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:41:39.835" starttime="20170725 02:41:39.834"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:41:39.836" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:41:39.836" starttime="20170725 02:41:39.835"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:41:39.836" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:41:39.836" starttime="20170725 02:41:39.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:41:39.837" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:41:39.837" starttime="20170725 02:41:39.837"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:41:40.017" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:41:40.017" starttime="20170725 02:41:39.838"></status>
</kw>
<msg timestamp="20170725 02:41:40.017" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:41:40.017" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:40.017" starttime="20170725 02:41:39.838"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:41:40.018" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:40.018" starttime="20170725 02:41:40.017"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:40.018" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:40.019" starttime="20170725 02:41:40.018"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:40.019" starttime="20170725 02:41:39.833"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:40.019" starttime="20170725 02:41:39.833"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:40.019" starttime="20170725 02:41:39.832"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:41:40.019" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:41:40.019" starttime="20170725 02:41:40.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:40.020" starttime="20170725 02:41:40.020"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:41:40.095" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:41:40.095" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:40.095" starttime="20170725 02:41:40.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:40.096" starttime="20170725 02:41:40.096"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:41:40.097" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:41:40.097" starttime="20170725 02:41:40.096"></status>
</kw>
<msg timestamp="20170725 02:41:40.097" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:40.097" starttime="20170725 02:41:39.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:40.097" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:40.098" starttime="20170725 02:41:40.097"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:41:40.098" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:41:40.098" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:41:40.098" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:41:40.098" starttime="20170725 02:41:40.098"></status>
</kw>
<msg timestamp="20170725 02:41:40.099" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:41:40.099" starttime="20170725 02:41:39.831"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:40.099" starttime="20170725 02:41:39.831"></status>
</kw>
<msg timestamp="20170725 02:41:40.099" level="FAIL">
#(UTC) 2017/07/25 02:41:40.099039 -   10.787492 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:41:40.100" starttime="20170725 02:41:39.313"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:41:50.105" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:41:50.106" starttime="20170725 02:41:50.105"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:41:50.107" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:41:50.107" starttime="20170725 02:41:50.106"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:41:50.107" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:41:50.107" starttime="20170725 02:41:50.107"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:41:50.108" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:41:50.108" starttime="20170725 02:41:50.108"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:41:50.374" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:41:50.374" starttime="20170725 02:41:50.109"></status>
</kw>
<msg timestamp="20170725 02:41:50.374" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:41:50.374" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.374" starttime="20170725 02:41:50.108"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:41:50.374" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.375" starttime="20170725 02:41:50.374"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:50.375" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.375" starttime="20170725 02:41:50.375"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:50.375" starttime="20170725 02:41:50.105"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:50.376" starttime="20170725 02:41:50.104"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:50.376" starttime="20170725 02:41:50.104"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:41:50.376" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:41:50.376" starttime="20170725 02:41:50.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:50.377" starttime="20170725 02:41:50.377"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:41:50.447" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:41:50.447" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.447" starttime="20170725 02:41:50.377"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:50.448" starttime="20170725 02:41:50.448"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:41:50.448" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:41:50.448" starttime="20170725 02:41:50.448"></status>
</kw>
<msg timestamp="20170725 02:41:50.449" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.449" starttime="20170725 02:41:50.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:50.449" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.449" starttime="20170725 02:41:50.449"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:41:50.450" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:41:50.450" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:41:50.450" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:41:50.450" starttime="20170725 02:41:50.450"></status>
</kw>
<msg timestamp="20170725 02:41:50.450" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:41:50.450" starttime="20170725 02:41:50.102"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:50.451" starttime="20170725 02:41:50.101"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:41:50.455" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:41:50.456" starttime="20170725 02:41:50.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:41:50.457" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:41:50.457" starttime="20170725 02:41:50.456"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:41:50.457" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:41:50.457" starttime="20170725 02:41:50.457"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:41:50.458" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:41:50.458" starttime="20170725 02:41:50.458"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:41:50.667" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:41:50.667" starttime="20170725 02:41:50.459"></status>
</kw>
<msg timestamp="20170725 02:41:50.667" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:41:50.667" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.667" starttime="20170725 02:41:50.458"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:41:50.668" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.668" starttime="20170725 02:41:50.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:50.669" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.669" starttime="20170725 02:41:50.668"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:50.669" starttime="20170725 02:41:50.454"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:50.669" starttime="20170725 02:41:50.453"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:50.669" starttime="20170725 02:41:50.453"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:41:50.670" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:41:50.670" starttime="20170725 02:41:50.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:50.670" starttime="20170725 02:41:50.670"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:41:50.736" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:41:50.736" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.736" starttime="20170725 02:41:50.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:50.736" starttime="20170725 02:41:50.736"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:41:50.737" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:41:50.737" starttime="20170725 02:41:50.737"></status>
</kw>
<msg timestamp="20170725 02:41:50.737" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.737" starttime="20170725 02:41:50.452"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:50.738" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.738" starttime="20170725 02:41:50.737"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:41:50.738" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:41:50.738" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:41:50.738" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:41:50.739" starttime="20170725 02:41:50.738"></status>
</kw>
<msg timestamp="20170725 02:41:50.739" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:41:50.739" starttime="20170725 02:41:50.451"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:50.739" starttime="20170725 02:41:50.451"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:41:50.744" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:41:50.745" starttime="20170725 02:41:50.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:41:50.746" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:41:50.746" starttime="20170725 02:41:50.746"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:41:50.747" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:41:50.747" starttime="20170725 02:41:50.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:41:50.748" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:41:50.748" starttime="20170725 02:41:50.748"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:41:50.925" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:41:50.925" starttime="20170725 02:41:50.749"></status>
</kw>
<msg timestamp="20170725 02:41:50.925" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:41:50.925" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.925" starttime="20170725 02:41:50.748"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:41:50.926" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.926" starttime="20170725 02:41:50.925"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:50.926" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.926" starttime="20170725 02:41:50.926"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:50.926" starttime="20170725 02:41:50.743"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:50.927" starttime="20170725 02:41:50.743"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:50.927" starttime="20170725 02:41:50.742"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:41:50.927" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:41:50.927" starttime="20170725 02:41:50.927"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:50.928" starttime="20170725 02:41:50.928"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:41:50.991" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:41:50.991" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.991" starttime="20170725 02:41:50.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:41:50.992" starttime="20170725 02:41:50.992"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:41:50.992" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:41:50.992" starttime="20170725 02:41:50.992"></status>
</kw>
<msg timestamp="20170725 02:41:50.993" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.993" starttime="20170725 02:41:50.741"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:41:50.993" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:41:50.993" starttime="20170725 02:41:50.993"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:41:50.994" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:41:50.994" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:41:50.994" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:41:50.994" starttime="20170725 02:41:50.994"></status>
</kw>
<msg timestamp="20170725 02:41:50.994" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:41:50.994" starttime="20170725 02:41:50.740"></status>
</kw>
<status status="PASS" endtime="20170725 02:41:50.995" starttime="20170725 02:41:50.739"></status>
</kw>
<msg timestamp="20170725 02:41:50.995" level="FAIL">
#(UTC) 2017/07/25 02:41:50.994862 -   10.895823 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:41:50.995" starttime="20170725 02:41:50.100"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:01.001" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:01.002" starttime="20170725 02:42:01.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:01.003" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:01.003" starttime="20170725 02:42:01.002"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:01.003" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:01.003" starttime="20170725 02:42:01.003"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:01.004" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:01.004" starttime="20170725 02:42:01.004"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:01.197" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:01.197" starttime="20170725 02:42:01.005"></status>
</kw>
<msg timestamp="20170725 02:42:01.197" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:01.197" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.197" starttime="20170725 02:42:01.004"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:01.197" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.198" starttime="20170725 02:42:01.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:01.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.198" starttime="20170725 02:42:01.198"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:01.198" starttime="20170725 02:42:01.000"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:01.198" starttime="20170725 02:42:01.000"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:01.199" starttime="20170725 02:42:00.999"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:01.199" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:42:01.199" starttime="20170725 02:42:01.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:01.200" starttime="20170725 02:42:01.199"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:01.262" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:42:01.262" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.262" starttime="20170725 02:42:01.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:01.263" starttime="20170725 02:42:01.263"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:01.263" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:01.263" starttime="20170725 02:42:01.263"></status>
</kw>
<msg timestamp="20170725 02:42:01.264" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.264" starttime="20170725 02:42:00.998"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:01.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.264" starttime="20170725 02:42:01.264"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:01.265" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:01.265" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:01.265" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:42:01.265" starttime="20170725 02:42:01.265"></status>
</kw>
<msg timestamp="20170725 02:42:01.265" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:42:01.265" starttime="20170725 02:42:00.998"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:01.266" starttime="20170725 02:42:00.997"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:01.269" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:01.270" starttime="20170725 02:42:01.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:01.271" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:01.271" starttime="20170725 02:42:01.270"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:01.272" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:01.272" starttime="20170725 02:42:01.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:01.273" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:01.273" starttime="20170725 02:42:01.272"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:01.451" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:01.451" starttime="20170725 02:42:01.274"></status>
</kw>
<msg timestamp="20170725 02:42:01.452" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:01.452" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.452" starttime="20170725 02:42:01.273"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:01.452" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.452" starttime="20170725 02:42:01.452"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:01.453" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.453" starttime="20170725 02:42:01.453"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:01.453" starttime="20170725 02:42:01.268"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:01.453" starttime="20170725 02:42:01.268"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:01.453" starttime="20170725 02:42:01.267"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:01.454" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:42:01.454" starttime="20170725 02:42:01.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:01.455" starttime="20170725 02:42:01.454"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:01.529" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:42:01.529" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.529" starttime="20170725 02:42:01.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:01.530" starttime="20170725 02:42:01.529"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:01.530" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:01.530" starttime="20170725 02:42:01.530"></status>
</kw>
<msg timestamp="20170725 02:42:01.530" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.531" starttime="20170725 02:42:01.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:01.531" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.531" starttime="20170725 02:42:01.531"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:01.532" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:01.532" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:01.532" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:42:01.532" starttime="20170725 02:42:01.532"></status>
</kw>
<msg timestamp="20170725 02:42:01.532" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:42:01.532" starttime="20170725 02:42:01.266"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:01.533" starttime="20170725 02:42:01.266"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:01.536" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:01.541" starttime="20170725 02:42:01.536"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:01.543" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:01.543" starttime="20170725 02:42:01.543"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:01.544" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:01.544" starttime="20170725 02:42:01.543"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:01.545" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:01.545" starttime="20170725 02:42:01.544"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:01.751" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:01.751" starttime="20170725 02:42:01.546"></status>
</kw>
<msg timestamp="20170725 02:42:01.751" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:01.752" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.752" starttime="20170725 02:42:01.545"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:01.752" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.752" starttime="20170725 02:42:01.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:01.753" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.753" starttime="20170725 02:42:01.753"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:01.753" starttime="20170725 02:42:01.535"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:01.753" starttime="20170725 02:42:01.535"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:01.753" starttime="20170725 02:42:01.534"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:01.754" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:42:01.754" starttime="20170725 02:42:01.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:01.755" starttime="20170725 02:42:01.754"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:01.817" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:42:01.817" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.817" starttime="20170725 02:42:01.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:01.818" starttime="20170725 02:42:01.817"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:01.818" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:01.818" starttime="20170725 02:42:01.818"></status>
</kw>
<msg timestamp="20170725 02:42:01.818" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.818" starttime="20170725 02:42:01.534"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:01.819" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:01.819" starttime="20170725 02:42:01.819"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:01.820" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:01.820" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:01.820" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:42:01.820" starttime="20170725 02:42:01.819"></status>
</kw>
<msg timestamp="20170725 02:42:01.820" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:42:01.820" starttime="20170725 02:42:01.533"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:01.820" starttime="20170725 02:42:01.533"></status>
</kw>
<msg timestamp="20170725 02:42:01.821" level="FAIL">
#(UTC) 2017/07/25 02:42:01.820636 -   10.825774 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:42:01.821" starttime="20170725 02:42:00.996"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:11.827" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:11.828" starttime="20170725 02:42:11.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:11.829" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:11.829" starttime="20170725 02:42:11.829"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:11.829" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:11.830" starttime="20170725 02:42:11.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:11.830" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:11.830" starttime="20170725 02:42:11.830"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:12.017" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:12.017" starttime="20170725 02:42:11.831"></status>
</kw>
<msg timestamp="20170725 02:42:12.017" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:12.017" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.017" starttime="20170725 02:42:11.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:12.018" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.018" starttime="20170725 02:42:12.017"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:12.018" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.019" starttime="20170725 02:42:12.018"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:12.019" starttime="20170725 02:42:11.827"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:12.019" starttime="20170725 02:42:11.826"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:12.019" starttime="20170725 02:42:11.825"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:12.019" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:42:12.020" starttime="20170725 02:42:12.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:12.020" starttime="20170725 02:42:12.020"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:12.082" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:42:12.082" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.082" starttime="20170725 02:42:12.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:12.083" starttime="20170725 02:42:12.082"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:12.083" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:12.083" starttime="20170725 02:42:12.083"></status>
</kw>
<msg timestamp="20170725 02:42:12.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.084" starttime="20170725 02:42:11.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:12.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.084" starttime="20170725 02:42:12.084"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:12.085" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:12.085" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:12.085" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:42:12.085" starttime="20170725 02:42:12.085"></status>
</kw>
<msg timestamp="20170725 02:42:12.085" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:42:12.085" starttime="20170725 02:42:11.824"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:12.086" starttime="20170725 02:42:11.824"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:12.090" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:12.091" starttime="20170725 02:42:12.089"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:12.091" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:12.092" starttime="20170725 02:42:12.091"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:12.093" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:12.093" starttime="20170725 02:42:12.092"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:12.094" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:12.094" starttime="20170725 02:42:12.093"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:12.274" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:12.274" starttime="20170725 02:42:12.095"></status>
</kw>
<msg timestamp="20170725 02:42:12.274" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:12.274" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.274" starttime="20170725 02:42:12.094"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:12.275" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.275" starttime="20170725 02:42:12.275"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:12.276" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.276" starttime="20170725 02:42:12.275"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:12.276" starttime="20170725 02:42:12.089"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:12.276" starttime="20170725 02:42:12.088"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:12.276" starttime="20170725 02:42:12.088"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:12.277" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:42:12.277" starttime="20170725 02:42:12.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:12.278" starttime="20170725 02:42:12.278"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:12.361" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:42:12.361" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.361" starttime="20170725 02:42:12.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:12.362" starttime="20170725 02:42:12.361"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:12.362" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:12.362" starttime="20170725 02:42:12.362"></status>
</kw>
<msg timestamp="20170725 02:42:12.362" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.363" starttime="20170725 02:42:12.087"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:12.363" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.363" starttime="20170725 02:42:12.363"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:12.364" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:12.364" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:12.364" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:42:12.364" starttime="20170725 02:42:12.363"></status>
</kw>
<msg timestamp="20170725 02:42:12.364" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:42:12.364" starttime="20170725 02:42:12.086"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:12.364" starttime="20170725 02:42:12.086"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:12.368" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:12.369" starttime="20170725 02:42:12.368"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:12.369" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:12.369" starttime="20170725 02:42:12.369"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:12.370" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:12.370" starttime="20170725 02:42:12.370"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:12.371" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:12.371" starttime="20170725 02:42:12.370"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:12.649" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:12.650" starttime="20170725 02:42:12.372"></status>
</kw>
<msg timestamp="20170725 02:42:12.650" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:12.650" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.650" starttime="20170725 02:42:12.371"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:12.650" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.651" starttime="20170725 02:42:12.650"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:12.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.651" starttime="20170725 02:42:12.651"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:12.651" starttime="20170725 02:42:12.367"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:12.651" starttime="20170725 02:42:12.367"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:12.652" starttime="20170725 02:42:12.366"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:12.652" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:42:12.652" starttime="20170725 02:42:12.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:12.653" starttime="20170725 02:42:12.653"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:12.762" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:42:12.762" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.762" starttime="20170725 02:42:12.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:12.763" starttime="20170725 02:42:12.763"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:12.764" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:12.764" starttime="20170725 02:42:12.763"></status>
</kw>
<msg timestamp="20170725 02:42:12.764" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.764" starttime="20170725 02:42:12.366"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:12.764" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:12.765" starttime="20170725 02:42:12.764"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:12.765" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:12.765" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:12.765" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:42:12.765" starttime="20170725 02:42:12.765"></status>
</kw>
<msg timestamp="20170725 02:42:12.766" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:42:12.766" starttime="20170725 02:42:12.365"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:12.766" starttime="20170725 02:42:12.365"></status>
</kw>
<msg timestamp="20170725 02:42:12.766" level="FAIL">
#(UTC) 2017/07/25 02:42:12.766069 -   10.945433 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:42:12.767" starttime="20170725 02:42:11.822"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:22.773" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:22.773" starttime="20170725 02:42:22.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:22.774" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:22.774" starttime="20170725 02:42:22.774"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:22.775" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:22.775" starttime="20170725 02:42:22.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:22.775" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:22.775" starttime="20170725 02:42:22.775"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:22.962" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:22.963" starttime="20170725 02:42:22.776"></status>
</kw>
<msg timestamp="20170725 02:42:22.963" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:22.963" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:22.963" starttime="20170725 02:42:22.776"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:22.963" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:22.964" starttime="20170725 02:42:22.963"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:22.964" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:22.964" starttime="20170725 02:42:22.964"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:22.964" starttime="20170725 02:42:22.772"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:22.965" starttime="20170725 02:42:22.771"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:22.965" starttime="20170725 02:42:22.771"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:22.965" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:42:22.965" starttime="20170725 02:42:22.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:22.966" starttime="20170725 02:42:22.966"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:23.038" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:42:23.039" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:23.039" starttime="20170725 02:42:22.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:23.039" starttime="20170725 02:42:23.039"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:23.040" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:23.040" starttime="20170725 02:42:23.040"></status>
</kw>
<msg timestamp="20170725 02:42:23.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:23.040" starttime="20170725 02:42:22.770"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:23.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:23.041" starttime="20170725 02:42:23.040"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:23.041" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:23.041" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:23.041" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:42:23.042" starttime="20170725 02:42:23.041"></status>
</kw>
<msg timestamp="20170725 02:42:23.042" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:42:23.042" starttime="20170725 02:42:22.769"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:23.042" starttime="20170725 02:42:22.769"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:23.046" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:23.047" starttime="20170725 02:42:23.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:23.047" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:23.047" starttime="20170725 02:42:23.047"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:23.048" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:23.048" starttime="20170725 02:42:23.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:23.049" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:23.049" starttime="20170725 02:42:23.048"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:23.238" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:23.238" starttime="20170725 02:42:23.049"></status>
</kw>
<msg timestamp="20170725 02:42:23.238" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:23.238" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:23.238" starttime="20170725 02:42:23.049"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:23.239" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:23.239" starttime="20170725 02:42:23.238"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:23.239" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:23.240" starttime="20170725 02:42:23.239"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:23.240" starttime="20170725 02:42:23.045"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:23.240" starttime="20170725 02:42:23.045"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:23.240" starttime="20170725 02:42:23.044"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:23.240" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:42:23.240" starttime="20170725 02:42:23.240"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:23.241" starttime="20170725 02:42:23.241"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:23.307" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:42:23.307" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:23.307" starttime="20170725 02:42:23.241"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:23.308" starttime="20170725 02:42:23.307"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:23.308" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:23.308" starttime="20170725 02:42:23.308"></status>
</kw>
<msg timestamp="20170725 02:42:23.308" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:23.308" starttime="20170725 02:42:23.043"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:23.309" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:23.309" starttime="20170725 02:42:23.309"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:23.310" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:23.310" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:23.310" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:42:23.310" starttime="20170725 02:42:23.309"></status>
</kw>
<msg timestamp="20170725 02:42:23.310" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:42:23.311" starttime="20170725 02:42:23.043"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:23.311" starttime="20170725 02:42:23.043"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:23.316" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:23.317" starttime="20170725 02:42:23.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:23.317" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:23.318" starttime="20170725 02:42:23.317"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:23.318" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:23.318" starttime="20170725 02:42:23.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:23.319" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:23.319" starttime="20170725 02:42:23.318"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:23.603" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:23.603" starttime="20170725 02:42:23.320"></status>
</kw>
<msg timestamp="20170725 02:42:23.603" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:23.603" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:23.603" starttime="20170725 02:42:23.319"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:23.604" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:23.604" starttime="20170725 02:42:23.603"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:23.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:23.605" starttime="20170725 02:42:23.604"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:23.605" starttime="20170725 02:42:23.315"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:23.605" starttime="20170725 02:42:23.314"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:23.605" starttime="20170725 02:42:23.314"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:23.606" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:42:23.606" starttime="20170725 02:42:23.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:23.606" starttime="20170725 02:42:23.606"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:23.678" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:42:23.678" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:23.678" starttime="20170725 02:42:23.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:23.679" starttime="20170725 02:42:23.678"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:23.679" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:23.679" starttime="20170725 02:42:23.679"></status>
</kw>
<msg timestamp="20170725 02:42:23.679" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:23.679" starttime="20170725 02:42:23.313"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:23.680" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:23.680" starttime="20170725 02:42:23.680"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:23.681" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:23.681" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:23.681" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:42:23.681" starttime="20170725 02:42:23.680"></status>
</kw>
<msg timestamp="20170725 02:42:23.681" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:42:23.681" starttime="20170725 02:42:23.312"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:23.681" starttime="20170725 02:42:23.311"></status>
</kw>
<msg timestamp="20170725 02:42:23.682" level="FAIL">
#(UTC) 2017/07/25 02:42:23.681709 -   10.915640 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:42:23.682" starttime="20170725 02:42:22.767"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:33.688" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:33.689" starttime="20170725 02:42:33.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:33.689" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:33.689" starttime="20170725 02:42:33.689"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:33.690" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:33.690" starttime="20170725 02:42:33.690"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:33.691" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:33.691" starttime="20170725 02:42:33.690"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:33.876" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:33.877" starttime="20170725 02:42:33.691"></status>
</kw>
<msg timestamp="20170725 02:42:33.877" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:33.877" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:33.877" starttime="20170725 02:42:33.691"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:33.877" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:33.877" starttime="20170725 02:42:33.877"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:33.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:33.878" starttime="20170725 02:42:33.878"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:33.878" starttime="20170725 02:42:33.687"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:33.878" starttime="20170725 02:42:33.687"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:33.878" starttime="20170725 02:42:33.686"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:33.879" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:42:33.879" starttime="20170725 02:42:33.879"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:33.880" starttime="20170725 02:42:33.879"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:33.943" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:42:33.943" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:33.944" starttime="20170725 02:42:33.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:33.944" starttime="20170725 02:42:33.944"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:33.945" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:33.945" starttime="20170725 02:42:33.944"></status>
</kw>
<msg timestamp="20170725 02:42:33.945" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:33.945" starttime="20170725 02:42:33.685"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:33.945" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:33.946" starttime="20170725 02:42:33.945"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:33.946" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:33.946" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:33.946" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:42:33.946" starttime="20170725 02:42:33.946"></status>
</kw>
<msg timestamp="20170725 02:42:33.947" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:42:33.947" starttime="20170725 02:42:33.685"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:33.947" starttime="20170725 02:42:33.684"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:33.951" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:33.951" starttime="20170725 02:42:33.950"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:33.952" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:33.952" starttime="20170725 02:42:33.952"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:33.953" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:33.953" starttime="20170725 02:42:33.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:33.954" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:33.954" starttime="20170725 02:42:33.953"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:34.231" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:34.231" starttime="20170725 02:42:33.954"></status>
</kw>
<msg timestamp="20170725 02:42:34.232" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:34.232" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:34.232" starttime="20170725 02:42:33.954"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:34.233" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:34.233" starttime="20170725 02:42:34.232"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:34.233" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:34.234" starttime="20170725 02:42:34.233"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:34.234" starttime="20170725 02:42:33.950"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:34.234" starttime="20170725 02:42:33.949"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:34.234" starttime="20170725 02:42:33.949"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:34.234" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:42:34.234" starttime="20170725 02:42:34.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:34.235" starttime="20170725 02:42:34.235"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:34.302" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:42:34.303" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:34.303" starttime="20170725 02:42:34.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:34.304" starttime="20170725 02:42:34.303"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:34.304" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:34.304" starttime="20170725 02:42:34.304"></status>
</kw>
<msg timestamp="20170725 02:42:34.305" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:34.305" starttime="20170725 02:42:33.948"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:34.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:34.305" starttime="20170725 02:42:34.305"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:34.306" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:34.306" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:34.306" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:42:34.306" starttime="20170725 02:42:34.305"></status>
</kw>
<msg timestamp="20170725 02:42:34.306" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:42:34.306" starttime="20170725 02:42:33.948"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:34.307" starttime="20170725 02:42:33.947"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:34.312" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:34.312" starttime="20170725 02:42:34.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:34.313" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:34.313" starttime="20170725 02:42:34.313"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:34.314" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:34.314" starttime="20170725 02:42:34.314"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:34.315" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:34.315" starttime="20170725 02:42:34.315"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:34.501" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:34.501" starttime="20170725 02:42:34.317"></status>
</kw>
<msg timestamp="20170725 02:42:34.501" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:34.501" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:34.501" starttime="20170725 02:42:34.316"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:34.502" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:34.502" starttime="20170725 02:42:34.502"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:34.503" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:34.503" starttime="20170725 02:42:34.502"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:34.503" starttime="20170725 02:42:34.310"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:34.503" starttime="20170725 02:42:34.310"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:34.503" starttime="20170725 02:42:34.309"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:34.504" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:42:34.504" starttime="20170725 02:42:34.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:34.505" starttime="20170725 02:42:34.504"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:34.668" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:42:34.668" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:34.668" starttime="20170725 02:42:34.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:34.669" starttime="20170725 02:42:34.669"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:34.670" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:34.670" starttime="20170725 02:42:34.669"></status>
</kw>
<msg timestamp="20170725 02:42:34.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:34.670" starttime="20170725 02:42:34.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:34.670" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:34.671" starttime="20170725 02:42:34.670"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:34.671" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:34.671" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:34.671" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:42:34.671" starttime="20170725 02:42:34.671"></status>
</kw>
<msg timestamp="20170725 02:42:34.672" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:42:34.672" starttime="20170725 02:42:34.307"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:34.672" starttime="20170725 02:42:34.307"></status>
</kw>
<msg timestamp="20170725 02:42:34.673" level="FAIL">
#(UTC) 2017/07/25 02:42:34.672107 -   10.990398 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:42:34.673" starttime="20170725 02:42:33.683"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:44.679" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:44.680" starttime="20170725 02:42:44.679"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:44.681" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:44.681" starttime="20170725 02:42:44.680"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:44.681" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:44.681" starttime="20170725 02:42:44.681"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:44.682" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:44.682" starttime="20170725 02:42:44.682"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:44.877" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:44.878" starttime="20170725 02:42:44.683"></status>
</kw>
<msg timestamp="20170725 02:42:44.878" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:44.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:44.878" starttime="20170725 02:42:44.682"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:44.878" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:44.879" starttime="20170725 02:42:44.878"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:44.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:44.879" starttime="20170725 02:42:44.879"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:44.879" starttime="20170725 02:42:44.678"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:44.879" starttime="20170725 02:42:44.678"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:44.880" starttime="20170725 02:42:44.677"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:44.880" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:42:44.880" starttime="20170725 02:42:44.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:44.881" starttime="20170725 02:42:44.881"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:44.943" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:42:44.943" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:44.944" starttime="20170725 02:42:44.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:44.945" starttime="20170725 02:42:44.944"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:44.945" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:44.945" starttime="20170725 02:42:44.945"></status>
</kw>
<msg timestamp="20170725 02:42:44.946" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:44.946" starttime="20170725 02:42:44.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:44.947" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:44.947" starttime="20170725 02:42:44.946"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:44.948" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:44.948" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:44.948" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:42:44.948" starttime="20170725 02:42:44.947"></status>
</kw>
<msg timestamp="20170725 02:42:44.948" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:42:44.948" starttime="20170725 02:42:44.676"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:44.949" starttime="20170725 02:42:44.675"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:44.954" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:44.954" starttime="20170725 02:42:44.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:44.955" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:44.955" starttime="20170725 02:42:44.955"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:44.956" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:44.956" starttime="20170725 02:42:44.955"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:44.956" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:44.956" starttime="20170725 02:42:44.956"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:45.234" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:45.234" starttime="20170725 02:42:44.957"></status>
</kw>
<msg timestamp="20170725 02:42:45.234" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:45.234" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:45.234" starttime="20170725 02:42:44.957"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:45.235" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:45.235" starttime="20170725 02:42:45.234"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:45.236" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:45.236" starttime="20170725 02:42:45.235"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:45.236" starttime="20170725 02:42:44.953"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:45.236" starttime="20170725 02:42:44.952"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:45.236" starttime="20170725 02:42:44.951"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:45.237" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:42:45.237" starttime="20170725 02:42:45.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:45.237" starttime="20170725 02:42:45.237"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:45.305" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:42:45.305" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:45.305" starttime="20170725 02:42:45.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:45.305" starttime="20170725 02:42:45.305"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:45.306" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:45.306" starttime="20170725 02:42:45.306"></status>
</kw>
<msg timestamp="20170725 02:42:45.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:45.306" starttime="20170725 02:42:44.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:45.307" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:45.307" starttime="20170725 02:42:45.306"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:45.307" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:45.307" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:45.307" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:42:45.308" starttime="20170725 02:42:45.307"></status>
</kw>
<msg timestamp="20170725 02:42:45.308" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:42:45.308" starttime="20170725 02:42:44.950"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:45.308" starttime="20170725 02:42:44.949"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:45.312" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:45.316" starttime="20170725 02:42:45.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:45.317" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:45.317" starttime="20170725 02:42:45.316"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:45.317" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:45.318" starttime="20170725 02:42:45.317"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:45.318" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:45.318" starttime="20170725 02:42:45.318"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:45.543" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:45.543" starttime="20170725 02:42:45.319"></status>
</kw>
<msg timestamp="20170725 02:42:45.543" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:45.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:45.543" starttime="20170725 02:42:45.318"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:45.544" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:45.544" starttime="20170725 02:42:45.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:45.544" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:45.544" starttime="20170725 02:42:45.544"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:45.545" starttime="20170725 02:42:45.311"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:45.545" starttime="20170725 02:42:45.311"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:45.545" starttime="20170725 02:42:45.310"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:45.545" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:42:45.545" starttime="20170725 02:42:45.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:45.546" starttime="20170725 02:42:45.546"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:45.625" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:42:45.625" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:45.625" starttime="20170725 02:42:45.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:45.626" starttime="20170725 02:42:45.626"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:45.626" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:45.626" starttime="20170725 02:42:45.626"></status>
</kw>
<msg timestamp="20170725 02:42:45.627" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:45.627" starttime="20170725 02:42:45.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:45.627" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:45.627" starttime="20170725 02:42:45.627"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:45.628" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:45.628" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:45.628" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:42:45.628" starttime="20170725 02:42:45.628"></status>
</kw>
<msg timestamp="20170725 02:42:45.628" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:42:45.628" starttime="20170725 02:42:45.309"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:45.629" starttime="20170725 02:42:45.308"></status>
</kw>
<msg timestamp="20170725 02:42:45.629" level="FAIL">
#(UTC) 2017/07/25 02:42:45.628985 -   10.956878 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:42:45.629" starttime="20170725 02:42:44.674"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:55.636" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:55.637" starttime="20170725 02:42:55.636"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:55.638" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:55.638" starttime="20170725 02:42:55.637"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:55.638" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:55.638" starttime="20170725 02:42:55.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:55.639" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:55.639" starttime="20170725 02:42:55.638"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:55.898" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:55.898" starttime="20170725 02:42:55.640"></status>
</kw>
<msg timestamp="20170725 02:42:55.898" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:55.898" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:55.898" starttime="20170725 02:42:55.639"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:55.899" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:55.899" starttime="20170725 02:42:55.898"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:55.899" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:55.899" starttime="20170725 02:42:55.899"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:55.900" starttime="20170725 02:42:55.635"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:55.900" starttime="20170725 02:42:55.635"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:55.900" starttime="20170725 02:42:55.634"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:55.900" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:42:55.900" starttime="20170725 02:42:55.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:55.901" starttime="20170725 02:42:55.901"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:56.008" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:42:56.008" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:56.008" starttime="20170725 02:42:55.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:56.009" starttime="20170725 02:42:56.008"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:56.009" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:56.009" starttime="20170725 02:42:56.009"></status>
</kw>
<msg timestamp="20170725 02:42:56.009" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:56.009" starttime="20170725 02:42:55.633"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:56.010" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:56.010" starttime="20170725 02:42:56.010"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:56.011" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:56.011" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:56.011" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:42:56.011" starttime="20170725 02:42:56.010"></status>
</kw>
<msg timestamp="20170725 02:42:56.011" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:42:56.011" starttime="20170725 02:42:55.633"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:56.011" starttime="20170725 02:42:55.632"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:56.015" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:56.016" starttime="20170725 02:42:56.015"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:56.016" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:56.016" starttime="20170725 02:42:56.016"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:56.017" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:56.017" starttime="20170725 02:42:56.017"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:56.018" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:56.018" starttime="20170725 02:42:56.017"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:56.223" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:56.223" starttime="20170725 02:42:56.019"></status>
</kw>
<msg timestamp="20170725 02:42:56.223" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:56.223" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:56.223" starttime="20170725 02:42:56.018"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:56.224" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:56.224" starttime="20170725 02:42:56.223"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:56.224" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:56.225" starttime="20170725 02:42:56.224"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:56.225" starttime="20170725 02:42:56.014"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:56.225" starttime="20170725 02:42:56.014"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:56.225" starttime="20170725 02:42:56.013"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:56.226" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:42:56.226" starttime="20170725 02:42:56.225"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:56.226" starttime="20170725 02:42:56.226"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:56.291" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:42:56.291" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:56.292" starttime="20170725 02:42:56.226"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:56.292" starttime="20170725 02:42:56.292"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:56.293" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:56.293" starttime="20170725 02:42:56.292"></status>
</kw>
<msg timestamp="20170725 02:42:56.293" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:56.293" starttime="20170725 02:42:56.013"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:56.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:56.294" starttime="20170725 02:42:56.293"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:56.294" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:56.294" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:56.294" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:42:56.294" starttime="20170725 02:42:56.294"></status>
</kw>
<msg timestamp="20170725 02:42:56.295" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:42:56.295" starttime="20170725 02:42:56.012"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:56.295" starttime="20170725 02:42:56.012"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:42:56.299" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:42:56.299" starttime="20170725 02:42:56.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:42:56.300" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:42:56.300" starttime="20170725 02:42:56.299"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:42:56.300" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:42:56.300" starttime="20170725 02:42:56.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:42:56.301" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:42:56.301" starttime="20170725 02:42:56.301"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:42:56.484" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:42:56.484" starttime="20170725 02:42:56.302"></status>
</kw>
<msg timestamp="20170725 02:42:56.484" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:42:56.484" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:56.484" starttime="20170725 02:42:56.301"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:42:56.485" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:56.485" starttime="20170725 02:42:56.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:56.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:56.485" starttime="20170725 02:42:56.485"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:56.486" starttime="20170725 02:42:56.298"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:56.486" starttime="20170725 02:42:56.297"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:56.486" starttime="20170725 02:42:56.297"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:42:56.486" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:42:56.486" starttime="20170725 02:42:56.486"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:56.487" starttime="20170725 02:42:56.487"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:42:56.552" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:42:56.552" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:56.552" starttime="20170725 02:42:56.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:42:56.553" starttime="20170725 02:42:56.552"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:42:56.553" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:42:56.553" starttime="20170725 02:42:56.553"></status>
</kw>
<msg timestamp="20170725 02:42:56.554" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:42:56.554" starttime="20170725 02:42:56.296"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:42:56.554" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:42:56.554" starttime="20170725 02:42:56.554"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:42:56.555" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:42:56.555" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:42:56.555" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:42:56.555" starttime="20170725 02:42:56.555"></status>
</kw>
<msg timestamp="20170725 02:42:56.555" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:42:56.556" starttime="20170725 02:42:56.296"></status>
</kw>
<status status="PASS" endtime="20170725 02:42:56.556" starttime="20170725 02:42:56.295"></status>
</kw>
<msg timestamp="20170725 02:42:56.556" level="FAIL">
#(UTC) 2017/07/25 02:42:56.556020 -   10.927035 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:42:56.557" starttime="20170725 02:42:55.630"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:43:06.564" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:43:06.565" starttime="20170725 02:43:06.564"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:43:06.566" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:43:06.566" starttime="20170725 02:43:06.565"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:43:06.566" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:43:06.566" starttime="20170725 02:43:06.566"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:43:06.567" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:43:06.567" starttime="20170725 02:43:06.567"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:43:06.761" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:43:06.761" starttime="20170725 02:43:06.568"></status>
</kw>
<msg timestamp="20170725 02:43:06.761" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:43:06.761" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:06.761" starttime="20170725 02:43:06.567"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:43:06.762" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:06.762" starttime="20170725 02:43:06.762"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:06.763" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:06.763" starttime="20170725 02:43:06.762"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:06.763" starttime="20170725 02:43:06.563"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:06.763" starttime="20170725 02:43:06.562"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:06.763" starttime="20170725 02:43:06.561"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:43:06.764" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:43:06.764" starttime="20170725 02:43:06.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:06.765" starttime="20170725 02:43:06.764"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:43:06.829" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:43:06.829" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:06.829" starttime="20170725 02:43:06.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:06.830" starttime="20170725 02:43:06.829"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:43:06.830" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:43:06.830" starttime="20170725 02:43:06.830"></status>
</kw>
<msg timestamp="20170725 02:43:06.831" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:06.831" starttime="20170725 02:43:06.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:06.831" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:06.831" starttime="20170725 02:43:06.831"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:43:06.832" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:43:06.832" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:43:06.832" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:43:06.832" starttime="20170725 02:43:06.831"></status>
</kw>
<msg timestamp="20170725 02:43:06.832" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:43:06.832" starttime="20170725 02:43:06.559"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:06.833" starttime="20170725 02:43:06.559"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:43:06.836" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:43:06.837" starttime="20170725 02:43:06.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:43:06.838" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:43:06.838" starttime="20170725 02:43:06.837"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:43:06.838" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:43:06.838" starttime="20170725 02:43:06.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:43:06.839" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:43:06.839" starttime="20170725 02:43:06.839"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:43:07.023" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:43:07.023" starttime="20170725 02:43:06.840"></status>
</kw>
<msg timestamp="20170725 02:43:07.024" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:43:07.024" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:07.024" starttime="20170725 02:43:06.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:43:07.024" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:07.024" starttime="20170725 02:43:07.024"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:07.025" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:07.025" starttime="20170725 02:43:07.025"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:07.025" starttime="20170725 02:43:06.835"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:07.025" starttime="20170725 02:43:06.835"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:07.025" starttime="20170725 02:43:06.834"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:43:07.026" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:43:07.026" starttime="20170725 02:43:07.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:07.027" starttime="20170725 02:43:07.026"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:43:07.117" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:43:07.117" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:07.117" starttime="20170725 02:43:07.027"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:07.118" starttime="20170725 02:43:07.118"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:43:07.118" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:43:07.118" starttime="20170725 02:43:07.118"></status>
</kw>
<msg timestamp="20170725 02:43:07.119" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:07.119" starttime="20170725 02:43:06.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:07.119" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:07.119" starttime="20170725 02:43:07.119"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:43:07.120" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:43:07.120" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:43:07.120" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:43:07.120" starttime="20170725 02:43:07.120"></status>
</kw>
<msg timestamp="20170725 02:43:07.120" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:43:07.120" starttime="20170725 02:43:06.833"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:07.121" starttime="20170725 02:43:06.833"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:43:07.124" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:43:07.125" starttime="20170725 02:43:07.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:43:07.126" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:43:07.126" starttime="20170725 02:43:07.125"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:43:07.126" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:43:07.126" starttime="20170725 02:43:07.126"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:43:07.127" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:43:07.127" starttime="20170725 02:43:07.127"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:43:07.314" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:43:07.314" starttime="20170725 02:43:07.128"></status>
</kw>
<msg timestamp="20170725 02:43:07.314" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:43:07.314" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:07.314" starttime="20170725 02:43:07.127"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:43:07.315" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:07.315" starttime="20170725 02:43:07.314"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:07.315" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:07.315" starttime="20170725 02:43:07.315"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:07.316" starttime="20170725 02:43:07.123"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:07.316" starttime="20170725 02:43:07.123"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:07.316" starttime="20170725 02:43:07.122"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:43:07.316" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:43:07.316" starttime="20170725 02:43:07.316"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:07.317" starttime="20170725 02:43:07.317"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:43:07.381" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:43:07.381" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:07.381" starttime="20170725 02:43:07.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:07.382" starttime="20170725 02:43:07.382"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:43:07.382" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:43:07.383" starttime="20170725 02:43:07.382"></status>
</kw>
<msg timestamp="20170725 02:43:07.383" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:07.383" starttime="20170725 02:43:07.122"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:07.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:07.383" starttime="20170725 02:43:07.383"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:43:07.384" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:43:07.384" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:43:07.384" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:43:07.384" starttime="20170725 02:43:07.384"></status>
</kw>
<msg timestamp="20170725 02:43:07.385" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:43:07.385" starttime="20170725 02:43:07.121"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:07.385" starttime="20170725 02:43:07.121"></status>
</kw>
<msg timestamp="20170725 02:43:07.386" level="FAIL">
#(UTC) 2017/07/25 02:43:07.385133 -   10.829113 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:43:07.386" starttime="20170725 02:43:06.557"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:43:17.391" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:43:17.392" starttime="20170725 02:43:17.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:43:17.393" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:43:17.393" starttime="20170725 02:43:17.393"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:43:17.394" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:43:17.394" starttime="20170725 02:43:17.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:43:17.395" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:43:17.395" starttime="20170725 02:43:17.395"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:43:17.643" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:43:17.643" starttime="20170725 02:43:17.397"></status>
</kw>
<msg timestamp="20170725 02:43:17.644" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:43:17.644" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:17.644" starttime="20170725 02:43:17.396"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:43:17.644" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:17.645" starttime="20170725 02:43:17.644"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:17.645" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:17.646" starttime="20170725 02:43:17.645"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:17.646" starttime="20170725 02:43:17.391"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:17.646" starttime="20170725 02:43:17.390"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:17.646" starttime="20170725 02:43:17.390"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:43:17.646" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:43:17.647" starttime="20170725 02:43:17.646"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:17.647" starttime="20170725 02:43:17.647"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:43:17.711" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:43:17.711" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:17.711" starttime="20170725 02:43:17.647"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:17.712" starttime="20170725 02:43:17.711"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:43:17.712" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:43:17.712" starttime="20170725 02:43:17.712"></status>
</kw>
<msg timestamp="20170725 02:43:17.712" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:17.712" starttime="20170725 02:43:17.389"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:17.713" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:17.713" starttime="20170725 02:43:17.713"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:43:17.714" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:43:17.714" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:43:17.714" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:43:17.714" starttime="20170725 02:43:17.713"></status>
</kw>
<msg timestamp="20170725 02:43:17.714" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:43:17.714" starttime="20170725 02:43:17.388"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:17.714" starttime="20170725 02:43:17.388"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:43:17.718" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:43:17.719" starttime="20170725 02:43:17.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:43:17.720" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:43:17.720" starttime="20170725 02:43:17.719"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:43:17.720" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:43:17.720" starttime="20170725 02:43:17.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:43:17.721" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:43:17.721" starttime="20170725 02:43:17.720"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:43:17.920" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:43:17.920" starttime="20170725 02:43:17.722"></status>
</kw>
<msg timestamp="20170725 02:43:17.920" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:43:17.920" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:17.920" starttime="20170725 02:43:17.721"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:43:17.921" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:17.921" starttime="20170725 02:43:17.920"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:17.922" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:17.922" starttime="20170725 02:43:17.921"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:17.922" starttime="20170725 02:43:17.717"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:17.922" starttime="20170725 02:43:17.717"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:17.922" starttime="20170725 02:43:17.716"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:43:17.923" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:43:17.923" starttime="20170725 02:43:17.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:17.923" starttime="20170725 02:43:17.923"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:43:18.015" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:43:18.016" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:18.016" starttime="20170725 02:43:17.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:18.016" starttime="20170725 02:43:18.016"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:43:18.017" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:43:18.017" starttime="20170725 02:43:18.017"></status>
</kw>
<msg timestamp="20170725 02:43:18.017" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:18.017" starttime="20170725 02:43:17.716"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:18.018" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:18.018" starttime="20170725 02:43:18.017"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:43:18.018" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:43:18.018" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:43:18.019" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:43:18.019" starttime="20170725 02:43:18.018"></status>
</kw>
<msg timestamp="20170725 02:43:18.019" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:43:18.019" starttime="20170725 02:43:17.715"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:18.019" starttime="20170725 02:43:17.715"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:43:18.023" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:43:18.023" starttime="20170725 02:43:18.022"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:43:18.024" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:43:18.024" starttime="20170725 02:43:18.024"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:43:18.025" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:43:18.025" starttime="20170725 02:43:18.024"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:43:18.025" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:43:18.025" starttime="20170725 02:43:18.025"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:43:18.232" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:43:18.232" starttime="20170725 02:43:18.026"></status>
</kw>
<msg timestamp="20170725 02:43:18.232" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:43:18.232" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:18.232" starttime="20170725 02:43:18.026"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:43:18.233" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:18.233" starttime="20170725 02:43:18.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:18.234" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:18.234" starttime="20170725 02:43:18.233"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:18.234" starttime="20170725 02:43:18.022"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:18.234" starttime="20170725 02:43:18.021"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:18.234" starttime="20170725 02:43:18.021"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:43:18.235" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:43:18.235" starttime="20170725 02:43:18.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:18.235" starttime="20170725 02:43:18.235"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:43:18.297" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:43:18.298" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:18.298" starttime="20170725 02:43:18.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:18.298" starttime="20170725 02:43:18.298"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:43:18.299" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:43:18.299" starttime="20170725 02:43:18.299"></status>
</kw>
<msg timestamp="20170725 02:43:18.299" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:18.299" starttime="20170725 02:43:18.020"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:18.300" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:18.301" starttime="20170725 02:43:18.300"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:43:18.301" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:43:18.301" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:43:18.302" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:43:18.302" starttime="20170725 02:43:18.301"></status>
</kw>
<msg timestamp="20170725 02:43:18.302" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:43:18.302" starttime="20170725 02:43:18.020"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:18.302" starttime="20170725 02:43:18.019"></status>
</kw>
<msg timestamp="20170725 02:43:18.303" level="FAIL">
#(UTC) 2017/07/25 02:43:18.302784 -   10.917651 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:43:18.303" starttime="20170725 02:43:17.386"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:43:28.309" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:43:28.310" starttime="20170725 02:43:28.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:43:28.311" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:43:28.311" starttime="20170725 02:43:28.310"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:43:28.311" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:43:28.311" starttime="20170725 02:43:28.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:43:28.312" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:43:28.312" starttime="20170725 02:43:28.312"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:43:28.526" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:43:28.526" starttime="20170725 02:43:28.313"></status>
</kw>
<msg timestamp="20170725 02:43:28.527" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:43:28.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:28.527" starttime="20170725 02:43:28.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:43:28.527" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:28.528" starttime="20170725 02:43:28.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:28.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:28.528" starttime="20170725 02:43:28.528"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:28.528" starttime="20170725 02:43:28.308"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:28.529" starttime="20170725 02:43:28.308"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:28.529" starttime="20170725 02:43:28.307"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:43:28.529" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:43:28.529" starttime="20170725 02:43:28.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:28.530" starttime="20170725 02:43:28.530"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:43:28.592" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:43:28.592" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:28.592" starttime="20170725 02:43:28.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:28.593" starttime="20170725 02:43:28.593"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:43:28.594" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:43:28.594" starttime="20170725 02:43:28.594"></status>
</kw>
<msg timestamp="20170725 02:43:28.594" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:28.594" starttime="20170725 02:43:28.307"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:28.595" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:28.595" starttime="20170725 02:43:28.594"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:43:28.596" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:43:28.596" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:43:28.596" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:43:28.596" starttime="20170725 02:43:28.596"></status>
</kw>
<msg timestamp="20170725 02:43:28.597" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:43:28.597" starttime="20170725 02:43:28.306"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:28.597" starttime="20170725 02:43:28.306"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:43:28.604" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:43:28.605" starttime="20170725 02:43:28.604"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:43:28.606" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:43:28.606" starttime="20170725 02:43:28.606"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:43:28.606" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:43:28.607" starttime="20170725 02:43:28.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:43:28.607" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:43:28.607" starttime="20170725 02:43:28.607"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:43:28.788" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:43:28.788" starttime="20170725 02:43:28.608"></status>
</kw>
<msg timestamp="20170725 02:43:28.789" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:43:28.789" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:28.789" starttime="20170725 02:43:28.607"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:43:28.789" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:28.789" starttime="20170725 02:43:28.789"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:28.790" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:28.790" starttime="20170725 02:43:28.790"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:28.790" starttime="20170725 02:43:28.603"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:28.790" starttime="20170725 02:43:28.602"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:28.790" starttime="20170725 02:43:28.600"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:43:28.791" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:43:28.791" starttime="20170725 02:43:28.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:28.792" starttime="20170725 02:43:28.791"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:43:28.859" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:43:28.859" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:28.859" starttime="20170725 02:43:28.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:28.860" starttime="20170725 02:43:28.859"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:43:28.860" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:43:28.860" starttime="20170725 02:43:28.860"></status>
</kw>
<msg timestamp="20170725 02:43:28.861" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:28.861" starttime="20170725 02:43:28.599"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:28.861" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:28.861" starttime="20170725 02:43:28.861"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:43:28.862" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:43:28.862" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:43:28.862" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:43:28.862" starttime="20170725 02:43:28.862"></status>
</kw>
<msg timestamp="20170725 02:43:28.862" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:43:28.862" starttime="20170725 02:43:28.598"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:28.862" starttime="20170725 02:43:28.597"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:43:28.866" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:43:28.872" starttime="20170725 02:43:28.866"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:43:28.874" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:43:28.874" starttime="20170725 02:43:28.873"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:43:28.875" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:43:28.875" starttime="20170725 02:43:28.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:43:28.876" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:43:28.876" starttime="20170725 02:43:28.875"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:43:29.161" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:43:29.161" starttime="20170725 02:43:28.877"></status>
</kw>
<msg timestamp="20170725 02:43:29.161" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:43:29.161" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:29.161" starttime="20170725 02:43:28.876"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:43:29.162" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:29.162" starttime="20170725 02:43:29.162"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:29.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:29.163" starttime="20170725 02:43:29.162"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:29.163" starttime="20170725 02:43:28.866"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:29.163" starttime="20170725 02:43:28.865"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:29.163" starttime="20170725 02:43:28.864"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:43:29.164" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:43:29.164" starttime="20170725 02:43:29.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:29.164" starttime="20170725 02:43:29.164"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:43:29.234" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:43:29.234" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:29.235" starttime="20170725 02:43:29.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:29.235" starttime="20170725 02:43:29.235"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:43:29.236" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:43:29.236" starttime="20170725 02:43:29.235"></status>
</kw>
<msg timestamp="20170725 02:43:29.236" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:29.236" starttime="20170725 02:43:28.864"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:29.237" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:29.237" starttime="20170725 02:43:29.236"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:43:29.237" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:43:29.237" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:43:29.237" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:43:29.237" starttime="20170725 02:43:29.237"></status>
</kw>
<msg timestamp="20170725 02:43:29.238" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:43:29.238" starttime="20170725 02:43:28.863"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:29.238" starttime="20170725 02:43:28.863"></status>
</kw>
<msg timestamp="20170725 02:43:29.239" level="FAIL">
#(UTC) 2017/07/25 02:43:29.238346 -   10.935562 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:43:29.239" starttime="20170725 02:43:28.304"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:43:39.245" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:43:39.246" starttime="20170725 02:43:39.245"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:43:39.246" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:43:39.246" starttime="20170725 02:43:39.246"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:43:39.247" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:43:39.247" starttime="20170725 02:43:39.247"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:43:39.248" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:43:39.248" starttime="20170725 02:43:39.247"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:43:39.443" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:43:39.443" starttime="20170725 02:43:39.249"></status>
</kw>
<msg timestamp="20170725 02:43:39.443" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:43:39.443" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:39.443" starttime="20170725 02:43:39.248"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:43:39.444" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:39.444" starttime="20170725 02:43:39.443"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:39.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:39.445" starttime="20170725 02:43:39.444"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:39.445" starttime="20170725 02:43:39.244"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:39.445" starttime="20170725 02:43:39.244"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:39.445" starttime="20170725 02:43:39.243"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:43:39.446" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:43:39.446" starttime="20170725 02:43:39.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:39.446" starttime="20170725 02:43:39.446"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:43:39.509" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:43:39.509" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:39.509" starttime="20170725 02:43:39.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:39.510" starttime="20170725 02:43:39.510"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:43:39.511" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:43:39.511" starttime="20170725 02:43:39.510"></status>
</kw>
<msg timestamp="20170725 02:43:39.511" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:39.511" starttime="20170725 02:43:39.242"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:39.512" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:39.512" starttime="20170725 02:43:39.511"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:43:39.512" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:43:39.512" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:43:39.513" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:43:39.513" starttime="20170725 02:43:39.512"></status>
</kw>
<msg timestamp="20170725 02:43:39.513" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:43:39.513" starttime="20170725 02:43:39.242"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:39.513" starttime="20170725 02:43:39.241"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:43:39.517" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:43:39.518" starttime="20170725 02:43:39.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:43:39.518" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:43:39.518" starttime="20170725 02:43:39.518"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:43:39.519" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:43:39.519" starttime="20170725 02:43:39.519"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:43:39.520" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:43:39.520" starttime="20170725 02:43:39.519"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:43:39.830" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:43:39.830" starttime="20170725 02:43:39.520"></status>
</kw>
<msg timestamp="20170725 02:43:39.830" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:43:39.830" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:39.831" starttime="20170725 02:43:39.520"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:43:39.831" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:39.832" starttime="20170725 02:43:39.831"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:39.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:39.833" starttime="20170725 02:43:39.832"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:39.833" starttime="20170725 02:43:39.516"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:39.833" starttime="20170725 02:43:39.516"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:39.833" starttime="20170725 02:43:39.515"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:43:39.834" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:43:39.834" starttime="20170725 02:43:39.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:39.835" starttime="20170725 02:43:39.834"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:43:39.907" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:43:39.907" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:39.907" starttime="20170725 02:43:39.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:39.908" starttime="20170725 02:43:39.907"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:43:39.908" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:43:39.908" starttime="20170725 02:43:39.908"></status>
</kw>
<msg timestamp="20170725 02:43:39.908" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:39.908" starttime="20170725 02:43:39.514"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:39.909" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:39.909" starttime="20170725 02:43:39.909"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:43:39.910" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:43:39.910" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:43:39.910" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:43:39.910" starttime="20170725 02:43:39.909"></status>
</kw>
<msg timestamp="20170725 02:43:39.910" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:43:39.910" starttime="20170725 02:43:39.514"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:39.910" starttime="20170725 02:43:39.513"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:43:39.914" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:43:39.915" starttime="20170725 02:43:39.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:43:39.915" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:43:39.915" starttime="20170725 02:43:39.915"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:43:39.916" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:43:39.916" starttime="20170725 02:43:39.916"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:43:39.917" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:43:39.917" starttime="20170725 02:43:39.916"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:43:40.098" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:43:40.098" starttime="20170725 02:43:39.917"></status>
</kw>
<msg timestamp="20170725 02:43:40.099" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:43:40.099" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:40.099" starttime="20170725 02:43:39.917"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:43:40.099" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:40.099" starttime="20170725 02:43:40.099"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:40.100" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:40.100" starttime="20170725 02:43:40.100"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:40.100" starttime="20170725 02:43:39.913"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:40.100" starttime="20170725 02:43:39.913"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:40.101" starttime="20170725 02:43:39.912"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:43:40.101" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:43:40.101" starttime="20170725 02:43:40.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:40.102" starttime="20170725 02:43:40.102"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:43:40.164" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:43:40.164" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:40.164" starttime="20170725 02:43:40.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:40.165" starttime="20170725 02:43:40.164"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:43:40.165" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:43:40.165" starttime="20170725 02:43:40.165"></status>
</kw>
<msg timestamp="20170725 02:43:40.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:40.166" starttime="20170725 02:43:39.911"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:40.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:40.166" starttime="20170725 02:43:40.166"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:43:40.167" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:43:40.167" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:43:40.167" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:43:40.167" starttime="20170725 02:43:40.166"></status>
</kw>
<msg timestamp="20170725 02:43:40.167" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:43:40.167" starttime="20170725 02:43:39.911"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:40.168" starttime="20170725 02:43:39.910"></status>
</kw>
<msg timestamp="20170725 02:43:40.168" level="FAIL">
#(UTC) 2017/07/25 02:43:40.167791 -   10.929445 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:43:40.168" starttime="20170725 02:43:39.240"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:43:50.175" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:43:50.175" starttime="20170725 02:43:50.174"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:43:50.176" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:43:50.176" starttime="20170725 02:43:50.176"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:43:50.177" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:43:50.177" starttime="20170725 02:43:50.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:43:50.177" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:43:50.177" starttime="20170725 02:43:50.177"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:43:50.367" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:43:50.367" starttime="20170725 02:43:50.178"></status>
</kw>
<msg timestamp="20170725 02:43:50.367" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:43:50.367" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:50.367" starttime="20170725 02:43:50.178"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:43:50.368" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:50.368" starttime="20170725 02:43:50.367"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:50.369" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:50.369" starttime="20170725 02:43:50.368"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:50.369" starttime="20170725 02:43:50.174"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:50.369" starttime="20170725 02:43:50.173"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:50.369" starttime="20170725 02:43:50.173"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:43:50.370" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:43:50.370" starttime="20170725 02:43:50.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:50.370" starttime="20170725 02:43:50.370"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:43:50.435" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:43:50.435" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:50.435" starttime="20170725 02:43:50.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:50.436" starttime="20170725 02:43:50.436"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:43:50.436" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:43:50.437" starttime="20170725 02:43:50.436"></status>
</kw>
<msg timestamp="20170725 02:43:50.437" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:50.437" starttime="20170725 02:43:50.172"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:50.437" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:50.437" starttime="20170725 02:43:50.437"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:43:50.438" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:43:50.438" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:43:50.438" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:43:50.438" starttime="20170725 02:43:50.438"></status>
</kw>
<msg timestamp="20170725 02:43:50.439" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:43:50.439" starttime="20170725 02:43:50.171"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:50.439" starttime="20170725 02:43:50.171"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:43:50.443" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:43:50.444" starttime="20170725 02:43:50.443"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:43:50.444" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:43:50.445" starttime="20170725 02:43:50.444"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:43:50.445" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:43:50.445" starttime="20170725 02:43:50.445"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:43:50.446" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:43:50.446" starttime="20170725 02:43:50.446"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:43:50.628" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:43:50.628" starttime="20170725 02:43:50.447"></status>
</kw>
<msg timestamp="20170725 02:43:50.628" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:43:50.628" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:50.628" starttime="20170725 02:43:50.446"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:43:50.629" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:50.629" starttime="20170725 02:43:50.629"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:50.630" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:50.630" starttime="20170725 02:43:50.629"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:50.630" starttime="20170725 02:43:50.442"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:50.630" starttime="20170725 02:43:50.442"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:50.630" starttime="20170725 02:43:50.441"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:43:50.631" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:43:50.631" starttime="20170725 02:43:50.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:50.631" starttime="20170725 02:43:50.631"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:43:50.697" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:43:50.697" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:50.697" starttime="20170725 02:43:50.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:50.698" starttime="20170725 02:43:50.697"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:43:50.698" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:43:50.698" starttime="20170725 02:43:50.698"></status>
</kw>
<msg timestamp="20170725 02:43:50.698" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:50.698" starttime="20170725 02:43:50.441"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:50.699" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:50.699" starttime="20170725 02:43:50.699"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:43:50.700" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:43:50.700" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:43:50.700" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:43:50.700" starttime="20170725 02:43:50.699"></status>
</kw>
<msg timestamp="20170725 02:43:50.700" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:43:50.700" starttime="20170725 02:43:50.440"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:50.700" starttime="20170725 02:43:50.439"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:43:50.705" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:43:50.705" starttime="20170725 02:43:50.704"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:43:50.706" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:43:50.706" starttime="20170725 02:43:50.706"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:43:50.707" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:43:50.707" starttime="20170725 02:43:50.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:43:50.707" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:43:50.707" starttime="20170725 02:43:50.707"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:43:50.965" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:43:50.965" starttime="20170725 02:43:50.708"></status>
</kw>
<msg timestamp="20170725 02:43:50.965" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:43:50.965" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:50.965" starttime="20170725 02:43:50.708"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:43:50.966" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:50.966" starttime="20170725 02:43:50.966"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:50.967" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:50.967" starttime="20170725 02:43:50.966"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:50.967" starttime="20170725 02:43:50.704"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:50.967" starttime="20170725 02:43:50.703"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:50.967" starttime="20170725 02:43:50.703"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:43:50.968" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:43:50.968" starttime="20170725 02:43:50.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:50.968" starttime="20170725 02:43:50.968"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:43:51.055" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:43:51.055" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:51.055" starttime="20170725 02:43:50.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:43:51.056" starttime="20170725 02:43:51.055"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:43:51.056" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:43:51.056" starttime="20170725 02:43:51.056"></status>
</kw>
<msg timestamp="20170725 02:43:51.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:43:51.057" starttime="20170725 02:43:50.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:43:51.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:43:51.057" starttime="20170725 02:43:51.057"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:43:51.058" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:43:51.058" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:43:51.058" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:43:51.058" starttime="20170725 02:43:51.057"></status>
</kw>
<msg timestamp="20170725 02:43:51.058" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:43:51.058" starttime="20170725 02:43:50.701"></status>
</kw>
<status status="PASS" endtime="20170725 02:43:51.058" starttime="20170725 02:43:50.701"></status>
</kw>
<msg timestamp="20170725 02:43:51.059" level="FAIL">
#(UTC) 2017/07/25 02:43:51.058724 -   10.890933 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:43:51.059" starttime="20170725 02:43:50.169"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:01.065" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:01.066" starttime="20170725 02:44:01.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:01.067" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:01.067" starttime="20170725 02:44:01.066"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:01.067" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:01.067" starttime="20170725 02:44:01.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:01.068" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:01.068" starttime="20170725 02:44:01.068"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:01.255" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:01.256" starttime="20170725 02:44:01.069"></status>
</kw>
<msg timestamp="20170725 02:44:01.256" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:01.256" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.256" starttime="20170725 02:44:01.068"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:01.256" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.257" starttime="20170725 02:44:01.256"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:01.257" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.257" starttime="20170725 02:44:01.257"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:01.257" starttime="20170725 02:44:01.064"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:01.258" starttime="20170725 02:44:01.064"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:01.258" starttime="20170725 02:44:01.063"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:01.258" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:44:01.258" starttime="20170725 02:44:01.258"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:01.259" starttime="20170725 02:44:01.259"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:01.340" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:44:01.340" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.340" starttime="20170725 02:44:01.259"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:01.341" starttime="20170725 02:44:01.341"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:01.342" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:01.342" starttime="20170725 02:44:01.341"></status>
</kw>
<msg timestamp="20170725 02:44:01.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.342" starttime="20170725 02:44:01.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:01.343" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.343" starttime="20170725 02:44:01.342"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:01.343" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:01.343" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:01.343" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:44:01.343" starttime="20170725 02:44:01.343"></status>
</kw>
<msg timestamp="20170725 02:44:01.344" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:44:01.344" starttime="20170725 02:44:01.062"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:01.344" starttime="20170725 02:44:01.062"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:01.348" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:01.349" starttime="20170725 02:44:01.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:01.349" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:01.349" starttime="20170725 02:44:01.349"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:01.350" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:01.350" starttime="20170725 02:44:01.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:01.350" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:01.350" starttime="20170725 02:44:01.350"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:01.657" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:01.657" starttime="20170725 02:44:01.351"></status>
</kw>
<msg timestamp="20170725 02:44:01.657" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:01.657" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.657" starttime="20170725 02:44:01.351"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:01.658" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.658" starttime="20170725 02:44:01.658"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:01.659" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.659" starttime="20170725 02:44:01.658"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:01.659" starttime="20170725 02:44:01.347"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:01.659" starttime="20170725 02:44:01.346"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:01.659" starttime="20170725 02:44:01.346"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:01.660" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:44:01.660" starttime="20170725 02:44:01.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:01.660" starttime="20170725 02:44:01.660"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:01.728" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:44:01.729" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.729" starttime="20170725 02:44:01.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:01.729" starttime="20170725 02:44:01.729"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:01.730" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:01.730" starttime="20170725 02:44:01.730"></status>
</kw>
<msg timestamp="20170725 02:44:01.730" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.730" starttime="20170725 02:44:01.345"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:01.731" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.731" starttime="20170725 02:44:01.730"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:01.731" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:01.731" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:01.732" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:44:01.732" starttime="20170725 02:44:01.731"></status>
</kw>
<msg timestamp="20170725 02:44:01.732" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:44:01.732" starttime="20170725 02:44:01.345"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:01.732" starttime="20170725 02:44:01.344"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:01.736" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:01.737" starttime="20170725 02:44:01.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:01.737" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:01.737" starttime="20170725 02:44:01.737"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:01.738" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:01.738" starttime="20170725 02:44:01.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:01.738" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:01.739" starttime="20170725 02:44:01.738"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:01.919" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:01.920" starttime="20170725 02:44:01.739"></status>
</kw>
<msg timestamp="20170725 02:44:01.920" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:01.920" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.920" starttime="20170725 02:44:01.739"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:01.921" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.921" starttime="20170725 02:44:01.920"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:01.921" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.921" starttime="20170725 02:44:01.921"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:01.921" starttime="20170725 02:44:01.735"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:01.922" starttime="20170725 02:44:01.735"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:01.922" starttime="20170725 02:44:01.734"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:01.922" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:44:01.922" starttime="20170725 02:44:01.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:01.923" starttime="20170725 02:44:01.923"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:01.985" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:44:01.985" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.985" starttime="20170725 02:44:01.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:01.986" starttime="20170725 02:44:01.986"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:01.986" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:01.986" starttime="20170725 02:44:01.986"></status>
</kw>
<msg timestamp="20170725 02:44:01.987" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.987" starttime="20170725 02:44:01.733"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:01.987" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:01.988" starttime="20170725 02:44:01.987"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:01.988" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:01.988" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:01.988" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:44:01.988" starttime="20170725 02:44:01.988"></status>
</kw>
<msg timestamp="20170725 02:44:01.989" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:44:01.989" starttime="20170725 02:44:01.733"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:01.989" starttime="20170725 02:44:01.732"></status>
</kw>
<msg timestamp="20170725 02:44:01.990" level="FAIL">
#(UTC) 2017/07/25 02:44:01.989075 -   10.930351 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:44:01.990" starttime="20170725 02:44:01.060"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:11.996" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:11.997" starttime="20170725 02:44:11.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:11.998" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:11.998" starttime="20170725 02:44:11.997"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:11.998" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:11.998" starttime="20170725 02:44:11.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:11.999" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:11.999" starttime="20170725 02:44:11.999"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:12.187" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:12.187" starttime="20170725 02:44:12.000"></status>
</kw>
<msg timestamp="20170725 02:44:12.187" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:12.187" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.187" starttime="20170725 02:44:11.999"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:12.188" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.188" starttime="20170725 02:44:12.188"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:12.189" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.189" starttime="20170725 02:44:12.188"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:12.189" starttime="20170725 02:44:11.995"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:12.189" starttime="20170725 02:44:11.995"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:12.189" starttime="20170725 02:44:11.994"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:12.190" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:44:12.190" starttime="20170725 02:44:12.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:12.190" starttime="20170725 02:44:12.190"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:12.280" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:44:12.280" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.280" starttime="20170725 02:44:12.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:12.281" starttime="20170725 02:44:12.281"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:12.282" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:12.282" starttime="20170725 02:44:12.281"></status>
</kw>
<msg timestamp="20170725 02:44:12.282" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.282" starttime="20170725 02:44:11.993"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:12.282" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.283" starttime="20170725 02:44:12.282"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:12.283" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:12.283" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:12.283" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:44:12.283" starttime="20170725 02:44:12.283"></status>
</kw>
<msg timestamp="20170725 02:44:12.284" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:44:12.284" starttime="20170725 02:44:11.993"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:12.284" starttime="20170725 02:44:11.992"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:12.288" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:12.288" starttime="20170725 02:44:12.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:12.289" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:12.289" starttime="20170725 02:44:12.289"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:12.290" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:12.290" starttime="20170725 02:44:12.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:12.290" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:12.290" starttime="20170725 02:44:12.290"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:12.488" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:12.489" starttime="20170725 02:44:12.291"></status>
</kw>
<msg timestamp="20170725 02:44:12.489" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:12.489" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.489" starttime="20170725 02:44:12.291"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:12.489" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.489" starttime="20170725 02:44:12.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:12.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.490" starttime="20170725 02:44:12.490"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:12.490" starttime="20170725 02:44:12.287"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:12.490" starttime="20170725 02:44:12.286"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:12.490" starttime="20170725 02:44:12.286"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:12.491" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:44:12.491" starttime="20170725 02:44:12.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:12.492" starttime="20170725 02:44:12.491"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:12.558" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:44:12.558" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.558" starttime="20170725 02:44:12.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:12.559" starttime="20170725 02:44:12.558"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:12.559" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:12.559" starttime="20170725 02:44:12.559"></status>
</kw>
<msg timestamp="20170725 02:44:12.559" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.559" starttime="20170725 02:44:12.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:12.560" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.560" starttime="20170725 02:44:12.560"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:12.561" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:12.561" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:12.561" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:44:12.561" starttime="20170725 02:44:12.560"></status>
</kw>
<msg timestamp="20170725 02:44:12.561" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:44:12.561" starttime="20170725 02:44:12.284"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:12.561" starttime="20170725 02:44:12.284"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:12.565" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:12.569" starttime="20170725 02:44:12.565"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:12.570" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:12.570" starttime="20170725 02:44:12.569"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:12.571" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:12.571" starttime="20170725 02:44:12.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:12.572" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:12.572" starttime="20170725 02:44:12.572"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:12.869" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:12.869" starttime="20170725 02:44:12.573"></status>
</kw>
<msg timestamp="20170725 02:44:12.869" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:12.869" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.869" starttime="20170725 02:44:12.572"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:12.870" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.870" starttime="20170725 02:44:12.870"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:12.871" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.871" starttime="20170725 02:44:12.870"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:12.871" starttime="20170725 02:44:12.564"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:12.871" starttime="20170725 02:44:12.564"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:12.871" starttime="20170725 02:44:12.563"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:12.872" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:44:12.872" starttime="20170725 02:44:12.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:12.872" starttime="20170725 02:44:12.872"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:12.935" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:44:12.936" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.936" starttime="20170725 02:44:12.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:12.936" starttime="20170725 02:44:12.936"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:12.937" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:12.937" starttime="20170725 02:44:12.937"></status>
</kw>
<msg timestamp="20170725 02:44:12.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.937" starttime="20170725 02:44:12.563"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:12.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:12.938" starttime="20170725 02:44:12.937"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:12.938" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:12.938" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:12.939" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:44:12.939" starttime="20170725 02:44:12.938"></status>
</kw>
<msg timestamp="20170725 02:44:12.939" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:44:12.939" starttime="20170725 02:44:12.562"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:12.939" starttime="20170725 02:44:12.562"></status>
</kw>
<msg timestamp="20170725 02:44:12.940" level="FAIL">
#(UTC) 2017/07/25 02:44:12.939355 -   10.950280 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:44:12.940" starttime="20170725 02:44:11.990"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:22.946" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:22.946" starttime="20170725 02:44:22.945"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:22.947" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:22.947" starttime="20170725 02:44:22.947"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:22.948" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:22.948" starttime="20170725 02:44:22.947"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:22.948" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:22.948" starttime="20170725 02:44:22.948"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:23.127" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:23.127" starttime="20170725 02:44:22.949"></status>
</kw>
<msg timestamp="20170725 02:44:23.127" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:23.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.127" starttime="20170725 02:44:22.949"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:23.128" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.128" starttime="20170725 02:44:23.127"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:23.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.129" starttime="20170725 02:44:23.128"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:23.129" starttime="20170725 02:44:22.945"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:23.129" starttime="20170725 02:44:22.944"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:23.129" starttime="20170725 02:44:22.944"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:23.129" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:44:23.130" starttime="20170725 02:44:23.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:23.130" starttime="20170725 02:44:23.130"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:23.195" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:44:23.195" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.195" starttime="20170725 02:44:23.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:23.196" starttime="20170725 02:44:23.196"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:23.197" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:23.197" starttime="20170725 02:44:23.196"></status>
</kw>
<msg timestamp="20170725 02:44:23.197" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.197" starttime="20170725 02:44:22.943"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:23.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.198" starttime="20170725 02:44:23.197"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:23.198" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:23.198" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:23.198" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:44:23.198" starttime="20170725 02:44:23.198"></status>
</kw>
<msg timestamp="20170725 02:44:23.199" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:44:23.199" starttime="20170725 02:44:22.943"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:23.199" starttime="20170725 02:44:22.942"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:23.203" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:23.204" starttime="20170725 02:44:23.202"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:23.204" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:23.204" starttime="20170725 02:44:23.204"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:23.205" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:23.205" starttime="20170725 02:44:23.205"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:23.206" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:23.206" starttime="20170725 02:44:23.205"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:23.395" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:23.395" starttime="20170725 02:44:23.206"></status>
</kw>
<msg timestamp="20170725 02:44:23.395" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:23.395" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.395" starttime="20170725 02:44:23.206"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:23.396" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.396" starttime="20170725 02:44:23.395"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:23.396" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.397" starttime="20170725 02:44:23.396"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:23.397" starttime="20170725 02:44:23.202"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:23.397" starttime="20170725 02:44:23.201"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:23.397" starttime="20170725 02:44:23.201"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:23.397" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:44:23.398" starttime="20170725 02:44:23.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:23.398" starttime="20170725 02:44:23.398"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:23.509" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:44:23.509" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.509" starttime="20170725 02:44:23.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:23.509" starttime="20170725 02:44:23.509"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:23.510" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:23.510" starttime="20170725 02:44:23.510"></status>
</kw>
<msg timestamp="20170725 02:44:23.510" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.510" starttime="20170725 02:44:23.200"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:23.511" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.511" starttime="20170725 02:44:23.510"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:23.511" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:23.512" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:23.512" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:44:23.512" starttime="20170725 02:44:23.511"></status>
</kw>
<msg timestamp="20170725 02:44:23.512" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:44:23.512" starttime="20170725 02:44:23.200"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:23.512" starttime="20170725 02:44:23.199"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:23.516" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:23.516" starttime="20170725 02:44:23.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:23.517" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:23.517" starttime="20170725 02:44:23.517"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:23.518" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:23.518" starttime="20170725 02:44:23.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:23.519" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:23.519" starttime="20170725 02:44:23.518"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:23.753" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:23.754" starttime="20170725 02:44:23.520"></status>
</kw>
<msg timestamp="20170725 02:44:23.754" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:23.754" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.754" starttime="20170725 02:44:23.519"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:23.754" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.755" starttime="20170725 02:44:23.754"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:23.755" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.755" starttime="20170725 02:44:23.755"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:23.755" starttime="20170725 02:44:23.515"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:23.755" starttime="20170725 02:44:23.515"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:23.756" starttime="20170725 02:44:23.514"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:23.756" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:44:23.756" starttime="20170725 02:44:23.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:23.757" starttime="20170725 02:44:23.757"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:23.819" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:44:23.819" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.820" starttime="20170725 02:44:23.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:23.820" starttime="20170725 02:44:23.820"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:23.821" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:23.821" starttime="20170725 02:44:23.821"></status>
</kw>
<msg timestamp="20170725 02:44:23.821" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.821" starttime="20170725 02:44:23.513"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:23.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:23.822" starttime="20170725 02:44:23.821"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:23.822" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:23.822" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:23.822" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:44:23.822" starttime="20170725 02:44:23.822"></status>
</kw>
<msg timestamp="20170725 02:44:23.823" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:44:23.823" starttime="20170725 02:44:23.513"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:23.823" starttime="20170725 02:44:23.512"></status>
</kw>
<msg timestamp="20170725 02:44:23.824" level="FAIL">
#(UTC) 2017/07/25 02:44:23.823305 -   10.883950 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:44:23.824" starttime="20170725 02:44:22.941"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:33.830" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:33.831" starttime="20170725 02:44:33.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:33.831" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:33.831" starttime="20170725 02:44:33.831"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:33.832" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:33.832" starttime="20170725 02:44:33.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:33.833" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:33.833" starttime="20170725 02:44:33.832"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:34.011" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:34.011" starttime="20170725 02:44:33.833"></status>
</kw>
<msg timestamp="20170725 02:44:34.011" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:34.011" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.011" starttime="20170725 02:44:33.833"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:34.012" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.012" starttime="20170725 02:44:34.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:34.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.013" starttime="20170725 02:44:34.012"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:34.013" starttime="20170725 02:44:33.829"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:34.013" starttime="20170725 02:44:33.828"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:34.013" starttime="20170725 02:44:33.828"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:34.014" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:44:34.014" starttime="20170725 02:44:34.013"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:34.014" starttime="20170725 02:44:34.014"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:34.077" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:44:34.077" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.077" starttime="20170725 02:44:34.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:34.078" starttime="20170725 02:44:34.077"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:34.078" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:34.078" starttime="20170725 02:44:34.078"></status>
</kw>
<msg timestamp="20170725 02:44:34.078" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.078" starttime="20170725 02:44:33.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:34.079" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.079" starttime="20170725 02:44:34.079"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:34.080" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:34.080" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:34.080" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:44:34.080" starttime="20170725 02:44:34.079"></status>
</kw>
<msg timestamp="20170725 02:44:34.080" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:44:34.080" starttime="20170725 02:44:33.827"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:34.080" starttime="20170725 02:44:33.826"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:34.084" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:34.085" starttime="20170725 02:44:34.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:34.085" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:34.085" starttime="20170725 02:44:34.085"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:34.086" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:34.086" starttime="20170725 02:44:34.086"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:34.087" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:34.087" starttime="20170725 02:44:34.086"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:34.364" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:34.364" starttime="20170725 02:44:34.087"></status>
</kw>
<msg timestamp="20170725 02:44:34.365" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:34.365" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.365" starttime="20170725 02:44:34.087"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:34.365" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.365" starttime="20170725 02:44:34.365"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:34.366" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.366" starttime="20170725 02:44:34.366"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:34.366" starttime="20170725 02:44:34.083"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:34.366" starttime="20170725 02:44:34.083"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:34.366" starttime="20170725 02:44:34.082"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:34.367" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:44:34.367" starttime="20170725 02:44:34.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:34.368" starttime="20170725 02:44:34.367"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:34.450" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:44:34.450" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.450" starttime="20170725 02:44:34.368"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:34.451" starttime="20170725 02:44:34.450"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:34.451" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:34.451" starttime="20170725 02:44:34.451"></status>
</kw>
<msg timestamp="20170725 02:44:34.451" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.451" starttime="20170725 02:44:34.082"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:34.452" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.452" starttime="20170725 02:44:34.452"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:34.453" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:34.453" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:34.453" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:44:34.453" starttime="20170725 02:44:34.452"></status>
</kw>
<msg timestamp="20170725 02:44:34.453" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:44:34.453" starttime="20170725 02:44:34.081"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:34.453" starttime="20170725 02:44:34.081"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:34.457" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:34.458" starttime="20170725 02:44:34.457"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:34.458" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:34.458" starttime="20170725 02:44:34.458"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:34.459" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:34.459" starttime="20170725 02:44:34.459"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:34.460" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:34.460" starttime="20170725 02:44:34.459"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:34.637" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:34.637" starttime="20170725 02:44:34.460"></status>
</kw>
<msg timestamp="20170725 02:44:34.637" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:34.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.637" starttime="20170725 02:44:34.460"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:34.638" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.638" starttime="20170725 02:44:34.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:34.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.639" starttime="20170725 02:44:34.638"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:34.639" starttime="20170725 02:44:34.456"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:34.639" starttime="20170725 02:44:34.456"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:34.639" starttime="20170725 02:44:34.455"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:34.640" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:44:34.640" starttime="20170725 02:44:34.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:34.640" starttime="20170725 02:44:34.640"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:34.713" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:44:34.713" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.713" starttime="20170725 02:44:34.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:34.713" starttime="20170725 02:44:34.713"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:34.714" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:34.714" starttime="20170725 02:44:34.714"></status>
</kw>
<msg timestamp="20170725 02:44:34.714" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.714" starttime="20170725 02:44:34.455"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:34.715" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:34.715" starttime="20170725 02:44:34.714"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:34.715" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:34.715" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:34.715" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:44:34.715" starttime="20170725 02:44:34.715"></status>
</kw>
<msg timestamp="20170725 02:44:34.716" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:44:34.716" starttime="20170725 02:44:34.454"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:34.716" starttime="20170725 02:44:34.454"></status>
</kw>
<msg timestamp="20170725 02:44:34.717" level="FAIL">
#(UTC) 2017/07/25 02:44:34.716275 -   10.892970 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:44:34.717" starttime="20170725 02:44:33.825"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:44.723" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:44.723" starttime="20170725 02:44:44.722"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:44.724" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:44.724" starttime="20170725 02:44:44.724"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:44.725" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:44.725" starttime="20170725 02:44:44.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:44.725" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:44.725" starttime="20170725 02:44:44.725"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:44.939" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:44.939" starttime="20170725 02:44:44.726"></status>
</kw>
<msg timestamp="20170725 02:44:44.939" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:44.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:44.939" starttime="20170725 02:44:44.726"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:44.940" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:44.940" starttime="20170725 02:44:44.940"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:44.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:44.941" starttime="20170725 02:44:44.940"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:44.941" starttime="20170725 02:44:44.722"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:44.941" starttime="20170725 02:44:44.721"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:44.941" starttime="20170725 02:44:44.721"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:44.942" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:44:44.942" starttime="20170725 02:44:44.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:44.942" starttime="20170725 02:44:44.942"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:45.058" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:44:45.058" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:45.058" starttime="20170725 02:44:44.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:45.059" starttime="20170725 02:44:45.058"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:45.059" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:45.059" starttime="20170725 02:44:45.059"></status>
</kw>
<msg timestamp="20170725 02:44:45.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:45.059" starttime="20170725 02:44:44.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:45.060" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:45.060" starttime="20170725 02:44:45.060"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:45.061" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:45.061" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:45.061" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:44:45.061" starttime="20170725 02:44:45.060"></status>
</kw>
<msg timestamp="20170725 02:44:45.061" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:44:45.061" starttime="20170725 02:44:44.719"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:45.061" starttime="20170725 02:44:44.719"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:45.065" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:45.066" starttime="20170725 02:44:45.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:45.066" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:45.066" starttime="20170725 02:44:45.066"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:45.067" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:45.067" starttime="20170725 02:44:45.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:45.068" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:45.068" starttime="20170725 02:44:45.067"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:45.297" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:45.297" starttime="20170725 02:44:45.069"></status>
</kw>
<msg timestamp="20170725 02:44:45.297" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:45.297" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:45.297" starttime="20170725 02:44:45.068"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:45.298" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:45.298" starttime="20170725 02:44:45.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:45.299" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:45.299" starttime="20170725 02:44:45.298"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:45.299" starttime="20170725 02:44:45.064"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:45.299" starttime="20170725 02:44:45.064"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:45.299" starttime="20170725 02:44:45.063"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:45.300" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:44:45.300" starttime="20170725 02:44:45.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:45.300" starttime="20170725 02:44:45.300"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:45.368" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:44:45.368" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:45.368" starttime="20170725 02:44:45.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:45.369" starttime="20170725 02:44:45.369"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:45.370" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:45.370" starttime="20170725 02:44:45.370"></status>
</kw>
<msg timestamp="20170725 02:44:45.370" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:45.370" starttime="20170725 02:44:45.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:45.371" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:45.371" starttime="20170725 02:44:45.370"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:45.371" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:45.371" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:45.371" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:44:45.372" starttime="20170725 02:44:45.371"></status>
</kw>
<msg timestamp="20170725 02:44:45.372" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:44:45.372" starttime="20170725 02:44:45.062"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:45.372" starttime="20170725 02:44:45.062"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:45.377" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:45.378" starttime="20170725 02:44:45.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:45.378" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:45.378" starttime="20170725 02:44:45.378"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:45.379" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:45.379" starttime="20170725 02:44:45.379"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:45.380" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:45.380" starttime="20170725 02:44:45.379"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:45.569" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:45.569" starttime="20170725 02:44:45.380"></status>
</kw>
<msg timestamp="20170725 02:44:45.570" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:45.570" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:45.570" starttime="20170725 02:44:45.380"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:45.571" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:45.571" starttime="20170725 02:44:45.570"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:45.571" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:45.571" starttime="20170725 02:44:45.571"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:45.572" starttime="20170725 02:44:45.375"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:45.572" starttime="20170725 02:44:45.374"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:45.572" starttime="20170725 02:44:45.374"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:45.572" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:44:45.572" starttime="20170725 02:44:45.572"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:45.573" starttime="20170725 02:44:45.573"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:45.645" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:44:45.645" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:45.645" starttime="20170725 02:44:45.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:45.646" starttime="20170725 02:44:45.645"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:45.646" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:45.646" starttime="20170725 02:44:45.646"></status>
</kw>
<msg timestamp="20170725 02:44:45.646" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:45.647" starttime="20170725 02:44:45.373"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:45.647" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:45.647" starttime="20170725 02:44:45.647"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:45.648" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:45.648" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:45.648" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:44:45.648" starttime="20170725 02:44:45.647"></status>
</kw>
<msg timestamp="20170725 02:44:45.648" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:44:45.648" starttime="20170725 02:44:45.373"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:45.649" starttime="20170725 02:44:45.372"></status>
</kw>
<msg timestamp="20170725 02:44:45.649" level="FAIL">
#(UTC) 2017/07/25 02:44:45.648830 -   10.932555 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:44:45.649" starttime="20170725 02:44:44.717"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:55.655" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:55.656" starttime="20170725 02:44:55.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:55.656" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:55.656" starttime="20170725 02:44:55.656"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:55.657" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:55.657" starttime="20170725 02:44:55.657"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:55.658" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:55.658" starttime="20170725 02:44:55.657"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:55.896" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:55.896" starttime="20170725 02:44:55.658"></status>
</kw>
<msg timestamp="20170725 02:44:55.897" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:55.897" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:55.897" starttime="20170725 02:44:55.658"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:55.897" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:55.897" starttime="20170725 02:44:55.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:55.898" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:55.898" starttime="20170725 02:44:55.898"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:55.898" starttime="20170725 02:44:55.654"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:55.898" starttime="20170725 02:44:55.654"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:55.898" starttime="20170725 02:44:55.653"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:55.899" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:44:55.899" starttime="20170725 02:44:55.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:55.900" starttime="20170725 02:44:55.899"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:55.962" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:44:55.962" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:55.963" starttime="20170725 02:44:55.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:55.963" starttime="20170725 02:44:55.963"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:55.964" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:55.964" starttime="20170725 02:44:55.963"></status>
</kw>
<msg timestamp="20170725 02:44:55.964" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:55.964" starttime="20170725 02:44:55.653"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:55.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:55.965" starttime="20170725 02:44:55.964"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:55.965" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:55.965" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:55.965" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:44:55.965" starttime="20170725 02:44:55.965"></status>
</kw>
<msg timestamp="20170725 02:44:55.966" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:44:55.966" starttime="20170725 02:44:55.652"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:55.966" starttime="20170725 02:44:55.652"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:55.970" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:55.970" starttime="20170725 02:44:55.969"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:55.971" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:55.971" starttime="20170725 02:44:55.971"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:55.972" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:55.972" starttime="20170725 02:44:55.971"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:55.972" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:55.972" starttime="20170725 02:44:55.972"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:56.149" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:56.149" starttime="20170725 02:44:55.973"></status>
</kw>
<msg timestamp="20170725 02:44:56.149" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:56.149" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:56.149" starttime="20170725 02:44:55.973"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:56.150" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:56.150" starttime="20170725 02:44:56.150"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:56.151" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:56.151" starttime="20170725 02:44:56.150"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:56.151" starttime="20170725 02:44:55.969"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:56.151" starttime="20170725 02:44:55.968"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:56.151" starttime="20170725 02:44:55.968"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:56.152" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:44:56.152" starttime="20170725 02:44:56.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:56.152" starttime="20170725 02:44:56.152"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:56.220" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:44:56.220" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:56.220" starttime="20170725 02:44:56.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:56.221" starttime="20170725 02:44:56.221"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:56.221" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:56.222" starttime="20170725 02:44:56.221"></status>
</kw>
<msg timestamp="20170725 02:44:56.222" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:56.222" starttime="20170725 02:44:55.967"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:56.222" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:56.222" starttime="20170725 02:44:56.222"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:56.223" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:56.223" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:56.223" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:44:56.223" starttime="20170725 02:44:56.223"></status>
</kw>
<msg timestamp="20170725 02:44:56.223" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:44:56.224" starttime="20170725 02:44:55.967"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:56.224" starttime="20170725 02:44:55.966"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:44:56.227" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:44:56.231" starttime="20170725 02:44:56.227"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:44:56.232" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:44:56.232" starttime="20170725 02:44:56.232"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:44:56.233" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:44:56.233" starttime="20170725 02:44:56.232"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:44:56.234" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:44:56.234" starttime="20170725 02:44:56.233"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:44:56.484" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:44:56.484" starttime="20170725 02:44:56.235"></status>
</kw>
<msg timestamp="20170725 02:44:56.484" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:44:56.484" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:56.484" starttime="20170725 02:44:56.234"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:44:56.485" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:56.485" starttime="20170725 02:44:56.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:56.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:56.485" starttime="20170725 02:44:56.485"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:56.486" starttime="20170725 02:44:56.227"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:56.486" starttime="20170725 02:44:56.226"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:56.486" starttime="20170725 02:44:56.226"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:44:56.486" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:44:56.486" starttime="20170725 02:44:56.486"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:56.487" starttime="20170725 02:44:56.487"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:44:56.550" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:44:56.550" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:56.550" starttime="20170725 02:44:56.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:44:56.551" starttime="20170725 02:44:56.551"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:44:56.551" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:44:56.552" starttime="20170725 02:44:56.551"></status>
</kw>
<msg timestamp="20170725 02:44:56.552" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:44:56.552" starttime="20170725 02:44:56.225"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:44:56.552" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:44:56.552" starttime="20170725 02:44:56.552"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:44:56.553" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:44:56.553" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:44:56.553" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:44:56.553" starttime="20170725 02:44:56.553"></status>
</kw>
<msg timestamp="20170725 02:44:56.554" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:44:56.554" starttime="20170725 02:44:56.224"></status>
</kw>
<status status="PASS" endtime="20170725 02:44:56.554" starttime="20170725 02:44:56.224"></status>
</kw>
<msg timestamp="20170725 02:44:56.555" level="FAIL">
#(UTC) 2017/07/25 02:44:56.554068 -   10.905238 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:44:56.555" starttime="20170725 02:44:55.650"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:45:06.561" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:45:06.562" starttime="20170725 02:45:06.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:45:06.563" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:45:06.563" starttime="20170725 02:45:06.562"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:45:06.563" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:45:06.563" starttime="20170725 02:45:06.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:45:06.564" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:45:06.564" starttime="20170725 02:45:06.564"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:45:06.778" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:45:06.778" starttime="20170725 02:45:06.565"></status>
</kw>
<msg timestamp="20170725 02:45:06.778" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:45:06.778" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:06.778" starttime="20170725 02:45:06.564"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:45:06.779" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:06.779" starttime="20170725 02:45:06.778"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:06.780" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:06.780" starttime="20170725 02:45:06.779"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:06.780" starttime="20170725 02:45:06.560"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:06.780" starttime="20170725 02:45:06.560"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:06.780" starttime="20170725 02:45:06.559"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:45:06.781" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:45:06.781" starttime="20170725 02:45:06.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:06.781" starttime="20170725 02:45:06.781"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:45:06.847" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:45:06.848" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:06.848" starttime="20170725 02:45:06.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:06.848" starttime="20170725 02:45:06.848"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:45:06.849" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:45:06.849" starttime="20170725 02:45:06.849"></status>
</kw>
<msg timestamp="20170725 02:45:06.849" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:06.849" starttime="20170725 02:45:06.558"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:06.850" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:06.850" starttime="20170725 02:45:06.850"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:45:06.851" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:45:06.851" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:45:06.852" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:45:06.852" starttime="20170725 02:45:06.851"></status>
</kw>
<msg timestamp="20170725 02:45:06.852" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:45:06.852" starttime="20170725 02:45:06.558"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:06.852" starttime="20170725 02:45:06.557"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:45:06.856" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:45:06.857" starttime="20170725 02:45:06.856"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:45:06.857" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:45:06.858" starttime="20170725 02:45:06.857"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:45:06.858" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:45:06.858" starttime="20170725 02:45:06.858"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:45:06.859" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:45:06.859" starttime="20170725 02:45:06.858"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:45:07.037" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:45:07.037" starttime="20170725 02:45:06.860"></status>
</kw>
<msg timestamp="20170725 02:45:07.037" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:45:07.037" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:07.038" starttime="20170725 02:45:06.859"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:45:07.038" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:07.038" starttime="20170725 02:45:07.038"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:07.039" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:07.039" starttime="20170725 02:45:07.038"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:07.039" starttime="20170725 02:45:06.855"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:07.039" starttime="20170725 02:45:06.855"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:07.039" starttime="20170725 02:45:06.854"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:45:07.040" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:45:07.040" starttime="20170725 02:45:07.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:07.041" starttime="20170725 02:45:07.040"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:45:07.109" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:45:07.109" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:07.109" starttime="20170725 02:45:07.041"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:07.109" starttime="20170725 02:45:07.109"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:45:07.110" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:45:07.110" starttime="20170725 02:45:07.110"></status>
</kw>
<msg timestamp="20170725 02:45:07.110" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:07.110" starttime="20170725 02:45:06.854"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:07.111" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:07.111" starttime="20170725 02:45:07.110"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:45:07.111" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:45:07.112" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:45:07.112" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:45:07.112" starttime="20170725 02:45:07.111"></status>
</kw>
<msg timestamp="20170725 02:45:07.112" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:45:07.112" starttime="20170725 02:45:06.853"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:07.112" starttime="20170725 02:45:06.853"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:45:07.116" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:45:07.117" starttime="20170725 02:45:07.116"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:45:07.118" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:45:07.118" starttime="20170725 02:45:07.117"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:45:07.118" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:45:07.118" starttime="20170725 02:45:07.118"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:45:07.119" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:45:07.119" starttime="20170725 02:45:07.118"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:45:07.294" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:45:07.295" starttime="20170725 02:45:07.120"></status>
</kw>
<msg timestamp="20170725 02:45:07.295" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:45:07.295" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:07.295" starttime="20170725 02:45:07.119"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:45:07.295" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:07.295" starttime="20170725 02:45:07.295"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:07.296" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:07.296" starttime="20170725 02:45:07.296"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:07.296" starttime="20170725 02:45:07.115"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:07.296" starttime="20170725 02:45:07.115"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:07.297" starttime="20170725 02:45:07.114"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:45:07.297" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:45:07.297" starttime="20170725 02:45:07.297"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:07.298" starttime="20170725 02:45:07.297"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:45:07.452" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:45:07.452" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:07.452" starttime="20170725 02:45:07.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:07.453" starttime="20170725 02:45:07.452"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:45:07.453" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:45:07.453" starttime="20170725 02:45:07.453"></status>
</kw>
<msg timestamp="20170725 02:45:07.454" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:07.454" starttime="20170725 02:45:07.114"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:07.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:07.454" starttime="20170725 02:45:07.454"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:45:07.455" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:45:07.455" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:45:07.455" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:45:07.455" starttime="20170725 02:45:07.455"></status>
</kw>
<msg timestamp="20170725 02:45:07.455" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:45:07.455" starttime="20170725 02:45:07.113"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:07.456" starttime="20170725 02:45:07.112"></status>
</kw>
<msg timestamp="20170725 02:45:07.456" level="FAIL">
#(UTC) 2017/07/25 02:45:07.455864 -   10.901796 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:45:07.456" starttime="20170725 02:45:06.555"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:45:17.462" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:45:17.463" starttime="20170725 02:45:17.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:45:17.464" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:45:17.464" starttime="20170725 02:45:17.463"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:45:17.465" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:45:17.465" starttime="20170725 02:45:17.464"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:45:17.466" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:45:17.466" starttime="20170725 02:45:17.465"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:45:17.641" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:45:17.641" starttime="20170725 02:45:17.467"></status>
</kw>
<msg timestamp="20170725 02:45:17.642" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:45:17.642" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:17.642" starttime="20170725 02:45:17.466"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:45:17.642" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:17.642" starttime="20170725 02:45:17.642"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:17.643" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:17.643" starttime="20170725 02:45:17.643"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:17.643" starttime="20170725 02:45:17.461"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:17.643" starttime="20170725 02:45:17.461"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:17.643" starttime="20170725 02:45:17.460"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:45:17.644" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:45:17.644" starttime="20170725 02:45:17.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:17.645" starttime="20170725 02:45:17.644"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:45:17.708" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:45:17.708" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:17.708" starttime="20170725 02:45:17.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:17.708" starttime="20170725 02:45:17.708"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:45:17.709" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:45:17.709" starttime="20170725 02:45:17.709"></status>
</kw>
<msg timestamp="20170725 02:45:17.709" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:17.709" starttime="20170725 02:45:17.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:17.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:17.710" starttime="20170725 02:45:17.709"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:45:17.710" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:45:17.710" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:45:17.711" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:45:17.711" starttime="20170725 02:45:17.710"></status>
</kw>
<msg timestamp="20170725 02:45:17.711" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:45:17.711" starttime="20170725 02:45:17.459"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:17.711" starttime="20170725 02:45:17.458"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:45:17.715" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:45:17.715" starttime="20170725 02:45:17.715"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:45:17.716" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:45:17.716" starttime="20170725 02:45:17.716"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:45:17.717" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:45:17.717" starttime="20170725 02:45:17.716"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:45:17.717" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:45:17.717" starttime="20170725 02:45:17.717"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:45:17.999" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:45:17.999" starttime="20170725 02:45:17.718"></status>
</kw>
<msg timestamp="20170725 02:45:17.999" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:45:17.999" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:18.000" starttime="20170725 02:45:17.718"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:45:18.000" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:18.001" starttime="20170725 02:45:18.000"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:18.001" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:18.001" starttime="20170725 02:45:18.001"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:18.001" starttime="20170725 02:45:17.714"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:18.002" starttime="20170725 02:45:17.714"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:18.002" starttime="20170725 02:45:17.713"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:45:18.002" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:45:18.002" starttime="20170725 02:45:18.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:18.003" starttime="20170725 02:45:18.003"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:45:18.112" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:45:18.112" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:18.112" starttime="20170725 02:45:18.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:18.113" starttime="20170725 02:45:18.112"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:45:18.113" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:45:18.113" starttime="20170725 02:45:18.113"></status>
</kw>
<msg timestamp="20170725 02:45:18.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:18.113" starttime="20170725 02:45:17.712"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:18.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:18.114" starttime="20170725 02:45:18.114"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:45:18.115" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:45:18.115" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:45:18.115" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:45:18.115" starttime="20170725 02:45:18.114"></status>
</kw>
<msg timestamp="20170725 02:45:18.115" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:45:18.115" starttime="20170725 02:45:17.712"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:18.115" starttime="20170725 02:45:17.711"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:45:18.119" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:45:18.120" starttime="20170725 02:45:18.119"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:45:18.120" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:45:18.120" starttime="20170725 02:45:18.120"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:45:18.121" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:45:18.121" starttime="20170725 02:45:18.121"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:45:18.122" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:45:18.122" starttime="20170725 02:45:18.121"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:45:18.316" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:45:18.316" starttime="20170725 02:45:18.122"></status>
</kw>
<msg timestamp="20170725 02:45:18.316" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:45:18.316" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:18.316" starttime="20170725 02:45:18.122"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:45:18.317" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:18.317" starttime="20170725 02:45:18.317"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:18.318" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:18.318" starttime="20170725 02:45:18.317"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:18.318" starttime="20170725 02:45:18.118"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:18.318" starttime="20170725 02:45:18.118"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:18.318" starttime="20170725 02:45:18.117"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:45:18.319" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:45:18.319" starttime="20170725 02:45:18.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:18.319" starttime="20170725 02:45:18.319"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:45:18.402" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:45:18.402" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:18.402" starttime="20170725 02:45:18.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:18.402" starttime="20170725 02:45:18.402"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:45:18.403" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:45:18.403" starttime="20170725 02:45:18.403"></status>
</kw>
<msg timestamp="20170725 02:45:18.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:18.403" starttime="20170725 02:45:18.117"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:18.404" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:18.404" starttime="20170725 02:45:18.403"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:45:18.404" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:45:18.404" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:45:18.405" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:45:18.405" starttime="20170725 02:45:18.404"></status>
</kw>
<msg timestamp="20170725 02:45:18.405" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:45:18.405" starttime="20170725 02:45:18.116"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:18.405" starttime="20170725 02:45:18.116"></status>
</kw>
<msg timestamp="20170725 02:45:18.406" level="FAIL">
#(UTC) 2017/07/25 02:45:18.405353 -   10.949489 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:45:18.406" starttime="20170725 02:45:17.457"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:45:28.412" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:45:28.412" starttime="20170725 02:45:28.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:45:28.413" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:45:28.413" starttime="20170725 02:45:28.413"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:45:28.414" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:45:28.414" starttime="20170725 02:45:28.413"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:45:28.414" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:45:28.414" starttime="20170725 02:45:28.414"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:45:28.607" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:45:28.607" starttime="20170725 02:45:28.415"></status>
</kw>
<msg timestamp="20170725 02:45:28.607" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:45:28.607" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:28.608" starttime="20170725 02:45:28.415"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:45:28.608" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:28.608" starttime="20170725 02:45:28.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:28.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:28.609" starttime="20170725 02:45:28.608"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:28.609" starttime="20170725 02:45:28.411"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:28.609" starttime="20170725 02:45:28.410"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:28.609" starttime="20170725 02:45:28.410"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:45:28.610" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:45:28.610" starttime="20170725 02:45:28.609"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:28.611" starttime="20170725 02:45:28.610"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:45:28.675" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:45:28.675" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:28.675" starttime="20170725 02:45:28.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:28.676" starttime="20170725 02:45:28.676"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:45:28.676" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:45:28.677" starttime="20170725 02:45:28.676"></status>
</kw>
<msg timestamp="20170725 02:45:28.677" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:28.677" starttime="20170725 02:45:28.409"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:28.677" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:28.677" starttime="20170725 02:45:28.677"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:45:28.678" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:45:28.678" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:45:28.678" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:45:28.678" starttime="20170725 02:45:28.678"></status>
</kw>
<msg timestamp="20170725 02:45:28.678" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:45:28.679" starttime="20170725 02:45:28.408"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:28.679" starttime="20170725 02:45:28.408"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:45:28.683" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:45:28.683" starttime="20170725 02:45:28.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:45:28.684" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:45:28.684" starttime="20170725 02:45:28.684"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:45:28.685" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:45:28.685" starttime="20170725 02:45:28.685"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:45:28.686" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:45:28.686" starttime="20170725 02:45:28.686"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:45:28.865" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:45:28.865" starttime="20170725 02:45:28.687"></status>
</kw>
<msg timestamp="20170725 02:45:28.865" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:45:28.865" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:28.865" starttime="20170725 02:45:28.687"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:45:28.866" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:28.866" starttime="20170725 02:45:28.866"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:28.867" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:28.867" starttime="20170725 02:45:28.866"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:28.867" starttime="20170725 02:45:28.682"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:28.867" starttime="20170725 02:45:28.681"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:28.867" starttime="20170725 02:45:28.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:45:28.868" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:45:28.868" starttime="20170725 02:45:28.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:28.868" starttime="20170725 02:45:28.868"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:45:28.934" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:45:28.934" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:28.934" starttime="20170725 02:45:28.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:28.935" starttime="20170725 02:45:28.935"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:45:28.936" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:45:28.936" starttime="20170725 02:45:28.935"></status>
</kw>
<msg timestamp="20170725 02:45:28.936" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:28.936" starttime="20170725 02:45:28.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:28.936" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:28.937" starttime="20170725 02:45:28.936"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:45:28.937" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:45:28.937" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:45:28.937" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:45:28.937" starttime="20170725 02:45:28.937"></status>
</kw>
<msg timestamp="20170725 02:45:28.938" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:45:28.938" starttime="20170725 02:45:28.679"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:28.938" starttime="20170725 02:45:28.679"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:45:28.942" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:45:28.942" starttime="20170725 02:45:28.941"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:45:28.943" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:45:28.943" starttime="20170725 02:45:28.943"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:45:28.943" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:45:28.944" starttime="20170725 02:45:28.943"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:45:28.944" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:45:28.944" starttime="20170725 02:45:28.944"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:45:29.207" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:45:29.207" starttime="20170725 02:45:28.945"></status>
</kw>
<msg timestamp="20170725 02:45:29.207" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:45:29.207" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:29.207" starttime="20170725 02:45:28.944"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:45:29.208" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:29.208" starttime="20170725 02:45:29.207"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:29.208" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:29.208" starttime="20170725 02:45:29.208"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:29.208" starttime="20170725 02:45:28.941"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:29.208" starttime="20170725 02:45:28.940"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:29.209" starttime="20170725 02:45:28.940"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:45:29.209" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:45:29.209" starttime="20170725 02:45:29.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:29.210" starttime="20170725 02:45:29.210"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:45:29.290" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:45:29.291" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:29.291" starttime="20170725 02:45:29.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:29.291" starttime="20170725 02:45:29.291"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:45:29.292" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:45:29.292" starttime="20170725 02:45:29.291"></status>
</kw>
<msg timestamp="20170725 02:45:29.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:29.292" starttime="20170725 02:45:28.939"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:29.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:29.293" starttime="20170725 02:45:29.292"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:45:29.293" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:45:29.293" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:45:29.293" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:45:29.293" starttime="20170725 02:45:29.293"></status>
</kw>
<msg timestamp="20170725 02:45:29.294" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:45:29.294" starttime="20170725 02:45:28.939"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:29.294" starttime="20170725 02:45:28.938"></status>
</kw>
<msg timestamp="20170725 02:45:29.295" level="FAIL">
#(UTC) 2017/07/25 02:45:29.294243 -   10.888890 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:45:29.295" starttime="20170725 02:45:28.406"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:45:39.302" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:45:39.303" starttime="20170725 02:45:39.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:45:39.304" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:45:39.304" starttime="20170725 02:45:39.304"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:45:39.305" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:45:39.305" starttime="20170725 02:45:39.304"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:45:39.305" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:45:39.305" starttime="20170725 02:45:39.305"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:45:39.488" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:45:39.488" starttime="20170725 02:45:39.306"></status>
</kw>
<msg timestamp="20170725 02:45:39.489" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:45:39.489" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:39.489" starttime="20170725 02:45:39.306"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:45:39.489" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:39.489" starttime="20170725 02:45:39.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:39.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:39.490" starttime="20170725 02:45:39.490"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:39.490" starttime="20170725 02:45:39.301"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:39.490" starttime="20170725 02:45:39.300"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:39.490" starttime="20170725 02:45:39.299"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:45:39.491" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:45:39.491" starttime="20170725 02:45:39.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:39.492" starttime="20170725 02:45:39.491"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:45:39.557" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:45:39.557" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:39.557" starttime="20170725 02:45:39.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:39.557" starttime="20170725 02:45:39.557"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:45:39.558" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:45:39.558" starttime="20170725 02:45:39.558"></status>
</kw>
<msg timestamp="20170725 02:45:39.558" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:39.558" starttime="20170725 02:45:39.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:39.559" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:39.559" starttime="20170725 02:45:39.558"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:45:39.559" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:45:39.559" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:45:39.560" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:45:39.560" starttime="20170725 02:45:39.559"></status>
</kw>
<msg timestamp="20170725 02:45:39.560" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:45:39.560" starttime="20170725 02:45:39.297"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:39.561" starttime="20170725 02:45:39.297"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:45:39.564" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:45:39.565" starttime="20170725 02:45:39.564"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:45:39.566" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:45:39.566" starttime="20170725 02:45:39.565"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:45:39.566" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:45:39.566" starttime="20170725 02:45:39.566"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:45:39.567" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:45:39.567" starttime="20170725 02:45:39.567"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:45:39.753" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:45:39.754" starttime="20170725 02:45:39.568"></status>
</kw>
<msg timestamp="20170725 02:45:39.754" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:45:39.754" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:39.754" starttime="20170725 02:45:39.567"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:45:39.754" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:39.755" starttime="20170725 02:45:39.754"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:39.755" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:39.755" starttime="20170725 02:45:39.755"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:39.755" starttime="20170725 02:45:39.564"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:39.755" starttime="20170725 02:45:39.563"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:39.756" starttime="20170725 02:45:39.563"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:45:39.756" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:45:39.756" starttime="20170725 02:45:39.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:39.757" starttime="20170725 02:45:39.757"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:45:39.943" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:45:39.943" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:39.943" starttime="20170725 02:45:39.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:39.944" starttime="20170725 02:45:39.943"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:45:39.944" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:45:39.944" starttime="20170725 02:45:39.944"></status>
</kw>
<msg timestamp="20170725 02:45:39.944" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:39.944" starttime="20170725 02:45:39.562"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:39.945" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:39.945" starttime="20170725 02:45:39.945"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:45:39.946" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:45:39.946" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:45:39.946" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:45:39.946" starttime="20170725 02:45:39.945"></status>
</kw>
<msg timestamp="20170725 02:45:39.946" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:45:39.946" starttime="20170725 02:45:39.561"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:39.946" starttime="20170725 02:45:39.561"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:45:39.950" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:45:39.954" starttime="20170725 02:45:39.950"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:45:39.954" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:45:39.955" starttime="20170725 02:45:39.954"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:45:39.955" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:45:39.955" starttime="20170725 02:45:39.955"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:45:39.956" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:45:39.956" starttime="20170725 02:45:39.955"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:45:40.174" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:45:40.174" starttime="20170725 02:45:39.957"></status>
</kw>
<msg timestamp="20170725 02:45:40.175" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:45:40.175" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:40.175" starttime="20170725 02:45:39.956"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:45:40.175" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:40.175" starttime="20170725 02:45:40.175"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:40.176" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:40.176" starttime="20170725 02:45:40.176"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:40.176" starttime="20170725 02:45:39.949"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:40.176" starttime="20170725 02:45:39.949"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:40.176" starttime="20170725 02:45:39.948"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:45:40.177" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:45:40.177" starttime="20170725 02:45:40.177"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:40.178" starttime="20170725 02:45:40.177"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:45:40.240" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:45:40.240" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:40.240" starttime="20170725 02:45:40.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:40.241" starttime="20170725 02:45:40.240"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:45:40.241" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:45:40.241" starttime="20170725 02:45:40.241"></status>
</kw>
<msg timestamp="20170725 02:45:40.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:40.242" starttime="20170725 02:45:39.948"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:40.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:40.242" starttime="20170725 02:45:40.242"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:45:40.243" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:45:40.243" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:45:40.243" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:45:40.243" starttime="20170725 02:45:40.242"></status>
</kw>
<msg timestamp="20170725 02:45:40.243" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:45:40.243" starttime="20170725 02:45:39.947"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:40.244" starttime="20170725 02:45:39.947"></status>
</kw>
<msg timestamp="20170725 02:45:40.244" level="FAIL">
#(UTC) 2017/07/25 02:45:40.243888 -   10.949645 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:45:40.244" starttime="20170725 02:45:39.295"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:45:50.250" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:45:50.251" starttime="20170725 02:45:50.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:45:50.251" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:45:50.251" starttime="20170725 02:45:50.251"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:45:50.252" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:45:50.252" starttime="20170725 02:45:50.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:45:50.253" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:45:50.253" starttime="20170725 02:45:50.252"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:45:50.446" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:45:50.446" starttime="20170725 02:45:50.253"></status>
</kw>
<msg timestamp="20170725 02:45:50.446" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:45:50.446" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:50.446" starttime="20170725 02:45:50.253"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:45:50.447" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:50.447" starttime="20170725 02:45:50.447"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:50.448" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:50.448" starttime="20170725 02:45:50.447"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:50.448" starttime="20170725 02:45:50.249"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:50.448" starttime="20170725 02:45:50.249"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:50.448" starttime="20170725 02:45:50.248"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:45:50.449" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:45:50.449" starttime="20170725 02:45:50.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:50.449" starttime="20170725 02:45:50.449"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:45:50.519" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:45:50.519" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:50.519" starttime="20170725 02:45:50.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:50.520" starttime="20170725 02:45:50.519"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:45:50.520" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:45:50.521" starttime="20170725 02:45:50.520"></status>
</kw>
<msg timestamp="20170725 02:45:50.521" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:50.521" starttime="20170725 02:45:50.247"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:50.522" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:50.522" starttime="20170725 02:45:50.521"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:45:50.523" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:45:50.523" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:45:50.523" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:45:50.523" starttime="20170725 02:45:50.522"></status>
</kw>
<msg timestamp="20170725 02:45:50.524" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:45:50.524" starttime="20170725 02:45:50.247"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:50.524" starttime="20170725 02:45:50.246"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:45:50.529" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:45:50.530" starttime="20170725 02:45:50.529"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:45:50.531" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:45:50.531" starttime="20170725 02:45:50.530"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:45:50.531" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:45:50.531" starttime="20170725 02:45:50.531"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:45:50.532" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:45:50.532" starttime="20170725 02:45:50.532"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:45:50.779" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:45:50.780" starttime="20170725 02:45:50.533"></status>
</kw>
<msg timestamp="20170725 02:45:50.780" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:45:50.780" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:50.780" starttime="20170725 02:45:50.532"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:45:50.780" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:50.781" starttime="20170725 02:45:50.780"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:50.781" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:50.781" starttime="20170725 02:45:50.781"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:50.781" starttime="20170725 02:45:50.528"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:50.782" starttime="20170725 02:45:50.528"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:50.782" starttime="20170725 02:45:50.527"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:45:50.782" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:45:50.782" starttime="20170725 02:45:50.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:50.783" starttime="20170725 02:45:50.783"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:45:50.851" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:45:50.851" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:50.851" starttime="20170725 02:45:50.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:50.852" starttime="20170725 02:45:50.851"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:45:50.852" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:45:50.852" starttime="20170725 02:45:50.852"></status>
</kw>
<msg timestamp="20170725 02:45:50.852" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:50.852" starttime="20170725 02:45:50.526"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:50.853" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:50.853" starttime="20170725 02:45:50.853"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:45:50.853" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:45:50.854" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:45:50.854" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:45:50.854" starttime="20170725 02:45:50.853"></status>
</kw>
<msg timestamp="20170725 02:45:50.854" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:45:50.854" starttime="20170725 02:45:50.525"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:50.854" starttime="20170725 02:45:50.524"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:45:50.858" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:45:50.859" starttime="20170725 02:45:50.858"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:45:50.859" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:45:50.859" starttime="20170725 02:45:50.859"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:45:50.860" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:45:50.860" starttime="20170725 02:45:50.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:45:50.861" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:45:50.861" starttime="20170725 02:45:50.860"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:45:51.040" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:45:51.040" starttime="20170725 02:45:50.862"></status>
</kw>
<msg timestamp="20170725 02:45:51.040" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:45:51.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:51.040" starttime="20170725 02:45:50.861"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:45:51.041" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:51.041" starttime="20170725 02:45:51.040"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:51.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:51.042" starttime="20170725 02:45:51.041"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:51.042" starttime="20170725 02:45:50.857"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:51.042" starttime="20170725 02:45:50.857"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:51.042" starttime="20170725 02:45:50.856"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:45:51.042" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:45:51.042" starttime="20170725 02:45:51.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:51.043" starttime="20170725 02:45:51.043"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:45:51.108" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:45:51.108" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:51.108" starttime="20170725 02:45:51.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:45:51.108" starttime="20170725 02:45:51.108"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:45:51.109" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:45:51.109" starttime="20170725 02:45:51.109"></status>
</kw>
<msg timestamp="20170725 02:45:51.109" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:45:51.109" starttime="20170725 02:45:50.855"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:45:51.110" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:45:51.110" starttime="20170725 02:45:51.109"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:45:51.110" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:45:51.111" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:45:51.111" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:45:51.111" starttime="20170725 02:45:51.110"></status>
</kw>
<msg timestamp="20170725 02:45:51.111" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:45:51.111" starttime="20170725 02:45:50.855"></status>
</kw>
<status status="PASS" endtime="20170725 02:45:51.111" starttime="20170725 02:45:50.854"></status>
</kw>
<msg timestamp="20170725 02:45:51.112" level="FAIL">
#(UTC) 2017/07/25 02:45:51.111590 -   10.867702 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:45:51.112" starttime="20170725 02:45:50.245"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:01.118" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:01.119" starttime="20170725 02:46:01.118"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:01.120" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:01.120" starttime="20170725 02:46:01.119"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:01.120" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:01.120" starttime="20170725 02:46:01.120"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:01.121" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:01.121" starttime="20170725 02:46:01.121"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:01.383" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:01.383" starttime="20170725 02:46:01.122"></status>
</kw>
<msg timestamp="20170725 02:46:01.383" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:01.383" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:01.383" starttime="20170725 02:46:01.121"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:01.384" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:01.384" starttime="20170725 02:46:01.384"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:01.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:01.385" starttime="20170725 02:46:01.384"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:01.385" starttime="20170725 02:46:01.117"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:01.385" starttime="20170725 02:46:01.117"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:01.385" starttime="20170725 02:46:01.116"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:01.386" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:46:01.386" starttime="20170725 02:46:01.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:01.386" starttime="20170725 02:46:01.386"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:01.458" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:46:01.458" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:01.458" starttime="20170725 02:46:01.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:01.459" starttime="20170725 02:46:01.458"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:01.459" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:01.459" starttime="20170725 02:46:01.459"></status>
</kw>
<msg timestamp="20170725 02:46:01.459" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:01.459" starttime="20170725 02:46:01.116"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:01.460" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:01.460" starttime="20170725 02:46:01.460"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:01.461" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:01.461" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:01.461" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:46:01.461" starttime="20170725 02:46:01.460"></status>
</kw>
<msg timestamp="20170725 02:46:01.461" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:46:01.461" starttime="20170725 02:46:01.115"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:01.462" starttime="20170725 02:46:01.115"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:01.466" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:01.466" starttime="20170725 02:46:01.465"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:01.467" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:01.467" starttime="20170725 02:46:01.467"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:01.467" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:01.468" starttime="20170725 02:46:01.467"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:01.468" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:01.468" starttime="20170725 02:46:01.468"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:01.679" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:01.680" starttime="20170725 02:46:01.469"></status>
</kw>
<msg timestamp="20170725 02:46:01.680" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:01.680" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:01.680" starttime="20170725 02:46:01.468"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:01.680" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:01.681" starttime="20170725 02:46:01.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:01.681" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:01.681" starttime="20170725 02:46:01.681"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:01.681" starttime="20170725 02:46:01.465"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:01.682" starttime="20170725 02:46:01.464"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:01.682" starttime="20170725 02:46:01.464"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:01.682" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:46:01.682" starttime="20170725 02:46:01.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:01.683" starttime="20170725 02:46:01.683"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:01.748" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:46:01.749" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:01.749" starttime="20170725 02:46:01.683"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:01.749" starttime="20170725 02:46:01.749"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:01.750" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:01.750" starttime="20170725 02:46:01.750"></status>
</kw>
<msg timestamp="20170725 02:46:01.750" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:01.750" starttime="20170725 02:46:01.463"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:01.751" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:01.751" starttime="20170725 02:46:01.750"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:01.751" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:01.751" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:01.751" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:46:01.752" starttime="20170725 02:46:01.751"></status>
</kw>
<msg timestamp="20170725 02:46:01.752" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:46:01.752" starttime="20170725 02:46:01.462"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:01.752" starttime="20170725 02:46:01.462"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:01.756" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:01.756" starttime="20170725 02:46:01.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:01.757" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:01.757" starttime="20170725 02:46:01.757"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:01.758" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:01.758" starttime="20170725 02:46:01.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:01.758" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:01.758" starttime="20170725 02:46:01.758"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:01.943" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:01.943" starttime="20170725 02:46:01.759"></status>
</kw>
<msg timestamp="20170725 02:46:01.943" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:01.943" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:01.943" starttime="20170725 02:46:01.759"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:01.944" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:01.944" starttime="20170725 02:46:01.943"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:01.945" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:01.945" starttime="20170725 02:46:01.944"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:01.945" starttime="20170725 02:46:01.755"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:01.945" starttime="20170725 02:46:01.754"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:01.945" starttime="20170725 02:46:01.754"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:01.946" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:46:01.946" starttime="20170725 02:46:01.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:01.947" starttime="20170725 02:46:01.947"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:02.011" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:46:02.011" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:02.011" starttime="20170725 02:46:01.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:02.012" starttime="20170725 02:46:02.011"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:02.012" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:02.012" starttime="20170725 02:46:02.012"></status>
</kw>
<msg timestamp="20170725 02:46:02.012" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:02.012" starttime="20170725 02:46:01.753"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:02.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:02.013" starttime="20170725 02:46:02.013"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:02.014" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:02.014" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:02.014" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:46:02.014" starttime="20170725 02:46:02.013"></status>
</kw>
<msg timestamp="20170725 02:46:02.014" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:46:02.014" starttime="20170725 02:46:01.753"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:02.014" starttime="20170725 02:46:01.752"></status>
</kw>
<msg timestamp="20170725 02:46:02.015" level="FAIL">
#(UTC) 2017/07/25 02:46:02.014700 -   10.903110 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:46:02.015" starttime="20170725 02:46:01.113"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:12.021" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:12.022" starttime="20170725 02:46:12.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:12.022" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:12.022" starttime="20170725 02:46:12.022"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:12.023" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:12.023" starttime="20170725 02:46:12.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:12.024" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:12.024" starttime="20170725 02:46:12.023"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:12.287" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:12.287" starttime="20170725 02:46:12.025"></status>
</kw>
<msg timestamp="20170725 02:46:12.287" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:12.287" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.287" starttime="20170725 02:46:12.024"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:12.288" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.288" starttime="20170725 02:46:12.287"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:12.288" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.288" starttime="20170725 02:46:12.288"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:12.289" starttime="20170725 02:46:12.020"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:12.289" starttime="20170725 02:46:12.020"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:12.289" starttime="20170725 02:46:12.019"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:12.289" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:46:12.289" starttime="20170725 02:46:12.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:12.290" starttime="20170725 02:46:12.290"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:12.353" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:46:12.353" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.353" starttime="20170725 02:46:12.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:12.353" starttime="20170725 02:46:12.353"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:12.354" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:12.354" starttime="20170725 02:46:12.354"></status>
</kw>
<msg timestamp="20170725 02:46:12.354" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.354" starttime="20170725 02:46:12.018"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:12.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.355" starttime="20170725 02:46:12.354"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:12.355" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:12.355" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:12.356" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:46:12.356" starttime="20170725 02:46:12.355"></status>
</kw>
<msg timestamp="20170725 02:46:12.356" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:46:12.356" starttime="20170725 02:46:12.018"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:12.356" starttime="20170725 02:46:12.017"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:12.360" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:12.361" starttime="20170725 02:46:12.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:12.361" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:12.361" starttime="20170725 02:46:12.361"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:12.362" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:12.362" starttime="20170725 02:46:12.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:12.363" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:12.363" starttime="20170725 02:46:12.363"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:12.539" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:12.540" starttime="20170725 02:46:12.365"></status>
</kw>
<msg timestamp="20170725 02:46:12.540" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:12.540" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.540" starttime="20170725 02:46:12.364"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:12.540" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.541" starttime="20170725 02:46:12.540"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:12.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.541" starttime="20170725 02:46:12.541"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:12.541" starttime="20170725 02:46:12.359"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:12.541" starttime="20170725 02:46:12.359"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:12.542" starttime="20170725 02:46:12.358"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:12.542" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:46:12.542" starttime="20170725 02:46:12.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:12.543" starttime="20170725 02:46:12.543"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:12.611" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:46:12.612" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.612" starttime="20170725 02:46:12.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:12.612" starttime="20170725 02:46:12.612"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:12.613" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:12.613" starttime="20170725 02:46:12.613"></status>
</kw>
<msg timestamp="20170725 02:46:12.613" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.613" starttime="20170725 02:46:12.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:12.614" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.614" starttime="20170725 02:46:12.613"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:12.614" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:12.614" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:12.615" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:46:12.615" starttime="20170725 02:46:12.614"></status>
</kw>
<msg timestamp="20170725 02:46:12.615" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:46:12.615" starttime="20170725 02:46:12.357"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:12.615" starttime="20170725 02:46:12.356"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:12.619" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:12.620" starttime="20170725 02:46:12.619"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:12.620" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:12.620" starttime="20170725 02:46:12.620"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:12.621" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:12.621" starttime="20170725 02:46:12.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:12.621" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:12.621" starttime="20170725 02:46:12.621"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:12.799" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:12.799" starttime="20170725 02:46:12.622"></status>
</kw>
<msg timestamp="20170725 02:46:12.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:12.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.799" starttime="20170725 02:46:12.622"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:12.800" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.800" starttime="20170725 02:46:12.799"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:12.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.800" starttime="20170725 02:46:12.800"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:12.800" starttime="20170725 02:46:12.618"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:12.801" starttime="20170725 02:46:12.617"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:12.801" starttime="20170725 02:46:12.617"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:12.801" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:46:12.801" starttime="20170725 02:46:12.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:12.802" starttime="20170725 02:46:12.802"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:12.888" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:46:12.888" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.889" starttime="20170725 02:46:12.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:12.889" starttime="20170725 02:46:12.889"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:12.890" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:12.890" starttime="20170725 02:46:12.889"></status>
</kw>
<msg timestamp="20170725 02:46:12.890" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.890" starttime="20170725 02:46:12.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:12.891" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:12.891" starttime="20170725 02:46:12.890"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:12.891" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:12.891" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:12.891" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:46:12.891" starttime="20170725 02:46:12.891"></status>
</kw>
<msg timestamp="20170725 02:46:12.892" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:46:12.892" starttime="20170725 02:46:12.616"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:12.892" starttime="20170725 02:46:12.615"></status>
</kw>
<msg timestamp="20170725 02:46:12.893" level="FAIL">
#(UTC) 2017/07/25 02:46:12.892335 -   10.877635 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:46:12.893" starttime="20170725 02:46:12.016"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:22.898" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:22.899" starttime="20170725 02:46:22.898"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:22.900" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:22.900" starttime="20170725 02:46:22.899"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:22.900" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:22.900" starttime="20170725 02:46:22.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:22.901" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:22.901" starttime="20170725 02:46:22.901"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:23.083" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:23.083" starttime="20170725 02:46:22.902"></status>
</kw>
<msg timestamp="20170725 02:46:23.083" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:23.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.083" starttime="20170725 02:46:22.901"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:23.084" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.084" starttime="20170725 02:46:23.083"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:23.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.085" starttime="20170725 02:46:23.084"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:23.085" starttime="20170725 02:46:22.897"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:23.085" starttime="20170725 02:46:22.897"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:23.085" starttime="20170725 02:46:22.896"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:23.085" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:46:23.085" starttime="20170725 02:46:23.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:23.086" starttime="20170725 02:46:23.086"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:23.173" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:46:23.173" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.173" starttime="20170725 02:46:23.086"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:23.174" starttime="20170725 02:46:23.173"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:23.174" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:23.174" starttime="20170725 02:46:23.174"></status>
</kw>
<msg timestamp="20170725 02:46:23.174" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.174" starttime="20170725 02:46:22.896"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:23.175" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.175" starttime="20170725 02:46:23.175"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:23.176" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:23.176" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:23.176" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:46:23.176" starttime="20170725 02:46:23.175"></status>
</kw>
<msg timestamp="20170725 02:46:23.176" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:46:23.176" starttime="20170725 02:46:22.895"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:23.176" starttime="20170725 02:46:22.895"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:23.180" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:23.181" starttime="20170725 02:46:23.180"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:23.182" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:23.182" starttime="20170725 02:46:23.182"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:23.183" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:23.183" starttime="20170725 02:46:23.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:23.184" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:23.184" starttime="20170725 02:46:23.184"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:23.394" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:23.394" starttime="20170725 02:46:23.185"></status>
</kw>
<msg timestamp="20170725 02:46:23.394" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:23.394" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.394" starttime="20170725 02:46:23.185"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:23.395" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.395" starttime="20170725 02:46:23.394"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:23.395" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.395" starttime="20170725 02:46:23.395"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:23.395" starttime="20170725 02:46:23.179"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:23.395" starttime="20170725 02:46:23.179"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:23.396" starttime="20170725 02:46:23.178"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:23.396" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:46:23.396" starttime="20170725 02:46:23.396"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:23.397" starttime="20170725 02:46:23.397"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:23.462" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:46:23.462" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.462" starttime="20170725 02:46:23.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:23.463" starttime="20170725 02:46:23.463"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:23.463" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:23.463" starttime="20170725 02:46:23.463"></status>
</kw>
<msg timestamp="20170725 02:46:23.464" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.464" starttime="20170725 02:46:23.178"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:23.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.464" starttime="20170725 02:46:23.464"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:23.465" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:23.465" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:23.465" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:46:23.465" starttime="20170725 02:46:23.465"></status>
</kw>
<msg timestamp="20170725 02:46:23.465" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:46:23.465" starttime="20170725 02:46:23.177"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:23.466" starttime="20170725 02:46:23.177"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:23.469" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:23.473" starttime="20170725 02:46:23.469"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:23.474" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:23.474" starttime="20170725 02:46:23.474"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:23.475" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:23.475" starttime="20170725 02:46:23.474"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:23.475" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:23.475" starttime="20170725 02:46:23.475"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:23.680" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:23.680" starttime="20170725 02:46:23.476"></status>
</kw>
<msg timestamp="20170725 02:46:23.680" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:23.680" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.680" starttime="20170725 02:46:23.476"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:23.681" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.681" starttime="20170725 02:46:23.681"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:23.682" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.682" starttime="20170725 02:46:23.681"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:23.682" starttime="20170725 02:46:23.468"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:23.682" starttime="20170725 02:46:23.468"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:23.682" starttime="20170725 02:46:23.467"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:23.683" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:46:23.683" starttime="20170725 02:46:23.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:23.683" starttime="20170725 02:46:23.683"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:23.749" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:46:23.749" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.749" starttime="20170725 02:46:23.684"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:23.750" starttime="20170725 02:46:23.750"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:23.750" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:23.751" starttime="20170725 02:46:23.750"></status>
</kw>
<msg timestamp="20170725 02:46:23.751" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.751" starttime="20170725 02:46:23.467"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:23.751" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:23.751" starttime="20170725 02:46:23.751"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:23.752" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:23.752" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:23.752" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:46:23.752" starttime="20170725 02:46:23.752"></status>
</kw>
<msg timestamp="20170725 02:46:23.752" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:46:23.753" starttime="20170725 02:46:23.466"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:23.753" starttime="20170725 02:46:23.466"></status>
</kw>
<msg timestamp="20170725 02:46:23.753" level="FAIL">
#(UTC) 2017/07/25 02:46:23.753028 -   10.860693 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:46:23.754" starttime="20170725 02:46:22.893"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:33.759" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:33.760" starttime="20170725 02:46:33.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:33.760" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:33.761" starttime="20170725 02:46:33.760"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:33.761" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:33.761" starttime="20170725 02:46:33.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:33.762" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:33.762" starttime="20170725 02:46:33.761"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:33.937" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:33.937" starttime="20170725 02:46:33.763"></status>
</kw>
<msg timestamp="20170725 02:46:33.937" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:33.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:33.937" starttime="20170725 02:46:33.762"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:33.938" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:33.938" starttime="20170725 02:46:33.938"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:33.939" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:33.939" starttime="20170725 02:46:33.938"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:33.939" starttime="20170725 02:46:33.758"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:33.939" starttime="20170725 02:46:33.758"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:33.939" starttime="20170725 02:46:33.757"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:33.940" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:46:33.940" starttime="20170725 02:46:33.939"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:33.940" starttime="20170725 02:46:33.940"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:34.020" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:46:34.020" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:34.020" starttime="20170725 02:46:33.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:34.020" starttime="20170725 02:46:34.020"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:34.021" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:34.021" starttime="20170725 02:46:34.021"></status>
</kw>
<msg timestamp="20170725 02:46:34.021" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:34.021" starttime="20170725 02:46:33.757"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:34.022" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:34.022" starttime="20170725 02:46:34.021"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:34.022" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:34.022" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:34.023" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:46:34.023" starttime="20170725 02:46:34.022"></status>
</kw>
<msg timestamp="20170725 02:46:34.023" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:46:34.023" starttime="20170725 02:46:33.756"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:34.023" starttime="20170725 02:46:33.756"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:34.027" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:34.028" starttime="20170725 02:46:34.027"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:34.028" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:34.028" starttime="20170725 02:46:34.028"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:34.029" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:34.029" starttime="20170725 02:46:34.029"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:34.030" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:34.030" starttime="20170725 02:46:34.029"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:34.212" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:34.212" starttime="20170725 02:46:34.030"></status>
</kw>
<msg timestamp="20170725 02:46:34.212" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:34.213" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:34.213" starttime="20170725 02:46:34.030"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:34.213" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:34.213" starttime="20170725 02:46:34.213"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:34.214" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:34.214" starttime="20170725 02:46:34.214"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:34.214" starttime="20170725 02:46:34.026"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:34.214" starttime="20170725 02:46:34.026"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:34.214" starttime="20170725 02:46:34.025"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:34.215" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:46:34.215" starttime="20170725 02:46:34.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:34.216" starttime="20170725 02:46:34.215"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:34.281" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:46:34.281" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:34.281" starttime="20170725 02:46:34.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:34.282" starttime="20170725 02:46:34.281"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:34.282" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:34.282" starttime="20170725 02:46:34.282"></status>
</kw>
<msg timestamp="20170725 02:46:34.282" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:34.282" starttime="20170725 02:46:34.025"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:34.283" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:34.283" starttime="20170725 02:46:34.283"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:34.284" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:34.284" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:34.284" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:46:34.284" starttime="20170725 02:46:34.284"></status>
</kw>
<msg timestamp="20170725 02:46:34.284" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:46:34.284" starttime="20170725 02:46:34.024"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:34.284" starttime="20170725 02:46:34.023"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:34.288" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:34.289" starttime="20170725 02:46:34.288"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:34.290" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:34.290" starttime="20170725 02:46:34.289"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:34.290" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:34.290" starttime="20170725 02:46:34.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:34.291" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:34.291" starttime="20170725 02:46:34.291"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:34.563" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:34.563" starttime="20170725 02:46:34.292"></status>
</kw>
<msg timestamp="20170725 02:46:34.563" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:34.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:34.563" starttime="20170725 02:46:34.291"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:34.564" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:34.564" starttime="20170725 02:46:34.563"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:34.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:34.564" starttime="20170725 02:46:34.564"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:34.565" starttime="20170725 02:46:34.287"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:34.565" starttime="20170725 02:46:34.287"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:34.565" starttime="20170725 02:46:34.286"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:34.565" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:46:34.565" starttime="20170725 02:46:34.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:34.566" starttime="20170725 02:46:34.566"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:34.644" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:46:34.644" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:34.644" starttime="20170725 02:46:34.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:34.645" starttime="20170725 02:46:34.645"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:34.645" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:34.646" starttime="20170725 02:46:34.645"></status>
</kw>
<msg timestamp="20170725 02:46:34.646" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:34.646" starttime="20170725 02:46:34.286"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:34.646" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:34.646" starttime="20170725 02:46:34.646"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:34.647" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:34.647" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:34.647" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:46:34.647" starttime="20170725 02:46:34.647"></status>
</kw>
<msg timestamp="20170725 02:46:34.647" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:46:34.647" starttime="20170725 02:46:34.285"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:34.648" starttime="20170725 02:46:34.285"></status>
</kw>
<msg timestamp="20170725 02:46:34.648" level="FAIL">
#(UTC) 2017/07/25 02:46:34.647955 -   10.894927 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:46:34.649" starttime="20170725 02:46:33.754"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:44.655" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:44.655" starttime="20170725 02:46:44.654"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:44.656" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:44.656" starttime="20170725 02:46:44.656"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:44.657" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:44.657" starttime="20170725 02:46:44.656"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:44.657" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:44.657" starttime="20170725 02:46:44.657"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:44.834" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:44.834" starttime="20170725 02:46:44.658"></status>
</kw>
<msg timestamp="20170725 02:46:44.834" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:44.834" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:44.834" starttime="20170725 02:46:44.658"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:44.835" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:44.835" starttime="20170725 02:46:44.835"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:44.836" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:44.836" starttime="20170725 02:46:44.835"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:44.836" starttime="20170725 02:46:44.654"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:44.836" starttime="20170725 02:46:44.653"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:44.836" starttime="20170725 02:46:44.653"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:44.837" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:46:44.837" starttime="20170725 02:46:44.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:44.838" starttime="20170725 02:46:44.837"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:44.900" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:46:44.901" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:44.901" starttime="20170725 02:46:44.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:44.901" starttime="20170725 02:46:44.901"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:44.902" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:44.902" starttime="20170725 02:46:44.902"></status>
</kw>
<msg timestamp="20170725 02:46:44.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:44.902" starttime="20170725 02:46:44.652"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:44.903" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:44.903" starttime="20170725 02:46:44.902"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:44.903" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:44.903" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:44.904" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:46:44.904" starttime="20170725 02:46:44.903"></status>
</kw>
<msg timestamp="20170725 02:46:44.904" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:46:44.904" starttime="20170725 02:46:44.651"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:44.904" starttime="20170725 02:46:44.651"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:44.908" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:44.909" starttime="20170725 02:46:44.908"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:44.909" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:44.909" starttime="20170725 02:46:44.909"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:44.910" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:44.910" starttime="20170725 02:46:44.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:44.911" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:44.911" starttime="20170725 02:46:44.910"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:45.119" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:45.120" starttime="20170725 02:46:44.911"></status>
</kw>
<msg timestamp="20170725 02:46:45.120" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:45.120" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:45.120" starttime="20170725 02:46:44.911"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:45.120" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:45.121" starttime="20170725 02:46:45.120"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:45.121" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:45.121" starttime="20170725 02:46:45.121"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:45.121" starttime="20170725 02:46:44.907"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:45.121" starttime="20170725 02:46:44.907"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:45.122" starttime="20170725 02:46:44.906"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:45.122" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:46:45.122" starttime="20170725 02:46:45.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:45.123" starttime="20170725 02:46:45.123"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:45.215" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:46:45.215" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:45.215" starttime="20170725 02:46:45.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:45.216" starttime="20170725 02:46:45.215"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:45.216" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:45.217" starttime="20170725 02:46:45.216"></status>
</kw>
<msg timestamp="20170725 02:46:45.217" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:45.217" starttime="20170725 02:46:44.905"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:45.218" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:45.218" starttime="20170725 02:46:45.217"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:45.219" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:45.219" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:45.219" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:46:45.219" starttime="20170725 02:46:45.218"></status>
</kw>
<msg timestamp="20170725 02:46:45.219" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:46:45.219" starttime="20170725 02:46:44.905"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:45.220" starttime="20170725 02:46:44.904"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:45.225" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:45.226" starttime="20170725 02:46:45.225"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:45.227" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:45.227" starttime="20170725 02:46:45.227"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:45.228" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:45.228" starttime="20170725 02:46:45.227"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:45.229" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:45.229" starttime="20170725 02:46:45.228"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:45.411" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:45.411" starttime="20170725 02:46:45.230"></status>
</kw>
<msg timestamp="20170725 02:46:45.411" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:45.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:45.411" starttime="20170725 02:46:45.229"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:45.412" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:45.412" starttime="20170725 02:46:45.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:45.412" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:45.413" starttime="20170725 02:46:45.412"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:45.413" starttime="20170725 02:46:45.224"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:45.413" starttime="20170725 02:46:45.223"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:45.413" starttime="20170725 02:46:45.222"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:45.414" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:46:45.414" starttime="20170725 02:46:45.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:45.414" starttime="20170725 02:46:45.414"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:45.480" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:46:45.480" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:45.480" starttime="20170725 02:46:45.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:45.481" starttime="20170725 02:46:45.480"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:45.481" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:45.481" starttime="20170725 02:46:45.481"></status>
</kw>
<msg timestamp="20170725 02:46:45.481" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:45.481" starttime="20170725 02:46:45.221"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:45.482" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:45.482" starttime="20170725 02:46:45.482"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:45.483" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:45.483" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:45.483" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:46:45.483" starttime="20170725 02:46:45.482"></status>
</kw>
<msg timestamp="20170725 02:46:45.483" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:46:45.483" starttime="20170725 02:46:45.221"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:45.484" starttime="20170725 02:46:45.220"></status>
</kw>
<msg timestamp="20170725 02:46:45.484" level="FAIL">
#(UTC) 2017/07/25 02:46:45.483773 -   10.835818 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:46:45.484" starttime="20170725 02:46:44.649"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:55.490" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:55.491" starttime="20170725 02:46:55.490"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:55.492" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:55.492" starttime="20170725 02:46:55.492"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:55.493" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:55.493" starttime="20170725 02:46:55.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:55.493" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:55.493" starttime="20170725 02:46:55.493"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:55.698" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:55.698" starttime="20170725 02:46:55.494"></status>
</kw>
<msg timestamp="20170725 02:46:55.699" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:55.699" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:55.699" starttime="20170725 02:46:55.494"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:55.699" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:55.700" starttime="20170725 02:46:55.699"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:55.700" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:55.700" starttime="20170725 02:46:55.700"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:55.700" starttime="20170725 02:46:55.490"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:55.701" starttime="20170725 02:46:55.489"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:55.701" starttime="20170725 02:46:55.489"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:55.701" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:46:55.701" starttime="20170725 02:46:55.701"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:55.702" starttime="20170725 02:46:55.702"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:55.772" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:46:55.772" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:55.772" starttime="20170725 02:46:55.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:55.773" starttime="20170725 02:46:55.773"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:55.773" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:55.774" starttime="20170725 02:46:55.773"></status>
</kw>
<msg timestamp="20170725 02:46:55.774" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:55.774" starttime="20170725 02:46:55.488"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:55.774" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:55.774" starttime="20170725 02:46:55.774"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:55.775" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:55.775" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:55.775" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:46:55.775" starttime="20170725 02:46:55.775"></status>
</kw>
<msg timestamp="20170725 02:46:55.776" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:46:55.776" starttime="20170725 02:46:55.487"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:55.776" starttime="20170725 02:46:55.487"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:55.780" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:55.780" starttime="20170725 02:46:55.779"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:55.781" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:55.781" starttime="20170725 02:46:55.780"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:55.781" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:55.781" starttime="20170725 02:46:55.781"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:55.782" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:55.782" starttime="20170725 02:46:55.782"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:55.961" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:55.961" starttime="20170725 02:46:55.783"></status>
</kw>
<msg timestamp="20170725 02:46:55.961" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:55.962" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:55.962" starttime="20170725 02:46:55.783"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:55.962" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:55.962" starttime="20170725 02:46:55.962"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:55.963" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:55.963" starttime="20170725 02:46:55.963"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:55.963" starttime="20170725 02:46:55.779"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:55.963" starttime="20170725 02:46:55.778"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:55.964" starttime="20170725 02:46:55.778"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:55.964" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:46:55.964" starttime="20170725 02:46:55.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:55.965" starttime="20170725 02:46:55.965"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:56.033" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:46:56.033" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:56.034" starttime="20170725 02:46:55.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:56.034" starttime="20170725 02:46:56.034"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:56.035" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:56.035" starttime="20170725 02:46:56.034"></status>
</kw>
<msg timestamp="20170725 02:46:56.035" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:56.035" starttime="20170725 02:46:55.777"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:56.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:56.036" starttime="20170725 02:46:56.035"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:56.036" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:56.036" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:56.036" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:46:56.036" starttime="20170725 02:46:56.036"></status>
</kw>
<msg timestamp="20170725 02:46:56.037" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:46:56.037" starttime="20170725 02:46:55.777"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:56.037" starttime="20170725 02:46:55.776"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:46:56.040" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:46:56.041" starttime="20170725 02:46:56.040"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:46:56.042" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:46:56.042" starttime="20170725 02:46:56.041"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:46:56.042" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:46:56.043" starttime="20170725 02:46:56.042"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:46:56.043" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:46:56.043" starttime="20170725 02:46:56.043"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:46:56.276" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:46:56.277" starttime="20170725 02:46:56.044"></status>
</kw>
<msg timestamp="20170725 02:46:56.277" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:46:56.277" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:56.277" starttime="20170725 02:46:56.043"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:46:56.277" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:56.277" starttime="20170725 02:46:56.277"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:56.278" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:56.278" starttime="20170725 02:46:56.278"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:56.278" starttime="20170725 02:46:56.040"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:56.278" starttime="20170725 02:46:56.039"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:56.278" starttime="20170725 02:46:56.039"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:46:56.279" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:46:56.279" starttime="20170725 02:46:56.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:56.280" starttime="20170725 02:46:56.279"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:46:56.349" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:46:56.349" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:56.349" starttime="20170725 02:46:56.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:46:56.350" starttime="20170725 02:46:56.350"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:46:56.350" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:46:56.351" starttime="20170725 02:46:56.350"></status>
</kw>
<msg timestamp="20170725 02:46:56.351" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:46:56.351" starttime="20170725 02:46:56.038"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:46:56.351" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:46:56.351" starttime="20170725 02:46:56.351"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:46:56.352" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:46:56.352" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:46:56.352" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:46:56.352" starttime="20170725 02:46:56.352"></status>
</kw>
<msg timestamp="20170725 02:46:56.352" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:46:56.353" starttime="20170725 02:46:56.037"></status>
</kw>
<status status="PASS" endtime="20170725 02:46:56.353" starttime="20170725 02:46:56.037"></status>
</kw>
<msg timestamp="20170725 02:46:56.353" level="FAIL">
#(UTC) 2017/07/25 02:46:56.353006 -   10.869233 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:46:56.354" starttime="20170725 02:46:55.485"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:47:06.359" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:47:06.360" starttime="20170725 02:47:06.359"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:47:06.361" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:47:06.361" starttime="20170725 02:47:06.361"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:47:06.362" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:47:06.362" starttime="20170725 02:47:06.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:47:06.363" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:47:06.363" starttime="20170725 02:47:06.363"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:47:06.543" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:47:06.544" starttime="20170725 02:47:06.365"></status>
</kw>
<msg timestamp="20170725 02:47:06.544" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:47:06.544" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:06.544" starttime="20170725 02:47:06.364"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:47:06.544" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:06.545" starttime="20170725 02:47:06.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:06.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:06.545" starttime="20170725 02:47:06.545"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:06.545" starttime="20170725 02:47:06.359"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:06.545" starttime="20170725 02:47:06.358"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:06.546" starttime="20170725 02:47:06.357"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:47:06.546" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:47:06.546" starttime="20170725 02:47:06.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:06.547" starttime="20170725 02:47:06.546"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:47:06.611" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:47:06.611" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:06.612" starttime="20170725 02:47:06.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:06.612" starttime="20170725 02:47:06.612"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:47:06.613" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:47:06.613" starttime="20170725 02:47:06.612"></status>
</kw>
<msg timestamp="20170725 02:47:06.613" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:06.613" starttime="20170725 02:47:06.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:06.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:06.614" starttime="20170725 02:47:06.613"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:47:06.614" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:47:06.614" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:47:06.614" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:47:06.614" starttime="20170725 02:47:06.614"></status>
</kw>
<msg timestamp="20170725 02:47:06.615" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:47:06.615" starttime="20170725 02:47:06.356"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:06.615" starttime="20170725 02:47:06.356"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:47:06.619" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:47:06.620" starttime="20170725 02:47:06.619"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:47:06.621" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:47:06.621" starttime="20170725 02:47:06.621"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:47:06.622" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:47:06.622" starttime="20170725 02:47:06.621"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:47:06.623" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:47:06.623" starttime="20170725 02:47:06.622"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:47:06.842" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:47:06.842" starttime="20170725 02:47:06.624"></status>
</kw>
<msg timestamp="20170725 02:47:06.842" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:47:06.842" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:06.842" starttime="20170725 02:47:06.623"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:47:06.843" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:06.843" starttime="20170725 02:47:06.843"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:06.844" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:06.844" starttime="20170725 02:47:06.843"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:06.844" starttime="20170725 02:47:06.618"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:06.844" starttime="20170725 02:47:06.617"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:06.844" starttime="20170725 02:47:06.617"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:47:06.845" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:47:06.845" starttime="20170725 02:47:06.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:06.846" starttime="20170725 02:47:06.845"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:47:07.009" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:47:07.009" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:07.009" starttime="20170725 02:47:06.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:07.010" starttime="20170725 02:47:07.009"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:47:07.010" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:47:07.010" starttime="20170725 02:47:07.010"></status>
</kw>
<msg timestamp="20170725 02:47:07.010" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:07.010" starttime="20170725 02:47:06.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:07.011" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:07.011" starttime="20170725 02:47:07.011"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:47:07.012" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:47:07.012" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:47:07.012" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:47:07.012" starttime="20170725 02:47:07.011"></status>
</kw>
<msg timestamp="20170725 02:47:07.012" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:47:07.012" starttime="20170725 02:47:06.616"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:07.012" starttime="20170725 02:47:06.615"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:47:07.016" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:47:07.020" starttime="20170725 02:47:07.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:47:07.021" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:47:07.021" starttime="20170725 02:47:07.020"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:47:07.021" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:47:07.021" starttime="20170725 02:47:07.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:47:07.022" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:47:07.022" starttime="20170725 02:47:07.022"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:47:07.240" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:47:07.241" starttime="20170725 02:47:07.023"></status>
</kw>
<msg timestamp="20170725 02:47:07.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:47:07.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:07.241" starttime="20170725 02:47:07.022"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:47:07.241" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:07.241" starttime="20170725 02:47:07.241"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:07.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:07.242" starttime="20170725 02:47:07.242"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:07.242" starttime="20170725 02:47:07.015"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:07.242" starttime="20170725 02:47:07.015"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:07.242" starttime="20170725 02:47:07.014"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:47:07.243" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:47:07.243" starttime="20170725 02:47:07.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:07.244" starttime="20170725 02:47:07.243"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:47:07.309" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:47:07.309" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:07.309" starttime="20170725 02:47:07.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:07.309" starttime="20170725 02:47:07.309"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:47:07.310" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:47:07.310" starttime="20170725 02:47:07.310"></status>
</kw>
<msg timestamp="20170725 02:47:07.310" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:07.310" starttime="20170725 02:47:07.014"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:07.311" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:07.311" starttime="20170725 02:47:07.310"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:47:07.311" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:47:07.311" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:47:07.311" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:47:07.312" starttime="20170725 02:47:07.311"></status>
</kw>
<msg timestamp="20170725 02:47:07.312" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:47:07.312" starttime="20170725 02:47:07.013"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:07.312" starttime="20170725 02:47:07.013"></status>
</kw>
<msg timestamp="20170725 02:47:07.313" level="FAIL">
#(UTC) 2017/07/25 02:47:07.312337 -   10.959331 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:47:07.313" starttime="20170725 02:47:06.354"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:47:17.319" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:47:17.319" starttime="20170725 02:47:17.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:47:17.320" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:47:17.320" starttime="20170725 02:47:17.320"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:47:17.321" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:47:17.321" starttime="20170725 02:47:17.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:47:17.322" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:47:17.322" starttime="20170725 02:47:17.321"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:47:17.530" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:47:17.531" starttime="20170725 02:47:17.322"></status>
</kw>
<msg timestamp="20170725 02:47:17.531" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:47:17.531" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:17.531" starttime="20170725 02:47:17.322"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:47:17.532" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:17.532" starttime="20170725 02:47:17.531"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:17.532" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:17.532" starttime="20170725 02:47:17.532"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:17.533" starttime="20170725 02:47:17.318"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:17.533" starttime="20170725 02:47:17.317"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:17.533" starttime="20170725 02:47:17.317"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:47:17.533" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:47:17.533" starttime="20170725 02:47:17.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:17.534" starttime="20170725 02:47:17.534"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:47:17.620" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:47:17.621" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:17.621" starttime="20170725 02:47:17.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:17.622" starttime="20170725 02:47:17.621"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:47:17.622" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:47:17.622" starttime="20170725 02:47:17.622"></status>
</kw>
<msg timestamp="20170725 02:47:17.622" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:17.622" starttime="20170725 02:47:17.316"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:17.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:17.623" starttime="20170725 02:47:17.623"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:47:17.624" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:47:17.624" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:47:17.624" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:47:17.624" starttime="20170725 02:47:17.623"></status>
</kw>
<msg timestamp="20170725 02:47:17.624" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:47:17.624" starttime="20170725 02:47:17.316"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:17.624" starttime="20170725 02:47:17.315"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:47:17.628" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:47:17.629" starttime="20170725 02:47:17.628"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:47:17.629" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:47:17.629" starttime="20170725 02:47:17.629"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:47:17.630" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:47:17.630" starttime="20170725 02:47:17.630"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:47:17.631" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:47:17.631" starttime="20170725 02:47:17.630"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:47:17.808" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:47:17.808" starttime="20170725 02:47:17.632"></status>
</kw>
<msg timestamp="20170725 02:47:17.808" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:47:17.808" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:17.808" starttime="20170725 02:47:17.631"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:47:17.808" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:17.809" starttime="20170725 02:47:17.808"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:17.809" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:17.809" starttime="20170725 02:47:17.809"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:17.809" starttime="20170725 02:47:17.627"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:17.809" starttime="20170725 02:47:17.627"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:17.810" starttime="20170725 02:47:17.626"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:47:17.810" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:47:17.810" starttime="20170725 02:47:17.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:17.811" starttime="20170725 02:47:17.810"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:47:17.876" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:47:17.876" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:17.876" starttime="20170725 02:47:17.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:17.877" starttime="20170725 02:47:17.876"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:47:17.877" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:47:17.877" starttime="20170725 02:47:17.877"></status>
</kw>
<msg timestamp="20170725 02:47:17.877" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:17.877" starttime="20170725 02:47:17.626"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:17.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:17.878" starttime="20170725 02:47:17.878"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:47:17.879" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:47:17.879" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:47:17.879" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:47:17.879" starttime="20170725 02:47:17.878"></status>
</kw>
<msg timestamp="20170725 02:47:17.879" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:47:17.879" starttime="20170725 02:47:17.625"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:17.879" starttime="20170725 02:47:17.625"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:47:17.884" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:47:17.885" starttime="20170725 02:47:17.884"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:47:17.886" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:47:17.886" starttime="20170725 02:47:17.885"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:47:17.887" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:47:17.887" starttime="20170725 02:47:17.886"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:47:17.888" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:47:17.888" starttime="20170725 02:47:17.887"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:47:18.136" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:47:18.136" starttime="20170725 02:47:17.889"></status>
</kw>
<msg timestamp="20170725 02:47:18.136" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:47:18.136" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:18.136" starttime="20170725 02:47:17.888"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:47:18.137" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:18.137" starttime="20170725 02:47:18.137"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:18.138" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:18.138" starttime="20170725 02:47:18.137"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:18.138" starttime="20170725 02:47:17.883"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:18.138" starttime="20170725 02:47:17.882"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:18.138" starttime="20170725 02:47:17.881"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:47:18.139" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:47:18.139" starttime="20170725 02:47:18.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:18.139" starttime="20170725 02:47:18.139"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:47:18.217" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:47:18.217" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:18.217" starttime="20170725 02:47:18.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:18.218" starttime="20170725 02:47:18.217"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:47:18.218" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:47:18.218" starttime="20170725 02:47:18.218"></status>
</kw>
<msg timestamp="20170725 02:47:18.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:18.218" starttime="20170725 02:47:17.881"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:18.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:18.219" starttime="20170725 02:47:18.219"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:47:18.220" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:47:18.220" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:47:18.220" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:47:18.220" starttime="20170725 02:47:18.219"></status>
</kw>
<msg timestamp="20170725 02:47:18.220" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:47:18.220" starttime="20170725 02:47:17.880"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:18.221" starttime="20170725 02:47:17.880"></status>
</kw>
<msg timestamp="20170725 02:47:18.221" level="FAIL">
#(UTC) 2017/07/25 02:47:18.220759 -   10.908422 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:47:18.221" starttime="20170725 02:47:17.313"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:47:28.227" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:47:28.228" starttime="20170725 02:47:28.227"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:47:28.229" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:47:28.229" starttime="20170725 02:47:28.228"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:47:28.229" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:47:28.229" starttime="20170725 02:47:28.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:47:28.230" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:47:28.230" starttime="20170725 02:47:28.230"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:47:28.411" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:47:28.411" starttime="20170725 02:47:28.231"></status>
</kw>
<msg timestamp="20170725 02:47:28.411" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:47:28.412" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:28.412" starttime="20170725 02:47:28.230"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:47:28.412" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:28.412" starttime="20170725 02:47:28.412"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:28.413" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:28.413" starttime="20170725 02:47:28.413"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:28.413" starttime="20170725 02:47:28.226"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:28.413" starttime="20170725 02:47:28.226"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:28.414" starttime="20170725 02:47:28.225"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:47:28.414" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:47:28.414" starttime="20170725 02:47:28.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:28.415" starttime="20170725 02:47:28.415"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:47:28.479" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:47:28.479" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:28.479" starttime="20170725 02:47:28.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:28.480" starttime="20170725 02:47:28.480"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:47:28.480" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:47:28.480" starttime="20170725 02:47:28.480"></status>
</kw>
<msg timestamp="20170725 02:47:28.481" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:28.481" starttime="20170725 02:47:28.225"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:28.481" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:28.481" starttime="20170725 02:47:28.481"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:47:28.482" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:47:28.482" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:47:28.482" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:47:28.482" starttime="20170725 02:47:28.482"></status>
</kw>
<msg timestamp="20170725 02:47:28.482" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:47:28.482" starttime="20170725 02:47:28.224"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:28.483" starttime="20170725 02:47:28.224"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:47:28.487" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:47:28.487" starttime="20170725 02:47:28.486"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:47:28.488" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:47:28.488" starttime="20170725 02:47:28.488"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:47:28.489" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:47:28.489" starttime="20170725 02:47:28.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:47:28.489" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:47:28.489" starttime="20170725 02:47:28.489"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:47:28.765" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:47:28.765" starttime="20170725 02:47:28.490"></status>
</kw>
<msg timestamp="20170725 02:47:28.765" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:47:28.765" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:28.765" starttime="20170725 02:47:28.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:47:28.766" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:28.766" starttime="20170725 02:47:28.766"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:28.767" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:28.767" starttime="20170725 02:47:28.766"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:28.767" starttime="20170725 02:47:28.486"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:28.767" starttime="20170725 02:47:28.485"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:28.767" starttime="20170725 02:47:28.485"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:47:28.768" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:47:28.768" starttime="20170725 02:47:28.767"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:28.768" starttime="20170725 02:47:28.768"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:47:28.833" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:47:28.833" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:28.833" starttime="20170725 02:47:28.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:28.834" starttime="20170725 02:47:28.834"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:47:28.834" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:47:28.834" starttime="20170725 02:47:28.834"></status>
</kw>
<msg timestamp="20170725 02:47:28.835" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:28.835" starttime="20170725 02:47:28.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:28.835" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:28.836" starttime="20170725 02:47:28.835"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:47:28.836" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:47:28.836" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:47:28.836" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:47:28.836" starttime="20170725 02:47:28.836"></status>
</kw>
<msg timestamp="20170725 02:47:28.837" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:47:28.837" starttime="20170725 02:47:28.483"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:28.837" starttime="20170725 02:47:28.483"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:47:28.840" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:47:28.841" starttime="20170725 02:47:28.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:47:28.842" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:47:28.842" starttime="20170725 02:47:28.841"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:47:28.842" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:47:28.842" starttime="20170725 02:47:28.842"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:47:28.843" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:47:28.843" starttime="20170725 02:47:28.843"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:47:29.028" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:47:29.028" starttime="20170725 02:47:28.844"></status>
</kw>
<msg timestamp="20170725 02:47:29.028" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:47:29.028" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:29.028" starttime="20170725 02:47:28.843"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:47:29.029" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:29.029" starttime="20170725 02:47:29.029"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:29.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:29.030" starttime="20170725 02:47:29.029"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:29.030" starttime="20170725 02:47:28.840"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:29.030" starttime="20170725 02:47:28.839"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:29.030" starttime="20170725 02:47:28.839"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:47:29.031" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:47:29.031" starttime="20170725 02:47:29.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:29.031" starttime="20170725 02:47:29.031"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:47:29.110" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:47:29.110" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:29.110" starttime="20170725 02:47:29.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:29.111" starttime="20170725 02:47:29.110"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:47:29.111" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:47:29.111" starttime="20170725 02:47:29.111"></status>
</kw>
<msg timestamp="20170725 02:47:29.112" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:29.112" starttime="20170725 02:47:28.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:29.112" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:29.112" starttime="20170725 02:47:29.112"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:47:29.113" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:47:29.113" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:47:29.113" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:47:29.113" starttime="20170725 02:47:29.113"></status>
</kw>
<msg timestamp="20170725 02:47:29.113" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:47:29.113" starttime="20170725 02:47:28.837"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:29.114" starttime="20170725 02:47:28.837"></status>
</kw>
<msg timestamp="20170725 02:47:29.114" level="FAIL">
#(UTC) 2017/07/25 02:47:29.113821 -   10.893062 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:47:29.114" starttime="20170725 02:47:28.222"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:47:39.123" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:47:39.124" starttime="20170725 02:47:39.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:47:39.125" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:47:39.125" starttime="20170725 02:47:39.124"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:47:39.126" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:47:39.126" starttime="20170725 02:47:39.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:47:39.127" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:47:39.127" starttime="20170725 02:47:39.126"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:47:39.395" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:47:39.395" starttime="20170725 02:47:39.128"></status>
</kw>
<msg timestamp="20170725 02:47:39.396" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:47:39.396" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:39.396" starttime="20170725 02:47:39.127"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:47:39.396" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:39.397" starttime="20170725 02:47:39.396"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:39.397" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:39.398" starttime="20170725 02:47:39.397"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:39.398" starttime="20170725 02:47:39.121"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:39.398" starttime="20170725 02:47:39.120"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:39.398" starttime="20170725 02:47:39.119"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:47:39.399" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:47:39.399" starttime="20170725 02:47:39.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:39.399" starttime="20170725 02:47:39.399"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:47:39.501" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:47:39.501" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:39.501" starttime="20170725 02:47:39.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:39.501" starttime="20170725 02:47:39.501"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:47:39.502" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:47:39.502" starttime="20170725 02:47:39.502"></status>
</kw>
<msg timestamp="20170725 02:47:39.502" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:39.502" starttime="20170725 02:47:39.118"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:39.503" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:39.503" starttime="20170725 02:47:39.502"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:47:39.503" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:47:39.503" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:47:39.504" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:47:39.504" starttime="20170725 02:47:39.503"></status>
</kw>
<msg timestamp="20170725 02:47:39.504" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:47:39.504" starttime="20170725 02:47:39.118"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:39.504" starttime="20170725 02:47:39.117"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:47:39.508" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:47:39.509" starttime="20170725 02:47:39.508"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:47:39.509" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:47:39.509" starttime="20170725 02:47:39.509"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:47:39.510" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:47:39.510" starttime="20170725 02:47:39.510"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:47:39.511" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:47:39.511" starttime="20170725 02:47:39.510"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:47:39.686" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:47:39.686" starttime="20170725 02:47:39.511"></status>
</kw>
<msg timestamp="20170725 02:47:39.686" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:47:39.686" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:39.686" starttime="20170725 02:47:39.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:47:39.687" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:39.687" starttime="20170725 02:47:39.686"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:39.687" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:39.687" starttime="20170725 02:47:39.687"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:39.688" starttime="20170725 02:47:39.507"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:39.688" starttime="20170725 02:47:39.507"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:39.688" starttime="20170725 02:47:39.506"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:47:39.688" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:47:39.688" starttime="20170725 02:47:39.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:39.689" starttime="20170725 02:47:39.689"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:47:39.754" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:47:39.754" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:39.754" starttime="20170725 02:47:39.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:39.755" starttime="20170725 02:47:39.755"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:47:39.756" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:47:39.756" starttime="20170725 02:47:39.755"></status>
</kw>
<msg timestamp="20170725 02:47:39.756" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:39.756" starttime="20170725 02:47:39.505"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:39.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:39.757" starttime="20170725 02:47:39.756"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:47:39.757" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:47:39.757" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:47:39.757" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:47:39.757" starttime="20170725 02:47:39.757"></status>
</kw>
<msg timestamp="20170725 02:47:39.758" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:47:39.758" starttime="20170725 02:47:39.505"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:39.758" starttime="20170725 02:47:39.504"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:47:39.762" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:47:39.762" starttime="20170725 02:47:39.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:47:39.763" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:47:39.763" starttime="20170725 02:47:39.763"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:47:39.763" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:47:39.764" starttime="20170725 02:47:39.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:47:39.764" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:47:39.764" starttime="20170725 02:47:39.764"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:47:39.939" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:47:39.939" starttime="20170725 02:47:39.765"></status>
</kw>
<msg timestamp="20170725 02:47:39.940" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:47:39.940" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:39.940" starttime="20170725 02:47:39.765"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:47:39.940" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:39.940" starttime="20170725 02:47:39.940"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:39.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:39.941" starttime="20170725 02:47:39.941"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:39.941" starttime="20170725 02:47:39.761"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:39.941" starttime="20170725 02:47:39.760"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:39.941" starttime="20170725 02:47:39.760"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:47:39.942" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:47:39.942" starttime="20170725 02:47:39.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:39.943" starttime="20170725 02:47:39.942"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:47:40.113" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:47:40.113" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:40.113" starttime="20170725 02:47:39.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:40.114" starttime="20170725 02:47:40.114"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:47:40.115" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:47:40.115" starttime="20170725 02:47:40.114"></status>
</kw>
<msg timestamp="20170725 02:47:40.115" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:40.115" starttime="20170725 02:47:39.759"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:40.116" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:40.116" starttime="20170725 02:47:40.115"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:47:40.116" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:47:40.116" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:47:40.116" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:47:40.116" starttime="20170725 02:47:40.116"></status>
</kw>
<msg timestamp="20170725 02:47:40.117" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:47:40.117" starttime="20170725 02:47:39.758"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:40.117" starttime="20170725 02:47:39.758"></status>
</kw>
<msg timestamp="20170725 02:47:40.118" level="FAIL">
#(UTC) 2017/07/25 02:47:40.117232 -   11.003411 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:47:40.118" starttime="20170725 02:47:39.115"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:47:50.125" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:47:50.126" starttime="20170725 02:47:50.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:47:50.126" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:47:50.126" starttime="20170725 02:47:50.126"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:47:50.127" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:47:50.127" starttime="20170725 02:47:50.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:47:50.128" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:47:50.128" starttime="20170725 02:47:50.127"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:47:50.401" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:47:50.401" starttime="20170725 02:47:50.128"></status>
</kw>
<msg timestamp="20170725 02:47:50.401" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:47:50.401" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:50.401" starttime="20170725 02:47:50.128"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:47:50.402" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:50.402" starttime="20170725 02:47:50.402"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:50.403" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:50.403" starttime="20170725 02:47:50.402"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:50.403" starttime="20170725 02:47:50.123"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:50.403" starttime="20170725 02:47:50.123"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:50.403" starttime="20170725 02:47:50.122"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:47:50.404" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:47:50.404" starttime="20170725 02:47:50.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:50.405" starttime="20170725 02:47:50.404"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:47:50.476" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:47:50.476" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:50.476" starttime="20170725 02:47:50.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:50.477" starttime="20170725 02:47:50.477"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:47:50.477" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:47:50.477" starttime="20170725 02:47:50.477"></status>
</kw>
<msg timestamp="20170725 02:47:50.478" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:50.478" starttime="20170725 02:47:50.121"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:50.478" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:50.478" starttime="20170725 02:47:50.478"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:47:50.479" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:47:50.479" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:47:50.479" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:47:50.479" starttime="20170725 02:47:50.479"></status>
</kw>
<msg timestamp="20170725 02:47:50.479" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:47:50.479" starttime="20170725 02:47:50.121"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:50.480" starttime="20170725 02:47:50.120"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:47:50.484" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:47:50.485" starttime="20170725 02:47:50.484"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:47:50.486" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:47:50.486" starttime="20170725 02:47:50.486"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:47:50.487" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:47:50.487" starttime="20170725 02:47:50.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:47:50.488" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:47:50.488" starttime="20170725 02:47:50.488"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:47:50.677" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:47:50.678" starttime="20170725 02:47:50.489"></status>
</kw>
<msg timestamp="20170725 02:47:50.678" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:47:50.678" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:50.678" starttime="20170725 02:47:50.489"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:47:50.679" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:50.679" starttime="20170725 02:47:50.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:50.679" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:50.679" starttime="20170725 02:47:50.679"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:50.680" starttime="20170725 02:47:50.483"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:50.680" starttime="20170725 02:47:50.482"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:50.680" starttime="20170725 02:47:50.482"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:47:50.680" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:47:50.680" starttime="20170725 02:47:50.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:50.681" starttime="20170725 02:47:50.681"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:47:50.747" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:47:50.747" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:50.747" starttime="20170725 02:47:50.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:50.748" starttime="20170725 02:47:50.747"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:47:50.749" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:47:50.749" starttime="20170725 02:47:50.748"></status>
</kw>
<msg timestamp="20170725 02:47:50.749" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:50.749" starttime="20170725 02:47:50.481"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:50.750" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:50.750" starttime="20170725 02:47:50.749"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:47:50.751" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:47:50.751" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:47:50.751" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:47:50.751" starttime="20170725 02:47:50.750"></status>
</kw>
<msg timestamp="20170725 02:47:50.751" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:47:50.751" starttime="20170725 02:47:50.480"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:50.752" starttime="20170725 02:47:50.480"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:47:50.756" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:47:50.762" starttime="20170725 02:47:50.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:47:50.763" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:47:50.763" starttime="20170725 02:47:50.763"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:47:50.764" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:47:50.764" starttime="20170725 02:47:50.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:47:50.765" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:47:50.765" starttime="20170725 02:47:50.764"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:47:51.050" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:47:51.050" starttime="20170725 02:47:50.766"></status>
</kw>
<msg timestamp="20170725 02:47:51.051" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:47:51.051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:51.051" starttime="20170725 02:47:50.765"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:47:51.051" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:51.052" starttime="20170725 02:47:51.051"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:51.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:51.053" starttime="20170725 02:47:51.052"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:51.053" starttime="20170725 02:47:50.755"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:51.053" starttime="20170725 02:47:50.755"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:51.053" starttime="20170725 02:47:50.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:47:51.054" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:47:51.054" starttime="20170725 02:47:51.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:51.055" starttime="20170725 02:47:51.054"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:47:51.119" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:47:51.119" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:51.119" starttime="20170725 02:47:51.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:47:51.120" starttime="20170725 02:47:51.119"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:47:51.120" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:47:51.120" starttime="20170725 02:47:51.120"></status>
</kw>
<msg timestamp="20170725 02:47:51.120" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:47:51.120" starttime="20170725 02:47:50.753"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:47:51.121" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:47:51.121" starttime="20170725 02:47:51.121"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:47:51.122" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:47:51.122" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:47:51.122" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:47:51.122" starttime="20170725 02:47:51.121"></status>
</kw>
<msg timestamp="20170725 02:47:51.122" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:47:51.122" starttime="20170725 02:47:50.752"></status>
</kw>
<status status="PASS" endtime="20170725 02:47:51.122" starttime="20170725 02:47:50.752"></status>
</kw>
<msg timestamp="20170725 02:47:51.123" level="FAIL">
#(UTC) 2017/07/25 02:47:51.122682 -   11.005450 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:47:51.123" starttime="20170725 02:47:50.118"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:01.129" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:01.130" starttime="20170725 02:48:01.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:01.131" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:01.131" starttime="20170725 02:48:01.130"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:01.131" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:01.131" starttime="20170725 02:48:01.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:01.132" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:01.132" starttime="20170725 02:48:01.132"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:01.342" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:01.342" starttime="20170725 02:48:01.133"></status>
</kw>
<msg timestamp="20170725 02:48:01.342" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:01.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:01.343" starttime="20170725 02:48:01.132"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:01.343" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:01.343" starttime="20170725 02:48:01.343"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:01.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:01.344" starttime="20170725 02:48:01.344"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:01.344" starttime="20170725 02:48:01.128"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:01.344" starttime="20170725 02:48:01.128"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:01.344" starttime="20170725 02:48:01.127"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:01.345" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:48:01.345" starttime="20170725 02:48:01.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:01.346" starttime="20170725 02:48:01.345"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:01.414" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:48:01.415" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:01.415" starttime="20170725 02:48:01.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:01.415" starttime="20170725 02:48:01.415"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:01.416" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:01.416" starttime="20170725 02:48:01.416"></status>
</kw>
<msg timestamp="20170725 02:48:01.416" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:01.416" starttime="20170725 02:48:01.127"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:01.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:01.417" starttime="20170725 02:48:01.416"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:01.417" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:01.417" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:01.418" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:48:01.418" starttime="20170725 02:48:01.417"></status>
</kw>
<msg timestamp="20170725 02:48:01.418" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:48:01.418" starttime="20170725 02:48:01.126"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:01.418" starttime="20170725 02:48:01.126"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:01.422" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:01.423" starttime="20170725 02:48:01.422"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:01.423" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:01.423" starttime="20170725 02:48:01.423"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:01.424" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:01.424" starttime="20170725 02:48:01.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:01.424" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:01.425" starttime="20170725 02:48:01.424"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:01.608" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:01.608" starttime="20170725 02:48:01.425"></status>
</kw>
<msg timestamp="20170725 02:48:01.608" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:01.608" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:01.608" starttime="20170725 02:48:01.425"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:01.609" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:01.609" starttime="20170725 02:48:01.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:01.610" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:01.610" starttime="20170725 02:48:01.609"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:01.610" starttime="20170725 02:48:01.421"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:01.610" starttime="20170725 02:48:01.421"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:01.610" starttime="20170725 02:48:01.420"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:01.611" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:48:01.611" starttime="20170725 02:48:01.610"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:01.611" starttime="20170725 02:48:01.611"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:01.676" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:48:01.677" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:01.677" starttime="20170725 02:48:01.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:01.677" starttime="20170725 02:48:01.677"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:01.678" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:01.678" starttime="20170725 02:48:01.678"></status>
</kw>
<msg timestamp="20170725 02:48:01.678" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:01.678" starttime="20170725 02:48:01.419"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:01.679" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:01.679" starttime="20170725 02:48:01.678"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:01.679" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:01.679" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:01.679" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:48:01.679" starttime="20170725 02:48:01.679"></status>
</kw>
<msg timestamp="20170725 02:48:01.680" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:48:01.680" starttime="20170725 02:48:01.419"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:01.680" starttime="20170725 02:48:01.418"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:01.684" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:01.684" starttime="20170725 02:48:01.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:01.685" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:01.685" starttime="20170725 02:48:01.685"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:01.686" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:01.686" starttime="20170725 02:48:01.685"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:01.686" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:01.686" starttime="20170725 02:48:01.686"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:01.957" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:01.957" starttime="20170725 02:48:01.687"></status>
</kw>
<msg timestamp="20170725 02:48:01.957" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:01.957" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:01.957" starttime="20170725 02:48:01.687"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:01.958" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:01.958" starttime="20170725 02:48:01.958"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:01.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:01.959" starttime="20170725 02:48:01.958"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:01.959" starttime="20170725 02:48:01.683"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:01.959" starttime="20170725 02:48:01.682"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:01.959" starttime="20170725 02:48:01.682"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:01.960" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:48:01.960" starttime="20170725 02:48:01.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:01.960" starttime="20170725 02:48:01.960"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:02.023" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:48:02.023" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:02.023" starttime="20170725 02:48:01.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:02.024" starttime="20170725 02:48:02.024"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:02.025" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:02.025" starttime="20170725 02:48:02.024"></status>
</kw>
<msg timestamp="20170725 02:48:02.025" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:02.025" starttime="20170725 02:48:01.681"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:02.026" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:02.026" starttime="20170725 02:48:02.025"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:02.026" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:02.026" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:02.026" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:48:02.026" starttime="20170725 02:48:02.026"></status>
</kw>
<msg timestamp="20170725 02:48:02.027" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:48:02.027" starttime="20170725 02:48:01.681"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:02.027" starttime="20170725 02:48:01.680"></status>
</kw>
<msg timestamp="20170725 02:48:02.028" level="FAIL">
#(UTC) 2017/07/25 02:48:02.027292 -   10.904610 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:48:02.028" starttime="20170725 02:48:01.124"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:12.034" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:12.034" starttime="20170725 02:48:12.033"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:12.035" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:12.035" starttime="20170725 02:48:12.035"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:12.036" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:12.036" starttime="20170725 02:48:12.035"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:12.036" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:12.037" starttime="20170725 02:48:12.036"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:12.234" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:12.234" starttime="20170725 02:48:12.037"></status>
</kw>
<msg timestamp="20170725 02:48:12.234" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:12.234" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.234" starttime="20170725 02:48:12.037"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:12.235" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.235" starttime="20170725 02:48:12.235"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:12.236" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.236" starttime="20170725 02:48:12.235"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:12.236" starttime="20170725 02:48:12.033"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:12.236" starttime="20170725 02:48:12.032"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:12.236" starttime="20170725 02:48:12.032"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:12.237" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:48:12.237" starttime="20170725 02:48:12.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:12.237" starttime="20170725 02:48:12.237"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:12.299" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:48:12.300" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.300" starttime="20170725 02:48:12.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:12.300" starttime="20170725 02:48:12.300"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:12.301" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:12.301" starttime="20170725 02:48:12.301"></status>
</kw>
<msg timestamp="20170725 02:48:12.301" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.301" starttime="20170725 02:48:12.031"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:12.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.302" starttime="20170725 02:48:12.301"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:12.302" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:12.302" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:12.302" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:48:12.302" starttime="20170725 02:48:12.302"></status>
</kw>
<msg timestamp="20170725 02:48:12.303" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:48:12.303" starttime="20170725 02:48:12.030"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:12.303" starttime="20170725 02:48:12.030"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:12.307" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:12.308" starttime="20170725 02:48:12.307"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:12.308" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:12.308" starttime="20170725 02:48:12.308"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:12.309" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:12.309" starttime="20170725 02:48:12.308"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:12.309" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:12.310" starttime="20170725 02:48:12.309"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:12.501" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:12.501" starttime="20170725 02:48:12.310"></status>
</kw>
<msg timestamp="20170725 02:48:12.501" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:12.501" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.501" starttime="20170725 02:48:12.310"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:12.502" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.502" starttime="20170725 02:48:12.502"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:12.503" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.503" starttime="20170725 02:48:12.502"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:12.503" starttime="20170725 02:48:12.306"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:12.503" starttime="20170725 02:48:12.306"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:12.503" starttime="20170725 02:48:12.305"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:12.504" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:48:12.504" starttime="20170725 02:48:12.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:12.504" starttime="20170725 02:48:12.504"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:12.641" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:48:12.642" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.642" starttime="20170725 02:48:12.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:12.642" starttime="20170725 02:48:12.642"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:12.643" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:12.643" starttime="20170725 02:48:12.643"></status>
</kw>
<msg timestamp="20170725 02:48:12.643" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.643" starttime="20170725 02:48:12.304"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:12.644" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.644" starttime="20170725 02:48:12.643"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:12.644" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:12.644" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:12.644" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:48:12.644" starttime="20170725 02:48:12.644"></status>
</kw>
<msg timestamp="20170725 02:48:12.645" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:48:12.645" starttime="20170725 02:48:12.304"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:12.645" starttime="20170725 02:48:12.303"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:12.649" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:12.650" starttime="20170725 02:48:12.648"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:12.650" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:12.650" starttime="20170725 02:48:12.650"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:12.651" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:12.651" starttime="20170725 02:48:12.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:12.651" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:12.651" starttime="20170725 02:48:12.651"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:12.890" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:12.890" starttime="20170725 02:48:12.652"></status>
</kw>
<msg timestamp="20170725 02:48:12.890" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:12.890" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.890" starttime="20170725 02:48:12.652"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:12.891" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.891" starttime="20170725 02:48:12.891"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:12.892" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.892" starttime="20170725 02:48:12.891"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:12.892" starttime="20170725 02:48:12.648"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:12.892" starttime="20170725 02:48:12.648"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:12.892" starttime="20170725 02:48:12.647"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:12.893" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:48:12.893" starttime="20170725 02:48:12.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:12.894" starttime="20170725 02:48:12.893"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:12.955" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:48:12.955" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.955" starttime="20170725 02:48:12.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:12.956" starttime="20170725 02:48:12.956"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:12.957" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:12.957" starttime="20170725 02:48:12.956"></status>
</kw>
<msg timestamp="20170725 02:48:12.957" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.957" starttime="20170725 02:48:12.646"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:12.958" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:12.958" starttime="20170725 02:48:12.957"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:12.958" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:12.958" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:12.958" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:48:12.958" starttime="20170725 02:48:12.958"></status>
</kw>
<msg timestamp="20170725 02:48:12.959" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:48:12.959" starttime="20170725 02:48:12.646"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:12.959" starttime="20170725 02:48:12.645"></status>
</kw>
<msg timestamp="20170725 02:48:12.960" level="FAIL">
#(UTC) 2017/07/25 02:48:12.959281 -   10.931989 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:48:12.960" starttime="20170725 02:48:12.028"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:22.965" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:22.966" starttime="20170725 02:48:22.965"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:22.967" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:22.967" starttime="20170725 02:48:22.967"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:22.968" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:22.968" starttime="20170725 02:48:22.967"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:22.968" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:22.968" starttime="20170725 02:48:22.968"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:23.195" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:23.195" starttime="20170725 02:48:22.969"></status>
</kw>
<msg timestamp="20170725 02:48:23.195" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:23.195" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.195" starttime="20170725 02:48:22.969"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:23.196" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.196" starttime="20170725 02:48:23.195"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:23.196" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.196" starttime="20170725 02:48:23.196"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:23.197" starttime="20170725 02:48:22.965"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:23.197" starttime="20170725 02:48:22.964"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:23.197" starttime="20170725 02:48:22.964"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:23.197" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:48:23.197" starttime="20170725 02:48:23.197"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:23.198" starttime="20170725 02:48:23.198"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:23.276" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:48:23.276" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.276" starttime="20170725 02:48:23.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:23.277" starttime="20170725 02:48:23.277"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:23.278" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:23.278" starttime="20170725 02:48:23.277"></status>
</kw>
<msg timestamp="20170725 02:48:23.278" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.278" starttime="20170725 02:48:22.963"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:23.279" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.279" starttime="20170725 02:48:23.278"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:23.279" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:23.279" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:23.279" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:48:23.279" starttime="20170725 02:48:23.279"></status>
</kw>
<msg timestamp="20170725 02:48:23.280" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:48:23.280" starttime="20170725 02:48:22.962"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:23.280" starttime="20170725 02:48:22.962"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:23.284" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:23.284" starttime="20170725 02:48:23.283"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:23.285" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:23.285" starttime="20170725 02:48:23.285"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:23.286" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:23.286" starttime="20170725 02:48:23.285"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:23.286" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:23.286" starttime="20170725 02:48:23.286"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:23.473" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:23.473" starttime="20170725 02:48:23.287"></status>
</kw>
<msg timestamp="20170725 02:48:23.473" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:23.473" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.473" starttime="20170725 02:48:23.287"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:23.474" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.474" starttime="20170725 02:48:23.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:23.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.475" starttime="20170725 02:48:23.474"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:23.475" starttime="20170725 02:48:23.283"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:23.475" starttime="20170725 02:48:23.282"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:23.475" starttime="20170725 02:48:23.282"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:23.476" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:48:23.476" starttime="20170725 02:48:23.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:23.477" starttime="20170725 02:48:23.476"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:23.544" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:48:23.544" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.544" starttime="20170725 02:48:23.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:23.545" starttime="20170725 02:48:23.545"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:23.545" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:23.546" starttime="20170725 02:48:23.545"></status>
</kw>
<msg timestamp="20170725 02:48:23.546" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.546" starttime="20170725 02:48:23.281"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:23.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.546" starttime="20170725 02:48:23.546"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:23.547" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:23.547" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:23.547" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:48:23.547" starttime="20170725 02:48:23.547"></status>
</kw>
<msg timestamp="20170725 02:48:23.548" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:48:23.548" starttime="20170725 02:48:23.281"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:23.548" starttime="20170725 02:48:23.280"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:23.552" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:23.552" starttime="20170725 02:48:23.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:23.553" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:23.553" starttime="20170725 02:48:23.553"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:23.554" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:23.554" starttime="20170725 02:48:23.553"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:23.554" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:23.554" starttime="20170725 02:48:23.554"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:23.804" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:23.804" starttime="20170725 02:48:23.555"></status>
</kw>
<msg timestamp="20170725 02:48:23.804" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:23.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.804" starttime="20170725 02:48:23.555"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:23.805" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.805" starttime="20170725 02:48:23.805"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:23.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.806" starttime="20170725 02:48:23.805"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:23.806" starttime="20170725 02:48:23.551"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:23.806" starttime="20170725 02:48:23.550"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:23.806" starttime="20170725 02:48:23.550"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:23.807" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:48:23.807" starttime="20170725 02:48:23.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:23.807" starttime="20170725 02:48:23.807"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:23.869" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:48:23.870" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.870" starttime="20170725 02:48:23.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:23.870" starttime="20170725 02:48:23.870"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:23.871" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:23.871" starttime="20170725 02:48:23.871"></status>
</kw>
<msg timestamp="20170725 02:48:23.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.871" starttime="20170725 02:48:23.549"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:23.872" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:23.872" starttime="20170725 02:48:23.871"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:23.872" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:23.872" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:23.872" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:48:23.872" starttime="20170725 02:48:23.872"></status>
</kw>
<msg timestamp="20170725 02:48:23.873" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:48:23.873" starttime="20170725 02:48:23.548"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:23.873" starttime="20170725 02:48:23.548"></status>
</kw>
<msg timestamp="20170725 02:48:23.874" level="FAIL">
#(UTC) 2017/07/25 02:48:23.873269 -   10.913988 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:48:23.874" starttime="20170725 02:48:22.960"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:33.880" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:33.881" starttime="20170725 02:48:33.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:33.881" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:33.881" starttime="20170725 02:48:33.881"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:33.882" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:33.882" starttime="20170725 02:48:33.882"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:33.883" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:33.883" starttime="20170725 02:48:33.882"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:34.064" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:34.064" starttime="20170725 02:48:33.883"></status>
</kw>
<msg timestamp="20170725 02:48:34.064" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:34.065" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.065" starttime="20170725 02:48:33.883"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:34.065" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.065" starttime="20170725 02:48:34.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:34.066" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.066" starttime="20170725 02:48:34.066"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:34.066" starttime="20170725 02:48:33.879"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:34.066" starttime="20170725 02:48:33.878"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:34.066" starttime="20170725 02:48:33.878"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:34.067" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:48:34.067" starttime="20170725 02:48:34.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:34.068" starttime="20170725 02:48:34.067"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:34.214" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:48:34.214" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.214" starttime="20170725 02:48:34.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:34.215" starttime="20170725 02:48:34.215"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:34.215" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:34.215" starttime="20170725 02:48:34.215"></status>
</kw>
<msg timestamp="20170725 02:48:34.216" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.216" starttime="20170725 02:48:33.877"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:34.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.216" starttime="20170725 02:48:34.216"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:34.217" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:34.217" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:34.217" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:48:34.217" starttime="20170725 02:48:34.217"></status>
</kw>
<msg timestamp="20170725 02:48:34.217" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:48:34.218" starttime="20170725 02:48:33.877"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:34.218" starttime="20170725 02:48:33.876"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:34.222" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:34.222" starttime="20170725 02:48:34.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:34.223" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:34.223" starttime="20170725 02:48:34.223"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:34.223" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:34.224" starttime="20170725 02:48:34.223"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:34.224" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:34.224" starttime="20170725 02:48:34.224"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:34.428" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:34.429" starttime="20170725 02:48:34.225"></status>
</kw>
<msg timestamp="20170725 02:48:34.429" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:34.429" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.429" starttime="20170725 02:48:34.224"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:34.429" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.430" starttime="20170725 02:48:34.429"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:34.430" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.430" starttime="20170725 02:48:34.430"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:34.430" starttime="20170725 02:48:34.221"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:34.430" starttime="20170725 02:48:34.220"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:34.431" starttime="20170725 02:48:34.220"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:34.431" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:48:34.431" starttime="20170725 02:48:34.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:34.432" starttime="20170725 02:48:34.431"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:34.520" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:48:34.520" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.520" starttime="20170725 02:48:34.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:34.521" starttime="20170725 02:48:34.520"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:34.521" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:34.521" starttime="20170725 02:48:34.521"></status>
</kw>
<msg timestamp="20170725 02:48:34.521" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.521" starttime="20170725 02:48:34.219"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:34.522" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.522" starttime="20170725 02:48:34.522"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:34.523" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:34.523" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:34.523" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:48:34.523" starttime="20170725 02:48:34.522"></status>
</kw>
<msg timestamp="20170725 02:48:34.523" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:48:34.523" starttime="20170725 02:48:34.218"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:34.523" starttime="20170725 02:48:34.218"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:34.527" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:34.531" starttime="20170725 02:48:34.527"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:34.532" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:34.532" starttime="20170725 02:48:34.532"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:34.533" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:34.533" starttime="20170725 02:48:34.532"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:34.533" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:34.533" starttime="20170725 02:48:34.533"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:34.772" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:34.772" starttime="20170725 02:48:34.534"></status>
</kw>
<msg timestamp="20170725 02:48:34.772" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:34.772" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.772" starttime="20170725 02:48:34.534"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:34.773" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.773" starttime="20170725 02:48:34.773"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:34.774" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.774" starttime="20170725 02:48:34.773"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:34.774" starttime="20170725 02:48:34.526"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:34.774" starttime="20170725 02:48:34.526"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:34.774" starttime="20170725 02:48:34.525"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:34.775" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:48:34.775" starttime="20170725 02:48:34.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:34.775" starttime="20170725 02:48:34.775"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:34.839" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:48:34.839" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.839" starttime="20170725 02:48:34.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:34.839" starttime="20170725 02:48:34.839"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:34.840" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:34.840" starttime="20170725 02:48:34.840"></status>
</kw>
<msg timestamp="20170725 02:48:34.840" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.840" starttime="20170725 02:48:34.525"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:34.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:34.841" starttime="20170725 02:48:34.840"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:34.841" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:34.841" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:34.842" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:48:34.842" starttime="20170725 02:48:34.841"></status>
</kw>
<msg timestamp="20170725 02:48:34.842" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:48:34.842" starttime="20170725 02:48:34.524"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:34.842" starttime="20170725 02:48:34.524"></status>
</kw>
<msg timestamp="20170725 02:48:34.843" level="FAIL">
#(UTC) 2017/07/25 02:48:34.842361 -   10.969092 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:48:34.843" starttime="20170725 02:48:33.874"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:44.849" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:44.850" starttime="20170725 02:48:44.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:44.850" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:44.850" starttime="20170725 02:48:44.850"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:44.851" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:44.851" starttime="20170725 02:48:44.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:44.852" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:44.852" starttime="20170725 02:48:44.851"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:45.034" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:45.034" starttime="20170725 02:48:44.852"></status>
</kw>
<msg timestamp="20170725 02:48:45.034" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:45.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.034" starttime="20170725 02:48:44.852"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:45.035" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.035" starttime="20170725 02:48:45.034"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:45.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.036" starttime="20170725 02:48:45.035"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:45.036" starttime="20170725 02:48:44.848"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:45.036" starttime="20170725 02:48:44.848"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:45.036" starttime="20170725 02:48:44.847"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:45.036" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:48:45.036" starttime="20170725 02:48:45.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:45.037" starttime="20170725 02:48:45.037"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:45.102" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:48:45.102" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.102" starttime="20170725 02:48:45.037"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:45.103" starttime="20170725 02:48:45.102"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:45.103" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:45.103" starttime="20170725 02:48:45.103"></status>
</kw>
<msg timestamp="20170725 02:48:45.103" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.103" starttime="20170725 02:48:44.846"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:45.104" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.104" starttime="20170725 02:48:45.104"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:45.105" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:45.105" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:45.105" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:48:45.105" starttime="20170725 02:48:45.104"></status>
</kw>
<msg timestamp="20170725 02:48:45.105" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:48:45.105" starttime="20170725 02:48:44.846"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:45.105" starttime="20170725 02:48:44.845"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:45.109" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:45.110" starttime="20170725 02:48:45.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:45.111" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:45.111" starttime="20170725 02:48:45.110"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:45.111" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:45.111" starttime="20170725 02:48:45.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:45.112" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:45.112" starttime="20170725 02:48:45.112"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:45.296" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:45.296" starttime="20170725 02:48:45.113"></status>
</kw>
<msg timestamp="20170725 02:48:45.296" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:45.296" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.296" starttime="20170725 02:48:45.112"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:45.297" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.297" starttime="20170725 02:48:45.296"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:45.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.297" starttime="20170725 02:48:45.297"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:45.298" starttime="20170725 02:48:45.108"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:45.298" starttime="20170725 02:48:45.108"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:45.298" starttime="20170725 02:48:45.107"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:45.298" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:48:45.299" starttime="20170725 02:48:45.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:45.299" starttime="20170725 02:48:45.299"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:45.365" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:48:45.365" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.365" starttime="20170725 02:48:45.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:45.366" starttime="20170725 02:48:45.365"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:45.366" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:45.366" starttime="20170725 02:48:45.366"></status>
</kw>
<msg timestamp="20170725 02:48:45.366" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.366" starttime="20170725 02:48:45.107"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:45.367" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.367" starttime="20170725 02:48:45.367"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:45.368" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:45.368" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:45.368" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:48:45.368" starttime="20170725 02:48:45.368"></status>
</kw>
<msg timestamp="20170725 02:48:45.368" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:48:45.368" starttime="20170725 02:48:45.106"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:45.369" starttime="20170725 02:48:45.106"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:45.372" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:45.373" starttime="20170725 02:48:45.372"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:45.374" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:45.374" starttime="20170725 02:48:45.373"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:45.374" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:45.374" starttime="20170725 02:48:45.374"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:45.375" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:45.375" starttime="20170725 02:48:45.375"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:45.630" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:45.630" starttime="20170725 02:48:45.376"></status>
</kw>
<msg timestamp="20170725 02:48:45.630" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:45.630" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.630" starttime="20170725 02:48:45.375"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:45.631" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.631" starttime="20170725 02:48:45.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:45.632" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.632" starttime="20170725 02:48:45.631"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:45.632" starttime="20170725 02:48:45.371"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:45.632" starttime="20170725 02:48:45.371"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:45.632" starttime="20170725 02:48:45.370"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:45.633" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:48:45.633" starttime="20170725 02:48:45.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:45.633" starttime="20170725 02:48:45.633"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:45.699" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:48:45.699" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.699" starttime="20170725 02:48:45.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:45.700" starttime="20170725 02:48:45.699"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:45.700" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:45.700" starttime="20170725 02:48:45.700"></status>
</kw>
<msg timestamp="20170725 02:48:45.701" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.701" starttime="20170725 02:48:45.370"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:45.701" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:45.701" starttime="20170725 02:48:45.701"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:45.702" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:45.702" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:45.702" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:48:45.702" starttime="20170725 02:48:45.702"></status>
</kw>
<msg timestamp="20170725 02:48:45.702" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:48:45.702" starttime="20170725 02:48:45.369"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:45.703" starttime="20170725 02:48:45.369"></status>
</kw>
<msg timestamp="20170725 02:48:45.703" level="FAIL">
#(UTC) 2017/07/25 02:48:45.702816 -   10.860455 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:48:45.703" starttime="20170725 02:48:44.844"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:55.709" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:55.710" starttime="20170725 02:48:55.709"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:55.710" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:55.711" starttime="20170725 02:48:55.710"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:55.711" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:55.711" starttime="20170725 02:48:55.711"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:55.712" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:55.712" starttime="20170725 02:48:55.711"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:55.906" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:55.906" starttime="20170725 02:48:55.713"></status>
</kw>
<msg timestamp="20170725 02:48:55.906" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:55.906" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:55.906" starttime="20170725 02:48:55.712"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:55.907" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:55.907" starttime="20170725 02:48:55.907"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:55.908" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:55.908" starttime="20170725 02:48:55.907"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:55.908" starttime="20170725 02:48:55.708"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:55.908" starttime="20170725 02:48:55.708"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:55.908" starttime="20170725 02:48:55.707"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:55.909" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:48:55.909" starttime="20170725 02:48:55.908"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:55.909" starttime="20170725 02:48:55.909"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:55.972" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:48:55.972" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:55.972" starttime="20170725 02:48:55.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:55.973" starttime="20170725 02:48:55.972"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:55.973" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:55.973" starttime="20170725 02:48:55.973"></status>
</kw>
<msg timestamp="20170725 02:48:55.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:55.973" starttime="20170725 02:48:55.706"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:55.974" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:55.974" starttime="20170725 02:48:55.974"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:55.974" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:55.975" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:55.975" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:48:55.975" starttime="20170725 02:48:55.974"></status>
</kw>
<msg timestamp="20170725 02:48:55.975" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:48:55.975" starttime="20170725 02:48:55.706"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:55.975" starttime="20170725 02:48:55.705"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:55.979" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:55.980" starttime="20170725 02:48:55.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:55.981" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:55.981" starttime="20170725 02:48:55.980"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:55.981" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:55.981" starttime="20170725 02:48:55.981"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:55.982" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:55.982" starttime="20170725 02:48:55.982"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:56.279" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:56.279" starttime="20170725 02:48:55.983"></status>
</kw>
<msg timestamp="20170725 02:48:56.279" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:56.279" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:56.279" starttime="20170725 02:48:55.982"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:56.280" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:56.280" starttime="20170725 02:48:56.280"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:56.281" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:56.281" starttime="20170725 02:48:56.280"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:56.281" starttime="20170725 02:48:55.978"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:56.281" starttime="20170725 02:48:55.978"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:56.281" starttime="20170725 02:48:55.977"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:56.282" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:48:56.282" starttime="20170725 02:48:56.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:56.283" starttime="20170725 02:48:56.283"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:56.367" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:48:56.367" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:56.367" starttime="20170725 02:48:56.283"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:56.368" starttime="20170725 02:48:56.367"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:56.368" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:56.368" starttime="20170725 02:48:56.368"></status>
</kw>
<msg timestamp="20170725 02:48:56.369" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:56.369" starttime="20170725 02:48:55.976"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:56.369" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:56.369" starttime="20170725 02:48:56.369"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:56.370" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:56.370" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:56.370" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:48:56.370" starttime="20170725 02:48:56.370"></status>
</kw>
<msg timestamp="20170725 02:48:56.370" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:48:56.370" starttime="20170725 02:48:55.976"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:56.371" starttime="20170725 02:48:55.976"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:48:56.374" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:48:56.375" starttime="20170725 02:48:56.374"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:48:56.376" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:48:56.376" starttime="20170725 02:48:56.375"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:48:56.376" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:48:56.376" starttime="20170725 02:48:56.376"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:48:56.377" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:48:56.377" starttime="20170725 02:48:56.377"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:48:56.571" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:48:56.571" starttime="20170725 02:48:56.378"></status>
</kw>
<msg timestamp="20170725 02:48:56.571" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:48:56.571" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:56.571" starttime="20170725 02:48:56.377"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:48:56.572" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:56.572" starttime="20170725 02:48:56.572"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:56.573" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:56.573" starttime="20170725 02:48:56.572"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:56.573" starttime="20170725 02:48:56.373"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:56.573" starttime="20170725 02:48:56.373"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:56.573" starttime="20170725 02:48:56.372"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:48:56.574" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:48:56.574" starttime="20170725 02:48:56.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:56.574" starttime="20170725 02:48:56.574"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:48:56.637" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:48:56.637" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:56.637" starttime="20170725 02:48:56.575"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:48:56.638" starttime="20170725 02:48:56.638"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:48:56.638" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:48:56.639" starttime="20170725 02:48:56.638"></status>
</kw>
<msg timestamp="20170725 02:48:56.639" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:48:56.639" starttime="20170725 02:48:56.372"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:48:56.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:48:56.639" starttime="20170725 02:48:56.639"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:48:56.640" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:48:56.640" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:48:56.640" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:48:56.640" starttime="20170725 02:48:56.640"></status>
</kw>
<msg timestamp="20170725 02:48:56.640" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:48:56.641" starttime="20170725 02:48:56.371"></status>
</kw>
<status status="PASS" endtime="20170725 02:48:56.641" starttime="20170725 02:48:56.371"></status>
</kw>
<msg timestamp="20170725 02:48:56.641" level="FAIL">
#(UTC) 2017/07/25 02:48:56.641102 -   10.938286 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:48:56.642" starttime="20170725 02:48:55.704"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:49:06.648" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:49:06.649" starttime="20170725 02:49:06.647"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:49:06.650" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:49:06.650" starttime="20170725 02:49:06.649"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:49:06.651" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:49:06.651" starttime="20170725 02:49:06.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:49:06.652" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:49:06.652" starttime="20170725 02:49:06.651"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:49:06.939" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:49:06.939" starttime="20170725 02:49:06.653"></status>
</kw>
<msg timestamp="20170725 02:49:06.940" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:49:06.940" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:06.940" starttime="20170725 02:49:06.652"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:49:06.940" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:06.940" starttime="20170725 02:49:06.940"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:06.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:06.941" starttime="20170725 02:49:06.941"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:06.941" starttime="20170725 02:49:06.647"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:06.941" starttime="20170725 02:49:06.646"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:06.941" starttime="20170725 02:49:06.645"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:49:06.942" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:49:06.942" starttime="20170725 02:49:06.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:06.943" starttime="20170725 02:49:06.942"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:49:07.005" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:49:07.006" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:07.006" starttime="20170725 02:49:06.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:07.007" starttime="20170725 02:49:07.006"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:49:07.007" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:49:07.007" starttime="20170725 02:49:07.007"></status>
</kw>
<msg timestamp="20170725 02:49:07.007" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:07.007" starttime="20170725 02:49:06.645"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:07.008" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:07.008" starttime="20170725 02:49:07.008"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:49:07.009" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:49:07.009" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:49:07.009" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:49:07.009" starttime="20170725 02:49:07.008"></status>
</kw>
<msg timestamp="20170725 02:49:07.009" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:49:07.009" starttime="20170725 02:49:06.644"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:07.009" starttime="20170725 02:49:06.644"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:49:07.013" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:49:07.014" starttime="20170725 02:49:07.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:49:07.014" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:49:07.015" starttime="20170725 02:49:07.014"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:49:07.015" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:49:07.015" starttime="20170725 02:49:07.015"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:49:07.016" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:49:07.016" starttime="20170725 02:49:07.015"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:49:07.198" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:49:07.198" starttime="20170725 02:49:07.017"></status>
</kw>
<msg timestamp="20170725 02:49:07.199" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:49:07.199" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:07.199" starttime="20170725 02:49:07.016"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:49:07.199" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:07.200" starttime="20170725 02:49:07.199"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:07.200" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:07.201" starttime="20170725 02:49:07.200"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:07.201" starttime="20170725 02:49:07.012"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:07.201" starttime="20170725 02:49:07.012"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:07.201" starttime="20170725 02:49:07.011"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:49:07.202" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:49:07.202" starttime="20170725 02:49:07.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:07.203" starttime="20170725 02:49:07.202"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:49:07.278" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:49:07.278" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:07.278" starttime="20170725 02:49:07.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:07.279" starttime="20170725 02:49:07.278"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:49:07.279" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:49:07.279" starttime="20170725 02:49:07.279"></status>
</kw>
<msg timestamp="20170725 02:49:07.279" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:07.280" starttime="20170725 02:49:07.011"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:07.280" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:07.280" starttime="20170725 02:49:07.280"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:49:07.281" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:49:07.281" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:49:07.281" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:49:07.281" starttime="20170725 02:49:07.280"></status>
</kw>
<msg timestamp="20170725 02:49:07.281" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:49:07.281" starttime="20170725 02:49:07.010"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:07.281" starttime="20170725 02:49:07.010"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:49:07.285" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:49:07.286" starttime="20170725 02:49:07.285"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:49:07.286" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:49:07.286" starttime="20170725 02:49:07.286"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:49:07.287" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:49:07.287" starttime="20170725 02:49:07.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:49:07.288" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:49:07.288" starttime="20170725 02:49:07.287"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:49:07.465" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:49:07.465" starttime="20170725 02:49:07.289"></status>
</kw>
<msg timestamp="20170725 02:49:07.465" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:49:07.465" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:07.465" starttime="20170725 02:49:07.288"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:49:07.466" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:07.466" starttime="20170725 02:49:07.466"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:07.467" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:07.467" starttime="20170725 02:49:07.466"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:07.467" starttime="20170725 02:49:07.284"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:07.467" starttime="20170725 02:49:07.284"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:07.467" starttime="20170725 02:49:07.283"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:49:07.468" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:49:07.468" starttime="20170725 02:49:07.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:07.469" starttime="20170725 02:49:07.468"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:49:07.534" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:49:07.534" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:07.534" starttime="20170725 02:49:07.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:07.535" starttime="20170725 02:49:07.535"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:49:07.535" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:49:07.535" starttime="20170725 02:49:07.535"></status>
</kw>
<msg timestamp="20170725 02:49:07.536" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:07.536" starttime="20170725 02:49:07.283"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:07.536" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:07.536" starttime="20170725 02:49:07.536"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:49:07.537" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:49:07.537" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:49:07.537" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:49:07.537" starttime="20170725 02:49:07.537"></status>
</kw>
<msg timestamp="20170725 02:49:07.537" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:49:07.537" starttime="20170725 02:49:07.282"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:07.538" starttime="20170725 02:49:07.282"></status>
</kw>
<msg timestamp="20170725 02:49:07.538" level="FAIL">
#(UTC) 2017/07/25 02:49:07.537880 -   10.896778 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:49:07.538" starttime="20170725 02:49:06.642"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:49:17.544" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:49:17.545" starttime="20170725 02:49:17.544"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:49:17.546" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:49:17.546" starttime="20170725 02:49:17.546"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:49:17.546" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:49:17.547" starttime="20170725 02:49:17.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:49:17.547" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:49:17.547" starttime="20170725 02:49:17.547"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:49:17.753" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:49:17.753" starttime="20170725 02:49:17.548"></status>
</kw>
<msg timestamp="20170725 02:49:17.753" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:49:17.754" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:17.754" starttime="20170725 02:49:17.547"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:49:17.754" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:17.754" starttime="20170725 02:49:17.754"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:17.755" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:17.755" starttime="20170725 02:49:17.755"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:17.755" starttime="20170725 02:49:17.543"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:17.755" starttime="20170725 02:49:17.543"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:17.755" starttime="20170725 02:49:17.542"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:49:17.756" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:49:17.756" starttime="20170725 02:49:17.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:17.757" starttime="20170725 02:49:17.756"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:49:17.869" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:49:17.870" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:17.870" starttime="20170725 02:49:17.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:17.870" starttime="20170725 02:49:17.870"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:49:17.871" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:49:17.871" starttime="20170725 02:49:17.871"></status>
</kw>
<msg timestamp="20170725 02:49:17.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:17.871" starttime="20170725 02:49:17.542"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:17.872" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:17.872" starttime="20170725 02:49:17.872"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:49:17.873" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:49:17.873" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:49:17.873" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:49:17.873" starttime="20170725 02:49:17.873"></status>
</kw>
<msg timestamp="20170725 02:49:17.874" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:49:17.874" starttime="20170725 02:49:17.541"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:17.874" starttime="20170725 02:49:17.541"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:49:17.880" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:49:17.881" starttime="20170725 02:49:17.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:49:17.882" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:49:17.882" starttime="20170725 02:49:17.881"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:49:17.882" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:49:17.883" starttime="20170725 02:49:17.882"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:49:17.883" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:49:17.883" starttime="20170725 02:49:17.883"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:49:18.080" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:49:18.080" starttime="20170725 02:49:17.884"></status>
</kw>
<msg timestamp="20170725 02:49:18.081" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:49:18.081" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:18.081" starttime="20170725 02:49:17.883"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:49:18.081" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:18.081" starttime="20170725 02:49:18.081"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:18.082" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:18.082" starttime="20170725 02:49:18.082"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:18.082" starttime="20170725 02:49:17.879"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:18.082" starttime="20170725 02:49:17.878"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:18.082" starttime="20170725 02:49:17.877"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:49:18.083" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:49:18.083" starttime="20170725 02:49:18.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:18.084" starttime="20170725 02:49:18.084"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:49:18.163" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:49:18.163" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:18.163" starttime="20170725 02:49:18.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:18.163" starttime="20170725 02:49:18.163"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:49:18.164" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:49:18.164" starttime="20170725 02:49:18.164"></status>
</kw>
<msg timestamp="20170725 02:49:18.164" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:18.164" starttime="20170725 02:49:17.876"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:18.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:18.165" starttime="20170725 02:49:18.164"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:49:18.165" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:49:18.165" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:49:18.165" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:49:18.166" starttime="20170725 02:49:18.165"></status>
</kw>
<msg timestamp="20170725 02:49:18.166" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:49:18.166" starttime="20170725 02:49:17.875"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:18.166" starttime="20170725 02:49:17.875"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:49:18.171" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:49:18.175" starttime="20170725 02:49:18.170"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:49:18.176" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:49:18.176" starttime="20170725 02:49:18.175"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:49:18.176" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:49:18.176" starttime="20170725 02:49:18.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:49:18.177" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:49:18.177" starttime="20170725 02:49:18.177"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:49:18.401" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:49:18.401" starttime="20170725 02:49:18.178"></status>
</kw>
<msg timestamp="20170725 02:49:18.402" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:49:18.402" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:18.402" starttime="20170725 02:49:18.177"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:49:18.402" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:18.402" starttime="20170725 02:49:18.402"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:18.403" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:18.403" starttime="20170725 02:49:18.403"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:18.403" starttime="20170725 02:49:18.169"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:18.403" starttime="20170725 02:49:18.169"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:18.403" starttime="20170725 02:49:18.168"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:49:18.404" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:49:18.404" starttime="20170725 02:49:18.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:18.405" starttime="20170725 02:49:18.404"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:49:18.468" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:49:18.468" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:18.468" starttime="20170725 02:49:18.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:18.469" starttime="20170725 02:49:18.468"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:49:18.469" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:49:18.469" starttime="20170725 02:49:18.469"></status>
</kw>
<msg timestamp="20170725 02:49:18.470" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:18.470" starttime="20170725 02:49:18.167"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:18.470" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:18.470" starttime="20170725 02:49:18.470"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:49:18.471" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:49:18.471" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:49:18.471" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:49:18.471" starttime="20170725 02:49:18.471"></status>
</kw>
<msg timestamp="20170725 02:49:18.471" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:49:18.472" starttime="20170725 02:49:18.167"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:18.472" starttime="20170725 02:49:18.166"></status>
</kw>
<msg timestamp="20170725 02:49:18.473" level="FAIL">
#(UTC) 2017/07/25 02:49:18.472214 -   10.934334 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:49:18.473" starttime="20170725 02:49:17.539"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:49:28.479" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:49:28.479" starttime="20170725 02:49:28.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:49:28.480" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:49:28.480" starttime="20170725 02:49:28.480"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:49:28.481" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:49:28.481" starttime="20170725 02:49:28.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:49:28.481" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:49:28.482" starttime="20170725 02:49:28.481"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:49:28.660" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:49:28.660" starttime="20170725 02:49:28.482"></status>
</kw>
<msg timestamp="20170725 02:49:28.660" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:49:28.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:28.660" starttime="20170725 02:49:28.482"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:49:28.661" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:28.661" starttime="20170725 02:49:28.661"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:28.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:28.662" starttime="20170725 02:49:28.661"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:28.662" starttime="20170725 02:49:28.478"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:28.662" starttime="20170725 02:49:28.477"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:28.662" starttime="20170725 02:49:28.477"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:49:28.663" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:49:28.663" starttime="20170725 02:49:28.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:28.663" starttime="20170725 02:49:28.663"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:49:28.762" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:49:28.762" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:28.763" starttime="20170725 02:49:28.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:28.763" starttime="20170725 02:49:28.763"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:49:28.764" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:49:28.764" starttime="20170725 02:49:28.763"></status>
</kw>
<msg timestamp="20170725 02:49:28.764" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:28.764" starttime="20170725 02:49:28.476"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:28.765" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:28.765" starttime="20170725 02:49:28.764"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:49:28.765" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:49:28.765" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:49:28.765" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:49:28.765" starttime="20170725 02:49:28.765"></status>
</kw>
<msg timestamp="20170725 02:49:28.766" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:49:28.766" starttime="20170725 02:49:28.475"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:28.766" starttime="20170725 02:49:28.475"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:49:28.770" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:49:28.771" starttime="20170725 02:49:28.770"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:49:28.771" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:49:28.771" starttime="20170725 02:49:28.771"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:49:28.772" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:49:28.772" starttime="20170725 02:49:28.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:49:28.773" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:49:28.773" starttime="20170725 02:49:28.772"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:49:28.961" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:49:28.961" starttime="20170725 02:49:28.774"></status>
</kw>
<msg timestamp="20170725 02:49:28.961" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:49:28.962" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:28.962" starttime="20170725 02:49:28.773"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:49:28.962" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:28.962" starttime="20170725 02:49:28.962"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:28.963" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:28.963" starttime="20170725 02:49:28.963"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:28.963" starttime="20170725 02:49:28.769"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:28.963" starttime="20170725 02:49:28.769"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:28.963" starttime="20170725 02:49:28.768"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:49:28.964" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:49:28.964" starttime="20170725 02:49:28.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:28.965" starttime="20170725 02:49:28.964"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:49:29.039" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:49:29.040" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:29.040" starttime="20170725 02:49:28.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:29.040" starttime="20170725 02:49:29.040"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:49:29.041" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:49:29.041" starttime="20170725 02:49:29.041"></status>
</kw>
<msg timestamp="20170725 02:49:29.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:29.041" starttime="20170725 02:49:28.767"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:29.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:29.042" starttime="20170725 02:49:29.041"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:49:29.042" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:49:29.042" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:49:29.043" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:49:29.043" starttime="20170725 02:49:29.042"></status>
</kw>
<msg timestamp="20170725 02:49:29.043" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:49:29.043" starttime="20170725 02:49:28.767"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:29.043" starttime="20170725 02:49:28.766"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:49:29.047" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:49:29.048" starttime="20170725 02:49:29.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:49:29.048" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:49:29.048" starttime="20170725 02:49:29.048"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:49:29.049" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:49:29.049" starttime="20170725 02:49:29.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:49:29.050" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:49:29.050" starttime="20170725 02:49:29.049"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:49:29.233" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:49:29.233" starttime="20170725 02:49:29.050"></status>
</kw>
<msg timestamp="20170725 02:49:29.233" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:49:29.233" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:29.233" starttime="20170725 02:49:29.050"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:49:29.234" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:29.234" starttime="20170725 02:49:29.234"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:29.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:29.235" starttime="20170725 02:49:29.234"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:29.235" starttime="20170725 02:49:29.046"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:29.235" starttime="20170725 02:49:29.045"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:29.235" starttime="20170725 02:49:29.045"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:49:29.236" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:49:29.236" starttime="20170725 02:49:29.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:29.237" starttime="20170725 02:49:29.236"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:49:29.302" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:49:29.302" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:29.302" starttime="20170725 02:49:29.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:29.303" starttime="20170725 02:49:29.302"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:49:29.303" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:49:29.303" starttime="20170725 02:49:29.303"></status>
</kw>
<msg timestamp="20170725 02:49:29.303" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:29.303" starttime="20170725 02:49:29.044"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:29.304" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:29.304" starttime="20170725 02:49:29.304"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:49:29.304" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:49:29.305" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:49:29.305" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:49:29.305" starttime="20170725 02:49:29.304"></status>
</kw>
<msg timestamp="20170725 02:49:29.305" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:49:29.305" starttime="20170725 02:49:29.044"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:29.305" starttime="20170725 02:49:29.043"></status>
</kw>
<msg timestamp="20170725 02:49:29.306" level="FAIL">
#(UTC) 2017/07/25 02:49:29.305473 -   10.833259 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:49:29.306" starttime="20170725 02:49:28.473"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:49:39.312" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:49:39.313" starttime="20170725 02:49:39.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:49:39.313" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:49:39.314" starttime="20170725 02:49:39.313"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:49:39.314" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:49:39.314" starttime="20170725 02:49:39.314"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:49:39.315" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:49:39.315" starttime="20170725 02:49:39.314"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:49:39.503" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:49:39.503" starttime="20170725 02:49:39.316"></status>
</kw>
<msg timestamp="20170725 02:49:39.504" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:49:39.504" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:39.504" starttime="20170725 02:49:39.315"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:49:39.504" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:39.504" starttime="20170725 02:49:39.504"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:39.505" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:39.505" starttime="20170725 02:49:39.505"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:39.505" starttime="20170725 02:49:39.311"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:39.505" starttime="20170725 02:49:39.311"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:39.506" starttime="20170725 02:49:39.310"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:49:39.506" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:49:39.506" starttime="20170725 02:49:39.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:39.507" starttime="20170725 02:49:39.506"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:49:39.570" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:49:39.570" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:39.570" starttime="20170725 02:49:39.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:39.571" starttime="20170725 02:49:39.570"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:49:39.571" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:49:39.571" starttime="20170725 02:49:39.571"></status>
</kw>
<msg timestamp="20170725 02:49:39.572" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:39.572" starttime="20170725 02:49:39.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:39.572" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:39.572" starttime="20170725 02:49:39.572"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:49:39.573" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:49:39.573" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:49:39.573" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:49:39.573" starttime="20170725 02:49:39.573"></status>
</kw>
<msg timestamp="20170725 02:49:39.573" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:49:39.573" starttime="20170725 02:49:39.309"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:39.574" starttime="20170725 02:49:39.308"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:49:39.577" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:49:39.578" starttime="20170725 02:49:39.577"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:49:39.579" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:49:39.579" starttime="20170725 02:49:39.578"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:49:39.579" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:49:39.579" starttime="20170725 02:49:39.579"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:49:39.580" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:49:39.580" starttime="20170725 02:49:39.580"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:49:39.759" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:49:39.760" starttime="20170725 02:49:39.581"></status>
</kw>
<msg timestamp="20170725 02:49:39.760" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:49:39.760" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:39.760" starttime="20170725 02:49:39.581"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:49:39.761" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:39.761" starttime="20170725 02:49:39.760"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:39.761" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:39.761" starttime="20170725 02:49:39.761"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:39.761" starttime="20170725 02:49:39.576"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:39.762" starttime="20170725 02:49:39.576"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:39.762" starttime="20170725 02:49:39.575"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:49:39.762" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:49:39.762" starttime="20170725 02:49:39.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:39.763" starttime="20170725 02:49:39.763"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:49:39.829" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:49:39.829" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:39.829" starttime="20170725 02:49:39.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:39.830" starttime="20170725 02:49:39.829"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:49:39.830" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:49:39.830" starttime="20170725 02:49:39.830"></status>
</kw>
<msg timestamp="20170725 02:49:39.830" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:39.830" starttime="20170725 02:49:39.575"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:39.831" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:39.831" starttime="20170725 02:49:39.831"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:49:39.832" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:49:39.832" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:49:39.832" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:49:39.832" starttime="20170725 02:49:39.831"></status>
</kw>
<msg timestamp="20170725 02:49:39.832" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:49:39.832" starttime="20170725 02:49:39.574"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:39.832" starttime="20170725 02:49:39.574"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:49:39.836" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:49:39.837" starttime="20170725 02:49:39.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:49:39.837" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:49:39.837" starttime="20170725 02:49:39.837"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:49:39.838" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:49:39.838" starttime="20170725 02:49:39.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:49:39.839" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:49:39.839" starttime="20170725 02:49:39.838"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:49:40.123" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:49:40.123" starttime="20170725 02:49:39.840"></status>
</kw>
<msg timestamp="20170725 02:49:40.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:49:40.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:40.123" starttime="20170725 02:49:39.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:49:40.124" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:40.124" starttime="20170725 02:49:40.123"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:40.125" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:40.125" starttime="20170725 02:49:40.124"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:40.125" starttime="20170725 02:49:39.835"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:40.125" starttime="20170725 02:49:39.835"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:40.125" starttime="20170725 02:49:39.834"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:49:40.126" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:49:40.126" starttime="20170725 02:49:40.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:40.126" starttime="20170725 02:49:40.126"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:49:40.206" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:49:40.206" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:40.206" starttime="20170725 02:49:40.126"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:40.207" starttime="20170725 02:49:40.207"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:49:40.208" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:49:40.208" starttime="20170725 02:49:40.207"></status>
</kw>
<msg timestamp="20170725 02:49:40.208" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:40.208" starttime="20170725 02:49:39.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:40.208" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:40.209" starttime="20170725 02:49:40.208"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:49:40.209" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:49:40.209" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:49:40.209" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:49:40.209" starttime="20170725 02:49:40.209"></status>
</kw>
<msg timestamp="20170725 02:49:40.210" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:49:40.210" starttime="20170725 02:49:39.833"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:40.210" starttime="20170725 02:49:39.833"></status>
</kw>
<msg timestamp="20170725 02:49:40.211" level="FAIL">
#(UTC) 2017/07/25 02:49:40.210201 -   10.904728 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:49:40.211" starttime="20170725 02:49:39.307"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:49:50.218" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:49:50.219" starttime="20170725 02:49:50.217"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:49:50.220" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:49:50.220" starttime="20170725 02:49:50.219"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:49:50.221" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:49:50.221" starttime="20170725 02:49:50.220"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:49:50.222" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:49:50.222" starttime="20170725 02:49:50.221"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:49:50.418" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:49:50.419" starttime="20170725 02:49:50.223"></status>
</kw>
<msg timestamp="20170725 02:49:50.419" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:49:50.419" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:50.419" starttime="20170725 02:49:50.222"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:49:50.419" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:50.419" starttime="20170725 02:49:50.419"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:50.420" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:50.420" starttime="20170725 02:49:50.420"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:50.420" starttime="20170725 02:49:50.217"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:50.420" starttime="20170725 02:49:50.216"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:50.421" starttime="20170725 02:49:50.215"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:49:50.421" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:49:50.421" starttime="20170725 02:49:50.421"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:50.422" starttime="20170725 02:49:50.421"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:49:50.499" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:49:50.499" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:50.499" starttime="20170725 02:49:50.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:50.500" starttime="20170725 02:49:50.500"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:49:50.500" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:49:50.501" starttime="20170725 02:49:50.500"></status>
</kw>
<msg timestamp="20170725 02:49:50.501" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:50.501" starttime="20170725 02:49:50.214"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:50.501" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:50.501" starttime="20170725 02:49:50.501"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:49:50.502" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:49:50.502" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:49:50.502" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:49:50.502" starttime="20170725 02:49:50.502"></status>
</kw>
<msg timestamp="20170725 02:49:50.503" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:49:50.503" starttime="20170725 02:49:50.213"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:50.503" starttime="20170725 02:49:50.213"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:49:50.507" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:49:50.507" starttime="20170725 02:49:50.506"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:49:50.508" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:49:50.508" starttime="20170725 02:49:50.508"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:49:50.509" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:49:50.509" starttime="20170725 02:49:50.508"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:49:50.509" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:49:50.509" starttime="20170725 02:49:50.509"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:49:50.715" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:49:50.715" starttime="20170725 02:49:50.510"></status>
</kw>
<msg timestamp="20170725 02:49:50.715" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:49:50.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:50.716" starttime="20170725 02:49:50.510"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:49:50.716" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:50.716" starttime="20170725 02:49:50.716"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:50.717" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:50.717" starttime="20170725 02:49:50.716"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:50.717" starttime="20170725 02:49:50.506"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:50.717" starttime="20170725 02:49:50.505"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:50.717" starttime="20170725 02:49:50.505"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:49:50.718" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:49:50.718" starttime="20170725 02:49:50.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:50.718" starttime="20170725 02:49:50.718"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:49:50.786" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:49:50.786" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:50.786" starttime="20170725 02:49:50.719"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:50.787" starttime="20170725 02:49:50.786"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:49:50.787" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:49:50.787" starttime="20170725 02:49:50.787"></status>
</kw>
<msg timestamp="20170725 02:49:50.787" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:50.787" starttime="20170725 02:49:50.504"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:50.788" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:50.788" starttime="20170725 02:49:50.788"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:49:50.789" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:49:50.789" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:49:50.789" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:49:50.789" starttime="20170725 02:49:50.788"></status>
</kw>
<msg timestamp="20170725 02:49:50.789" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:49:50.790" starttime="20170725 02:49:50.504"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:50.790" starttime="20170725 02:49:50.503"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:49:50.793" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:49:50.794" starttime="20170725 02:49:50.793"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:49:50.795" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:49:50.795" starttime="20170725 02:49:50.794"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:49:50.795" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:49:50.795" starttime="20170725 02:49:50.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:49:50.796" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:49:50.796" starttime="20170725 02:49:50.796"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:49:51.061" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:49:51.061" starttime="20170725 02:49:50.797"></status>
</kw>
<msg timestamp="20170725 02:49:51.061" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:49:51.061" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:51.061" starttime="20170725 02:49:50.796"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:49:51.062" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:51.062" starttime="20170725 02:49:51.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:51.062" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:51.062" starttime="20170725 02:49:51.062"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:51.063" starttime="20170725 02:49:50.793"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:51.063" starttime="20170725 02:49:50.792"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:51.063" starttime="20170725 02:49:50.792"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:49:51.063" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:49:51.063" starttime="20170725 02:49:51.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:51.064" starttime="20170725 02:49:51.064"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:49:51.127" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:49:51.127" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:51.127" starttime="20170725 02:49:51.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:49:51.128" starttime="20170725 02:49:51.127"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:49:51.128" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:49:51.128" starttime="20170725 02:49:51.128"></status>
</kw>
<msg timestamp="20170725 02:49:51.128" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:49:51.128" starttime="20170725 02:49:50.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:49:51.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:49:51.129" starttime="20170725 02:49:51.129"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:49:51.130" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:49:51.130" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:49:51.130" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:49:51.131" starttime="20170725 02:49:51.130"></status>
</kw>
<msg timestamp="20170725 02:49:51.131" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:49:51.131" starttime="20170725 02:49:50.790"></status>
</kw>
<status status="PASS" endtime="20170725 02:49:51.131" starttime="20170725 02:49:50.790"></status>
</kw>
<msg timestamp="20170725 02:49:51.132" level="FAIL">
#(UTC) 2017/07/25 02:49:51.131590 -   10.921389 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:49:51.132" starttime="20170725 02:49:50.211"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:01.138" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:01.139" starttime="20170725 02:50:01.138"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:01.140" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:01.140" starttime="20170725 02:50:01.139"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:01.141" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:01.141" starttime="20170725 02:50:01.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:01.142" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:01.142" starttime="20170725 02:50:01.141"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:01.323" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:01.323" starttime="20170725 02:50:01.143"></status>
</kw>
<msg timestamp="20170725 02:50:01.323" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:01.323" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:01.323" starttime="20170725 02:50:01.142"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:01.324" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:01.324" starttime="20170725 02:50:01.323"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:01.324" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:01.325" starttime="20170725 02:50:01.324"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:01.325" starttime="20170725 02:50:01.137"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:01.325" starttime="20170725 02:50:01.137"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:01.325" starttime="20170725 02:50:01.136"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:01.325" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:50:01.325" starttime="20170725 02:50:01.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:01.326" starttime="20170725 02:50:01.326"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:01.391" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:50:01.391" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:01.391" starttime="20170725 02:50:01.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:01.392" starttime="20170725 02:50:01.392"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:01.392" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:01.392" starttime="20170725 02:50:01.392"></status>
</kw>
<msg timestamp="20170725 02:50:01.393" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:01.393" starttime="20170725 02:50:01.135"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:01.393" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:01.393" starttime="20170725 02:50:01.393"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:50:01.394" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:01.394" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:50:01.394" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:50:01.394" starttime="20170725 02:50:01.394"></status>
</kw>
<msg timestamp="20170725 02:50:01.394" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:50:01.394" starttime="20170725 02:50:01.135"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:01.395" starttime="20170725 02:50:01.134"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:01.398" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:01.399" starttime="20170725 02:50:01.398"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:01.400" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:01.400" starttime="20170725 02:50:01.399"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:01.400" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:01.401" starttime="20170725 02:50:01.400"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:01.401" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:01.401" starttime="20170725 02:50:01.401"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:01.669" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:01.669" starttime="20170725 02:50:01.402"></status>
</kw>
<msg timestamp="20170725 02:50:01.669" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:01.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:01.670" starttime="20170725 02:50:01.401"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:01.670" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:01.670" starttime="20170725 02:50:01.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:01.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:01.671" starttime="20170725 02:50:01.671"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:01.671" starttime="20170725 02:50:01.398"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:01.671" starttime="20170725 02:50:01.397"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:01.671" starttime="20170725 02:50:01.397"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:01.672" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:50:01.672" starttime="20170725 02:50:01.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:01.673" starttime="20170725 02:50:01.672"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:01.761" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:50:01.761" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:01.762" starttime="20170725 02:50:01.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:01.762" starttime="20170725 02:50:01.762"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:01.763" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:01.763" starttime="20170725 02:50:01.763"></status>
</kw>
<msg timestamp="20170725 02:50:01.763" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:01.763" starttime="20170725 02:50:01.396"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:01.764" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:01.764" starttime="20170725 02:50:01.763"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:50:01.764" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:01.764" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:50:01.764" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:50:01.765" starttime="20170725 02:50:01.764"></status>
</kw>
<msg timestamp="20170725 02:50:01.765" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:50:01.765" starttime="20170725 02:50:01.395"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:01.765" starttime="20170725 02:50:01.395"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:01.769" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:01.773" starttime="20170725 02:50:01.768"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:01.774" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:01.774" starttime="20170725 02:50:01.774"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:01.775" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:01.775" starttime="20170725 02:50:01.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:01.776" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:01.776" starttime="20170725 02:50:01.775"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:02.027" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:02.028" starttime="20170725 02:50:01.777"></status>
</kw>
<msg timestamp="20170725 02:50:02.028" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:02.028" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:02.028" starttime="20170725 02:50:01.776"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:02.028" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:02.028" starttime="20170725 02:50:02.028"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:02.029" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:02.029" starttime="20170725 02:50:02.029"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:02.029" starttime="20170725 02:50:01.768"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:02.029" starttime="20170725 02:50:01.767"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:02.030" starttime="20170725 02:50:01.767"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:02.030" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:50:02.030" starttime="20170725 02:50:02.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:02.031" starttime="20170725 02:50:02.031"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:02.100" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:50:02.100" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:02.100" starttime="20170725 02:50:02.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:02.101" starttime="20170725 02:50:02.100"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:02.101" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:02.101" starttime="20170725 02:50:02.101"></status>
</kw>
<msg timestamp="20170725 02:50:02.101" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:02.101" starttime="20170725 02:50:01.766"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:02.102" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:02.102" starttime="20170725 02:50:02.102"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:50:02.103" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:02.103" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:50:02.103" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:50:02.103" starttime="20170725 02:50:02.102"></status>
</kw>
<msg timestamp="20170725 02:50:02.103" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:50:02.103" starttime="20170725 02:50:01.766"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:02.103" starttime="20170725 02:50:01.765"></status>
</kw>
<msg timestamp="20170725 02:50:02.104" level="FAIL">
#(UTC) 2017/07/25 02:50:02.103734 -   10.972144 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:50:02.104" starttime="20170725 02:50:01.133"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:12.110" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:12.111" starttime="20170725 02:50:12.110"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:12.112" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:12.112" starttime="20170725 02:50:12.111"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:12.112" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:12.113" starttime="20170725 02:50:12.112"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:12.113" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:12.113" starttime="20170725 02:50:12.113"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:12.341" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:12.341" starttime="20170725 02:50:12.114"></status>
</kw>
<msg timestamp="20170725 02:50:12.342" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:12.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.342" starttime="20170725 02:50:12.113"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:12.342" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.342" starttime="20170725 02:50:12.342"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:12.343" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.343" starttime="20170725 02:50:12.343"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:12.343" starttime="20170725 02:50:12.109"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:12.343" starttime="20170725 02:50:12.109"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:12.343" starttime="20170725 02:50:12.108"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:12.344" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:50:12.344" starttime="20170725 02:50:12.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:12.345" starttime="20170725 02:50:12.344"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:12.407" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:50:12.407" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.407" starttime="20170725 02:50:12.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:12.408" starttime="20170725 02:50:12.408"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:12.408" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:12.408" starttime="20170725 02:50:12.408"></status>
</kw>
<msg timestamp="20170725 02:50:12.409" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.409" starttime="20170725 02:50:12.108"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:12.409" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.409" starttime="20170725 02:50:12.409"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:50:12.410" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:12.410" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:50:12.410" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:50:12.410" starttime="20170725 02:50:12.410"></status>
</kw>
<msg timestamp="20170725 02:50:12.411" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:50:12.411" starttime="20170725 02:50:12.107"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:12.411" starttime="20170725 02:50:12.107"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:12.415" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:12.415" starttime="20170725 02:50:12.414"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:12.416" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:12.416" starttime="20170725 02:50:12.416"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:12.416" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:12.417" starttime="20170725 02:50:12.416"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:12.417" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:12.417" starttime="20170725 02:50:12.417"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:12.608" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:12.608" starttime="20170725 02:50:12.418"></status>
</kw>
<msg timestamp="20170725 02:50:12.608" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:12.608" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.608" starttime="20170725 02:50:12.417"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:12.609" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.609" starttime="20170725 02:50:12.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:12.610" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.610" starttime="20170725 02:50:12.609"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:12.610" starttime="20170725 02:50:12.414"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:12.610" starttime="20170725 02:50:12.413"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:12.610" starttime="20170725 02:50:12.413"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:12.611" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:50:12.611" starttime="20170725 02:50:12.610"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:12.611" starttime="20170725 02:50:12.611"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:12.678" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:50:12.678" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.678" starttime="20170725 02:50:12.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:12.679" starttime="20170725 02:50:12.679"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:12.679" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:12.679" starttime="20170725 02:50:12.679"></status>
</kw>
<msg timestamp="20170725 02:50:12.680" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.680" starttime="20170725 02:50:12.412"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:12.680" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.680" starttime="20170725 02:50:12.680"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:50:12.681" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:12.681" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:50:12.681" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:50:12.681" starttime="20170725 02:50:12.681"></status>
</kw>
<msg timestamp="20170725 02:50:12.681" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:50:12.682" starttime="20170725 02:50:12.412"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:12.682" starttime="20170725 02:50:12.411"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:12.685" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:12.686" starttime="20170725 02:50:12.685"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:12.687" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:12.687" starttime="20170725 02:50:12.686"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:12.687" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:12.687" starttime="20170725 02:50:12.687"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:12.688" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:12.688" starttime="20170725 02:50:12.688"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:12.883" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:12.884" starttime="20170725 02:50:12.689"></status>
</kw>
<msg timestamp="20170725 02:50:12.884" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:12.884" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.884" starttime="20170725 02:50:12.688"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:12.884" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.885" starttime="20170725 02:50:12.884"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:12.885" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.885" starttime="20170725 02:50:12.885"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:12.885" starttime="20170725 02:50:12.685"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:12.885" starttime="20170725 02:50:12.684"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:12.886" starttime="20170725 02:50:12.684"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:12.886" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:50:12.886" starttime="20170725 02:50:12.886"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:12.887" starttime="20170725 02:50:12.886"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:12.949" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:50:12.950" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.950" starttime="20170725 02:50:12.887"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:12.950" starttime="20170725 02:50:12.950"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:12.951" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:12.951" starttime="20170725 02:50:12.951"></status>
</kw>
<msg timestamp="20170725 02:50:12.951" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.951" starttime="20170725 02:50:12.683"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:12.952" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:12.952" starttime="20170725 02:50:12.952"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:50:12.953" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:12.953" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:50:12.953" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:50:12.953" starttime="20170725 02:50:12.952"></status>
</kw>
<msg timestamp="20170725 02:50:12.953" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:50:12.953" starttime="20170725 02:50:12.682"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:12.953" starttime="20170725 02:50:12.682"></status>
</kw>
<msg timestamp="20170725 02:50:12.954" level="FAIL">
#(UTC) 2017/07/25 02:50:12.953733 -   10.849999 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:50:12.954" starttime="20170725 02:50:12.105"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:22.960" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:22.961" starttime="20170725 02:50:22.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:22.962" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:22.962" starttime="20170725 02:50:22.961"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:22.962" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:22.962" starttime="20170725 02:50:22.962"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:22.963" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:22.963" starttime="20170725 02:50:22.963"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:23.160" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:23.160" starttime="20170725 02:50:22.964"></status>
</kw>
<msg timestamp="20170725 02:50:23.160" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:23.160" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.160" starttime="20170725 02:50:22.963"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:23.161" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.161" starttime="20170725 02:50:23.161"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:23.162" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.162" starttime="20170725 02:50:23.161"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:23.162" starttime="20170725 02:50:22.959"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:23.162" starttime="20170725 02:50:22.959"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:23.162" starttime="20170725 02:50:22.958"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:23.163" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:50:23.163" starttime="20170725 02:50:23.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:23.163" starttime="20170725 02:50:23.163"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:23.285" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:50:23.285" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.285" starttime="20170725 02:50:23.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:23.286" starttime="20170725 02:50:23.285"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:23.286" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:23.286" starttime="20170725 02:50:23.286"></status>
</kw>
<msg timestamp="20170725 02:50:23.286" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.286" starttime="20170725 02:50:22.958"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:23.287" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.287" starttime="20170725 02:50:23.287"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:50:23.288" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:23.288" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:50:23.288" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:50:23.288" starttime="20170725 02:50:23.287"></status>
</kw>
<msg timestamp="20170725 02:50:23.288" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:50:23.288" starttime="20170725 02:50:22.957"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:23.289" starttime="20170725 02:50:22.957"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:23.292" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:23.293" starttime="20170725 02:50:23.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:23.294" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:23.294" starttime="20170725 02:50:23.293"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:23.294" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:23.294" starttime="20170725 02:50:23.294"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:23.295" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:23.295" starttime="20170725 02:50:23.295"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:23.497" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:23.497" starttime="20170725 02:50:23.296"></status>
</kw>
<msg timestamp="20170725 02:50:23.497" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:23.497" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.497" starttime="20170725 02:50:23.295"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:23.498" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.498" starttime="20170725 02:50:23.497"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:23.498" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.498" starttime="20170725 02:50:23.498"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:23.499" starttime="20170725 02:50:23.292"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:23.499" starttime="20170725 02:50:23.291"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:23.499" starttime="20170725 02:50:23.291"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:23.499" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:50:23.499" starttime="20170725 02:50:23.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:23.500" starttime="20170725 02:50:23.500"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:23.599" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:50:23.600" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.600" starttime="20170725 02:50:23.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:23.600" starttime="20170725 02:50:23.600"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:23.601" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:23.601" starttime="20170725 02:50:23.601"></status>
</kw>
<msg timestamp="20170725 02:50:23.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.601" starttime="20170725 02:50:23.290"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:23.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.602" starttime="20170725 02:50:23.601"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:50:23.602" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:23.602" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:50:23.603" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:50:23.603" starttime="20170725 02:50:23.602"></status>
</kw>
<msg timestamp="20170725 02:50:23.603" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:50:23.603" starttime="20170725 02:50:23.289"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:23.603" starttime="20170725 02:50:23.289"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:23.608" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:23.609" starttime="20170725 02:50:23.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:23.610" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:23.610" starttime="20170725 02:50:23.609"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:23.611" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:23.611" starttime="20170725 02:50:23.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:23.612" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:23.612" starttime="20170725 02:50:23.611"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:23.809" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:23.809" starttime="20170725 02:50:23.613"></status>
</kw>
<msg timestamp="20170725 02:50:23.809" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:23.809" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.809" starttime="20170725 02:50:23.612"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:23.810" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.810" starttime="20170725 02:50:23.810"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:23.811" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.811" starttime="20170725 02:50:23.810"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:23.811" starttime="20170725 02:50:23.607"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:23.811" starttime="20170725 02:50:23.606"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:23.811" starttime="20170725 02:50:23.605"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:23.812" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:50:23.812" starttime="20170725 02:50:23.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:23.812" starttime="20170725 02:50:23.812"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:23.875" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:50:23.875" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.875" starttime="20170725 02:50:23.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:23.876" starttime="20170725 02:50:23.876"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:23.877" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:23.877" starttime="20170725 02:50:23.877"></status>
</kw>
<msg timestamp="20170725 02:50:23.877" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.877" starttime="20170725 02:50:23.605"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:23.878" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:23.878" starttime="20170725 02:50:23.878"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:50:23.879" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:23.879" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:50:23.879" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:50:23.879" starttime="20170725 02:50:23.879"></status>
</kw>
<msg timestamp="20170725 02:50:23.880" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:50:23.880" starttime="20170725 02:50:23.604"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:23.880" starttime="20170725 02:50:23.603"></status>
</kw>
<msg timestamp="20170725 02:50:23.881" level="FAIL">
#(UTC) 2017/07/25 02:50:23.880396 -   10.926663 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:50:23.881" starttime="20170725 02:50:22.955"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:33.888" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:33.889" starttime="20170725 02:50:33.887"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:33.889" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:33.889" starttime="20170725 02:50:33.889"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:33.890" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:33.890" starttime="20170725 02:50:33.890"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:33.891" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:33.891" starttime="20170725 02:50:33.890"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:34.195" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:34.195" starttime="20170725 02:50:33.891"></status>
</kw>
<msg timestamp="20170725 02:50:34.195" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:34.195" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.195" starttime="20170725 02:50:33.891"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:34.196" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.196" starttime="20170725 02:50:34.195"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:34.197" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.197" starttime="20170725 02:50:34.196"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:34.197" starttime="20170725 02:50:33.887"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:34.197" starttime="20170725 02:50:33.886"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:34.197" starttime="20170725 02:50:33.885"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:34.198" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:50:34.198" starttime="20170725 02:50:34.197"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:34.198" starttime="20170725 02:50:34.198"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:34.263" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:50:34.263" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.263" starttime="20170725 02:50:34.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:34.263" starttime="20170725 02:50:34.263"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:34.264" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:34.264" starttime="20170725 02:50:34.264"></status>
</kw>
<msg timestamp="20170725 02:50:34.264" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.264" starttime="20170725 02:50:33.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:34.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.265" starttime="20170725 02:50:34.264"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:50:34.265" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:34.265" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:50:34.265" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:50:34.266" starttime="20170725 02:50:34.265"></status>
</kw>
<msg timestamp="20170725 02:50:34.266" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:50:34.266" starttime="20170725 02:50:33.884"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:34.266" starttime="20170725 02:50:33.884"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:34.270" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:34.271" starttime="20170725 02:50:34.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:34.271" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:34.271" starttime="20170725 02:50:34.271"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:34.272" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:34.272" starttime="20170725 02:50:34.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:34.273" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:34.273" starttime="20170725 02:50:34.272"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:34.449" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:34.449" starttime="20170725 02:50:34.273"></status>
</kw>
<msg timestamp="20170725 02:50:34.449" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:34.449" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.449" starttime="20170725 02:50:34.273"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:34.450" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.450" starttime="20170725 02:50:34.449"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:34.450" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.450" starttime="20170725 02:50:34.450"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:34.451" starttime="20170725 02:50:34.269"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:34.451" starttime="20170725 02:50:34.269"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:34.451" starttime="20170725 02:50:34.268"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:34.451" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:50:34.451" starttime="20170725 02:50:34.451"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:34.452" starttime="20170725 02:50:34.452"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:34.522" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:50:34.523" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.523" starttime="20170725 02:50:34.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:34.523" starttime="20170725 02:50:34.523"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:34.524" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:34.524" starttime="20170725 02:50:34.523"></status>
</kw>
<msg timestamp="20170725 02:50:34.524" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.524" starttime="20170725 02:50:34.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:34.525" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.525" starttime="20170725 02:50:34.524"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:50:34.525" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:34.525" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:50:34.525" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:50:34.525" starttime="20170725 02:50:34.525"></status>
</kw>
<msg timestamp="20170725 02:50:34.526" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:50:34.526" starttime="20170725 02:50:34.267"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:34.526" starttime="20170725 02:50:34.266"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:34.530" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:34.530" starttime="20170725 02:50:34.529"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:34.531" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:34.531" starttime="20170725 02:50:34.531"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:34.532" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:34.532" starttime="20170725 02:50:34.531"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:34.532" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:34.532" starttime="20170725 02:50:34.532"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:34.711" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:34.711" starttime="20170725 02:50:34.533"></status>
</kw>
<msg timestamp="20170725 02:50:34.711" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:34.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.711" starttime="20170725 02:50:34.533"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:34.712" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.712" starttime="20170725 02:50:34.711"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:34.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.712" starttime="20170725 02:50:34.712"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:34.713" starttime="20170725 02:50:34.529"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:34.713" starttime="20170725 02:50:34.528"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:34.713" starttime="20170725 02:50:34.528"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:34.713" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:50:34.713" starttime="20170725 02:50:34.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:34.714" starttime="20170725 02:50:34.714"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:34.784" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:50:34.784" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.784" starttime="20170725 02:50:34.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:34.785" starttime="20170725 02:50:34.785"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:34.786" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:34.786" starttime="20170725 02:50:34.785"></status>
</kw>
<msg timestamp="20170725 02:50:34.786" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.786" starttime="20170725 02:50:34.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:34.787" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:34.787" starttime="20170725 02:50:34.786"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:50:34.787" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:34.787" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:50:34.787" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:50:34.787" starttime="20170725 02:50:34.787"></status>
</kw>
<msg timestamp="20170725 02:50:34.788" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:50:34.788" starttime="20170725 02:50:34.527"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:34.788" starttime="20170725 02:50:34.526"></status>
</kw>
<msg timestamp="20170725 02:50:34.789" level="FAIL">
#(UTC) 2017/07/25 02:50:34.788400 -   10.908004 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:50:34.789" starttime="20170725 02:50:33.882"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'rest': u'^1$', u'boot_progress': u'^FW Progress, Starting OS$', u'host': u'^Running$', u'chassis': u'^On$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:44.795" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:44.796" starttime="20170725 02:50:44.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:44.796" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:44.796" starttime="20170725 02:50:44.796"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:44.797" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:44.797" starttime="20170725 02:50:44.797"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:44.798" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:44.798" starttime="20170725 02:50:44.797"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:45.061" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:45.061" starttime="20170725 02:50:44.799"></status>
</kw>
<msg timestamp="20170725 02:50:45.061" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:45.061" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.062" starttime="20170725 02:50:44.798"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:45.062" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.062" starttime="20170725 02:50:45.062"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:45.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.063" starttime="20170725 02:50:45.063"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:45.063" starttime="20170725 02:50:44.794"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:45.063" starttime="20170725 02:50:44.794"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:45.063" starttime="20170725 02:50:44.793"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:45.064" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:50:45.064" starttime="20170725 02:50:45.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:45.065" starttime="20170725 02:50:45.064"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:45.129" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:50:45.129" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.129" starttime="20170725 02:50:45.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:45.130" starttime="20170725 02:50:45.130"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:45.130" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:45.130" starttime="20170725 02:50:45.130"></status>
</kw>
<msg timestamp="20170725 02:50:45.131" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.131" starttime="20170725 02:50:44.792"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:45.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.131" starttime="20170725 02:50:45.131"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:50:45.132" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:45.132" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:50:45.132" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:50:45.132" starttime="20170725 02:50:45.132"></status>
</kw>
<msg timestamp="20170725 02:50:45.132" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:50:45.133" starttime="20170725 02:50:44.792"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:45.133" starttime="20170725 02:50:44.791"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:45.137" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:45.137" starttime="20170725 02:50:45.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:45.138" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:45.138" starttime="20170725 02:50:45.138"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:45.139" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:45.139" starttime="20170725 02:50:45.138"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:45.139" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:45.139" starttime="20170725 02:50:45.139"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:45.316" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:45.316" starttime="20170725 02:50:45.140"></status>
</kw>
<msg timestamp="20170725 02:50:45.316" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:45.316" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.316" starttime="20170725 02:50:45.140"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:45.317" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.317" starttime="20170725 02:50:45.317"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:45.318" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.318" starttime="20170725 02:50:45.317"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:45.318" starttime="20170725 02:50:45.136"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:45.318" starttime="20170725 02:50:45.135"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:45.318" starttime="20170725 02:50:45.135"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:45.319" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:50:45.319" starttime="20170725 02:50:45.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:45.319" starttime="20170725 02:50:45.319"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:45.387" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:50:45.388" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.388" starttime="20170725 02:50:45.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:45.388" starttime="20170725 02:50:45.388"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:45.389" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:45.389" starttime="20170725 02:50:45.389"></status>
</kw>
<msg timestamp="20170725 02:50:45.389" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.389" starttime="20170725 02:50:45.134"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:45.390" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.390" starttime="20170725 02:50:45.389"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:50:45.390" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:45.390" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:50:45.391" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:50:45.391" starttime="20170725 02:50:45.390"></status>
</kw>
<msg timestamp="20170725 02:50:45.391" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:50:45.391" starttime="20170725 02:50:45.133"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:45.391" starttime="20170725 02:50:45.133"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:45.395" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:45.399" starttime="20170725 02:50:45.395"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:45.400" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:45.400" starttime="20170725 02:50:45.399"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:45.400" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:45.401" starttime="20170725 02:50:45.400"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:45.401" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:45.401" starttime="20170725 02:50:45.401"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:45.654" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:45.655" starttime="20170725 02:50:45.402"></status>
</kw>
<msg timestamp="20170725 02:50:45.655" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:45.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.655" starttime="20170725 02:50:45.402"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:45.655" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.656" starttime="20170725 02:50:45.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:45.656" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.656" starttime="20170725 02:50:45.656"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:45.656" starttime="20170725 02:50:45.394"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:45.656" starttime="20170725 02:50:45.394"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:45.657" starttime="20170725 02:50:45.393"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:45.657" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:50:45.657" starttime="20170725 02:50:45.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:45.658" starttime="20170725 02:50:45.657"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:45.736" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:50:45.737" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.737" starttime="20170725 02:50:45.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:45.737" starttime="20170725 02:50:45.737"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:45.738" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:45.738" starttime="20170725 02:50:45.738"></status>
</kw>
<msg timestamp="20170725 02:50:45.738" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.738" starttime="20170725 02:50:45.392"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:45.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:45.739" starttime="20170725 02:50:45.738"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:50:45.739" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:45.739" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:50:45.739" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:50:45.740" starttime="20170725 02:50:45.739"></status>
</kw>
<msg timestamp="20170725 02:50:45.740" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:50:45.740" starttime="20170725 02:50:45.392"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:45.740" starttime="20170725 02:50:45.391"></status>
</kw>
<msg timestamp="20170725 02:50:45.741" level="FAIL">
#(UTC) 2017/07/25 02:50:45.740338 -   10.951938 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:50:45.741" starttime="20170725 02:50:44.790"></status>
</kw>
<msg timestamp="20170725 02:50:45.741" level="FAIL">Keyword 'Check State' failed after retrying for 14 minutes. The last error was: 
#(UTC) 2017/07/25 02:50:45.740338 -   10.951938 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    1
  state[boot_progress]:                           FW Progress, Baseboard Init
  state[host]:                                    Running
  state[chassis]:                                 On
</msg>
<status status="FAIL" endtime="20170725 02:50:45.742" starttime="20170725 02:36:19.644"></status>
</kw>
<msg timestamp="20170725 02:50:45.751" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170725 02:50:45.757" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="My Ffdc" library="obmc_boot_test">
<doc>Collect FFDC data.</doc>
<msg timestamp="20170725 02:50:45.769" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<arguments>
<arg>ffdc_prefix=9.41.166.169.170725.025045.</arg>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170725 02:50:45.797" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170725 02:50:45.797" starttime="20170725 02:50:45.797"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170725 02:50:45.803" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170725 02:50:48.807" level="INFO">${RC} = 0</msg>
<msg timestamp="20170725 02:50:48.807" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.05 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.640 ms
64 bytes from 9.41.166.169...</msg>
<status status="PASS" endtime="20170725 02:50:48.807" starttime="20170725 02:50:45.797"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170725 02:50:48.811" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.05 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.640 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.611 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.643 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.611/0.736/1.050/0.181 ms</msg>
<status status="PASS" endtime="20170725 02:50:48.811" starttime="20170725 02:50:48.810"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:48.813" starttime="20170725 02:50:48.811"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:48.813" starttime="20170725 02:50:45.796"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170725 02:50:48.834" level="INFO">${cur_time} = 2017-07-25 02:50:48:833720</msg>
<status status="PASS" endtime="20170725 02:50:48.834" starttime="20170725 02:50:48.833"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170725 02:50:48.835" level="INFO">${cur_time} = 20170725025048833720</msg>
<status status="PASS" endtime="20170725 02:50:48.835" starttime="20170725 02:50:48.834"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:48.835" starttime="20170725 02:50:48.832"></status>
</kw>
<msg timestamp="20170725 02:50:48.841" level="INFO">${FFDC_TIME} = 20170725025048833720</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170725 02:50:48.843" level="INFO">${suite_name} = TestBiosUpdate</msg>
<status status="PASS" endtime="20170725 02:50:48.843" starttime="20170725 02:50:48.843"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170725 02:50:48.844" level="INFO">${suite_name} = 20170725025048833720_TestBiosUpdate</msg>
<status status="PASS" endtime="20170725 02:50:48.844" starttime="20170725 02:50:48.843"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170725 02:50:48.844" level="INFO">${test_name} = HostBIOSPowerOn</msg>
<status status="PASS" endtime="20170725 02:50:48.844" starttime="20170725 02:50:48.844"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170725 02:50:48.845" level="INFO">${test_name} = 20170725025048833720_HostBIOSPowerOn</msg>
<status status="PASS" endtime="20170725 02:50:48.845" starttime="20170725 02:50:48.844"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:48.845" starttime="20170725 02:50:48.842"></status>
</kw>
<msg timestamp="20170725 02:50:48.845" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/</msg>
<msg timestamp="20170725 02:50:48.846" level="INFO">${FFDC_PREFIX} = 9.41.166.169.170725.025045.</msg>
<msg timestamp="20170725 02:50:48.875" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/</arg>
</arguments>
<msg timestamp="20170725 02:50:48.876" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:48.876" starttime="20170725 02:50:48.875"></status>
</kw>
<msg timestamp="20170725 02:50:48.882" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:48.902" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:48.902" starttime="20170725 02:50:48.901"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:48.902" starttime="20170725 02:50:48.900"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:48.903" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:48.903" starttime="20170725 02:50:48.903"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:48.903" starttime="20170725 02:50:48.902"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:48.905" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:48.905" starttime="20170725 02:50:48.904"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:48.906" starttime="20170725 02:50:48.903"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:48.907" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:48.907" starttime="20170725 02:50:48.906"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:48.907" starttime="20170725 02:50:48.906"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:48.908" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:48.908" starttime="20170725 02:50:48.908"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:48.908" starttime="20170725 02:50:48.907"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:48.910" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:48.910" starttime="20170725 02:50:48.909"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:48.910" starttime="20170725 02:50:48.909"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:48.911" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:48.911" starttime="20170725 02:50:48.911"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:48.911" starttime="20170725 02:50:48.910"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:48.913" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:48.913" starttime="20170725 02:50:48.913"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:48.914" starttime="20170725 02:50:48.911"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:48.915" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:48.915" starttime="20170725 02:50:48.915"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:48.915" starttime="20170725 02:50:48.914"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:48.917" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:48.917" starttime="20170725 02:50:48.916"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:48.917" starttime="20170725 02:50:48.916"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:48.918" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:48.919" starttime="20170725 02:50:48.918"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:48.919" starttime="20170725 02:50:48.917"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:48.920" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:48.920" starttime="20170725 02:50:48.919"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:48.920" starttime="20170725 02:50:48.919"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:48.921" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:48.921" starttime="20170725 02:50:48.921"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:48.921" starttime="20170725 02:50:48.920"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170725 02:50:48.950" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:50:48.951" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170725 02:50:49.029" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170725 02:50:49.043" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170725 02:50:49.043" level="INFO">${stderr} = </msg>
<msg timestamp="20170725 02:50:49.043" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170725 02:50:49.043" starttime="20170725 02:50:48.922"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170725 02:50:49.043" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170725 02:50:49.044" starttime="20170725 02:50:49.043"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170725 02:50:49.046" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170725 02:50:49.046" starttime="20170725 02:50:49.044"></status>
</kw>
<msg timestamp="20170725 02:50:49.046" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170725 02:50:49.046" starttime="20170725 02:50:48.922"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:49.047" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:49.047" starttime="20170725 02:50:49.047"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.047" starttime="20170725 02:50:49.046"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.047" starttime="20170725 02:50:48.915"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:49.049" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:49.049" starttime="20170725 02:50:49.048"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.049" starttime="20170725 02:50:49.048"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 02:50:49.049" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170725 02:50:49.049" starttime="20170725 02:50:49.049"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:49.051" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:49.051" starttime="20170725 02:50:49.050"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.051" starttime="20170725 02:50:49.050"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:49.052" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:49.052" starttime="20170725 02:50:49.052"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.052" starttime="20170725 02:50:49.051"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.052" starttime="20170725 02:50:49.050"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:49.054" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:49.054" starttime="20170725 02:50:49.053"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.054" starttime="20170725 02:50:49.053"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:49.055" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:49.055" starttime="20170725 02:50:49.055"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.055" starttime="20170725 02:50:49.054"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.055" starttime="20170725 02:50:49.053"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:49.056" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:49.056" starttime="20170725 02:50:49.056"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.057" starttime="20170725 02:50:49.055"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:49.058" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:49.058" starttime="20170725 02:50:49.057"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.058" starttime="20170725 02:50:49.057"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.058" starttime="20170725 02:50:49.055"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.058" starttime="20170725 02:50:49.049"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:49.059" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:49.059" starttime="20170725 02:50:49.059"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.059" starttime="20170725 02:50:49.058"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.059" starttime="20170725 02:50:48.900"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 02:50:49.069" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170725 02:50:49.069" starttime="20170725 02:50:49.068"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170725 02:50:49.071" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170725 02:50:49.071" starttime="20170725 02:50:49.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:49.072" starttime="20170725 02:50:49.072"></status>
</kw>
<msg timestamp="20170725 02:50:49.072" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170725 02:50:49.072" starttime="20170725 02:50:49.071"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:49.074" starttime="20170725 02:50:49.074"></status>
</kw>
<msg timestamp="20170725 02:50:49.074" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:49.074" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 02:50:49.074" starttime="20170725 02:50:49.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:49.075" starttime="20170725 02:50:49.075"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 02:50:49.102" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170725 02:50:49.102" starttime="20170725 02:50:49.102"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 02:50:49.103" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170725 02:50:49.104" starttime="20170725 02:50:49.103"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170725 02:50:49.110" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170725 02:50:49.110" starttime="20170725 02:50:49.104"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:49.115" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:49.115" starttime="20170725 02:50:49.114"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.115" starttime="20170725 02:50:49.114"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:49.116" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:49.116" starttime="20170725 02:50:49.116"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.117" starttime="20170725 02:50:49.115"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:49.118" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:49.118" starttime="20170725 02:50:49.117"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.118" starttime="20170725 02:50:49.117"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:49.119" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:49.119" starttime="20170725 02:50:49.119"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.119" starttime="20170725 02:50:49.118"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.119" starttime="20170725 02:50:49.112"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:49.119" starttime="20170725 02:50:49.111"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:50:49.120" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:50:49.120" starttime="20170725 02:50:49.119"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:50:49.195" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:50:49.195" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170725 02:50:50.722" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:50:50.722" starttime="20170725 02:50:49.152"></status>
</kw>
<msg timestamp="20170725 02:50:50.722" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:50.722" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.R...</msg>
<status status="PASS" endtime="20170725 02:50:50.722" starttime="20170725 02:50:49.120"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:50:50.723" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<status status="PASS" endtime="20170725 02:50:50.723" starttime="20170725 02:50:50.723"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:50:50.723" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:50:50.723" starttime="20170725 02:50:50.723"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:50.730" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:50.730" starttime="20170725 02:50:50.730"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.731" starttime="20170725 02:50:50.729"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.731" starttime="20170725 02:50:50.724"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.731" starttime="20170725 02:50:49.110"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.731" starttime="20170725 02:50:49.110"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.731" starttime="20170725 02:50:49.110"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.731" starttime="20170725 02:50:49.103"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.731" starttime="20170725 02:50:49.102"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 02:50:50.732" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170725 02:50:50.732" starttime="20170725 02:50:50.732"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170725 02:50:50.733" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170725 02:50:50.733" starttime="20170725 02:50:50.732"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:50.736" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:50.736" starttime="20170725 02:50:50.736"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.736" starttime="20170725 02:50:50.735"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:50.738" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:50.738" starttime="20170725 02:50:50.737"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.738" starttime="20170725 02:50:50.737"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:50.739" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:50.739" starttime="20170725 02:50:50.739"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.739" starttime="20170725 02:50:50.738"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:50.740" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:50.740" starttime="20170725 02:50:50.740"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.740" starttime="20170725 02:50:50.739"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.740" starttime="20170725 02:50:50.734"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.741" starttime="20170725 02:50:50.734"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:50:50.741" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:50:50.741" starttime="20170725 02:50:50.741"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:50:50.816" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:50:50.817" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170725 02:50:50.864" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:50:50.864" starttime="20170725 02:50:50.775"></status>
</kw>
<msg timestamp="20170725 02:50:50.864" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:50.864" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-82"\nVERSION_ID="v1.99.8-82-g395b7bc"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC P...</msg>
<status status="PASS" endtime="20170725 02:50:50.864" starttime="20170725 02:50:50.742"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:50:50.865" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-82"
VERSION_ID="v1.99.8-82-g395b7bc"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<status status="PASS" endtime="20170725 02:50:50.865" starttime="20170725 02:50:50.865"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:50:50.866" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:50:50.866" starttime="20170725 02:50:50.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:50.876" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:50.876" starttime="20170725 02:50:50.875"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.876" starttime="20170725 02:50:50.874"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.876" starttime="20170725 02:50:50.866"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.876" starttime="20170725 02:50:50.733"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.876" starttime="20170725 02:50:50.733"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.876" starttime="20170725 02:50:50.733"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.877" starttime="20170725 02:50:50.731"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.877" starttime="20170725 02:50:50.731"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 02:50:50.878" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170725 02:50:50.878" starttime="20170725 02:50:50.877"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170725 02:50:50.878" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170725 02:50:50.878" starttime="20170725 02:50:50.878"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:50.882" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:50.883" starttime="20170725 02:50:50.882"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.883" starttime="20170725 02:50:50.881"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:50.884" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:50.884" starttime="20170725 02:50:50.884"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.884" starttime="20170725 02:50:50.883"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:50.885" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:50.885" starttime="20170725 02:50:50.885"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.885" starttime="20170725 02:50:50.884"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:50.887" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:50.887" starttime="20170725 02:50:50.886"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.887" starttime="20170725 02:50:50.886"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.887" starttime="20170725 02:50:50.881"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:50.887" starttime="20170725 02:50:50.880"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:50:50.888" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:50:50.888" starttime="20170725 02:50:50.887"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:50:50.965" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:50:50.965" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170725 02:50:51.042" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:50:51.043" starttime="20170725 02:50:50.923"></status>
</kw>
<msg timestamp="20170725 02:50:51.043" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:51.043" level="INFO">${ret_values} = (u' 17:49:44 up 20 min,  load average: 0.91, 0.65, 0.73', u'', 0)</msg>
<status status="PASS" endtime="20170725 02:50:51.043" starttime="20170725 02:50:50.888"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:50:51.044" level="INFO">${stdout} =  17:49:44 up 20 min,  load average: 0.91, 0.65, 0.73</msg>
<status status="PASS" endtime="20170725 02:50:51.044" starttime="20170725 02:50:51.043"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:50:51.044" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:50:51.044" starttime="20170725 02:50:51.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.051" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:51.051" starttime="20170725 02:50:51.050"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.051" starttime="20170725 02:50:51.050"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.051" starttime="20170725 02:50:51.044"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.051" starttime="20170725 02:50:50.879"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.051" starttime="20170725 02:50:50.879"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.054" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:51.055" starttime="20170725 02:50:51.054"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.055" starttime="20170725 02:50:51.053"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.056" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:51.056" starttime="20170725 02:50:51.056"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.056" starttime="20170725 02:50:51.055"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.058" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:51.058" starttime="20170725 02:50:51.057"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.058" starttime="20170725 02:50:51.056"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.059" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:51.059" starttime="20170725 02:50:51.058"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.059" starttime="20170725 02:50:51.058"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.059" starttime="20170725 02:50:51.053"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.059" starttime="20170725 02:50:51.053"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:50:51.060" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:50:51.060" starttime="20170725 02:50:51.059"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:50:51.132" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:50:51.133" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170725 02:50:51.189" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:50:51.189" starttime="20170725 02:50:51.091"></status>
</kw>
<msg timestamp="20170725 02:50:51.189" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:51.190" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170725 02:50:51.190" starttime="20170725 02:50:51.060"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:50:51.190" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status status="PASS" endtime="20170725 02:50:51.190" starttime="20170725 02:50:51.190"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:50:51.191" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:50:51.191" starttime="20170725 02:50:51.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.198" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:51.198" starttime="20170725 02:50:51.197"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.198" starttime="20170725 02:50:51.197"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.198" starttime="20170725 02:50:51.191"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.198" starttime="20170725 02:50:51.052"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.198" starttime="20170725 02:50:51.052"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.201" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:51.201" starttime="20170725 02:50:51.201"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.201" starttime="20170725 02:50:51.200"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.203" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:51.203" starttime="20170725 02:50:51.202"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.203" starttime="20170725 02:50:51.202"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.204" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:51.204" starttime="20170725 02:50:51.203"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.204" starttime="20170725 02:50:51.203"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.205" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:51.205" starttime="20170725 02:50:51.205"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.205" starttime="20170725 02:50:51.204"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.205" starttime="20170725 02:50:51.200"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.205" starttime="20170725 02:50:51.199"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:50:51.206" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:50:51.206" starttime="20170725 02:50:51.206"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:50:51.279" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:50:51.280" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170725 02:50:51.339" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:50:51.339" starttime="20170725 02:50:51.239"></status>
</kw>
<msg timestamp="20170725 02:50:51.339" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:51.339" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-d6ae40dc4c4dff3265cc254d404ed6b03fcc2206 #1 Tue Jul 25 01:58:25 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170725 02:50:51.339" starttime="20170725 02:50:51.206"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:50:51.340" level="INFO">${stdout} = Linux witherspoon 4.10.17-d6ae40dc4c4dff3265cc254d404ed6b03fcc2206 #1 Tue Jul 25 01:58:25 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170725 02:50:51.340" starttime="20170725 02:50:51.339"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:50:51.340" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:50:51.340" starttime="20170725 02:50:51.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.347" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:51.347" starttime="20170725 02:50:51.347"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.347" starttime="20170725 02:50:51.346"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.347" starttime="20170725 02:50:51.341"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.348" starttime="20170725 02:50:51.199"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.348" starttime="20170725 02:50:51.198"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.348" starttime="20170725 02:50:50.879"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.348" starttime="20170725 02:50:50.877"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.348" starttime="20170725 02:50:50.877"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.348" starttime="20170725 02:50:49.102"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.348" starttime="20170725 02:50:49.101"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.348" starttime="20170725 02:50:49.075"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.348" starttime="20170725 02:50:49.073"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.348" starttime="20170725 02:50:49.072"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:51.350" starttime="20170725 02:50:51.350"></status>
</kw>
<msg timestamp="20170725 02:50:51.350" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:51.350" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 02:50:51.350" starttime="20170725 02:50:51.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:51.351" starttime="20170725 02:50:51.350"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 02:50:51.376" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170725 02:50:51.376" starttime="20170725 02:50:51.375"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 02:50:51.377" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170725 02:50:51.377" starttime="20170725 02:50:51.377"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:50:51.378" level="INFO">${logpath} = /home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_elog.txt</msg>
<status status="PASS" endtime="20170725 02:50:51.378" starttime="20170725 02:50:51.377"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:51.383" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:51.384" starttime="20170725 02:50:51.383"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:51.385" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:51.385" starttime="20170725 02:50:51.385"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:51.386" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:51.386" starttime="20170725 02:50:51.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:51.387" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:51.387" starttime="20170725 02:50:51.387"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.649" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:51.649" starttime="20170725 02:50:51.390"></status>
</kw>
<msg timestamp="20170725 02:50:51.649" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:51.649" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:51.649" starttime="20170725 02:50:51.388"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.650" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:51.650" starttime="20170725 02:50:51.650"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:51.651" starttime="20170725 02:50:51.650"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.651" starttime="20170725 02:50:51.380"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.651" starttime="20170725 02:50:51.379"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.651" starttime="20170725 02:50:51.379"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:51.652" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170725 02:50:51.652" starttime="20170725 02:50:51.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:51.653" starttime="20170725 02:50:51.652"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:51.695" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 02:50:51.695" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:51.695" starttime="20170725 02:50:51.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:51.696" starttime="20170725 02:50:51.696"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:51.696" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:51.697" starttime="20170725 02:50:51.696"></status>
</kw>
<msg timestamp="20170725 02:50:51.697" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:51.697" starttime="20170725 02:50:51.378"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170725 02:50:51.698" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170725 02:50:51.698" starttime="20170725 02:50:51.698"></status>
</kw>
<msg timestamp="20170725 02:50:51.698" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 02:50:51.698" starttime="20170725 02:50:51.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170725 02:50:51.699" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170725 02:50:51.699" starttime="20170725 02:50:51.699"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.699" starttime="20170725 02:50:51.699"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.699" starttime="20170725 02:50:51.377"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:50:51.700" level="INFO">${logpath} = /home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170725 02:50:51.700" starttime="20170725 02:50:51.700"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:51.703" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:51.705" starttime="20170725 02:50:51.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:51.705" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:51.705" starttime="20170725 02:50:51.705"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:51.706" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:51.706" starttime="20170725 02:50:51.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:51.707" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:51.707" starttime="20170725 02:50:51.706"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.899" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:51.899" starttime="20170725 02:50:51.707"></status>
</kw>
<msg timestamp="20170725 02:50:51.899" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:51.899" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:51.899" starttime="20170725 02:50:51.707"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.900" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:51.900" starttime="20170725 02:50:51.899"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:51.900" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:51.900" starttime="20170725 02:50:51.900"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.901" starttime="20170725 02:50:51.702"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.901" starttime="20170725 02:50:51.702"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:51.901" starttime="20170725 02:50:51.701"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:51.901" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170725 02:50:51.901" starttime="20170725 02:50:51.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:51.902" starttime="20170725 02:50:51.902"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:52.104" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 02:50:52.104" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:52.104" starttime="20170725 02:50:51.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:52.105" starttime="20170725 02:50:52.105"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:52.105" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:52.105" starttime="20170725 02:50:52.105"></status>
</kw>
<msg timestamp="20170725 02:50:52.106" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:52.106" starttime="20170725 02:50:51.700"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:52.107" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:52.107" starttime="20170725 02:50:52.107"></status>
</kw>
<msg timestamp="20170725 02:50:52.107" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170725 02:50:52.107" starttime="20170725 02:50:52.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:52.108" starttime="20170725 02:50:52.107"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170725 02:50:52.109" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 1
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Baseboard Init"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:52.109" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170725 02:50:52.109" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 1
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170725 02:50:52.109" starttime="20170725 02:50:52.108"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:52.110" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:52.110" starttime="20170725 02:50:52.110"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:52.110" starttime="20170725 02:50:52.109"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:52.110" starttime="20170725 02:50:51.700"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:50:52.111" level="INFO">${logpath} = /home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_inventory.txt</msg>
<status status="PASS" endtime="20170725 02:50:52.111" starttime="20170725 02:50:52.111"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:52.114" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:52.114" starttime="20170725 02:50:52.114"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:52.146" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:52.146" starttime="20170725 02:50:52.115"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:52.147" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:52.147" starttime="20170725 02:50:52.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:52.147" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:52.148" starttime="20170725 02:50:52.147"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:52.401" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:52.401" starttime="20170725 02:50:52.148"></status>
</kw>
<msg timestamp="20170725 02:50:52.401" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:52.402" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:52.402" starttime="20170725 02:50:52.148"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:52.402" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:52.402" starttime="20170725 02:50:52.402"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:52.403" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:52.403" starttime="20170725 02:50:52.403"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:52.403" starttime="20170725 02:50:52.113"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:52.403" starttime="20170725 02:50:52.113"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:52.403" starttime="20170725 02:50:52.112"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:52.404" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170725 02:50:52.404" starttime="20170725 02:50:52.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:52.405" starttime="20170725 02:50:52.404"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:54.252" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 02:50:54.252" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:54.252" starttime="20170725 02:50:52.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:54.253" starttime="20170725 02:50:54.253"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:54.253" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:54.254" starttime="20170725 02:50:54.253"></status>
</kw>
<msg timestamp="20170725 02:50:54.254" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:54.254" starttime="20170725 02:50:52.111"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:54.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:54.255" starttime="20170725 02:50:54.255"></status>
</kw>
<msg timestamp="20170725 02:50:54.255" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170725 02:50:54.255" starttime="20170725 02:50:54.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:54.256" starttime="20170725 02:50:54.256"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170725 02:50:54.259" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y230UF72R00C    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933815990", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817514", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0d83", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e72", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dad", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e8f", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e95", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ec3", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0da9", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e73", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:50:54.259" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170725 02:50:54.259" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status status="PASS" endtime="20170725 02:50:54.260" starttime="20170725 02:50:54.256"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:54.261" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_inventory.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:54.261" starttime="20170725 02:50:54.261"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.261" starttime="20170725 02:50:54.260"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.261" starttime="20170725 02:50:52.110"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:50:54.262" level="INFO">${logpath} = /home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_led.txt</msg>
<status status="PASS" endtime="20170725 02:50:54.262" starttime="20170725 02:50:54.262"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:54.265" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:54.266" starttime="20170725 02:50:54.265"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:54.266" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:54.266" starttime="20170725 02:50:54.266"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:54.267" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:54.267" starttime="20170725 02:50:54.267"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:54.268" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:54.268" starttime="20170725 02:50:54.267"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:54.478" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:54.479" starttime="20170725 02:50:54.268"></status>
</kw>
<msg timestamp="20170725 02:50:54.479" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:54.479" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:54.479" starttime="20170725 02:50:54.268"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:54.480" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:54.480" starttime="20170725 02:50:54.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:54.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:54.480" starttime="20170725 02:50:54.480"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.480" starttime="20170725 02:50:54.264"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.481" starttime="20170725 02:50:54.264"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.481" starttime="20170725 02:50:54.263"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:54.481" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170725 02:50:54.481" starttime="20170725 02:50:54.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:54.482" starttime="20170725 02:50:54.482"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:54.525" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 02:50:54.525" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:54.525" starttime="20170725 02:50:54.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:54.526" starttime="20170725 02:50:54.525"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:54.526" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:54.526" starttime="20170725 02:50:54.526"></status>
</kw>
<msg timestamp="20170725 02:50:54.526" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:54.527" starttime="20170725 02:50:54.262"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:54.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170725 02:50:54.528" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170725 02:50:54.528" starttime="20170725 02:50:54.527"></status>
</kw>
<msg timestamp="20170725 02:50:54.528" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 02:50:54.528" starttime="20170725 02:50:54.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170725 02:50:54.529" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170725 02:50:54.529" starttime="20170725 02:50:54.529"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.529" starttime="20170725 02:50:54.528"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.529" starttime="20170725 02:50:54.261"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:50:54.530" level="INFO">${logpath} = /home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_record_log.txt</msg>
<status status="PASS" endtime="20170725 02:50:54.530" starttime="20170725 02:50:54.529"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:54.533" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:54.533" starttime="20170725 02:50:54.532"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:54.534" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:54.534" starttime="20170725 02:50:54.534"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:54.535" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:54.535" starttime="20170725 02:50:54.534"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:54.535" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:54.535" starttime="20170725 02:50:54.535"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:54.792" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:54.792" starttime="20170725 02:50:54.536"></status>
</kw>
<msg timestamp="20170725 02:50:54.792" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:54.792" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:54.792" starttime="20170725 02:50:54.536"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:54.793" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:54.793" starttime="20170725 02:50:54.792"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:54.794" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:54.794" starttime="20170725 02:50:54.793"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.794" starttime="20170725 02:50:54.532"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.794" starttime="20170725 02:50:54.531"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.794" starttime="20170725 02:50:54.531"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:54.795" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170725 02:50:54.795" starttime="20170725 02:50:54.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:54.795" starttime="20170725 02:50:54.795"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:54.839" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 02:50:54.839" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:54.839" starttime="20170725 02:50:54.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:54.840" starttime="20170725 02:50:54.840"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:54.840" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:54.840" starttime="20170725 02:50:54.840"></status>
</kw>
<msg timestamp="20170725 02:50:54.841" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:54.841" starttime="20170725 02:50:54.530"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:54.842" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170725 02:50:54.842" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170725 02:50:54.842" starttime="20170725 02:50:54.841"></status>
</kw>
<msg timestamp="20170725 02:50:54.842" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 02:50:54.842" starttime="20170725 02:50:54.841"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170725 02:50:54.843" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170725 02:50:54.843" starttime="20170725 02:50:54.843"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.843" starttime="20170725 02:50:54.842"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.843" starttime="20170725 02:50:54.529"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.843" starttime="20170725 02:50:51.377"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.843" starttime="20170725 02:50:51.376"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.843" starttime="20170725 02:50:51.376"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.844" starttime="20170725 02:50:51.376"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.844" starttime="20170725 02:50:51.375"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.844" starttime="20170725 02:50:51.351"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.844" starttime="20170725 02:50:51.348"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.844" starttime="20170725 02:50:51.348"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:54.846" starttime="20170725 02:50:54.845"></status>
</kw>
<msg timestamp="20170725 02:50:54.846" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:54.846" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 02:50:54.846" starttime="20170725 02:50:54.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:54.846" starttime="20170725 02:50:54.846"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170725 02:50:54.906" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:50:54.906" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170725 02:50:54.953" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170725 02:50:54.970" level="FAIL">#(UTC) 2017/07/25 02:50:54.967945 -    5.925651 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170725 02:50:54.970" starttime="20170725 02:50:54.870"></status>
</kw>
<status status="FAIL" endtime="20170725 02:50:54.970" starttime="20170725 02:50:54.869"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.970" starttime="20170725 02:50:54.847"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.970" starttime="20170725 02:50:54.844"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:54.970" starttime="20170725 02:50:54.844"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:54.973" starttime="20170725 02:50:54.972"></status>
</kw>
<msg timestamp="20170725 02:50:54.973" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:54.973" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 02:50:54.973" starttime="20170725 02:50:54.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:54.974" starttime="20170725 02:50:54.973"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 02:50:54.998" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170725 02:50:54.998" starttime="20170725 02:50:54.998"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 02:50:55.002" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170725 02:50:55.002" starttime="20170725 02:50:55.000"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:50:55.003" level="INFO">${logpath} = /home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170725 02:50:55.003" starttime="20170725 02:50:55.003"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:55.005" starttime="20170725 02:50:55.005"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:50:55.006" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:50:55.007" starttime="20170725 02:50:55.006"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:50:55.079" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:50:55.080" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170725 02:50:55.662" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:50:55.663" starttime="20170725 02:50:55.037"></status>
</kw>
<msg timestamp="20170725 02:50:55.663" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:55.664" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Apr 20 17:49 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Apr 20 17:49 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170725 02:50:55.664" starttime="20170725 02:50:55.007"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:50:55.665" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Apr 20 17:49 0 -&gt; /dev/null
lrwx------    1 root     root            64 Apr 20 17:49 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170725 02:50:55.665" starttime="20170725 02:50:55.664"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:50:55.665" level="INFO">${stderr} = ls: /proc/1816/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170725 02:50:55.666" starttime="20170725 02:50:55.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:55.673" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:55.673" starttime="20170725 02:50:55.673"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:55.673" starttime="20170725 02:50:55.671"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:55.673" starttime="20170725 02:50:55.666"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:55.674" starttime="20170725 02:50:55.004"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:55.674" starttime="20170725 02:50:55.002"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:50:55.674" level="INFO">${logpath} = /home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170725 02:50:55.674" starttime="20170725 02:50:55.674"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:55.676" starttime="20170725 02:50:55.675"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:50:55.676" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:50:55.677" starttime="20170725 02:50:55.676"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:50:55.750" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:50:55.750" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170725 02:50:55.894" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:50:55.894" starttime="20170725 02:50:55.708"></status>
</kw>
<msg timestamp="20170725 02:50:55.894" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:55.894" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170725 02:50:55.894" starttime="20170725 02:50:55.677"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:50:55.895" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170725 02:50:55.895" starttime="20170725 02:50:55.895"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:50:55.896" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:50:55.896" starttime="20170725 02:50:55.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:55.903" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:55.903" starttime="20170725 02:50:55.902"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:55.903" starttime="20170725 02:50:55.901"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:55.903" starttime="20170725 02:50:55.896"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:55.903" starttime="20170725 02:50:55.675"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:55.903" starttime="20170725 02:50:55.674"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:50:55.904" level="INFO">${logpath} = /home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170725 02:50:55.904" starttime="20170725 02:50:55.904"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:55.906" starttime="20170725 02:50:55.905"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:50:55.906" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:50:55.906" starttime="20170725 02:50:55.906"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:50:55.978" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:50:55.979" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170725 02:50:56.027" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:50:56.027" starttime="20170725 02:50:55.938"></status>
</kw>
<msg timestamp="20170725 02:50:56.027" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:56.027" level="INFO">${ret_values} = (u'MemTotal:         432280 kB\nMemFree:          275860 kB\nMemAvailable:     322000 kB\nBuffers:           11172 kB\nCached:            52016 kB\nSwapCached:            0 kB\nActive:           10204...</msg>
<status status="PASS" endtime="20170725 02:50:56.027" starttime="20170725 02:50:55.907"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:50:56.028" level="INFO">${stdout} = MemTotal:         432280 kB
MemFree:          275860 kB
MemAvailable:     322000 kB
Buffers:           11172 kB
Cached:            52016 kB
SwapCached:            0 kB
Active:           102048 kB
Inac...</msg>
<status status="PASS" endtime="20170725 02:50:56.028" starttime="20170725 02:50:56.028"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:50:56.029" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:50:56.029" starttime="20170725 02:50:56.028"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:56.036" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:56.036" starttime="20170725 02:50:56.035"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:56.036" starttime="20170725 02:50:56.034"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:56.036" starttime="20170725 02:50:56.029"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:56.036" starttime="20170725 02:50:55.904"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:56.036" starttime="20170725 02:50:55.903"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:50:56.037" level="INFO">${logpath} = /home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170725 02:50:56.037" starttime="20170725 02:50:56.036"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:56.038" starttime="20170725 02:50:56.038"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:50:56.039" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:50:56.039" starttime="20170725 02:50:56.038"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:50:56.114" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:50:56.115" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170725 02:50:56.424" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:50:56.424" starttime="20170725 02:50:56.069"></status>
</kw>
<msg timestamp="20170725 02:50:56.424" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:56.424" level="INFO">${ret_values} = (u'Mem: 156420K used, 275860K free, 14756K shrd, 11172K buff, 52020K cached\nCPU:   0% usr  30% sys   0% nic  69% idle   0% io   0% irq   0% sirq\nLoad average: 0.92 0.66 0.74 1/146 1819\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170725 02:50:56.425" starttime="20170725 02:50:56.039"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:50:56.425" level="INFO">${stdout} = Mem: 156420K used, 275860K free, 14756K shrd, 11172K buff, 52020K cached
CPU:   0% usr  30% sys   0% nic  69% idle   0% io   0% irq   0% sirq
Load average: 0.92 0.66 0.74 1/146 1819
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170725 02:50:56.425" starttime="20170725 02:50:56.425"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:50:56.426" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:50:56.426" starttime="20170725 02:50:56.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:56.433" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:56.433" starttime="20170725 02:50:56.433"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:56.433" starttime="20170725 02:50:56.432"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:56.434" starttime="20170725 02:50:56.426"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:56.434" starttime="20170725 02:50:56.037"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:56.434" starttime="20170725 02:50:56.036"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:50:56.434" level="INFO">${logpath} = /home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170725 02:50:56.435" starttime="20170725 02:50:56.434"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:56.436" starttime="20170725 02:50:56.435"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:50:56.437" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:50:56.437" starttime="20170725 02:50:56.436"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:50:56.507" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:50:56.508" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170725 02:50:56.585" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:50:56.585" starttime="20170725 02:50:56.468"></status>
</kw>
<msg timestamp="20170725 02:50:56.585" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:56.586" level="INFO">${ret_values} = (u"[    4.800000] leds-pca955x 11-0060: gpios 264...279\n[    4.800000] usbcore: registered new interface driver usbhid\n[    4.810000] usbhid: USB HID core driver\n[    4.860000] dps310: probe of 3-0...</msg>
<status status="PASS" endtime="20170725 02:50:56.586" starttime="20170725 02:50:56.437"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:50:56.586" level="INFO">${stdout} = [    4.800000] leds-pca955x 11-0060: gpios 264...279
[    4.800000] usbcore: registered new interface driver usbhid
[    4.810000] usbhid: USB HID core driver
[    4.860000] dps310: probe of 3-0076 fa...</msg>
<status status="PASS" endtime="20170725 02:50:56.587" starttime="20170725 02:50:56.586"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:50:56.587" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:50:56.587" starttime="20170725 02:50:56.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:56.594" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:56.594" starttime="20170725 02:50:56.594"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:56.594" starttime="20170725 02:50:56.593"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:56.594" starttime="20170725 02:50:56.587"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:56.595" starttime="20170725 02:50:56.435"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:56.595" starttime="20170725 02:50:56.434"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:50:56.595" level="INFO">${logpath} = /home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170725 02:50:56.595" starttime="20170725 02:50:56.595"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:56.597" starttime="20170725 02:50:56.596"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:50:56.597" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:50:56.597" starttime="20170725 02:50:56.597"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:50:56.667" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:50:56.667" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170725 02:50:59.338" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:50:59.339" starttime="20170725 02:50:56.627"></status>
</kw>
<msg timestamp="20170725 02:50:59.339" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:59.343" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-04-20 17:29:23 UTC, end at Thu 2017-04-20 17:49:48 UTC. --\nApr 20 17:29:23 witherspoon kernel: Booting Linux on physical CPU 0x0\nApr 20 17:29:23 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170725 02:50:59.343" starttime="20170725 02:50:56.598"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:50:59.345" level="INFO">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:23 UTC, end at Thu 2017-04-20 17:49:48 UTC. --
Apr 20 17:29:23 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:23 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170725 02:50:59.345" starttime="20170725 02:50:59.344"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:50:59.346" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:50:59.346" starttime="20170725 02:50:59.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:50:59.355" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170725025048833720_TestBiosUpdate/20170725025048833720_HostBIOSPowerOn/9.41.166.169.170725.025045.BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:50:59.355" starttime="20170725 02:50:59.354"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.355" starttime="20170725 02:50:59.352"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.355" starttime="20170725 02:50:59.346"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.355" starttime="20170725 02:50:56.596"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.355" starttime="20170725 02:50:56.595"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.355" starttime="20170725 02:50:55.002"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.356" starttime="20170725 02:50:54.999"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.356" starttime="20170725 02:50:54.998"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.356" starttime="20170725 02:50:54.998"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.356" starttime="20170725 02:50:54.997"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.356" starttime="20170725 02:50:54.974"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.356" starttime="20170725 02:50:54.971"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.356" starttime="20170725 02:50:54.970"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:59.358" starttime="20170725 02:50:59.358"></status>
</kw>
<msg timestamp="20170725 02:50:59.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:59.358" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 02:50:59.359" starttime="20170725 02:50:59.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:59.359" starttime="20170725 02:50:59.359"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:59.389" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:59.390" starttime="20170725 02:50:59.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:59.390" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:59.390" starttime="20170725 02:50:59.390"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:59.391" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:59.391" starttime="20170725 02:50:59.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:59.391" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:59.391" starttime="20170725 02:50:59.391"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:59.588" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:59.588" starttime="20170725 02:50:59.392"></status>
</kw>
<msg timestamp="20170725 02:50:59.588" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:59.588" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:59.588" starttime="20170725 02:50:59.392"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:59.589" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:59.589" starttime="20170725 02:50:59.589"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:59.590" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:59.590" starttime="20170725 02:50:59.589"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.590" starttime="20170725 02:50:59.387"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.590" starttime="20170725 02:50:59.387"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.590" starttime="20170725 02:50:59.386"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:59.591" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170725 02:50:59.591" starttime="20170725 02:50:59.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:59.591" starttime="20170725 02:50:59.591"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:50:59.644" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170725 02:50:59.645" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:59.645" starttime="20170725 02:50:59.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:59.646" starttime="20170725 02:50:59.645"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:50:59.646" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:50:59.646" starttime="20170725 02:50:59.646"></status>
</kw>
<msg timestamp="20170725 02:50:59.646" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:59.646" starttime="20170725 02:50:59.385"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:59.647" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170725 02:50:59.648" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170725 02:50:59.648" starttime="20170725 02:50:59.647"></status>
</kw>
<msg timestamp="20170725 02:50:59.648" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 02:50:59.648" starttime="20170725 02:50:59.647"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170725 02:50:59.648" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170725 02:50:59.649" starttime="20170725 02:50:59.648"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.649" starttime="20170725 02:50:59.385"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.649" starttime="20170725 02:50:59.360"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.649" starttime="20170725 02:50:59.356"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.649" starttime="20170725 02:50:59.356"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:59.651" starttime="20170725 02:50:59.650"></status>
</kw>
<msg timestamp="20170725 02:50:59.651" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:59.651" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 02:50:59.651" starttime="20170725 02:50:59.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:59.652" starttime="20170725 02:50:59.651"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170725 02:50:59.678" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170725 02:50:59.678" starttime="20170725 02:50:59.677"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.678" starttime="20170725 02:50:59.677"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.678" starttime="20170725 02:50:59.652"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.678" starttime="20170725 02:50:59.649"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.678" starttime="20170725 02:50:59.649"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.678" starttime="20170725 02:50:49.072"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.679" starttime="20170725 02:50:49.069"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.679" starttime="20170725 02:50:49.069"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.679" starttime="20170725 02:50:49.069"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170725 02:50:59.696" starttime="20170725 02:50:59.690"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.697" starttime="20170725 02:50:59.679"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.697" starttime="20170725 02:50:49.068"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.697" starttime="20170725 02:50:45.777"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:50:59.751" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:50:59.756" starttime="20170725 02:50:59.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:50:59.757" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:50:59.757" starttime="20170725 02:50:59.757"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:50:59.758" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:50:59.758" starttime="20170725 02:50:59.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:50:59.758" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:50:59.758" starttime="20170725 02:50:59.758"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:50:59.973" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:50:59.973" starttime="20170725 02:50:59.759"></status>
</kw>
<msg timestamp="20170725 02:50:59.973" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:50:59.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:50:59.973" starttime="20170725 02:50:59.759"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:50:59.974" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:59.974" starttime="20170725 02:50:59.974"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:50:59.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:50:59.975" starttime="20170725 02:50:59.974"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.975" starttime="20170725 02:50:59.749"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.975" starttime="20170725 02:50:59.748"></status>
</kw>
<status status="PASS" endtime="20170725 02:50:59.975" starttime="20170725 02:50:59.745"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:50:59.976" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170725 02:50:59.976" starttime="20170725 02:50:59.975"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:50:59.976" starttime="20170725 02:50:59.976"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:51:00.111" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170725 02:51:00.111" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.111" starttime="20170725 02:50:59.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:00.112" starttime="20170725 02:51:00.112"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:51:00.112" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:51:00.113" starttime="20170725 02:51:00.112"></status>
</kw>
<msg timestamp="20170725 02:51:00.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.113" starttime="20170725 02:50:59.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:00.113" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.114" starttime="20170725 02:51:00.113"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:51:00.114" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:51:00.114" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:51:00.114" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status status="PASS" endtime="20170725 02:51:00.114" starttime="20170725 02:51:00.114"></status>
</kw>
<msg timestamp="20170725 02:51:00.115" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20170725 02:51:00.115" starttime="20170725 02:50:59.739"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:00.115" starttime="20170725 02:50:59.736"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:51:00.119" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:51:00.119" starttime="20170725 02:51:00.118"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:51:00.120" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:51:00.120" starttime="20170725 02:51:00.119"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:51:00.120" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:51:00.121" starttime="20170725 02:51:00.120"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:51:00.121" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:51:00.121" starttime="20170725 02:51:00.121"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:51:00.328" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:51:00.328" starttime="20170725 02:51:00.122"></status>
</kw>
<msg timestamp="20170725 02:51:00.328" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:00.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.328" starttime="20170725 02:51:00.122"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:51:00.329" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.329" starttime="20170725 02:51:00.328"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:00.330" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.330" starttime="20170725 02:51:00.329"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:00.330" starttime="20170725 02:51:00.118"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:00.330" starttime="20170725 02:51:00.118"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:00.330" starttime="20170725 02:51:00.117"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:51:00.331" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170725 02:51:00.331" starttime="20170725 02:51:00.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:00.331" starttime="20170725 02:51:00.331"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:51:00.396" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170725 02:51:00.396" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.396" starttime="20170725 02:51:00.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:00.397" starttime="20170725 02:51:00.396"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:51:00.397" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:51:00.397" starttime="20170725 02:51:00.397"></status>
</kw>
<msg timestamp="20170725 02:51:00.397" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.397" starttime="20170725 02:51:00.116"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:00.398" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.398" starttime="20170725 02:51:00.398"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:51:00.399" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:51:00.399" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:51:00.399" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170725 02:51:00.399" starttime="20170725 02:51:00.398"></status>
</kw>
<msg timestamp="20170725 02:51:00.399" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170725 02:51:00.399" starttime="20170725 02:51:00.116"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:00.399" starttime="20170725 02:51:00.115"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:51:00.403" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:51:00.404" starttime="20170725 02:51:00.403"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:51:00.404" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:51:00.404" starttime="20170725 02:51:00.404"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:51:00.405" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:51:00.405" starttime="20170725 02:51:00.405"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:51:00.406" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:51:00.406" starttime="20170725 02:51:00.405"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:51:00.605" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:51:00.605" starttime="20170725 02:51:00.406"></status>
</kw>
<msg timestamp="20170725 02:51:00.605" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:00.605" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.605" starttime="20170725 02:51:00.406"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:51:00.606" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.606" starttime="20170725 02:51:00.606"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:00.607" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.607" starttime="20170725 02:51:00.606"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:00.607" starttime="20170725 02:51:00.402"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:00.607" starttime="20170725 02:51:00.402"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:00.607" starttime="20170725 02:51:00.401"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:51:00.608" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170725 02:51:00.608" starttime="20170725 02:51:00.607"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:00.608" starttime="20170725 02:51:00.608"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:51:00.692" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170725 02:51:00.692" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.692" starttime="20170725 02:51:00.609"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:00.693" starttime="20170725 02:51:00.692"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:51:00.693" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:51:00.693" starttime="20170725 02:51:00.693"></status>
</kw>
<msg timestamp="20170725 02:51:00.693" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.693" starttime="20170725 02:51:00.401"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:00.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.694" starttime="20170725 02:51:00.694"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:51:00.695" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:51:00.695" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:51:00.695" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" endtime="20170725 02:51:00.695" starttime="20170725 02:51:00.694"></status>
</kw>
<msg timestamp="20170725 02:51:00.695" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" endtime="20170725 02:51:00.695" starttime="20170725 02:51:00.400"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:00.695" starttime="20170725 02:51:00.400"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:51:00.699" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:51:00.700" starttime="20170725 02:51:00.699"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:51:00.700" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:51:00.700" starttime="20170725 02:51:00.700"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:51:00.701" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:51:00.701" starttime="20170725 02:51:00.700"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:51:00.701" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:51:00.701" starttime="20170725 02:51:00.701"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:51:00.891" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:51:00.892" starttime="20170725 02:51:00.702"></status>
</kw>
<msg timestamp="20170725 02:51:00.892" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:00.892" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.892" starttime="20170725 02:51:00.702"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:51:00.893" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.893" starttime="20170725 02:51:00.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:00.894" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.894" starttime="20170725 02:51:00.893"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:00.895" starttime="20170725 02:51:00.698"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:00.895" starttime="20170725 02:51:00.698"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:00.895" starttime="20170725 02:51:00.697"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:51:00.895" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:51:00.895" starttime="20170725 02:51:00.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:00.897" starttime="20170725 02:51:00.896"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:51:00.965" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:51:00.965" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.965" starttime="20170725 02:51:00.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:00.966" starttime="20170725 02:51:00.966"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:51:00.966" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:51:00.966" starttime="20170725 02:51:00.966"></status>
</kw>
<msg timestamp="20170725 02:51:00.967" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.967" starttime="20170725 02:51:00.697"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:00.967" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:00.967" starttime="20170725 02:51:00.967"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:51:00.968" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:51:00.968" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:51:00.968" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:51:00.968" starttime="20170725 02:51:00.968"></status>
</kw>
<msg timestamp="20170725 02:51:00.968" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:51:00.969" starttime="20170725 02:51:00.696"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:00.969" starttime="20170725 02:51:00.696"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:01.091" starttime="20170725 02:50:45.765"></status>
</kw>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:51:01.111" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:51:01.112" starttime="20170725 02:51:01.110"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:51:01.112" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:51:01.112" starttime="20170725 02:51:01.112"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:51:01.113" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:51:01.113" starttime="20170725 02:51:01.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:51:01.114" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:51:01.114" starttime="20170725 02:51:01.113"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:51:01.331" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:51:01.331" starttime="20170725 02:51:01.115"></status>
</kw>
<msg timestamp="20170725 02:51:01.331" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:01.331" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:01.331" starttime="20170725 02:51:01.114"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:51:01.332" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:01.332" starttime="20170725 02:51:01.332"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:01.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:01.333" starttime="20170725 02:51:01.332"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:01.333" starttime="20170725 02:51:01.110"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:01.333" starttime="20170725 02:51:01.109"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:01.333" starttime="20170725 02:51:01.108"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:51:01.334" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170725 02:51:01.334" starttime="20170725 02:51:01.334"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:01.335" starttime="20170725 02:51:01.334"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:51:01.378" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170725 02:51:01.378" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:01.378" starttime="20170725 02:51:01.335"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:01.379" starttime="20170725 02:51:01.378"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:51:01.379" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:51:01.379" starttime="20170725 02:51:01.379"></status>
</kw>
<msg timestamp="20170725 02:51:01.379" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:01.379" starttime="20170725 02:51:01.107"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170725 02:51:01.380" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170725 02:51:01.380" starttime="20170725 02:51:01.380"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:01.380" starttime="20170725 02:51:01.106"></status>
</kw>
<msg timestamp="20170725 02:51:01.385" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170725 02:51:01.393" starttime="20170725 02:51:01.392"></status>
</kw>
<msg timestamp="20170725 02:51:01.408" level="FAIL">#(UTC) 2017/07/25 02:51:01.407271 -    1.710476 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20170725 02:51:01.408" starttime="20170725 02:36:16.945"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170725 02:51:01.413" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170725 02:51:01.415" starttime="20170725 02:51:01.409"></status>
</kw>
<status status="FAIL" endtime="20170725 02:51:01.415" starttime="20170725 02:36:16.944"></status>
</kw>
<msg timestamp="20170725 02:51:01.416" level="FAIL">#(UTC) 2017/07/25 02:51:01.407271 -    1.710476 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20170725 02:51:01.416" starttime="20170725 02:36:16.936"></status>
</kw>
<kw type="teardown" name="Validate Power On Teardown">
<doc>Teardown after Validate Power On.</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Stop SOL Console Logging</arg>
<arg>\ targ_file_path=${EXECDIR}${/}logs${/}SOL.log</arg>
</arguments>
<assign>
<var>${keyword_buf}</var>
</assign>
<msg timestamp="20170725 02:51:01.418" level="INFO">${keyword_buf} = Stop SOL Console Logging  targ_file_path=/home/fspcibld/logs/SOL.log</msg>
<status status="PASS" endtime="20170725 02:51:01.418" starttime="20170725 02:51:01.417"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_buf}</arg>
</arguments>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>targ_file_path=/home/fspcibld/logs/SOL.log</arg>
</arguments>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170725 02:51:01.431" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 02:51:01.431" starttime="20170725 02:51:01.430"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170725 02:51:01.431" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 02:51:01.431" starttime="20170725 02:51:01.431"></status>
</kw>
<msg timestamp="20170725 02:51:01.432" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" endtime="20170725 02:51:01.432" starttime="20170725 02:51:01.430"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:51:01.433" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170725 02:51:01.433" starttime="20170725 02:51:01.433"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:01.433" starttime="20170725 02:51:01.433"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170725 02:51:01.438" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170725 02:51:01.441" level="INFO">${rc} = 0</msg>
<msg timestamp="20170725 02:51:01.441" level="INFO">${output} = /home/fspcibld/openbmc-test-automation/bin//ssh_pw</msg>
<status status="PASS" endtime="20170725 02:51:01.441" starttime="20170725 02:51:01.434"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:01.447" starttime="20170725 02:51:01.445"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:01.448" starttime="20170725 02:51:01.447"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:51:01.449" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" endtime="20170725 02:51:01.449" starttime="20170725 02:51:01.448"></status>
</kw>
<msg timestamp="20170725 02:51:01.449" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" endtime="20170725 02:51:01.449" starttime="20170725 02:51:01.432"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:51:01.450" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170725 02:51:01.450" starttime="20170725 02:51:01.449"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:01.453" starttime="20170725 02:51:01.450"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170725 02:51:01.457" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170725 02:51:01.471" level="INFO">${rc} = 0</msg>
<msg timestamp="20170725 02:51:01.471" level="INFO">${os_con_pid} = </msg>
<status status="PASS" endtime="20170725 02:51:01.471" starttime="20170725 02:51:01.453"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:01.474" starttime="20170725 02:51:01.474"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:51:01.475" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170725 02:51:01.475" starttime="20170725 02:51:01.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:01.476" starttime="20170725 02:51:01.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170725 02:51:01.477" level="INFO">${rc} = None</msg>
<msg timestamp="20170725 02:51:01.477" level="INFO">${output} = None</msg>
<status status="PASS" endtime="20170725 02:51:01.477" starttime="20170725 02:51:01.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:01.478" starttime="20170725 02:51:01.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170725 02:51:01.481" html="yes" level="INFO">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;' to '&lt;a href="file:///home/fspcibld/logs/SOL.log"&gt;/home/fspcibld/logs/SOL.log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:01.481" starttime="20170725 02:51:01.479"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:01.481" starttime="20170725 02:51:01.479"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:01.481" starttime="20170725 02:51:01.478"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170725 02:51:01.482" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170725 02:51:01.482" starttime="20170725 02:51:01.481"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170725 02:51:01.482" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170725 02:51:01.482" starttime="20170725 02:51:01.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:01.528" starttime="20170725 02:51:01.483"></status>
</kw>
<msg timestamp="20170725 02:51:01.534" level="INFO">${rc} = 0</msg>
<msg timestamp="20170725 02:51:01.535" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status status="PASS" endtime="20170725 02:51:01.535" starttime="20170725 02:51:01.483"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:01.538" starttime="20170725 02:51:01.429"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:01.539" starttime="20170725 02:51:01.418"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:01.539" starttime="20170725 02:51:01.416"></status>
</kw>
<status status="FAIL" endtime="20170725 02:51:01.539" starttime="20170725 02:36:16.698"></status>
</kw>
<status status="FAIL" endtime="20170725 02:51:01.540" starttime="20170725 02:36:16.697"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170725 02:51:01.543" starttime="20170725 02:51:01.543"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:51:01.561" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:51:01.562" starttime="20170725 02:51:01.560"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:51:01.563" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:51:01.563" starttime="20170725 02:51:01.562"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:51:01.563" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:51:01.563" starttime="20170725 02:51:01.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:51:01.564" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:51:01.564" starttime="20170725 02:51:01.564"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:51:01.753" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:51:01.753" starttime="20170725 02:51:01.565"></status>
</kw>
<msg timestamp="20170725 02:51:01.753" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:01.753" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:01.754" starttime="20170725 02:51:01.564"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:51:01.754" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:01.754" starttime="20170725 02:51:01.754"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:01.755" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:01.755" starttime="20170725 02:51:01.755"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:01.755" starttime="20170725 02:51:01.559"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:01.755" starttime="20170725 02:51:01.558"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:01.755" starttime="20170725 02:51:01.557"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:51:01.756" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170725 02:51:01.756" starttime="20170725 02:51:01.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:01.757" starttime="20170725 02:51:01.756"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:51:01.819" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170725 02:51:01.820" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:01.820" starttime="20170725 02:51:01.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:01.820" starttime="20170725 02:51:01.820"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:51:01.821" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:51:01.821" starttime="20170725 02:51:01.821"></status>
</kw>
<msg timestamp="20170725 02:51:01.821" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:01.821" starttime="20170725 02:51:01.556"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:01.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:01.822" starttime="20170725 02:51:01.821"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170725 02:51:01.822" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:51:01.822" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170725 02:51:01.823" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170725 02:51:01.823" starttime="20170725 02:51:01.822"></status>
</kw>
<msg timestamp="20170725 02:51:01.823" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170725 02:51:01.823" starttime="20170725 02:51:01.555"></status>
</kw>
<msg timestamp="20170725 02:51:01.823" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170725 02:51:01.823" starttime="20170725 02:51:01.554"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170725 02:51:01.824" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" endtime="20170725 02:51:01.824" starttime="20170725 02:51:01.824"></status>
</kw>
<msg timestamp="20170725 02:51:01.825" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 02:51:01.825" starttime="20170725 02:51:01.823"></status>
</kw>
<msg timestamp="20170725 02:51:01.825" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 02:51:01.825" starttime="20170725 02:51:01.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170725 02:51:01.841" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170725 02:51:01.841" starttime="20170725 02:51:01.841"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170725 02:51:01.849" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170725 02:51:04.855" level="INFO">${RC} = 0</msg>
<msg timestamp="20170725 02:51:04.855" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.651 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.567 ms
64 bytes from 9.41.166.16...</msg>
<status status="PASS" endtime="20170725 02:51:04.856" starttime="20170725 02:51:01.842"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170725 02:51:04.876" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.651 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.567 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.536 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.558 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.536/0.578/0.651/0.043 ms</msg>
<status status="PASS" endtime="20170725 02:51:04.876" starttime="20170725 02:51:04.871"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:04.877" starttime="20170725 02:51:04.877"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:04.879" starttime="20170725 02:51:01.840"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170725 02:51:04.920" level="INFO">${cur_time} = 2017-07-25 02:51:04:918905</msg>
<status status="PASS" endtime="20170725 02:51:04.920" starttime="20170725 02:51:04.919"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170725 02:51:04.921" level="INFO">${cur_time} = 20170725025104918905</msg>
<status status="PASS" endtime="20170725 02:51:04.921" starttime="20170725 02:51:04.920"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:04.921" starttime="20170725 02:51:04.918"></status>
</kw>
<msg timestamp="20170725 02:51:04.921" level="INFO">${FFDC_TIME} = 20170725025104918905</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170725 02:51:04.922" level="INFO">${suite_name} = TestBiosUpdate</msg>
<status status="PASS" endtime="20170725 02:51:04.922" starttime="20170725 02:51:04.922"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170725 02:51:04.924" level="INFO">${suite_name} = 20170725025104918905_TestBiosUpdate</msg>
<status status="PASS" endtime="20170725 02:51:04.924" starttime="20170725 02:51:04.923"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170725 02:51:04.924" level="INFO">${test_name} = HostBIOSPowerOn</msg>
<status status="PASS" endtime="20170725 02:51:04.924" starttime="20170725 02:51:04.924"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170725 02:51:04.925" level="INFO">${test_name} = 20170725025104918905_HostBIOSPowerOn</msg>
<status status="PASS" endtime="20170725 02:51:04.925" starttime="20170725 02:51:04.925"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:04.925" starttime="20170725 02:51:04.921"></status>
</kw>
<msg timestamp="20170725 02:51:04.926" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/</msg>
<msg timestamp="20170725 02:51:04.926" level="INFO">${FFDC_PREFIX} = 20170725025104918905_</msg>
<msg timestamp="20170725 02:51:04.946" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/</arg>
</arguments>
<msg timestamp="20170725 02:51:04.947" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:04.947" starttime="20170725 02:51:04.947"></status>
</kw>
<msg timestamp="20170725 02:51:04.948" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:04.964" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:04.964" starttime="20170725 02:51:04.964"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:04.964" starttime="20170725 02:51:04.963"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:04.966" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:04.966" starttime="20170725 02:51:04.965"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:04.966" starttime="20170725 02:51:04.965"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:04.967" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:04.967" starttime="20170725 02:51:04.967"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:04.967" starttime="20170725 02:51:04.966"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:04.968" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:04.969" starttime="20170725 02:51:04.968"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:04.969" starttime="20170725 02:51:04.967"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:04.970" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:04.970" starttime="20170725 02:51:04.969"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:04.970" starttime="20170725 02:51:04.969"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:04.972" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:04.972" starttime="20170725 02:51:04.971"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:04.972" starttime="20170725 02:51:04.970"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:04.974" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:04.974" starttime="20170725 02:51:04.974"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:04.974" starttime="20170725 02:51:04.973"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:04.975" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:04.975" starttime="20170725 02:51:04.975"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:04.976" starttime="20170725 02:51:04.974"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:04.977" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:04.977" starttime="20170725 02:51:04.976"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:04.977" starttime="20170725 02:51:04.976"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:04.978" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:04.978" starttime="20170725 02:51:04.978"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:04.979" starttime="20170725 02:51:04.977"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:04.981" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:04.981" starttime="20170725 02:51:04.980"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:04.981" starttime="20170725 02:51:04.979"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:04.982" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:04.982" starttime="20170725 02:51:04.982"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:04.982" starttime="20170725 02:51:04.981"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:04.984" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:04.984" starttime="20170725 02:51:04.983"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:04.984" starttime="20170725 02:51:04.983"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170725 02:51:05.009" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:51:05.009" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170725 02:51:05.088" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170725 02:51:05.099" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170725 02:51:05.099" level="INFO">${stderr} = </msg>
<msg timestamp="20170725 02:51:05.099" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170725 02:51:05.099" starttime="20170725 02:51:04.985"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170725 02:51:05.100" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170725 02:51:05.100" starttime="20170725 02:51:05.099"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170725 02:51:05.100" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170725 02:51:05.100" starttime="20170725 02:51:05.100"></status>
</kw>
<msg timestamp="20170725 02:51:05.101" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170725 02:51:05.101" starttime="20170725 02:51:04.984"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:05.102" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:05.102" starttime="20170725 02:51:05.101"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.102" starttime="20170725 02:51:05.101"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.103" starttime="20170725 02:51:04.977"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:05.104" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:05.104" starttime="20170725 02:51:05.103"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.104" starttime="20170725 02:51:05.103"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 02:51:05.106" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170725 02:51:05.106" starttime="20170725 02:51:05.105"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:05.107" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:05.107" starttime="20170725 02:51:05.107"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.107" starttime="20170725 02:51:05.106"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:05.109" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:05.109" starttime="20170725 02:51:05.108"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.109" starttime="20170725 02:51:05.108"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.109" starttime="20170725 02:51:05.106"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:05.110" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:05.110" starttime="20170725 02:51:05.110"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.110" starttime="20170725 02:51:05.109"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:05.111" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:05.111" starttime="20170725 02:51:05.111"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.111" starttime="20170725 02:51:05.110"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.112" starttime="20170725 02:51:05.109"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:05.113" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:05.113" starttime="20170725 02:51:05.112"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.113" starttime="20170725 02:51:05.112"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:05.114" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:05.114" starttime="20170725 02:51:05.114"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.114" starttime="20170725 02:51:05.113"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.114" starttime="20170725 02:51:05.112"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.114" starttime="20170725 02:51:05.106"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:05.115" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:05.116" starttime="20170725 02:51:05.115"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.116" starttime="20170725 02:51:05.114"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.116" starttime="20170725 02:51:04.963"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 02:51:05.123" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170725 02:51:05.123" starttime="20170725 02:51:05.123"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170725 02:51:05.124" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170725 02:51:05.125" starttime="20170725 02:51:05.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:05.126" starttime="20170725 02:51:05.126"></status>
</kw>
<msg timestamp="20170725 02:51:05.126" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170725 02:51:05.126" starttime="20170725 02:51:05.125"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:05.129" starttime="20170725 02:51:05.128"></status>
</kw>
<msg timestamp="20170725 02:51:05.129" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:05.129" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 02:51:05.129" starttime="20170725 02:51:05.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:05.130" starttime="20170725 02:51:05.130"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 02:51:05.150" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170725 02:51:05.150" starttime="20170725 02:51:05.150"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 02:51:05.152" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170725 02:51:05.152" starttime="20170725 02:51:05.151"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170725 02:51:05.153" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170725 02:51:05.153" starttime="20170725 02:51:05.152"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:05.156" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:05.156" starttime="20170725 02:51:05.155"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.156" starttime="20170725 02:51:05.155"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:05.159" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:05.159" starttime="20170725 02:51:05.158"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.159" starttime="20170725 02:51:05.157"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:05.160" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:05.160" starttime="20170725 02:51:05.159"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.160" starttime="20170725 02:51:05.159"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:05.161" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:05.161" starttime="20170725 02:51:05.161"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.161" starttime="20170725 02:51:05.160"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.161" starttime="20170725 02:51:05.154"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:05.162" starttime="20170725 02:51:05.154"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:51:05.162" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:51:05.162" starttime="20170725 02:51:05.162"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:51:05.224" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:51:05.225" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170725 02:51:06.662" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:51:06.662" starttime="20170725 02:51:05.191"></status>
</kw>
<msg timestamp="20170725 02:51:06.662" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:06.662" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.R...</msg>
<status status="PASS" endtime="20170725 02:51:06.662" starttime="20170725 02:51:05.163"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:51:06.663" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<status status="PASS" endtime="20170725 02:51:06.663" starttime="20170725 02:51:06.663"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:51:06.664" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:51:06.664" starttime="20170725 02:51:06.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.671" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:06.671" starttime="20170725 02:51:06.670"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.671" starttime="20170725 02:51:06.669"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.671" starttime="20170725 02:51:06.664"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.671" starttime="20170725 02:51:05.153"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.671" starttime="20170725 02:51:05.153"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.671" starttime="20170725 02:51:05.153"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.671" starttime="20170725 02:51:05.151"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.671" starttime="20170725 02:51:05.151"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 02:51:06.672" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170725 02:51:06.672" starttime="20170725 02:51:06.672"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.673" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170725 02:51:06.673" starttime="20170725 02:51:06.673"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.676" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:06.676" starttime="20170725 02:51:06.676"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.676" starttime="20170725 02:51:06.675"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.678" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:06.678" starttime="20170725 02:51:06.677"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.678" starttime="20170725 02:51:06.677"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.679" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:06.679" starttime="20170725 02:51:06.679"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.680" starttime="20170725 02:51:06.678"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.681" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:06.681" starttime="20170725 02:51:06.680"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.681" starttime="20170725 02:51:06.680"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.681" starttime="20170725 02:51:06.675"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.681" starttime="20170725 02:51:06.674"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:51:06.682" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:51:06.682" starttime="20170725 02:51:06.681"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:51:06.744" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:51:06.744" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170725 02:51:06.793" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:51:06.793" starttime="20170725 02:51:06.707"></status>
</kw>
<msg timestamp="20170725 02:51:06.793" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:06.793" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-82"\nVERSION_ID="v1.99.8-82-g395b7bc"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC P...</msg>
<status status="PASS" endtime="20170725 02:51:06.793" starttime="20170725 02:51:06.682"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:51:06.794" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-82"
VERSION_ID="v1.99.8-82-g395b7bc"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<status status="PASS" endtime="20170725 02:51:06.794" starttime="20170725 02:51:06.793"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:51:06.794" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:51:06.794" starttime="20170725 02:51:06.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.801" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:06.801" starttime="20170725 02:51:06.801"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.801" starttime="20170725 02:51:06.800"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.802" starttime="20170725 02:51:06.795"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.802" starttime="20170725 02:51:06.674"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.802" starttime="20170725 02:51:06.673"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.802" starttime="20170725 02:51:06.673"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.802" starttime="20170725 02:51:06.671"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.802" starttime="20170725 02:51:06.671"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 02:51:06.803" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170725 02:51:06.803" starttime="20170725 02:51:06.803"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.804" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170725 02:51:06.804" starttime="20170725 02:51:06.803"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.807" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:06.807" starttime="20170725 02:51:06.807"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.807" starttime="20170725 02:51:06.806"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.808" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:06.808" starttime="20170725 02:51:06.808"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.809" starttime="20170725 02:51:06.807"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.810" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:06.810" starttime="20170725 02:51:06.809"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.810" starttime="20170725 02:51:06.809"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.811" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:06.811" starttime="20170725 02:51:06.811"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.812" starttime="20170725 02:51:06.810"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.812" starttime="20170725 02:51:06.806"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.812" starttime="20170725 02:51:06.805"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:51:06.813" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:51:06.813" starttime="20170725 02:51:06.812"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:51:06.875" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:51:06.876" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170725 02:51:06.931" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:51:06.931" starttime="20170725 02:51:06.841"></status>
</kw>
<msg timestamp="20170725 02:51:06.932" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:06.932" level="INFO">${ret_values} = (u' 17:50:00 up 20 min,  load average: 0.92, 0.66, 0.73', u'', 0)</msg>
<status status="PASS" endtime="20170725 02:51:06.932" starttime="20170725 02:51:06.813"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:51:06.932" level="INFO">${stdout} =  17:50:00 up 20 min,  load average: 0.92, 0.66, 0.73</msg>
<status status="PASS" endtime="20170725 02:51:06.933" starttime="20170725 02:51:06.932"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:51:06.933" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:51:06.933" starttime="20170725 02:51:06.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.940" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:06.940" starttime="20170725 02:51:06.940"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.940" starttime="20170725 02:51:06.939"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.940" starttime="20170725 02:51:06.933"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.940" starttime="20170725 02:51:06.804"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.940" starttime="20170725 02:51:06.804"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.943" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:06.943" starttime="20170725 02:51:06.943"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.944" starttime="20170725 02:51:06.942"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.945" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:06.945" starttime="20170725 02:51:06.944"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.945" starttime="20170725 02:51:06.944"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.946" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:06.946" starttime="20170725 02:51:06.946"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.946" starttime="20170725 02:51:06.945"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:06.947" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:06.947" starttime="20170725 02:51:06.947"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.948" starttime="20170725 02:51:06.946"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.948" starttime="20170725 02:51:06.942"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:06.948" starttime="20170725 02:51:06.942"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:51:06.948" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:51:06.949" starttime="20170725 02:51:06.948"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:51:07.020" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:51:07.021" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170725 02:51:07.078" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:51:07.079" starttime="20170725 02:51:06.986"></status>
</kw>
<msg timestamp="20170725 02:51:07.079" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:07.079" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170725 02:51:07.079" starttime="20170725 02:51:06.949"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:51:07.080" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status status="PASS" endtime="20170725 02:51:07.080" starttime="20170725 02:51:07.079"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:51:07.080" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:51:07.080" starttime="20170725 02:51:07.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:07.087" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:07.087" starttime="20170725 02:51:07.087"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.087" starttime="20170725 02:51:07.086"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.087" starttime="20170725 02:51:07.080"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.088" starttime="20170725 02:51:06.941"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.088" starttime="20170725 02:51:06.941"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:07.091" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:07.091" starttime="20170725 02:51:07.090"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.091" starttime="20170725 02:51:07.090"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:07.092" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:07.092" starttime="20170725 02:51:07.092"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.092" starttime="20170725 02:51:07.091"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:07.093" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:07.094" starttime="20170725 02:51:07.093"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.094" starttime="20170725 02:51:07.093"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:07.095" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:07.095" starttime="20170725 02:51:07.094"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.095" starttime="20170725 02:51:07.094"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.095" starttime="20170725 02:51:07.089"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.095" starttime="20170725 02:51:07.089"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:51:07.096" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:51:07.096" starttime="20170725 02:51:07.095"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:51:07.159" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:51:07.159" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170725 02:51:07.204" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:51:07.205" starttime="20170725 02:51:07.125"></status>
</kw>
<msg timestamp="20170725 02:51:07.205" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:07.205" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-d6ae40dc4c4dff3265cc254d404ed6b03fcc2206 #1 Tue Jul 25 01:58:25 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170725 02:51:07.205" starttime="20170725 02:51:07.096"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:51:07.206" level="INFO">${stdout} = Linux witherspoon 4.10.17-d6ae40dc4c4dff3265cc254d404ed6b03fcc2206 #1 Tue Jul 25 01:58:25 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170725 02:51:07.206" starttime="20170725 02:51:07.206"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:51:07.207" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:51:07.207" starttime="20170725 02:51:07.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:07.217" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:07.217" starttime="20170725 02:51:07.217"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.218" starttime="20170725 02:51:07.216"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.218" starttime="20170725 02:51:07.207"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.218" starttime="20170725 02:51:07.088"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.218" starttime="20170725 02:51:07.088"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.218" starttime="20170725 02:51:06.804"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.218" starttime="20170725 02:51:06.802"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.218" starttime="20170725 02:51:06.802"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.218" starttime="20170725 02:51:05.151"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.218" starttime="20170725 02:51:05.150"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.218" starttime="20170725 02:51:05.130"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.218" starttime="20170725 02:51:05.127"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.218" starttime="20170725 02:51:05.126"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:07.220" starttime="20170725 02:51:07.220"></status>
</kw>
<msg timestamp="20170725 02:51:07.220" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:07.220" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 02:51:07.220" starttime="20170725 02:51:07.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:07.221" starttime="20170725 02:51:07.221"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 02:51:07.242" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170725 02:51:07.242" starttime="20170725 02:51:07.241"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 02:51:07.243" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170725 02:51:07.243" starttime="20170725 02:51:07.243"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:51:07.244" level="INFO">${logpath} = /home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_elog.txt</msg>
<status status="PASS" endtime="20170725 02:51:07.245" starttime="20170725 02:51:07.244"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:51:07.248" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:51:07.249" starttime="20170725 02:51:07.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:51:07.250" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:51:07.250" starttime="20170725 02:51:07.249"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:51:07.250" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:51:07.250" starttime="20170725 02:51:07.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:51:07.251" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:51:07.251" starttime="20170725 02:51:07.251"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:51:07.507" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:51:07.507" starttime="20170725 02:51:07.254"></status>
</kw>
<msg timestamp="20170725 02:51:07.507" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:07.507" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:07.507" starttime="20170725 02:51:07.252"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:51:07.508" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:07.508" starttime="20170725 02:51:07.508"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:07.509" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:07.509" starttime="20170725 02:51:07.508"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.509" starttime="20170725 02:51:07.247"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.509" starttime="20170725 02:51:07.247"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.509" starttime="20170725 02:51:07.246"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:51:07.510" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170725 02:51:07.510" starttime="20170725 02:51:07.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:07.510" starttime="20170725 02:51:07.510"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:51:07.553" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 02:51:07.554" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:07.554" starttime="20170725 02:51:07.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:07.554" starttime="20170725 02:51:07.554"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:51:07.555" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:51:07.555" starttime="20170725 02:51:07.555"></status>
</kw>
<msg timestamp="20170725 02:51:07.555" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:07.555" starttime="20170725 02:51:07.245"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:07.556" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170725 02:51:07.556" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170725 02:51:07.557" starttime="20170725 02:51:07.556"></status>
</kw>
<msg timestamp="20170725 02:51:07.557" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 02:51:07.557" starttime="20170725 02:51:07.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170725 02:51:07.558" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170725 02:51:07.558" starttime="20170725 02:51:07.557"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.558" starttime="20170725 02:51:07.557"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.558" starttime="20170725 02:51:07.243"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:51:07.559" level="INFO">${logpath} = /home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170725 02:51:07.559" starttime="20170725 02:51:07.558"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:51:07.561" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:51:07.562" starttime="20170725 02:51:07.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:51:07.563" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:51:07.563" starttime="20170725 02:51:07.562"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:51:07.563" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:51:07.563" starttime="20170725 02:51:07.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:51:07.564" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:51:07.564" starttime="20170725 02:51:07.564"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:51:07.766" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:51:07.766" starttime="20170725 02:51:07.565"></status>
</kw>
<msg timestamp="20170725 02:51:07.766" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:07.766" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:07.766" starttime="20170725 02:51:07.564"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:51:07.767" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:07.767" starttime="20170725 02:51:07.767"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:07.768" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:07.768" starttime="20170725 02:51:07.767"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.768" starttime="20170725 02:51:07.560"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.768" starttime="20170725 02:51:07.560"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.768" starttime="20170725 02:51:07.559"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:51:07.769" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170725 02:51:07.769" starttime="20170725 02:51:07.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:07.769" starttime="20170725 02:51:07.769"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:51:07.969" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 02:51:07.969" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:07.969" starttime="20170725 02:51:07.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:07.970" starttime="20170725 02:51:07.970"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:51:07.970" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:51:07.971" starttime="20170725 02:51:07.970"></status>
</kw>
<msg timestamp="20170725 02:51:07.971" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:07.971" starttime="20170725 02:51:07.559"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:07.972" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:07.972" starttime="20170725 02:51:07.972"></status>
</kw>
<msg timestamp="20170725 02:51:07.972" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170725 02:51:07.972" starttime="20170725 02:51:07.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:07.973" starttime="20170725 02:51:07.973"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170725 02:51:07.974" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 1
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Baseboard Init"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:51:07.974" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170725 02:51:07.974" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 1
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170725 02:51:07.974" starttime="20170725 02:51:07.973"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:07.975" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:07.976" starttime="20170725 02:51:07.975"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.976" starttime="20170725 02:51:07.974"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:07.976" starttime="20170725 02:51:07.558"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:51:07.976" level="INFO">${logpath} = /home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170725 02:51:07.977" starttime="20170725 02:51:07.976"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:51:07.979" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:51:07.980" starttime="20170725 02:51:07.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:51:07.981" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:51:07.981" starttime="20170725 02:51:07.980"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:51:07.981" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:51:07.981" starttime="20170725 02:51:07.981"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:51:07.982" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:51:07.982" starttime="20170725 02:51:07.981"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:51:08.203" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:51:08.203" starttime="20170725 02:51:07.983"></status>
</kw>
<msg timestamp="20170725 02:51:08.203" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:08.203" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:08.203" starttime="20170725 02:51:07.982"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:51:08.204" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:08.204" starttime="20170725 02:51:08.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:08.204" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:08.204" starttime="20170725 02:51:08.204"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:08.205" starttime="20170725 02:51:07.978"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:08.205" starttime="20170725 02:51:07.978"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:08.205" starttime="20170725 02:51:07.977"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:51:08.205" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170725 02:51:08.205" starttime="20170725 02:51:08.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:08.206" starttime="20170725 02:51:08.206"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:51:10.052" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 02:51:10.052" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:10.052" starttime="20170725 02:51:08.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:10.053" starttime="20170725 02:51:10.052"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:51:10.053" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:51:10.053" starttime="20170725 02:51:10.053"></status>
</kw>
<msg timestamp="20170725 02:51:10.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:10.054" starttime="20170725 02:51:07.977"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:10.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:10.055" starttime="20170725 02:51:10.054"></status>
</kw>
<msg timestamp="20170725 02:51:10.055" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170725 02:51:10.055" starttime="20170725 02:51:10.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:10.055" starttime="20170725 02:51:10.055"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170725 02:51:10.058" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y230UF72R00C    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933815990", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817514", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0d83", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e72", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dad", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e8f", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e95", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ec3", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0da9", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e73", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170725 02:51:10.059" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170725 02:51:10.059" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status status="PASS" endtime="20170725 02:51:10.059" starttime="20170725 02:51:10.056"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:10.061" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:10.061" starttime="20170725 02:51:10.060"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.061" starttime="20170725 02:51:10.059"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.061" starttime="20170725 02:51:07.976"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:51:10.062" level="INFO">${logpath} = /home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_led.txt</msg>
<status status="PASS" endtime="20170725 02:51:10.062" starttime="20170725 02:51:10.061"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:51:10.065" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:51:10.065" starttime="20170725 02:51:10.064"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:51:10.066" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:51:10.066" starttime="20170725 02:51:10.066"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:51:10.067" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:51:10.067" starttime="20170725 02:51:10.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:51:10.067" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:51:10.067" starttime="20170725 02:51:10.067"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:51:10.270" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:51:10.270" starttime="20170725 02:51:10.068"></status>
</kw>
<msg timestamp="20170725 02:51:10.270" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:10.270" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:10.270" starttime="20170725 02:51:10.068"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:51:10.271" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:10.271" starttime="20170725 02:51:10.270"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:10.271" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:10.272" starttime="20170725 02:51:10.271"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.272" starttime="20170725 02:51:10.064"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.272" starttime="20170725 02:51:10.063"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.272" starttime="20170725 02:51:10.063"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:51:10.273" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170725 02:51:10.273" starttime="20170725 02:51:10.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:10.273" starttime="20170725 02:51:10.273"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:51:10.315" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 02:51:10.315" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:10.315" starttime="20170725 02:51:10.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:10.316" starttime="20170725 02:51:10.316"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:51:10.316" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:51:10.316" starttime="20170725 02:51:10.316"></status>
</kw>
<msg timestamp="20170725 02:51:10.317" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:10.317" starttime="20170725 02:51:10.062"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:10.318" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170725 02:51:10.318" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170725 02:51:10.318" starttime="20170725 02:51:10.317"></status>
</kw>
<msg timestamp="20170725 02:51:10.318" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 02:51:10.318" starttime="20170725 02:51:10.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170725 02:51:10.319" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170725 02:51:10.319" starttime="20170725 02:51:10.319"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.319" starttime="20170725 02:51:10.318"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.319" starttime="20170725 02:51:10.061"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:51:10.320" level="INFO">${logpath} = /home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170725 02:51:10.320" starttime="20170725 02:51:10.320"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:51:10.324" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:51:10.324" starttime="20170725 02:51:10.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:51:10.325" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:51:10.325" starttime="20170725 02:51:10.325"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:51:10.326" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:51:10.326" starttime="20170725 02:51:10.326"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:51:10.327" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:51:10.327" starttime="20170725 02:51:10.327"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:51:10.508" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:51:10.508" starttime="20170725 02:51:10.328"></status>
</kw>
<msg timestamp="20170725 02:51:10.508" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:10.508" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:10.509" starttime="20170725 02:51:10.328"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:51:10.509" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:10.509" starttime="20170725 02:51:10.509"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:10.510" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:10.510" starttime="20170725 02:51:10.510"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.510" starttime="20170725 02:51:10.322"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.510" starttime="20170725 02:51:10.322"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.510" starttime="20170725 02:51:10.321"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:51:10.511" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170725 02:51:10.511" starttime="20170725 02:51:10.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:10.512" starttime="20170725 02:51:10.511"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:51:10.556" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170725 02:51:10.556" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:10.556" starttime="20170725 02:51:10.512"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:10.557" starttime="20170725 02:51:10.557"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:51:10.557" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:51:10.557" starttime="20170725 02:51:10.557"></status>
</kw>
<msg timestamp="20170725 02:51:10.558" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:10.558" starttime="20170725 02:51:10.320"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:10.559" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170725 02:51:10.559" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170725 02:51:10.559" starttime="20170725 02:51:10.559"></status>
</kw>
<msg timestamp="20170725 02:51:10.559" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 02:51:10.559" starttime="20170725 02:51:10.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170725 02:51:10.561" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170725 02:51:10.561" starttime="20170725 02:51:10.560"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.561" starttime="20170725 02:51:10.560"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.561" starttime="20170725 02:51:10.319"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.561" starttime="20170725 02:51:07.243"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.561" starttime="20170725 02:51:07.242"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.561" starttime="20170725 02:51:07.242"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.561" starttime="20170725 02:51:07.242"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.562" starttime="20170725 02:51:07.241"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.562" starttime="20170725 02:51:07.221"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.562" starttime="20170725 02:51:07.219"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:10.562" starttime="20170725 02:51:07.218"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:10.565" starttime="20170725 02:51:10.564"></status>
</kw>
<msg timestamp="20170725 02:51:10.565" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:10.565" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 02:51:10.565" starttime="20170725 02:51:10.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:10.566" starttime="20170725 02:51:10.565"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170725 02:51:10.617" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:51:10.617" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170725 02:51:10.714" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170725 02:51:10.728" level="INFO">${core_files} = None</msg>
<msg timestamp="20170725 02:51:10.728" level="INFO">${stderr} = None</msg>
<msg timestamp="20170725 02:51:10.728" level="INFO">${rc} = None</msg>
<msg timestamp="20170725 02:51:10.728" level="FAIL">#(UTC) 2017/07/25 02:51:10.727319 -    5.628854 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170725 02:51:10.729" starttime="20170725 02:51:10.588"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170725 02:51:10.729" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170725 02:51:10.730" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170725 02:51:10.730" starttime="20170725 02:51:10.729"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:10.743" starttime="20170725 02:51:10.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:11.420" starttime="20170725 02:51:10.746"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:11.420" starttime="20170725 02:51:10.743"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:11.420" starttime="20170725 02:51:10.741"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:11.420" starttime="20170725 02:51:10.730"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170725 02:51:11.421" starttime="20170725 02:51:11.420"></status>
</kw>
<status status="FAIL" endtime="20170725 02:51:11.421" starttime="20170725 02:51:10.587"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:11.421" starttime="20170725 02:51:10.566"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:11.421" starttime="20170725 02:51:10.562"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:11.421" starttime="20170725 02:51:10.562"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:11.423" starttime="20170725 02:51:11.423"></status>
</kw>
<msg timestamp="20170725 02:51:11.423" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:11.423" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 02:51:11.423" starttime="20170725 02:51:11.423"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:11.424" starttime="20170725 02:51:11.424"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170725 02:51:11.445" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170725 02:51:11.445" starttime="20170725 02:51:11.444"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170725 02:51:11.446" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170725 02:51:11.446" starttime="20170725 02:51:11.446"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:51:11.447" level="INFO">${logpath} = /home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170725 02:51:11.447" starttime="20170725 02:51:11.446"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:11.448" starttime="20170725 02:51:11.448"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:51:11.449" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:51:11.449" starttime="20170725 02:51:11.448"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:51:11.518" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:51:11.519" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170725 02:51:12.079" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:51:12.079" starttime="20170725 02:51:11.479"></status>
</kw>
<msg timestamp="20170725 02:51:12.079" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:12.080" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Apr 20 17:49 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Apr 20 17:49 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170725 02:51:12.080" starttime="20170725 02:51:11.449"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:51:12.081" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Apr 20 17:49 0 -&gt; /dev/null
lrwx------    1 root     root            64 Apr 20 17:49 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170725 02:51:12.081" starttime="20170725 02:51:12.081"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:51:12.082" level="INFO">${stderr} = ls: /proc/1832/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170725 02:51:12.082" starttime="20170725 02:51:12.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:12.089" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:12.090" starttime="20170725 02:51:12.089"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.090" starttime="20170725 02:51:12.088"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.090" starttime="20170725 02:51:12.082"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.090" starttime="20170725 02:51:11.447"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.090" starttime="20170725 02:51:11.446"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:51:12.091" level="INFO">${logpath} = /home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170725 02:51:12.091" starttime="20170725 02:51:12.090"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:12.093" starttime="20170725 02:51:12.092"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:51:12.094" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:51:12.094" starttime="20170725 02:51:12.093"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:51:12.158" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:51:12.158" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170725 02:51:12.225" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:51:12.225" starttime="20170725 02:51:12.120"></status>
</kw>
<msg timestamp="20170725 02:51:12.225" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:12.225" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170725 02:51:12.225" starttime="20170725 02:51:12.094"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:51:12.226" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170725 02:51:12.226" starttime="20170725 02:51:12.226"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:51:12.227" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:51:12.227" starttime="20170725 02:51:12.226"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:12.234" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:12.234" starttime="20170725 02:51:12.233"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.234" starttime="20170725 02:51:12.232"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.234" starttime="20170725 02:51:12.227"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.234" starttime="20170725 02:51:12.091"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.234" starttime="20170725 02:51:12.090"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:51:12.235" level="INFO">${logpath} = /home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170725 02:51:12.235" starttime="20170725 02:51:12.235"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:12.236" starttime="20170725 02:51:12.236"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:51:12.237" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:51:12.237" starttime="20170725 02:51:12.237"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:51:12.301" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:51:12.301" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170725 02:51:12.369" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:51:12.369" starttime="20170725 02:51:12.265"></status>
</kw>
<msg timestamp="20170725 02:51:12.369" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:12.369" level="INFO">${ret_values} = (u'MemTotal:         432280 kB\nMemFree:          275496 kB\nMemAvailable:     321780 kB\nBuffers:           11172 kB\nCached:            52028 kB\nSwapCached:            0 kB\nActive:           10466...</msg>
<status status="PASS" endtime="20170725 02:51:12.369" starttime="20170725 02:51:12.237"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:51:12.370" level="INFO">${stdout} = MemTotal:         432280 kB
MemFree:          275496 kB
MemAvailable:     321780 kB
Buffers:           11172 kB
Cached:            52028 kB
SwapCached:            0 kB
Active:           104660 kB
Inac...</msg>
<status status="PASS" endtime="20170725 02:51:12.370" starttime="20170725 02:51:12.370"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:51:12.371" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:51:12.371" starttime="20170725 02:51:12.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:12.382" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:12.382" starttime="20170725 02:51:12.381"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.382" starttime="20170725 02:51:12.380"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.382" starttime="20170725 02:51:12.371"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.382" starttime="20170725 02:51:12.235"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.382" starttime="20170725 02:51:12.234"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:51:12.383" level="INFO">${logpath} = /home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170725 02:51:12.383" starttime="20170725 02:51:12.382"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:12.384" starttime="20170725 02:51:12.384"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:51:12.385" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:51:12.385" starttime="20170725 02:51:12.384"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:51:12.447" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:51:12.448" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170725 02:51:12.738" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:51:12.738" starttime="20170725 02:51:12.412"></status>
</kw>
<msg timestamp="20170725 02:51:12.738" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:12.739" level="INFO">${ret_values} = (u'Mem: 156784K used, 275496K free, 14760K shrd, 11172K buff, 52028K cached\nCPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq\nLoad average: 1.01 0.69 0.75 1/146 1835\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170725 02:51:12.739" starttime="20170725 02:51:12.385"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:51:12.739" level="INFO">${stdout} = Mem: 156784K used, 275496K free, 14760K shrd, 11172K buff, 52028K cached
CPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 1.01 0.69 0.75 1/146 1835
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170725 02:51:12.739" starttime="20170725 02:51:12.739"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:51:12.740" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:51:12.740" starttime="20170725 02:51:12.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:12.747" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:12.747" starttime="20170725 02:51:12.746"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.747" starttime="20170725 02:51:12.746"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.747" starttime="20170725 02:51:12.740"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.747" starttime="20170725 02:51:12.383"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.747" starttime="20170725 02:51:12.382"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:51:12.748" level="INFO">${logpath} = /home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170725 02:51:12.748" starttime="20170725 02:51:12.748"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:12.749" starttime="20170725 02:51:12.749"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:51:12.750" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:51:12.750" starttime="20170725 02:51:12.750"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:51:12.816" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:51:12.818" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170725 02:51:12.875" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:51:12.875" starttime="20170725 02:51:12.778"></status>
</kw>
<msg timestamp="20170725 02:51:12.875" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:12.875" level="INFO">${ret_values} = (u"[    4.800000] leds-pca955x 11-0060: gpios 264...279\n[    4.800000] usbcore: registered new interface driver usbhid\n[    4.810000] usbhid: USB HID core driver\n[    4.860000] dps310: probe of 3-0...</msg>
<status status="PASS" endtime="20170725 02:51:12.875" starttime="20170725 02:51:12.751"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:51:12.876" level="INFO">${stdout} = [    4.800000] leds-pca955x 11-0060: gpios 264...279
[    4.800000] usbcore: registered new interface driver usbhid
[    4.810000] usbhid: USB HID core driver
[    4.860000] dps310: probe of 3-0076 fa...</msg>
<status status="PASS" endtime="20170725 02:51:12.876" starttime="20170725 02:51:12.876"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:51:12.877" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:51:12.877" starttime="20170725 02:51:12.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:12.884" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:12.884" starttime="20170725 02:51:12.884"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.884" starttime="20170725 02:51:12.882"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.884" starttime="20170725 02:51:12.877"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.885" starttime="20170725 02:51:12.748"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:12.885" starttime="20170725 02:51:12.747"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170725 02:51:12.885" level="INFO">${logpath} = /home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170725 02:51:12.885" starttime="20170725 02:51:12.885"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:12.887" starttime="20170725 02:51:12.886"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170725 02:51:12.888" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170725 02:51:12.888" starttime="20170725 02:51:12.887"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170725 02:51:12.948" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170725 02:51:12.949" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170725 02:51:15.440" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170725 02:51:15.441" starttime="20170725 02:51:12.915"></status>
</kw>
<msg timestamp="20170725 02:51:15.441" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:15.445" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-04-20 17:29:23 UTC, end at Thu 2017-04-20 17:50:05 UTC. --\nApr 20 17:29:23 witherspoon kernel: Booting Linux on physical CPU 0x0\nApr 20 17:29:23 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170725 02:51:15.445" starttime="20170725 02:51:12.888"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170725 02:51:15.447" level="INFO">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:23 UTC, end at Thu 2017-04-20 17:50:05 UTC. --
Apr 20 17:29:23 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:23 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170725 02:51:15.447" starttime="20170725 02:51:15.445"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170725 02:51:15.447" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170725 02:51:15.447" starttime="20170725 02:51:15.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170725 02:51:15.456" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/20170725025104918905_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:15.456" starttime="20170725 02:51:15.455"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.456" starttime="20170725 02:51:15.453"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.456" starttime="20170725 02:51:15.448"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.457" starttime="20170725 02:51:12.886"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.457" starttime="20170725 02:51:12.885"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.457" starttime="20170725 02:51:11.446"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.457" starttime="20170725 02:51:11.445"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.457" starttime="20170725 02:51:11.445"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.457" starttime="20170725 02:51:11.445"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.457" starttime="20170725 02:51:11.444"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.457" starttime="20170725 02:51:11.424"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.457" starttime="20170725 02:51:11.421"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.457" starttime="20170725 02:51:11.421"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:15.459" starttime="20170725 02:51:15.459"></status>
</kw>
<msg timestamp="20170725 02:51:15.459" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:15.459" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 02:51:15.459" starttime="20170725 02:51:15.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:15.460" starttime="20170725 02:51:15.460"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170725 02:51:15.484" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170725 02:51:15.485" starttime="20170725 02:51:15.483"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170725 02:51:15.485" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170725 02:51:15.485" starttime="20170725 02:51:15.485"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170725 02:51:15.486" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170725 02:51:15.486" starttime="20170725 02:51:15.485"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170725 02:51:15.487" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170725 02:51:15.487" starttime="20170725 02:51:15.487"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170725 02:51:15.691" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170725 02:51:15.691" starttime="20170725 02:51:15.488"></status>
</kw>
<msg timestamp="20170725 02:51:15.692" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:15.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:15.692" starttime="20170725 02:51:15.487"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170725 02:51:15.692" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:15.692" starttime="20170725 02:51:15.692"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:15.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170725 02:51:15.693" starttime="20170725 02:51:15.693"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.693" starttime="20170725 02:51:15.483"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.693" starttime="20170725 02:51:15.482"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.694" starttime="20170725 02:51:15.481"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170725 02:51:15.694" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170725 02:51:15.694" starttime="20170725 02:51:15.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:15.695" starttime="20170725 02:51:15.695"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170725 02:51:15.766" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170725 02:51:15.766" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:15.766" starttime="20170725 02:51:15.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:15.767" starttime="20170725 02:51:15.766"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170725 02:51:15.767" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170725 02:51:15.767" starttime="20170725 02:51:15.767"></status>
</kw>
<msg timestamp="20170725 02:51:15.767" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170725 02:51:15.767" starttime="20170725 02:51:15.480"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170725 02:51:15.768" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170725 02:51:15.769" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170725 02:51:15.769" starttime="20170725 02:51:15.768"></status>
</kw>
<msg timestamp="20170725 02:51:15.769" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170725 02:51:15.769" starttime="20170725 02:51:15.768"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170725 02:51:15.769" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170725 02:51:15.769" starttime="20170725 02:51:15.769"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.770" starttime="20170725 02:51:15.480"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.770" starttime="20170725 02:51:15.460"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.770" starttime="20170725 02:51:15.458"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.770" starttime="20170725 02:51:15.457"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:15.772" starttime="20170725 02:51:15.771"></status>
</kw>
<msg timestamp="20170725 02:51:15.772" level="INFO">${status} = PASS</msg>
<msg timestamp="20170725 02:51:15.772" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170725 02:51:15.772" starttime="20170725 02:51:15.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:15.773" starttime="20170725 02:51:15.773"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170725 02:51:15.797" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170725 02:51:15.797" starttime="20170725 02:51:15.794"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.797" starttime="20170725 02:51:15.793"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.797" starttime="20170725 02:51:15.773"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.797" starttime="20170725 02:51:15.770"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.797" starttime="20170725 02:51:15.770"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.797" starttime="20170725 02:51:05.126"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.797" starttime="20170725 02:51:05.123"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.797" starttime="20170725 02:51:05.123"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.798" starttime="20170725 02:51:05.123"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170725 02:51:15.806" starttime="20170725 02:51:15.806"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.806" starttime="20170725 02:51:15.798"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.806" starttime="20170725 02:51:05.122"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.807" starttime="20170725 02:51:01.826"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.807" starttime="20170725 02:51:01.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:15.808" starttime="20170725 02:51:15.808"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170725 02:51:15.812" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170725 02:51:15.812" starttime="20170725 02:51:15.812"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170725 02:51:15.813" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170725025104918905_TestBiosUpdate/20170725025104918905_HostBIOSPowerOn/</msg>
<status status="PASS" endtime="20170725 02:51:15.813" starttime="20170725 02:51:15.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:15.814" starttime="20170725 02:51:15.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:15.814" starttime="20170725 02:51:15.814"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170725 02:51:15.815" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170725 02:51:15.815" starttime="20170725 02:51:15.815"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170725 02:51:15.816" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170725 02:51:15.816" starttime="20170725 02:51:15.816"></status>
</kw>
<msg timestamp="20170725 02:51:15.816" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170725 02:51:15.816" starttime="20170725 02:51:15.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:15.817" starttime="20170725 02:51:15.817"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170725 02:51:15.818" starttime="20170725 02:51:15.817"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170725 02:51:15.819" level="INFO">${cur_time} = 2017-07-25 02:51:15:818821</msg>
<status status="PASS" endtime="20170725 02:51:15.819" starttime="20170725 02:51:15.818"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170725 02:51:15.820" level="INFO">${cur_time} = 20170725025115818821</msg>
<status status="PASS" endtime="20170725 02:51:15.820" starttime="20170725 02:51:15.819"></status>
</kw>
<msg timestamp="20170725 02:51:15.820" level="INFO">${cur_time} = 20170725025115818821</msg>
<status status="PASS" endtime="20170725 02:51:15.820" starttime="20170725 02:51:15.818"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170725 02:51:15.821" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170725 02:51:15.821" starttime="20170725 02:51:15.820"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.821" starttime="20170725 02:51:15.811"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.821" starttime="20170725 02:51:01.554"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.821" starttime="20170725 02:51:01.544"></status>
</kw>
<status status="PASS" endtime="20170725 02:51:15.821" starttime="20170725 02:51:01.541"></status>
</kw>
<doc>Power On the system and wait for OS</doc>
<tags>
<tag>BIOS_Code_Update</tag>
<tag>Host_BIOS_Power_On</tag>
<tag>open-power</tag>
</tags>
<status status="FAIL" endtime="20170725 02:51:15.822" critical="yes" starttime="20170725 02:36:16.697">#(UTC) 2017/07/25 02:51:01.407271 -    1.710476 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</status>
</test>
<doc>Update the PNOR image on the host for hostboot CI purposes.</doc>
<status status="FAIL" endtime="20170725 02:51:15.823" starttime="20170725 02:32:07.454"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="1">BIOS_Code_Update</stat>
<stat fail="1" pass="0">Host_BIOS_Power_On</stat>
<stat fail="0" pass="1">Host_BIOS_Update</stat>
<stat fail="1" pass="1">open-power</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Test Bios Update" pass="1">Test Bios Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
