<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170929 04:29:12.127" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:29:13.081" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:29:13.081" starttime="20170929 04:29:13.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:29:13.082" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:29:13.082" starttime="20170929 04:29:13.082"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:29:13.083" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:29:13.083" starttime="20170929 04:29:13.083"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:29:13.084" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:29:13.084" starttime="20170929 04:29:13.083"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:29:13.314" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:29:13.314" starttime="20170929 04:29:13.085"></status>
</kw>
<msg timestamp="20170929 04:29:13.315" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:13.315" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:13.315" starttime="20170929 04:29:13.084"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:29:13.315" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:13.315" starttime="20170929 04:29:13.315"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:29:13.316" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:13.316" starttime="20170929 04:29:13.316"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:13.316" starttime="20170929 04:29:13.080"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:13.316" starttime="20170929 04:29:13.079"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:13.317" starttime="20170929 04:29:13.078"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:29:13.317" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170929 04:29:13.317" starttime="20170929 04:29:13.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:13.318" starttime="20170929 04:29:13.318"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:29:13.378" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170929 04:29:13.378" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:13.378" starttime="20170929 04:29:13.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:13.379" starttime="20170929 04:29:13.379"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:29:13.380" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:29:13.380" starttime="20170929 04:29:13.380"></status>
</kw>
<msg timestamp="20170929 04:29:13.380" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:13.380" starttime="20170929 04:29:13.078"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170929 04:29:13.381" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 04:29:13.381" starttime="20170929 04:29:13.380"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:13.381" starttime="20170929 04:29:13.077"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:13.381" starttime="20170929 04:29:13.076"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20170929 04:29:13.382" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170929 04:29:13.382" starttime="20170929 04:29:13.382"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20170929 04:29:13.405" level="INFO">${image_version} = v1.99.10-68-g8038135</msg>
<status status="PASS" endtime="20170929 04:29:13.405" starttime="20170929 04:29:13.383"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170929 04:29:13.406" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170929 04:29:24.190" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20170929 04:29:24.191" starttime="20170929 04:29:13.405"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:29:24.194" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:29:24.194" starttime="20170929 04:29:24.194"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:29:24.195" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:29:24.195" starttime="20170929 04:29:24.195"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:29:24.196" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:29:24.196" starttime="20170929 04:29:24.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:29:24.196" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:29:24.196" starttime="20170929 04:29:24.196"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:29:24.397" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:29:24.397" starttime="20170929 04:29:24.197"></status>
</kw>
<msg timestamp="20170929 04:29:24.397" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:24.398" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:24.398" starttime="20170929 04:29:24.197"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:29:24.398" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:24.398" starttime="20170929 04:29:24.398"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:29:24.399" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:24.399" starttime="20170929 04:29:24.399"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:24.399" starttime="20170929 04:29:24.193"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:24.399" starttime="20170929 04:29:24.193"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:24.399" starttime="20170929 04:29:24.192"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:29:24.401" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170929 04:29:24.401" starttime="20170929 04:29:24.401"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:29:24.402" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170929 04:29:24.402" starttime="20170929 04:29:24.401"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:24.402" starttime="20170929 04:29:24.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:24.403" starttime="20170929 04:29:24.403"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:29:34.426" level="FAIL">SSLError: ('The write operation timed out',)</msg>
<status status="FAIL" endtime="20170929 04:29:34.426" starttime="20170929 04:29:24.403"></status>
</kw>
<status status="FAIL" endtime="20170929 04:29:34.426" starttime="20170929 04:29:24.191"></status>
</kw>
<status status="FAIL" endtime="20170929 04:29:34.426" starttime="20170929 04:29:13.381"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170929 04:29:34.441" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170929 04:29:34.442" starttime="20170929 04:29:34.441"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170929 04:29:34.447" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170929 04:29:37.450" level="INFO">${RC} = 0</msg>
<msg timestamp="20170929 04:29:37.451" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.728 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.830 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170929 04:29:37.451" starttime="20170929 04:29:34.442"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170929 04:29:37.454" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.728 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.830 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.627 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.704 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.627/0.722/0.830/0.074 ms</msg>
<status status="PASS" endtime="20170929 04:29:37.454" starttime="20170929 04:29:37.453"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:37.455" starttime="20170929 04:29:37.455"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:37.455" starttime="20170929 04:29:34.440"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170929 04:29:37.469" level="INFO">${cur_time} = 2017-09-29 04:29:37:468347</msg>
<status status="PASS" endtime="20170929 04:29:37.469" starttime="20170929 04:29:37.468"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170929 04:29:37.469" level="INFO">${cur_time} = 20170929042937468347</msg>
<status status="PASS" endtime="20170929 04:29:37.469" starttime="20170929 04:29:37.469"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:37.469" starttime="20170929 04:29:37.467"></status>
</kw>
<msg timestamp="20170929 04:29:37.476" level="INFO">${FFDC_TIME} = 20170929042937468347</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170929 04:29:37.477" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20170929 04:29:37.477" starttime="20170929 04:29:37.477"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170929 04:29:37.478" level="INFO">${suite_name} = 20170929042937468347_BmcCodeUpdate</msg>
<status status="PASS" endtime="20170929 04:29:37.478" starttime="20170929 04:29:37.478"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170929 04:29:37.479" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170929 04:29:37.479" starttime="20170929 04:29:37.478"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170929 04:29:37.479" level="INFO">${test_name} = 20170929042937468347_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170929 04:29:37.479" starttime="20170929 04:29:37.479"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:37.479" starttime="20170929 04:29:37.476"></status>
</kw>
<msg timestamp="20170929 04:29:37.485" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/</msg>
<msg timestamp="20170929 04:29:37.490" level="INFO">${FFDC_PREFIX} = 20170929042937468347_</msg>
<msg timestamp="20170929 04:29:37.510" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20170929 04:29:37.511" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:37.511" starttime="20170929 04:29:37.510"></status>
</kw>
<msg timestamp="20170929 04:29:37.516" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:37.527" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:37.527" starttime="20170929 04:29:37.526"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:37.527" starttime="20170929 04:29:37.526"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:37.528" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:37.528" starttime="20170929 04:29:37.528"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:37.528" starttime="20170929 04:29:37.527"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:37.530" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:37.530" starttime="20170929 04:29:37.529"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:37.530" starttime="20170929 04:29:37.529"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:37.531" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:37.531" starttime="20170929 04:29:37.531"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:37.531" starttime="20170929 04:29:37.530"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:37.532" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:37.533" starttime="20170929 04:29:37.532"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:37.533" starttime="20170929 04:29:37.531"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:37.534" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:37.534" starttime="20170929 04:29:37.534"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:37.534" starttime="20170929 04:29:37.533"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:37.535" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:37.535" starttime="20170929 04:29:37.535"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:37.535" starttime="20170929 04:29:37.534"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:37.537" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:37.537" starttime="20170929 04:29:37.537"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:37.537" starttime="20170929 04:29:37.536"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:37.538" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:37.538" starttime="20170929 04:29:37.538"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:37.538" starttime="20170929 04:29:37.537"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:37.540" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:37.540" starttime="20170929 04:29:37.540"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:37.540" starttime="20170929 04:29:37.539"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:37.541" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:37.541" starttime="20170929 04:29:37.541"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:37.541" starttime="20170929 04:29:37.540"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:37.543" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:37.543" starttime="20170929 04:29:37.542"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:37.543" starttime="20170929 04:29:37.542"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:37.544" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:37.544" starttime="20170929 04:29:37.544"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:37.544" starttime="20170929 04:29:37.543"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170929 04:29:37.562" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:29:37.562" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170929 04:29:38.352" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170929 04:29:38.352" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170929 04:29:38.430" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170929 04:29:38.439" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170929 04:29:38.439" level="INFO">${stderr} = </msg>
<msg timestamp="20170929 04:29:38.439" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170929 04:29:38.439" starttime="20170929 04:29:37.545"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170929 04:29:38.440" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170929 04:29:38.440" starttime="20170929 04:29:38.439"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170929 04:29:38.440" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170929 04:29:38.440" starttime="20170929 04:29:38.440"></status>
</kw>
<msg timestamp="20170929 04:29:38.440" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170929 04:29:38.441" starttime="20170929 04:29:37.544"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:38.442" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:38.442" starttime="20170929 04:29:38.441"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.442" starttime="20170929 04:29:38.441"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.442" starttime="20170929 04:29:37.539"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:38.444" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:38.444" starttime="20170929 04:29:38.443"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.444" starttime="20170929 04:29:38.442"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 04:29:38.444" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170929 04:29:38.444" starttime="20170929 04:29:38.444"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:38.446" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:38.446" starttime="20170929 04:29:38.446"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.446" starttime="20170929 04:29:38.445"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:38.447" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:38.447" starttime="20170929 04:29:38.447"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.447" starttime="20170929 04:29:38.446"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.447" starttime="20170929 04:29:38.445"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:38.449" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:38.449" starttime="20170929 04:29:38.448"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.449" starttime="20170929 04:29:38.448"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:38.450" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:38.450" starttime="20170929 04:29:38.450"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.450" starttime="20170929 04:29:38.449"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.450" starttime="20170929 04:29:38.448"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:38.452" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:38.452" starttime="20170929 04:29:38.451"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.452" starttime="20170929 04:29:38.451"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:38.453" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:38.453" starttime="20170929 04:29:38.453"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.453" starttime="20170929 04:29:38.452"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.453" starttime="20170929 04:29:38.451"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.453" starttime="20170929 04:29:38.444"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:38.454" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:38.454" starttime="20170929 04:29:38.454"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.455" starttime="20170929 04:29:38.453"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.455" starttime="20170929 04:29:37.525"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 04:29:38.461" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170929 04:29:38.461" starttime="20170929 04:29:38.461"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170929 04:29:38.462" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170929 04:29:38.463" starttime="20170929 04:29:38.462"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:38.464" starttime="20170929 04:29:38.464"></status>
</kw>
<msg timestamp="20170929 04:29:38.464" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170929 04:29:38.464" starttime="20170929 04:29:38.463"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:38.466" starttime="20170929 04:29:38.466"></status>
</kw>
<msg timestamp="20170929 04:29:38.466" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:38.466" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:29:38.466" starttime="20170929 04:29:38.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:38.467" starttime="20170929 04:29:38.467"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 04:29:38.481" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170929 04:29:38.482" starttime="20170929 04:29:38.481"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 04:29:38.483" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170929 04:29:38.483" starttime="20170929 04:29:38.483"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170929 04:29:38.489" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170929 04:29:38.489" starttime="20170929 04:29:38.483"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:38.492" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:38.492" starttime="20170929 04:29:38.492"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.493" starttime="20170929 04:29:38.491"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:38.494" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:38.494" starttime="20170929 04:29:38.493"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.494" starttime="20170929 04:29:38.493"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:38.495" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:38.495" starttime="20170929 04:29:38.495"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.496" starttime="20170929 04:29:38.494"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:38.497" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:38.497" starttime="20170929 04:29:38.496"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.497" starttime="20170929 04:29:38.496"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.497" starttime="20170929 04:29:38.491"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:38.497" starttime="20170929 04:29:38.490"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:29:38.498" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:29:38.498" starttime="20170929 04:29:38.497"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:29:38.540" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:29:38.541" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170929 04:29:39.928" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:29:39.928" starttime="20170929 04:29:38.517"></status>
</kw>
<msg timestamp="20170929 04:29:39.929" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:39.929" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170929 04:29:39.929" starttime="20170929 04:29:38.498"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:29:39.929" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170929 04:29:39.929" starttime="20170929 04:29:39.929"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:29:39.930" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:29:39.930" starttime="20170929 04:29:39.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:39.938" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:39.938" starttime="20170929 04:29:39.937"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:39.938" starttime="20170929 04:29:39.936"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:39.938" starttime="20170929 04:29:39.930"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:39.938" starttime="20170929 04:29:38.490"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:39.938" starttime="20170929 04:29:38.489"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:39.938" starttime="20170929 04:29:38.489"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:39.938" starttime="20170929 04:29:38.482"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:39.938" starttime="20170929 04:29:38.482"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 04:29:39.939" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170929 04:29:39.939" starttime="20170929 04:29:39.939"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170929 04:29:39.940" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170929 04:29:39.940" starttime="20170929 04:29:39.940"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:39.943" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:39.943" starttime="20170929 04:29:39.943"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:39.944" starttime="20170929 04:29:39.942"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:39.945" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:39.945" starttime="20170929 04:29:39.944"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:39.945" starttime="20170929 04:29:39.944"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:39.946" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:39.946" starttime="20170929 04:29:39.946"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:39.946" starttime="20170929 04:29:39.945"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:39.947" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:39.948" starttime="20170929 04:29:39.947"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:39.948" starttime="20170929 04:29:39.946"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:39.948" starttime="20170929 04:29:39.942"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:39.948" starttime="20170929 04:29:39.941"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:29:39.949" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:29:39.949" starttime="20170929 04:29:39.948"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:29:39.989" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:29:39.990" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170929 04:29:40.036" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:29:40.036" starttime="20170929 04:29:39.966"></status>
</kw>
<msg timestamp="20170929 04:29:40.037" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:40.037" level="INFO">${ret_values} = (u'20170929022641', u'', 0)</msg>
<status status="PASS" endtime="20170929 04:29:40.037" starttime="20170929 04:29:39.949"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:29:40.038" level="INFO">${stdout} = 20170929022641</msg>
<status status="PASS" endtime="20170929 04:29:40.038" starttime="20170929 04:29:40.037"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:29:40.038" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:29:40.038" starttime="20170929 04:29:40.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.046" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.046" starttime="20170929 04:29:40.046"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.046" starttime="20170929 04:29:40.045"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.046" starttime="20170929 04:29:40.039"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.046" starttime="20170929 04:29:39.941"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.046" starttime="20170929 04:29:39.940"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.049" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.050" starttime="20170929 04:29:40.049"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.050" starttime="20170929 04:29:40.049"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.051" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.051" starttime="20170929 04:29:40.051"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.051" starttime="20170929 04:29:40.050"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.052" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.052" starttime="20170929 04:29:40.052"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.052" starttime="20170929 04:29:40.051"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.054" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.054" starttime="20170929 04:29:40.053"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.054" starttime="20170929 04:29:40.053"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.054" starttime="20170929 04:29:40.048"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.054" starttime="20170929 04:29:40.048"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:29:40.055" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:29:40.055" starttime="20170929 04:29:40.054"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:29:40.096" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:29:40.096" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170929 04:29:40.150" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:29:40.150" starttime="20170929 04:29:40.073"></status>
</kw>
<msg timestamp="20170929 04:29:40.150" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:40.150" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-68"\nVERSION_ID="v1.99.10-68-gbd83a3d"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170929 04:29:40.150" starttime="20170929 04:29:40.055"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:29:40.151" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-68"
VERSION_ID="v1.99.10-68-gbd83a3d"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170929 04:29:40.151" starttime="20170929 04:29:40.151"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:29:40.152" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:29:40.152" starttime="20170929 04:29:40.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.159" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.159" starttime="20170929 04:29:40.159"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.159" starttime="20170929 04:29:40.158"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.159" starttime="20170929 04:29:40.152"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.159" starttime="20170929 04:29:40.047"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.160" starttime="20170929 04:29:40.046"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.160" starttime="20170929 04:29:39.940"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.160" starttime="20170929 04:29:39.938"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.160" starttime="20170929 04:29:39.938"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 04:29:40.161" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170929 04:29:40.161" starttime="20170929 04:29:40.161"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.162" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170929 04:29:40.162" starttime="20170929 04:29:40.161"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.165" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.165" starttime="20170929 04:29:40.165"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.165" starttime="20170929 04:29:40.164"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.166" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.166" starttime="20170929 04:29:40.166"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.166" starttime="20170929 04:29:40.165"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.168" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.168" starttime="20170929 04:29:40.167"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.168" starttime="20170929 04:29:40.167"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.169" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.169" starttime="20170929 04:29:40.169"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.169" starttime="20170929 04:29:40.168"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.169" starttime="20170929 04:29:40.163"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.169" starttime="20170929 04:29:40.163"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:29:40.170" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:29:40.170" starttime="20170929 04:29:40.170"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:29:40.211" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:29:40.211" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170929 04:29:40.262" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:29:40.262" starttime="20170929 04:29:40.189"></status>
</kw>
<msg timestamp="20170929 04:29:40.262" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:40.262" level="INFO">${ret_values} = (u' 04:29:54 up  1:33,  load average: 0.13, 0.25, 0.26', u'', 0)</msg>
<status status="PASS" endtime="20170929 04:29:40.262" starttime="20170929 04:29:40.171"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:29:40.263" level="INFO">${stdout} =  04:29:54 up  1:33,  load average: 0.13, 0.25, 0.26</msg>
<status status="PASS" endtime="20170929 04:29:40.263" starttime="20170929 04:29:40.263"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:29:40.264" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:29:40.264" starttime="20170929 04:29:40.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.271" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.271" starttime="20170929 04:29:40.271"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.271" starttime="20170929 04:29:40.270"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.271" starttime="20170929 04:29:40.264"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.271" starttime="20170929 04:29:40.162"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.271" starttime="20170929 04:29:40.162"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.274" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.275" starttime="20170929 04:29:40.274"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.275" starttime="20170929 04:29:40.273"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.276" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.276" starttime="20170929 04:29:40.276"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.276" starttime="20170929 04:29:40.275"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.277" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.277" starttime="20170929 04:29:40.277"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.277" starttime="20170929 04:29:40.276"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.279" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.279" starttime="20170929 04:29:40.278"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.279" starttime="20170929 04:29:40.278"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.279" starttime="20170929 04:29:40.273"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.279" starttime="20170929 04:29:40.273"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:29:40.280" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:29:40.280" starttime="20170929 04:29:40.279"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:29:40.321" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:29:40.322" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170929 04:29:40.378" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:29:40.378" starttime="20170929 04:29:40.298"></status>
</kw>
<msg timestamp="20170929 04:29:40.378" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:40.379" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.3M     14.3M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20170929 04:29:40.379" starttime="20170929 04:29:40.280"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:29:40.379" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.3M     14.3M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20170929 04:29:40.379" starttime="20170929 04:29:40.379"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:29:40.380" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:29:40.380" starttime="20170929 04:29:40.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.387" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.387" starttime="20170929 04:29:40.387"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.387" starttime="20170929 04:29:40.386"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.388" starttime="20170929 04:29:40.380"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.388" starttime="20170929 04:29:40.272"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.388" starttime="20170929 04:29:40.272"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.391" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.391" starttime="20170929 04:29:40.390"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.391" starttime="20170929 04:29:40.390"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.392" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.392" starttime="20170929 04:29:40.392"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.392" starttime="20170929 04:29:40.391"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.394" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.394" starttime="20170929 04:29:40.393"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.394" starttime="20170929 04:29:40.393"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.395" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.395" starttime="20170929 04:29:40.395"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.395" starttime="20170929 04:29:40.394"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.395" starttime="20170929 04:29:40.389"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.395" starttime="20170929 04:29:40.389"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:29:40.396" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:29:40.396" starttime="20170929 04:29:40.396"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:29:40.437" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:29:40.438" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170929 04:29:40.495" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:29:40.495" starttime="20170929 04:29:40.414"></status>
</kw>
<msg timestamp="20170929 04:29:40.495" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:40.495" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170929 04:29:40.495" starttime="20170929 04:29:40.396"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:29:40.496" level="INFO">${stdout} = Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170929 04:29:40.496" starttime="20170929 04:29:40.495"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:29:40.496" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:29:40.496" starttime="20170929 04:29:40.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.504" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:40.504" starttime="20170929 04:29:40.504"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.504" starttime="20170929 04:29:40.503"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.504" starttime="20170929 04:29:40.497"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.504" starttime="20170929 04:29:40.388"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.504" starttime="20170929 04:29:40.388"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.505" starttime="20170929 04:29:40.162"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.505" starttime="20170929 04:29:40.160"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.505" starttime="20170929 04:29:40.160"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.505" starttime="20170929 04:29:38.482"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.505" starttime="20170929 04:29:38.480"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.505" starttime="20170929 04:29:38.467"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.505" starttime="20170929 04:29:38.464"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.505" starttime="20170929 04:29:38.464"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:40.507" starttime="20170929 04:29:40.507"></status>
</kw>
<msg timestamp="20170929 04:29:40.508" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:40.508" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:29:40.508" starttime="20170929 04:29:40.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:40.508" starttime="20170929 04:29:40.508"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 04:29:40.522" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170929 04:29:40.522" starttime="20170929 04:29:40.522"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 04:29:40.524" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20170929 04:29:40.524" starttime="20170929 04:29:40.523"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:29:40.525" level="INFO">${logpath} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170929 04:29:40.525" starttime="20170929 04:29:40.524"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:29:40.528" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:29:40.528" starttime="20170929 04:29:40.528"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:29:40.529" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:29:40.529" starttime="20170929 04:29:40.529"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:29:40.530" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:29:40.530" starttime="20170929 04:29:40.529"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:29:40.530" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:29:40.530" starttime="20170929 04:29:40.530"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.728" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:29:40.728" starttime="20170929 04:29:40.531"></status>
</kw>
<msg timestamp="20170929 04:29:40.728" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:40.728" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:40.728" starttime="20170929 04:29:40.531"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.729" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:40.729" starttime="20170929 04:29:40.729"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:29:40.730" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:40.730" starttime="20170929 04:29:40.729"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.730" starttime="20170929 04:29:40.527"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.730" starttime="20170929 04:29:40.526"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:40.730" starttime="20170929 04:29:40.526"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:29:40.731" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170929 04:29:40.731" starttime="20170929 04:29:40.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:40.731" starttime="20170929 04:29:40.731"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:29:41.304" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:29:41.304" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:41.304" starttime="20170929 04:29:40.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:41.305" starttime="20170929 04:29:41.305"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:29:41.305" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:29:41.306" starttime="20170929 04:29:41.305"></status>
</kw>
<msg timestamp="20170929 04:29:41.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:41.306" starttime="20170929 04:29:40.525"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:29:41.307" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:41.307" starttime="20170929 04:29:41.307"></status>
</kw>
<msg timestamp="20170929 04:29:41.307" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:29:41.307" starttime="20170929 04:29:41.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:41.308" starttime="20170929 04:29:41.308"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:29:41.309" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 4000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 27530
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 208000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 312
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:29:41.309" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:29:41.310" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170929 04:29:41.310" starttime="20170929 04:29:41.308"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:41.311" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:41.311" starttime="20170929 04:29:41.311"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:41.311" starttime="20170929 04:29:41.310"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:41.311" starttime="20170929 04:29:40.524"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:29:41.312" level="INFO">${logpath} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_OCC_state.txt</msg>
<status status="PASS" endtime="20170929 04:29:41.312" starttime="20170929 04:29:41.312"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:29:41.315" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:29:41.315" starttime="20170929 04:29:41.315"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:29:41.316" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:29:41.316" starttime="20170929 04:29:41.316"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:29:41.317" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:29:41.317" starttime="20170929 04:29:41.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:29:41.317" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:29:41.317" starttime="20170929 04:29:41.317"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:29:41.510" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:29:41.510" starttime="20170929 04:29:41.318"></status>
</kw>
<msg timestamp="20170929 04:29:41.511" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:41.511" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:41.511" starttime="20170929 04:29:41.318"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:29:41.511" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:41.511" starttime="20170929 04:29:41.511"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:29:41.512" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:41.512" starttime="20170929 04:29:41.512"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:41.512" starttime="20170929 04:29:41.314"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:41.512" starttime="20170929 04:29:41.314"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:41.512" starttime="20170929 04:29:41.313"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:29:41.513" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20170929 04:29:41.513" starttime="20170929 04:29:41.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:41.514" starttime="20170929 04:29:41.513"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:29:41.661" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:29:41.661" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:41.661" starttime="20170929 04:29:41.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:41.662" starttime="20170929 04:29:41.662"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:29:41.663" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:29:41.663" starttime="20170929 04:29:41.662"></status>
</kw>
<msg timestamp="20170929 04:29:41.663" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:41.663" starttime="20170929 04:29:41.312"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:29:41.664" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:41.664" starttime="20170929 04:29:41.664"></status>
</kw>
<msg timestamp="20170929 04:29:41.664" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:29:41.664" starttime="20170929 04:29:41.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:41.665" starttime="20170929 04:29:41.664"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:29:41.665" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:29:41.665" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:29:41.666" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" endtime="20170929 04:29:41.666" starttime="20170929 04:29:41.665"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:41.667" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_OCC_state.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:41.667" starttime="20170929 04:29:41.667"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:41.667" starttime="20170929 04:29:41.666"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:41.667" starttime="20170929 04:29:41.312"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:29:41.668" level="INFO">${logpath} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170929 04:29:41.668" starttime="20170929 04:29:41.668"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:29:41.671" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:29:41.671" starttime="20170929 04:29:41.671"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:29:41.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:29:41.672" starttime="20170929 04:29:41.672"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:29:41.673" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:29:41.673" starttime="20170929 04:29:41.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:29:41.673" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:29:41.673" starttime="20170929 04:29:41.673"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:29:41.865" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:29:41.865" starttime="20170929 04:29:41.674"></status>
</kw>
<msg timestamp="20170929 04:29:41.865" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:41.865" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:41.865" starttime="20170929 04:29:41.674"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:29:41.866" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:41.866" starttime="20170929 04:29:41.866"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:29:41.867" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:41.867" starttime="20170929 04:29:41.866"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:41.867" starttime="20170929 04:29:41.670"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:41.867" starttime="20170929 04:29:41.670"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:41.867" starttime="20170929 04:29:41.669"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:29:41.868" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170929 04:29:41.868" starttime="20170929 04:29:41.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:41.869" starttime="20170929 04:29:41.868"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:29:42.168" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:29:42.168" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:42.168" starttime="20170929 04:29:41.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:42.169" starttime="20170929 04:29:42.169"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:29:42.169" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:29:42.170" starttime="20170929 04:29:42.169"></status>
</kw>
<msg timestamp="20170929 04:29:42.170" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:42.170" starttime="20170929 04:29:41.668"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:29:42.171" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:42.171" starttime="20170929 04:29:42.171"></status>
</kw>
<msg timestamp="20170929 04:29:42.171" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:29:42.171" starttime="20170929 04:29:42.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:42.172" starttime="20170929 04:29:42.171"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:29:42.173" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:29:42.173" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:29:42.173" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170929 04:29:42.173" starttime="20170929 04:29:42.172"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:42.174" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:42.174" starttime="20170929 04:29:42.174"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:42.174" starttime="20170929 04:29:42.173"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:42.174" starttime="20170929 04:29:41.667"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:29:42.175" level="INFO">${logpath} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_led.txt</msg>
<status status="PASS" endtime="20170929 04:29:42.175" starttime="20170929 04:29:42.175"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:29:42.178" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:29:42.179" starttime="20170929 04:29:42.178"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:29:42.179" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:29:42.179" starttime="20170929 04:29:42.179"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:29:42.180" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:29:42.180" starttime="20170929 04:29:42.180"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:29:42.181" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:29:42.181" starttime="20170929 04:29:42.180"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:29:42.404" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:29:42.404" starttime="20170929 04:29:42.182"></status>
</kw>
<msg timestamp="20170929 04:29:42.404" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:42.404" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:42.404" starttime="20170929 04:29:42.181"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:29:42.405" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:42.405" starttime="20170929 04:29:42.405"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:29:42.406" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:42.406" starttime="20170929 04:29:42.405"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:42.406" starttime="20170929 04:29:42.177"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:42.406" starttime="20170929 04:29:42.177"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:42.406" starttime="20170929 04:29:42.176"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:29:42.407" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20170929 04:29:42.407" starttime="20170929 04:29:42.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:42.408" starttime="20170929 04:29:42.407"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:29:44.025" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:29:44.025" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:44.025" starttime="20170929 04:29:42.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:44.026" starttime="20170929 04:29:44.026"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:29:44.027" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:29:44.027" starttime="20170929 04:29:44.026"></status>
</kw>
<msg timestamp="20170929 04:29:44.027" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:44.027" starttime="20170929 04:29:42.175"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:29:44.028" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:44.028" starttime="20170929 04:29:44.028"></status>
</kw>
<msg timestamp="20170929 04:29:44.028" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:29:44.028" starttime="20170929 04:29:44.027"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:44.029" starttime="20170929 04:29:44.029"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:29:44.031" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:29:44.031" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:29:44.031" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20170929 04:29:44.031" starttime="20170929 04:29:44.029"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:44.033" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_led.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:44.033" starttime="20170929 04:29:44.032"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:44.033" starttime="20170929 04:29:44.032"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:44.033" starttime="20170929 04:29:42.175"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:29:44.034" level="INFO">${logpath} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20170929 04:29:44.034" starttime="20170929 04:29:44.033"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:29:44.037" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:29:44.037" starttime="20170929 04:29:44.037"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:29:44.038" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:29:44.038" starttime="20170929 04:29:44.038"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:29:44.039" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:29:44.039" starttime="20170929 04:29:44.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:29:44.040" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:29:44.040" starttime="20170929 04:29:44.039"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:29:44.242" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:29:44.242" starttime="20170929 04:29:44.040"></status>
</kw>
<msg timestamp="20170929 04:29:44.242" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:44.242" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:44.242" starttime="20170929 04:29:44.040"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:29:44.243" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:44.243" starttime="20170929 04:29:44.242"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:29:44.243" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:44.244" starttime="20170929 04:29:44.243"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:44.244" starttime="20170929 04:29:44.036"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:44.244" starttime="20170929 04:29:44.035"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:44.244" starttime="20170929 04:29:44.035"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:29:44.244" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170929 04:29:44.245" starttime="20170929 04:29:44.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:44.245" starttime="20170929 04:29:44.245"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:29:44.628" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:29:44.628" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:44.628" starttime="20170929 04:29:44.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:44.628" starttime="20170929 04:29:44.628"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:29:44.629" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:29:44.629" starttime="20170929 04:29:44.629"></status>
</kw>
<msg timestamp="20170929 04:29:44.629" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:44.629" starttime="20170929 04:29:44.034"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:29:44.630" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:44.630" starttime="20170929 04:29:44.630"></status>
</kw>
<msg timestamp="20170929 04:29:44.631" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:29:44.631" starttime="20170929 04:29:44.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:44.631" starttime="20170929 04:29:44.631"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:29:44.632" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/1b14e18e": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-68-g57af142", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/1b14e18e/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/1b14e18e/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/3330203c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-68-gbd83a3d", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/3330203c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/3330203c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c", 
        "/xyz/openbmc_project/software/1b14e18e", 
        "/xyz/openbmc_project/software/3330203c"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/3330203c"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:29:44.632" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:29:44.633" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/1b14e18e": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status status="PASS" endtime="20170929 04:29:44.633" starttime="20170929 04:29:44.631"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:44.634" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:44.634" starttime="20170929 04:29:44.634"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:44.634" starttime="20170929 04:29:44.633"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:44.634" starttime="20170929 04:29:44.033"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:29:44.635" level="INFO">${logpath} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_elog.txt</msg>
<status status="PASS" endtime="20170929 04:29:44.635" starttime="20170929 04:29:44.635"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:29:44.638" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:29:44.639" starttime="20170929 04:29:44.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:29:44.640" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:29:44.640" starttime="20170929 04:29:44.639"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:29:44.640" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:29:44.640" starttime="20170929 04:29:44.640"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:29:44.641" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:29:44.641" starttime="20170929 04:29:44.641"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:29:44.864" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:29:44.864" starttime="20170929 04:29:44.642"></status>
</kw>
<msg timestamp="20170929 04:29:44.864" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:44.864" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:44.864" starttime="20170929 04:29:44.641"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:29:44.865" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:44.865" starttime="20170929 04:29:44.864"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:29:44.865" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:44.866" starttime="20170929 04:29:44.865"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:44.866" starttime="20170929 04:29:44.638"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:44.866" starttime="20170929 04:29:44.637"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:44.866" starttime="20170929 04:29:44.636"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:29:44.866" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170929 04:29:44.867" starttime="20170929 04:29:44.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:44.867" starttime="20170929 04:29:44.867"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:29:44.911" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:29:44.911" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:44.911" starttime="20170929 04:29:44.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:44.912" starttime="20170929 04:29:44.911"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:29:44.912" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:29:44.912" starttime="20170929 04:29:44.912"></status>
</kw>
<msg timestamp="20170929 04:29:44.913" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:44.913" starttime="20170929 04:29:44.635"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:29:44.914" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170929 04:29:44.914" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170929 04:29:44.914" starttime="20170929 04:29:44.913"></status>
</kw>
<msg timestamp="20170929 04:29:44.914" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170929 04:29:44.914" starttime="20170929 04:29:44.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170929 04:29:44.915" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170929 04:29:44.915" starttime="20170929 04:29:44.915"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:44.915" starttime="20170929 04:29:44.914"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:44.915" starttime="20170929 04:29:44.634"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:29:44.916" level="INFO">${logpath} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170929 04:29:44.916" starttime="20170929 04:29:44.916"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:29:44.919" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:29:44.921" starttime="20170929 04:29:44.919"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:29:44.922" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:29:44.922" starttime="20170929 04:29:44.922"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:29:44.923" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:29:44.923" starttime="20170929 04:29:44.922"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:29:44.924" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:29:44.924" starttime="20170929 04:29:44.923"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:29:45.120" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:29:45.120" starttime="20170929 04:29:44.924"></status>
</kw>
<msg timestamp="20170929 04:29:45.120" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:45.120" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:45.120" starttime="20170929 04:29:44.924"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:29:45.121" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:45.121" starttime="20170929 04:29:45.120"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:29:45.121" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:45.122" starttime="20170929 04:29:45.121"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:45.122" starttime="20170929 04:29:44.918"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:45.122" starttime="20170929 04:29:44.918"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:45.122" starttime="20170929 04:29:44.917"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:29:45.122" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170929 04:29:45.122" starttime="20170929 04:29:45.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:45.123" starttime="20170929 04:29:45.123"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:29:47.414" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:29:47.414" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:47.414" starttime="20170929 04:29:45.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:47.415" starttime="20170929 04:29:47.415"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:29:47.415" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:29:47.415" starttime="20170929 04:29:47.415"></status>
</kw>
<msg timestamp="20170929 04:29:47.416" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:29:47.416" starttime="20170929 04:29:44.916"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:29:47.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:29:47.417" starttime="20170929 04:29:47.417"></status>
</kw>
<msg timestamp="20170929 04:29:47.417" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170929 04:29:47.417" starttime="20170929 04:29:47.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:47.418" starttime="20170929 04:29:47.418"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170929 04:29:47.421" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/1b14e18e", 
        "/xyz/openbmc_project/software/3330203c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170929 04:29:47.421" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170929 04:29:47.422" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20170929 04:29:47.422" starttime="20170929 04:29:47.418"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:47.423" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:47.423" starttime="20170929 04:29:47.423"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:47.423" starttime="20170929 04:29:47.422"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:47.423" starttime="20170929 04:29:44.915"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:47.424" starttime="20170929 04:29:40.524"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:47.424" starttime="20170929 04:29:40.523"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:47.424" starttime="20170929 04:29:40.522"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:47.424" starttime="20170929 04:29:40.522"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:47.424" starttime="20170929 04:29:40.521"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:47.424" starttime="20170929 04:29:40.509"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:47.424" starttime="20170929 04:29:40.505"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:47.424" starttime="20170929 04:29:40.505"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:47.426" starttime="20170929 04:29:47.426"></status>
</kw>
<msg timestamp="20170929 04:29:47.426" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:47.426" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:29:47.426" starttime="20170929 04:29:47.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:47.427" starttime="20170929 04:29:47.426"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:47.449" starttime="20170929 04:29:47.441"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170929 04:29:47.451" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170929 04:29:47.451" starttime="20170929 04:29:47.449"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:47.451" starttime="20170929 04:29:47.441"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:47.451" starttime="20170929 04:29:47.427"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:47.451" starttime="20170929 04:29:47.424"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:47.451" starttime="20170929 04:29:47.424"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:47.453" starttime="20170929 04:29:47.453"></status>
</kw>
<msg timestamp="20170929 04:29:47.453" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:47.453" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:29:47.454" starttime="20170929 04:29:47.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:47.454" starttime="20170929 04:29:47.454"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170929 04:29:47.489" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:29:47.490" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170929 04:29:47.560" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170929 04:29:47.570" level="INFO">${core_files} = None</msg>
<msg timestamp="20170929 04:29:47.570" level="INFO">${stderr} = None</msg>
<msg timestamp="20170929 04:29:47.570" level="INFO">${rc} = None</msg>
<msg timestamp="20170929 04:29:47.570" level="FAIL">#(UTC) 2017/09/29 04:29:47.568941 -    0.080072 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170929 04:29:47.570" starttime="20170929 04:29:47.468"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170929 04:29:47.571" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170929 04:29:47.571" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170929 04:29:47.571" starttime="20170929 04:29:47.570"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:47.585" starttime="20170929 04:29:47.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:48.221" starttime="20170929 04:29:47.586"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:48.221" starttime="20170929 04:29:47.585"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:48.221" starttime="20170929 04:29:47.579"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:48.221" starttime="20170929 04:29:47.571"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170929 04:29:48.221" starttime="20170929 04:29:48.221"></status>
</kw>
<status status="FAIL" endtime="20170929 04:29:48.221" starttime="20170929 04:29:47.468"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:48.222" starttime="20170929 04:29:47.454"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:48.222" starttime="20170929 04:29:47.452"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:48.222" starttime="20170929 04:29:47.451"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:48.224" starttime="20170929 04:29:48.223"></status>
</kw>
<msg timestamp="20170929 04:29:48.224" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:48.224" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:29:48.224" starttime="20170929 04:29:48.223"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:48.225" starttime="20170929 04:29:48.224"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170929 04:29:48.240" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170929 04:29:48.240" starttime="20170929 04:29:48.239"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170929 04:29:48.241" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20170929 04:29:48.241" starttime="20170929 04:29:48.241"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:29:48.242" level="INFO">${logpath} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170929 04:29:48.242" starttime="20170929 04:29:48.241"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:48.243" starttime="20170929 04:29:48.243"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:29:48.244" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:29:48.244" starttime="20170929 04:29:48.244"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:29:48.284" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:29:48.285" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170929 04:29:48.356" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:29:48.356" starttime="20170929 04:29:48.262"></status>
</kw>
<msg timestamp="20170929 04:29:48.356" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:48.356" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170929 04:29:48.356" starttime="20170929 04:29:48.245"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:29:48.357" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170929 04:29:48.357" starttime="20170929 04:29:48.357"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:29:48.358" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:29:48.358" starttime="20170929 04:29:48.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:48.365" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:48.365" starttime="20170929 04:29:48.365"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:48.365" starttime="20170929 04:29:48.364"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:48.365" starttime="20170929 04:29:48.358"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:48.365" starttime="20170929 04:29:48.242"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:48.366" starttime="20170929 04:29:48.241"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:29:48.366" level="INFO">${logpath} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170929 04:29:48.366" starttime="20170929 04:29:48.366"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:48.368" starttime="20170929 04:29:48.368"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:29:48.369" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:29:48.369" starttime="20170929 04:29:48.368"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:29:48.410" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:29:48.410" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170929 04:29:48.945" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:29:48.946" starttime="20170929 04:29:48.387"></status>
</kw>
<msg timestamp="20170929 04:29:48.946" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:48.947" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 29 04:16 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 29 04:16 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170929 04:29:48.947" starttime="20170929 04:29:48.369"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:29:48.948" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 29 04:16 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 29 04:16 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170929 04:29:48.948" starttime="20170929 04:29:48.947"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:29:48.949" level="INFO">${stderr} = ls: /proc/2585/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170929 04:29:48.949" starttime="20170929 04:29:48.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:48.957" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:48.957" starttime="20170929 04:29:48.957"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:48.957" starttime="20170929 04:29:48.955"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:48.957" starttime="20170929 04:29:48.949"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:48.958" starttime="20170929 04:29:48.367"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:48.958" starttime="20170929 04:29:48.366"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:29:48.958" level="INFO">${logpath} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170929 04:29:48.958" starttime="20170929 04:29:48.958"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:48.960" starttime="20170929 04:29:48.959"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:29:48.961" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:29:48.961" starttime="20170929 04:29:48.960"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:29:49.001" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:29:49.002" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170929 04:29:51.704" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:29:51.705" starttime="20170929 04:29:48.978"></status>
</kw>
<msg timestamp="20170929 04:29:51.705" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:29:51.709" level="INFO">${ret_values} = (u'-- Logs begin at Fri 2017-09-29 02:57:15 UTC, end at Fri 2017-09-29 04:30:02 UTC. --\nSep 29 02:57:15 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 29 02:57:15 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170929 04:29:51.709" starttime="20170929 04:29:48.961"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:29:51.711" level="INFO">${stdout} = -- Logs begin at Fri 2017-09-29 02:57:15 UTC, end at Fri 2017-09-29 04:30:02 UTC. --
Sep 29 02:57:15 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 29 02:57:15 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170929 04:29:51.711" starttime="20170929 04:29:51.710"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:29:51.711" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:29:51.711" starttime="20170929 04:29:51.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:29:51.721" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:29:51.721" starttime="20170929 04:29:51.720"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:51.721" starttime="20170929 04:29:51.718"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:51.721" starttime="20170929 04:29:51.712"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:51.721" starttime="20170929 04:29:48.959"></status>
</kw>
<status status="PASS" endtime="20170929 04:29:51.721" starttime="20170929 04:29:48.958"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:29:51.722" level="INFO">${logpath} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170929 04:29:51.722" starttime="20170929 04:29:51.722"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:29:51.724" starttime="20170929 04:29:51.723"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:29:51.725" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:29:51.725" starttime="20170929 04:29:51.724"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:29:51.765" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:29:51.766" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170929 04:30:00.037" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:30:00.048" starttime="20170929 04:29:51.743"></status>
</kw>
<msg timestamp="20170929 04:30:00.048" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:30:00.093" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=d2c64ceeab0e430c98e859a3354d4903;i=1;b=c02272132b2942b9afe6a319be6ac9b0;m=146264b;t=55a4b2eacd66e;x=a24c44e68fdb7bf3",\n\t"__REALTIME_TIMESTAMP" : "1506653835679342",\n\t"__MON...</msg>
<status status="PASS" endtime="20170929 04:30:00.093" starttime="20170929 04:29:51.725"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:30:00.104" level="INFO">${stdout} = {
	"__CURSOR" : "s=d2c64ceeab0e430c98e859a3354d4903;i=1;b=c02272132b2942b9afe6a319be6ac9b0;m=146264b;t=55a4b2eacd66e;x=a24c44e68fdb7bf3",
	"__REALTIME_TIMESTAMP" : "1506653835679342",
	"__MONOTONIC_TI...</msg>
<status status="PASS" endtime="20170929 04:30:00.104" starttime="20170929 04:30:00.094"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:30:00.104" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:30:00.104" starttime="20170929 04:30:00.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:30:00.129" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:30:00.129" starttime="20170929 04:30:00.122"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.130" starttime="20170929 04:30:00.111"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.130" starttime="20170929 04:30:00.105"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.130" starttime="20170929 04:29:51.723"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.130" starttime="20170929 04:29:51.721"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:30:00.131" level="INFO">${logpath} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170929 04:30:00.131" starttime="20170929 04:30:00.130"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:00.132" starttime="20170929 04:30:00.132"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:30:00.133" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:30:00.133" starttime="20170929 04:30:00.132"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:30:00.174" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:30:00.174" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170929 04:30:00.254" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:30:00.255" starttime="20170929 04:30:00.151"></status>
</kw>
<msg timestamp="20170929 04:30:00.255" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:30:00.255" level="INFO">${ret_values} = (u'MemTotal:         432244 kB\nMemFree:          221236 kB\nMemAvailable:     323388 kB\nBuffers:           31696 kB\nCached:            81048 kB\nSwapCached:            0 kB\nActive:           16091...</msg>
<status status="PASS" endtime="20170929 04:30:00.255" starttime="20170929 04:30:00.133"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:30:00.256" level="INFO">${stdout} = MemTotal:         432244 kB
MemFree:          221236 kB
MemAvailable:     323388 kB
Buffers:           31696 kB
Cached:            81048 kB
SwapCached:            0 kB
Active:           160912 kB
Inac...</msg>
<status status="PASS" endtime="20170929 04:30:00.256" starttime="20170929 04:30:00.256"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:30:00.257" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:30:00.257" starttime="20170929 04:30:00.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:30:00.268" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:30:00.268" starttime="20170929 04:30:00.268"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.268" starttime="20170929 04:30:00.266"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.268" starttime="20170929 04:30:00.258"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.269" starttime="20170929 04:30:00.131"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.269" starttime="20170929 04:30:00.130"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:30:00.269" level="INFO">${logpath} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170929 04:30:00.269" starttime="20170929 04:30:00.269"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:00.271" starttime="20170929 04:30:00.270"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:30:00.272" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:30:00.272" starttime="20170929 04:30:00.271"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:30:00.312" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:30:00.313" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170929 04:30:00.662" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:30:00.662" starttime="20170929 04:30:00.290"></status>
</kw>
<msg timestamp="20170929 04:30:00.662" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:30:00.662" level="INFO">${ret_values} = (u'Mem: 211008K used, 221236K free, 8944K shrd, 31696K buff, 81048K cached\nCPU:   0% usr  18% sys   0% nic  81% idle   0% io   0% irq   0% sirq\nLoad average: 0.76 0.38 0.31 1/154 2590\n  PID  PPID U...</msg>
<status status="PASS" endtime="20170929 04:30:00.662" starttime="20170929 04:30:00.272"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:30:00.663" level="INFO">${stdout} = Mem: 211008K used, 221236K free, 8944K shrd, 31696K buff, 81048K cached
CPU:   0% usr  18% sys   0% nic  81% idle   0% io   0% irq   0% sirq
Load average: 0.76 0.38 0.31 1/154 2590
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20170929 04:30:00.663" starttime="20170929 04:30:00.663"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:30:00.664" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:30:00.664" starttime="20170929 04:30:00.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:30:00.672" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:30:00.672" starttime="20170929 04:30:00.671"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.672" starttime="20170929 04:30:00.670"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.672" starttime="20170929 04:30:00.664"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.672" starttime="20170929 04:30:00.270"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.672" starttime="20170929 04:30:00.269"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170929 04:30:00.673" level="INFO">${logpath} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170929 04:30:00.673" starttime="20170929 04:30:00.672"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:00.674" starttime="20170929 04:30:00.674"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170929 04:30:00.675" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170929 04:30:00.675" starttime="20170929 04:30:00.675"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170929 04:30:00.716" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170929 04:30:00.716" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170929 04:30:00.773" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170929 04:30:00.773" starttime="20170929 04:30:00.693"></status>
</kw>
<msg timestamp="20170929 04:30:00.773" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:30:00.774" level="INFO">${ret_values} = (u'[    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_baud = 1500000) is a 16550A\n[    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16...</msg>
<status status="PASS" endtime="20170929 04:30:00.774" starttime="20170929 04:30:00.675"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170929 04:30:00.774" level="INFO">${stdout} = [    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_baud = 1500000) is a 16550A
[    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16550A...</msg>
<status status="PASS" endtime="20170929 04:30:00.774" starttime="20170929 04:30:00.774"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170929 04:30:00.775" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170929 04:30:00.775" starttime="20170929 04:30:00.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170929 04:30:00.783" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/20170929042937468347_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:30:00.783" starttime="20170929 04:30:00.782"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.783" starttime="20170929 04:30:00.781"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.783" starttime="20170929 04:30:00.775"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.783" starttime="20170929 04:30:00.673"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.783" starttime="20170929 04:30:00.672"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.783" starttime="20170929 04:29:48.241"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.783" starttime="20170929 04:29:48.240"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.783" starttime="20170929 04:29:48.240"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.783" starttime="20170929 04:29:48.240"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.783" starttime="20170929 04:29:48.238"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.783" starttime="20170929 04:29:48.225"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.784" starttime="20170929 04:29:48.222"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.784" starttime="20170929 04:29:48.222"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:00.785" starttime="20170929 04:30:00.785"></status>
</kw>
<msg timestamp="20170929 04:30:00.786" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:30:00.786" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:30:00.786" starttime="20170929 04:30:00.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:00.786" starttime="20170929 04:30:00.786"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:30:00.803" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:30:00.804" starttime="20170929 04:30:00.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:30:00.804" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:30:00.805" starttime="20170929 04:30:00.804"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:30:00.805" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:30:00.805" starttime="20170929 04:30:00.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:30:00.806" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:30:00.806" starttime="20170929 04:30:00.805"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:30:00.996" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:30:00.996" starttime="20170929 04:30:00.807"></status>
</kw>
<msg timestamp="20170929 04:30:00.996" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:30:00.996" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:30:00.996" starttime="20170929 04:30:00.806"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:30:00.997" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:30:00.997" starttime="20170929 04:30:00.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:30:00.998" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:30:00.998" starttime="20170929 04:30:00.997"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.998" starttime="20170929 04:30:00.802"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.998" starttime="20170929 04:30:00.802"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:00.998" starttime="20170929 04:30:00.801"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:30:00.999" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170929 04:30:00.999" starttime="20170929 04:30:00.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:01.000" starttime="20170929 04:30:00.999"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:30:01.044" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170929 04:30:01.044" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:30:01.044" starttime="20170929 04:30:01.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:01.044" starttime="20170929 04:30:01.044"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:30:01.045" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:30:01.045" starttime="20170929 04:30:01.045"></status>
</kw>
<msg timestamp="20170929 04:30:01.045" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:30:01.045" starttime="20170929 04:30:00.800"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:30:01.046" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170929 04:30:01.047" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170929 04:30:01.047" starttime="20170929 04:30:01.046"></status>
</kw>
<msg timestamp="20170929 04:30:01.047" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170929 04:30:01.047" starttime="20170929 04:30:01.045"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170929 04:30:01.047" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 04:30:01.048" starttime="20170929 04:30:01.047"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.048" starttime="20170929 04:30:00.800"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.048" starttime="20170929 04:30:00.787"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.048" starttime="20170929 04:30:00.784"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.048" starttime="20170929 04:30:00.784"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:01.050" starttime="20170929 04:30:01.050"></status>
</kw>
<msg timestamp="20170929 04:30:01.050" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:30:01.050" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170929 04:30:01.050" starttime="20170929 04:30:01.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:01.051" starttime="20170929 04:30:01.050"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170929 04:30:01.065" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 04:30:01.066" starttime="20170929 04:30:01.065"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.066" starttime="20170929 04:30:01.064"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.066" starttime="20170929 04:30:01.051"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.066" starttime="20170929 04:30:01.048"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.066" starttime="20170929 04:30:01.048"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.066" starttime="20170929 04:29:38.464"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.066" starttime="20170929 04:29:38.462"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.066" starttime="20170929 04:29:38.461"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.066" starttime="20170929 04:29:38.461"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170929 04:30:01.073" starttime="20170929 04:30:01.072"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.073" starttime="20170929 04:30:01.066"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.073" starttime="20170929 04:29:38.459"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.073" starttime="20170929 04:29:34.429"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.073" starttime="20170929 04:29:34.428"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170929 04:30:01.074" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170929 04:30:01.074" starttime="20170929 04:30:01.074"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170929 04:30:01.075" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170929042937468347_BmcCodeUpdate/20170929042937468347_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20170929 04:30:01.075" starttime="20170929 04:30:01.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:01.076" starttime="20170929 04:30:01.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:01.076" starttime="20170929 04:30:01.076"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170929 04:30:01.077" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170929 04:30:01.077" starttime="20170929 04:30:01.077"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170929 04:30:01.078" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170929 04:30:01.078" starttime="20170929 04:30:01.078"></status>
</kw>
<msg timestamp="20170929 04:30:01.078" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170929 04:30:01.078" starttime="20170929 04:30:01.077"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170929 04:30:01.080" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:30:01.080" starttime="20170929 04:30:01.079"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.080" starttime="20170929 04:30:01.079"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:01.080" starttime="20170929 04:30:01.080"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170929 04:30:01.082" level="INFO">${cur_time} = 2017-09-29 04:30:01:081509</msg>
<status status="PASS" endtime="20170929 04:30:01.082" starttime="20170929 04:30:01.081"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170929 04:30:01.082" level="INFO">${cur_time} = 20170929043001081509</msg>
<status status="PASS" endtime="20170929 04:30:01.082" starttime="20170929 04:30:01.082"></status>
</kw>
<msg timestamp="20170929 04:30:01.083" level="INFO">${cur_time} = 20170929043001081509</msg>
<status status="PASS" endtime="20170929 04:30:01.083" starttime="20170929 04:30:01.081"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170929 04:30:01.083" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170929 04:30:01.084" starttime="20170929 04:30:01.083"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.084" starttime="20170929 04:30:01.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:30:01.088" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:30:01.089" starttime="20170929 04:30:01.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:30:01.089" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:30:01.089" starttime="20170929 04:30:01.089"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:30:01.090" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:30:01.090" starttime="20170929 04:30:01.090"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:30:01.091" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:30:01.091" starttime="20170929 04:30:01.090"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:30:01.298" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:30:01.298" starttime="20170929 04:30:01.092"></status>
</kw>
<msg timestamp="20170929 04:30:01.298" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:30:01.298" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:30:01.298" starttime="20170929 04:30:01.091"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:30:01.299" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:30:01.299" starttime="20170929 04:30:01.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:30:01.300" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:30:01.300" starttime="20170929 04:30:01.299"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.300" starttime="20170929 04:30:01.087"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.300" starttime="20170929 04:30:01.087"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.300" starttime="20170929 04:30:01.086"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:30:01.301" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170929 04:30:01.301" starttime="20170929 04:30:01.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:01.301" starttime="20170929 04:30:01.301"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:30:01.367" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170929 04:30:01.367" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:30:01.367" starttime="20170929 04:30:01.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:01.367" starttime="20170929 04:30:01.367"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:30:01.368" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:30:01.368" starttime="20170929 04:30:01.368"></status>
</kw>
<msg timestamp="20170929 04:30:01.368" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:30:01.368" starttime="20170929 04:30:01.085"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170929 04:30:01.369" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 04:30:01.369" starttime="20170929 04:30:01.369"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.369" starttime="20170929 04:30:01.085"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170929 04:30:01.378" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170929 04:30:01.379" starttime="20170929 04:30:01.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170929 04:30:01.379" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170929 04:30:01.380" starttime="20170929 04:30:01.379"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170929 04:30:01.380" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170929 04:30:01.381" starttime="20170929 04:30:01.380"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170929 04:30:01.382" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170929 04:30:01.382" starttime="20170929 04:30:01.381"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170929 04:30:01.633" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170929 04:30:01.633" starttime="20170929 04:30:01.383"></status>
</kw>
<msg timestamp="20170929 04:30:01.633" level="INFO">${status} = PASS</msg>
<msg timestamp="20170929 04:30:01.633" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170929 04:30:01.633" starttime="20170929 04:30:01.382"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170929 04:30:01.634" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:30:01.634" starttime="20170929 04:30:01.633"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170929 04:30:01.634" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170929 04:30:01.635" starttime="20170929 04:30:01.634"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.635" starttime="20170929 04:30:01.373"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.635" starttime="20170929 04:30:01.372"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.635" starttime="20170929 04:30:01.371"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170929 04:30:01.636" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170929 04:30:01.636" starttime="20170929 04:30:01.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:01.636" starttime="20170929 04:30:01.636"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170929 04:30:01.686" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170929 04:30:01.686" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:30:01.686" starttime="20170929 04:30:01.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:01.686" starttime="20170929 04:30:01.686"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170929 04:30:01.687" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170929 04:30:01.687" starttime="20170929 04:30:01.687"></status>
</kw>
<msg timestamp="20170929 04:30:01.687" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170929 04:30:01.687" starttime="20170929 04:30:01.370"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170929 04:30:01.688" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170929 04:30:01.688" starttime="20170929 04:30:01.688"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.688" starttime="20170929 04:30:01.369"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.688" starttime="20170929 04:30:01.085"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.688" starttime="20170929 04:30:01.084"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.688" starttime="20170929 04:29:34.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20170929 04:30:01.689" starttime="20170929 04:30:01.689"></status>
</kw>
<status status="PASS" endtime="20170929 04:30:01.689" starttime="20170929 04:29:34.427"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170929 04:30:01.689" critical="yes" starttime="20170929 04:29:13.075">SSLError: ('The write operation timed out',)</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20170929 04:30:01.695" starttime="20170929 04:29:12.129"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
