<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170816 10:05:40.464" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite id="s1" source="/tmp/fspcibld/10646/obmc-robot/tests" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170816 10:05:40.927" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status starttime="20170816 10:05:40.927" status="FAIL" endtime="20170816 10:05:40.927"></status>
</kw>
<msg timestamp="20170816 10:05:40.927" level="INFO">${has_host} = False</msg>
<status starttime="20170816 10:05:40.926" status="PASS" endtime="20170816 10:05:40.927"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170816 10:05:40.928" status="PASS" endtime="20170816 10:05:40.928"></status>
</kw>
<status starttime="20170816 10:05:40.928" status="PASS" endtime="20170816 10:05:40.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170816 10:05:40.930" level="INFO">${port_num} = 22</msg>
<status starttime="20170816 10:05:40.930" status="PASS" endtime="20170816 10:05:40.930"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170816 10:05:40.930" level="INFO">${SSH_PORT} = 22</msg>
<status starttime="20170816 10:05:40.930" status="PASS" endtime="20170816 10:05:40.930"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170816 10:05:40.931" level="INFO">${https_num} = 443</msg>
<status starttime="20170816 10:05:40.931" status="PASS" endtime="20170816 10:05:40.931"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170816 10:05:40.933" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170816 10:05:40.931" status="PASS" endtime="20170816 10:05:40.933"></status>
</kw>
<status starttime="20170816 10:05:40.929" status="PASS" endtime="20170816 10:05:40.933"></status>
</kw>
<status starttime="20170816 10:05:40.929" status="PASS" endtime="20170816 10:05:40.933"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170816 10:05:40.934" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status starttime="20170816 10:05:40.934" status="FAIL" endtime="20170816 10:05:40.934"></status>
</kw>
<msg timestamp="20170816 10:05:40.934" level="INFO">${has_port} = False</msg>
<status starttime="20170816 10:05:40.933" status="PASS" endtime="20170816 10:05:40.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170816 10:05:40.935" status="PASS" endtime="20170816 10:05:40.936"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170816 10:05:40.936" status="PASS" endtime="20170816 10:05:40.936"></status>
</kw>
<status starttime="20170816 10:05:40.935" status="PASS" endtime="20170816 10:05:40.936"></status>
</kw>
<status starttime="20170816 10:05:40.934" status="PASS" endtime="20170816 10:05:40.937"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170816 10:05:40.937" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170816 10:05:42.636" level="INFO">Read output: root@witherspoon:~#</msg>
<status starttime="20170816 10:05:40.937" status="PASS" endtime="20170816 10:05:42.636"></status>
</kw>
<status starttime="20170816 10:05:40.926" status="PASS" endtime="20170816 10:05:42.636"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 10:05:42.638" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170816 10:05:42.714" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170816 10:05:42.715" level="INFO">${output} = VERSION_ID="v1.99.8-257-g60cf6ff"</msg>
<msg timestamp="20170816 10:05:42.715" level="INFO">${stderr} = </msg>
<status starttime="20170816 10:05:42.637" status="PASS" endtime="20170816 10:05:42.715"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170816 10:05:42.715" level="INFO">Length is 0</msg>
<status starttime="20170816 10:05:42.715" status="PASS" endtime="20170816 10:05:42.715"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170816 10:05:42.716" level="INFO">VERSION_ID="v1.99.8-257-g60cf6ff"</msg>
<status starttime="20170816 10:05:42.715" status="PASS" endtime="20170816 10:05:42.716"></status>
</kw>
<status starttime="20170816 10:05:42.637" status="PASS" endtime="20170816 10:05:42.716"></status>
</kw>
<status starttime="20170816 10:05:42.637" status="PASS" endtime="20170816 10:05:42.716"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 10:05:42.717" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170816 10:05:42.844" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170816 10:05:42.845" level="INFO">${stdout} = </msg>
<msg timestamp="20170816 10:05:42.845" level="INFO">${stderr} = sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status starttime="20170816 10:05:42.717" status="PASS" endtime="20170816 10:05:42.845"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170816 10:05:42.845" level="INFO">Length is 105</msg>
<msg timestamp="20170816 10:05:42.845" level="FAIL">'sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status starttime="20170816 10:05:42.845" status="FAIL" endtime="20170816 10:05:42.846"></status>
</kw>
<status starttime="20170816 10:05:42.717" status="FAIL" endtime="20170816 10:05:42.846"></status>
</kw>
<status starttime="20170816 10:05:42.716" status="FAIL" endtime="20170816 10:05:42.846"></status>
</kw>
<status starttime="20170816 10:05:42.716" status="PASS" endtime="20170816 10:05:42.846"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170816 10:05:43.029" level="INFO">alias=bmc_connection
height=24
path_separator=/
port=22
prompt=# 
width=80
term_type=vt100
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
index=1</msg>
<msg timestamp="20170816 10:05:43.029" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170816 10:05:43.819" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170816 10:05:43.820" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170816 10:05:43.898" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170816 10:05:43.906" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170816 10:05:43.906" level="INFO">${stderr} = </msg>
<msg timestamp="20170816 10:05:43.906" level="INFO">${rc} = 0</msg>
<status starttime="20170816 10:05:42.847" status="PASS" endtime="20170816 10:05:43.906"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170816 10:05:43.906" level="INFO">Length is 0</msg>
<status starttime="20170816 10:05:43.906" status="PASS" endtime="20170816 10:05:43.906"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170816 10:05:43.907" level="INFO">Length is 11</msg>
<status starttime="20170816 10:05:43.907" status="PASS" endtime="20170816 10:05:43.907"></status>
</kw>
<msg timestamp="20170816 10:05:43.907" level="INFO">${bmc_model} = Witherspoon</msg>
<status starttime="20170816 10:05:42.847" status="PASS" endtime="20170816 10:05:43.907"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170816 10:05:43.908" level="INFO">BMC Model=Witherspoon</msg>
<status starttime="20170816 10:05:43.907" status="PASS" endtime="20170816 10:05:43.908"></status>
</kw>
<status starttime="20170816 10:05:42.846" status="PASS" endtime="20170816 10:05:43.908"></status>
</kw>
<status starttime="20170816 10:05:42.846" status="PASS" endtime="20170816 10:05:43.908"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170816 10:05:43.910" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status starttime="20170816 10:05:43.910" status="FAIL" endtime="20170816 10:05:43.910"></status>
</kw>
<msg timestamp="20170816 10:05:43.910" level="INFO">${has_host} = False</msg>
<status starttime="20170816 10:05:43.909" status="PASS" endtime="20170816 10:05:43.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170816 10:05:43.911" status="PASS" endtime="20170816 10:05:43.911"></status>
</kw>
<status starttime="20170816 10:05:43.911" status="PASS" endtime="20170816 10:05:43.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170816 10:05:43.913" level="INFO">${port_num} = 22</msg>
<status starttime="20170816 10:05:43.913" status="PASS" endtime="20170816 10:05:43.913"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170816 10:05:43.913" level="INFO">${SSH_PORT} = 22</msg>
<status starttime="20170816 10:05:43.913" status="PASS" endtime="20170816 10:05:43.913"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170816 10:05:43.914" level="INFO">${https_num} = 443</msg>
<status starttime="20170816 10:05:43.914" status="PASS" endtime="20170816 10:05:43.914"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170816 10:05:43.915" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170816 10:05:43.914" status="PASS" endtime="20170816 10:05:43.915"></status>
</kw>
<status starttime="20170816 10:05:43.912" status="PASS" endtime="20170816 10:05:43.915"></status>
</kw>
<status starttime="20170816 10:05:43.912" status="PASS" endtime="20170816 10:05:43.915"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170816 10:05:43.916" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status starttime="20170816 10:05:43.915" status="FAIL" endtime="20170816 10:05:43.916"></status>
</kw>
<msg timestamp="20170816 10:05:43.916" level="INFO">${has_port} = False</msg>
<status starttime="20170816 10:05:43.915" status="PASS" endtime="20170816 10:05:43.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170816 10:05:43.917" status="PASS" endtime="20170816 10:05:43.917"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170816 10:05:43.918" status="PASS" endtime="20170816 10:05:43.918"></status>
</kw>
<status starttime="20170816 10:05:43.917" status="PASS" endtime="20170816 10:05:43.918"></status>
</kw>
<status starttime="20170816 10:05:43.916" status="PASS" endtime="20170816 10:05:43.918"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170816 10:05:43.919" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170816 10:05:45.601" level="INFO">Read output: root@witherspoon:~#</msg>
<status starttime="20170816 10:05:43.918" status="PASS" endtime="20170816 10:05:45.601"></status>
</kw>
<status starttime="20170816 10:05:43.909" status="PASS" endtime="20170816 10:05:45.601"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 10:05:45.602" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170816 10:05:45.669" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170816 10:05:45.670" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170816 10:05:45.670" level="INFO">${stderr} = </msg>
<status starttime="20170816 10:05:45.602" status="PASS" endtime="20170816 10:05:45.670"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170816 10:05:45.670" level="INFO">Length is 0</msg>
<status starttime="20170816 10:05:45.670" status="PASS" endtime="20170816 10:05:45.670"></status>
</kw>
<msg timestamp="20170816 10:05:45.670" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170816 10:05:45.601" status="PASS" endtime="20170816 10:05:45.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170816 10:05:45.671" status="PASS" endtime="20170816 10:05:45.671"></status>
</kw>
<status starttime="20170816 10:05:43.908" status="PASS" endtime="20170816 10:05:45.671"></status>
</kw>
<status starttime="20170816 10:05:43.908" status="PASS" endtime="20170816 10:05:45.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status starttime="20170816 10:05:45.671" status="PASS" endtime="20170816 10:05:45.672"></status>
</kw>
<status starttime="20170816 10:05:40.925" status="PASS" endtime="20170816 10:05:45.672"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/10646/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/10646/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:05:45.755" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:05:45.754" status="PASS" endtime="20170816 10:05:45.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:05:45.756" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:05:45.755" status="PASS" endtime="20170816 10:05:45.756"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:05:45.756" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:05:45.756" status="PASS" endtime="20170816 10:05:45.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:05:45.757" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:05:45.757" status="PASS" endtime="20170816 10:05:45.757"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:05:45.957" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:05:45.758" status="PASS" endtime="20170816 10:05:45.957"></status>
</kw>
<msg timestamp="20170816 10:05:45.957" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:05:45.957" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:45.757" status="PASS" endtime="20170816 10:05:45.957"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:05:45.958" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:45.957" status="PASS" endtime="20170816 10:05:45.958"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:05:45.958" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:45.958" status="PASS" endtime="20170816 10:05:45.958"></status>
</kw>
<status starttime="20170816 10:05:45.754" status="PASS" endtime="20170816 10:05:45.958"></status>
</kw>
<status starttime="20170816 10:05:45.754" status="PASS" endtime="20170816 10:05:45.958"></status>
</kw>
<status starttime="20170816 10:05:45.753" status="PASS" endtime="20170816 10:05:45.959"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:05:45.963" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:05:45.963" status="PASS" endtime="20170816 10:05:45.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:05:45.964" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:05:45.964" status="PASS" endtime="20170816 10:05:45.964"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:05:45.965" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:05:45.964" status="PASS" endtime="20170816 10:05:45.965"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:05:45.966" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:05:45.965" status="PASS" endtime="20170816 10:05:45.966"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:05:46.163" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:05:45.967" status="PASS" endtime="20170816 10:05:46.163"></status>
</kw>
<msg timestamp="20170816 10:05:46.163" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:05:46.163" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:45.966" status="PASS" endtime="20170816 10:05:46.163"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:05:46.163" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:46.163" status="PASS" endtime="20170816 10:05:46.164"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:05:46.164" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:46.164" status="PASS" endtime="20170816 10:05:46.164"></status>
</kw>
<status starttime="20170816 10:05:45.962" status="PASS" endtime="20170816 10:05:46.164"></status>
</kw>
<status starttime="20170816 10:05:45.962" status="PASS" endtime="20170816 10:05:46.164"></status>
</kw>
<status starttime="20170816 10:05:45.961" status="PASS" endtime="20170816 10:05:46.164"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:05:46.165" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:05:46.165" status="PASS" endtime="20170816 10:05:46.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:05:46.167" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:05:46.166" status="PASS" endtime="20170816 10:05:46.167"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:05:46.168" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:05:46.168" status="PASS" endtime="20170816 10:05:46.168"></status>
</kw>
<status starttime="20170816 10:05:46.167" status="PASS" endtime="20170816 10:05:46.168"></status>
</kw>
<status starttime="20170816 10:05:46.166" status="PASS" endtime="20170816 10:05:46.168"></status>
</kw>
<status starttime="20170816 10:05:46.165" status="PASS" endtime="20170816 10:05:46.168"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:05:46.255" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:05:46.255" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:46.169" status="PASS" endtime="20170816 10:05:46.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:05:46.257" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:05:46.256" status="PASS" endtime="20170816 10:05:46.257"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:05:46.258" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:05:46.257" status="PASS" endtime="20170816 10:05:46.258"></status>
</kw>
<status starttime="20170816 10:05:46.257" status="PASS" endtime="20170816 10:05:46.258"></status>
</kw>
<status starttime="20170816 10:05:46.256" status="PASS" endtime="20170816 10:05:46.258"></status>
</kw>
<status starttime="20170816 10:05:46.255" status="PASS" endtime="20170816 10:05:46.258"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:05:46.258" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:05:46.258" status="PASS" endtime="20170816 10:05:46.259"></status>
</kw>
<msg timestamp="20170816 10:05:46.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:45.961" status="PASS" endtime="20170816 10:05:46.259"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:05:46.259" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:46.259" status="PASS" endtime="20170816 10:05:46.259"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:05:46.260" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:05:46.260" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:05:46.260" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:05:46.260" status="PASS" endtime="20170816 10:05:46.260"></status>
</kw>
<msg timestamp="20170816 10:05:46.261" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170816 10:05:45.960" status="PASS" endtime="20170816 10:05:46.261"></status>
</kw>
<msg timestamp="20170816 10:05:46.261" level="INFO">${host_state} = Off</msg>
<status starttime="20170816 10:05:45.960" status="PASS" endtime="20170816 10:05:46.261"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170816 10:05:46.262" level="FAIL">Off != Quiesced</msg>
<status starttime="20170816 10:05:46.262" status="FAIL" endtime="20170816 10:05:46.262"></status>
</kw>
<msg timestamp="20170816 10:05:46.262" level="INFO">${status} = False</msg>
<status starttime="20170816 10:05:46.261" status="PASS" endtime="20170816 10:05:46.262"></status>
</kw>
<msg timestamp="20170816 10:05:46.262" level="INFO">${status} = False</msg>
<status starttime="20170816 10:05:45.959" status="PASS" endtime="20170816 10:05:46.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170816 10:05:46.263" status="PASS" endtime="20170816 10:05:46.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170816 10:05:46.263" status="PASS" endtime="20170816 10:05:46.263"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170816 10:05:46.278" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170816 10:05:46.264" status="PASS" endtime="20170816 10:05:46.278"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170816 10:05:46.293" level="INFO">${FFDC_DIR_PATH} = </msg>
<status starttime="20170816 10:05:46.279" status="PASS" endtime="20170816 10:05:46.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 10:05:46.295" level="INFO">${cur_time} = 2017-08-16 10:05:46:295284</msg>
<status starttime="20170816 10:05:46.295" status="PASS" endtime="20170816 10:05:46.296"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 10:05:46.296" level="INFO">${cur_time} = 20170816100546295284</msg>
<status starttime="20170816 10:05:46.296" status="PASS" endtime="20170816 10:05:46.296"></status>
</kw>
<status starttime="20170816 10:05:46.294" status="PASS" endtime="20170816 10:05:46.297"></status>
</kw>
<msg timestamp="20170816 10:05:46.304" level="INFO">${FFDC_TIME} = 20170816100546295284</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170816 10:05:46.305" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170816 10:05:46.304" status="PASS" endtime="20170816 10:05:46.305"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170816 10:05:46.305" level="INFO">${suite_name} = 20170816100546295284_TestsSecurityTestSsl</msg>
<status starttime="20170816 10:05:46.305" status="PASS" endtime="20170816 10:05:46.305"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170816 10:05:46.306" level="INFO">${test_name} = TestSSLConnection</msg>
<status starttime="20170816 10:05:46.306" status="PASS" endtime="20170816 10:05:46.306"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170816 10:05:46.307" level="INFO">${test_name} = 20170816100546295284_TestSSLConnection</msg>
<status starttime="20170816 10:05:46.306" status="PASS" endtime="20170816 10:05:46.307"></status>
</kw>
<status starttime="20170816 10:05:46.304" status="PASS" endtime="20170816 10:05:46.307"></status>
</kw>
<msg timestamp="20170816 10:05:46.307" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/10646/obmc-robot/logs/20170816100546295284_TestsSecurityTestSsl/20170816100546295284_TestSSLConnection/</msg>
<msg timestamp="20170816 10:05:46.311" level="INFO">${FFDC_PREFIX} = 20170816100546295284_</msg>
<status starttime="20170816 10:05:46.294" status="PASS" endtime="20170816 10:05:46.312"></status>
</kw>
<status starttime="20170816 10:05:46.293" status="PASS" endtime="20170816 10:05:46.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170816 10:05:46.312" status="PASS" endtime="20170816 10:05:46.312"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170816 10:05:46.313" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs"&gt;/tmp/fspcibld/10646/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170816 10:05:46.312" status="PASS" endtime="20170816 10:05:46.313"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170816 10:05:46.314" level="FAIL">File '/tmp/fspcibld/10646/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170816 10:05:46.314" status="FAIL" endtime="20170816 10:05:46.314"></status>
</kw>
<msg timestamp="20170816 10:05:46.314" level="INFO">${exist} = False</msg>
<status starttime="20170816 10:05:46.313" status="PASS" endtime="20170816 10:05:46.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170816 10:05:46.315" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:05:46.315" status="PASS" endtime="20170816 10:05:46.315"></status>
</kw>
<status starttime="20170816 10:05:46.314" status="PASS" endtime="20170816 10:05:46.315"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170816 10:05:46.316" status="PASS" endtime="20170816 10:05:46.316"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 10:05:46.317" level="INFO">${cur_time} = 2017-08-16 10:05:46:316686</msg>
<status starttime="20170816 10:05:46.317" status="PASS" endtime="20170816 10:05:46.317"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 10:05:46.317" level="INFO">${cur_time} = 20170816100546316686</msg>
<status starttime="20170816 10:05:46.317" status="PASS" endtime="20170816 10:05:46.317"></status>
</kw>
<msg timestamp="20170816 10:05:46.318" level="INFO">${cur_time} = 20170816100546316686</msg>
<status starttime="20170816 10:05:46.316" status="PASS" endtime="20170816 10:05:46.318"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170816 10:05:46.318" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:05:46.318" status="PASS" endtime="20170816 10:05:46.318"></status>
</kw>
<status starttime="20170816 10:05:46.264" status="PASS" endtime="20170816 10:05:46.319"></status>
</kw>
<status starttime="20170816 10:05:45.959" status="PASS" endtime="20170816 10:05:46.319"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" starttime="20170816 10:05:45.752" status="PASS" endtime="20170816 10:05:46.319"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:05:46.320" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:05:46.320" status="PASS" endtime="20170816 10:05:46.320"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170816 10:05:45.674" status="PASS" endtime="20170816 10:05:46.320"></status>
</suite>
<status starttime="20170816 10:05:45.672" status="PASS" endtime="20170816 10:05:46.322"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/10646/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170816 10:05:46.360" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170816 10:05:46.360" status="PASS" endtime="20170816 10:05:46.360"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170816 10:05:46.361" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170816 10:05:46.360" status="PASS" endtime="20170816 10:05:46.361"></status>
</kw>
<msg timestamp="20170816 10:05:46.361" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170816 10:05:46.359" status="PASS" endtime="20170816 10:05:46.361"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170816 10:05:46.363" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170816 10:05:46.362" status="PASS" endtime="20170816 10:05:46.363"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170816 10:05:46.363" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170816 10:05:46.363" status="PASS" endtime="20170816 10:05:46.363"></status>
</kw>
<msg timestamp="20170816 10:05:46.363" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170816 10:05:46.362" status="PASS" endtime="20170816 10:05:46.363"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:05:46.364" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170816 10:05:46.364" status="PASS" endtime="20170816 10:05:46.364"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170816 10:05:46.365" status="PASS" endtime="20170816 10:05:46.365"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 10:05:46.370" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 10:05:46.374" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 10:05:46.374" level="INFO">${output} = /tmp/fspcibld/10646/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170816 10:05:46.365" status="PASS" endtime="20170816 10:05:46.374"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170816 10:05:46.376" status="PASS" endtime="20170816 10:05:46.377"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170816 10:05:46.377" status="PASS" endtime="20170816 10:05:46.378"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:05:46.378" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170816 10:05:46.378" status="PASS" endtime="20170816 10:05:46.378"></status>
</kw>
<msg timestamp="20170816 10:05:46.379" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170816 10:05:46.364" status="PASS" endtime="20170816 10:05:46.379"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:05:46.379" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170816 10:05:46.379" status="PASS" endtime="20170816 10:05:46.379"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170816 10:05:46.380" status="PASS" endtime="20170816 10:05:46.380"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170816 10:05:46.384" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 10:05:46.396" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 10:05:46.396" level="INFO">${os_con_pid} = </msg>
<status starttime="20170816 10:05:46.380" status="PASS" endtime="20170816 10:05:46.396"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170816 10:05:46.398" status="PASS" endtime="20170816 10:05:46.399"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:05:46.400" level="INFO">${cmd_buf} = kill -9 </msg>
<status starttime="20170816 10:05:46.399" status="PASS" endtime="20170816 10:05:46.400"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170816 10:05:46.400" status="PASS" endtime="20170816 10:05:46.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 10:05:46.402" level="INFO">${rc} = None</msg>
<msg timestamp="20170816 10:05:46.402" level="INFO">${output} = None</msg>
<status starttime="20170816 10:05:46.401" status="PASS" endtime="20170816 10:05:46.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170816 10:05:46.402" status="PASS" endtime="20170816 10:05:46.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170816 10:05:46.407" level="FAIL">Source file '/tmp/9.41.166.169_os_console' does not exist.</msg>
<status starttime="20170816 10:05:46.404" status="FAIL" endtime="20170816 10:05:46.407"></status>
</kw>
<status starttime="20170816 10:05:46.403" status="PASS" endtime="20170816 10:05:46.407"></status>
</kw>
<status starttime="20170816 10:05:46.403" status="PASS" endtime="20170816 10:05:46.407"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170816 10:05:46.408" level="INFO">${output} = </msg>
<status starttime="20170816 10:05:46.407" status="PASS" endtime="20170816 10:05:46.408"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170816 10:05:46.408" level="INFO">${loc_quiet} = 1</msg>
<status starttime="20170816 10:05:46.408" status="PASS" endtime="20170816 10:05:46.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170816 10:05:46.410" status="PASS" endtime="20170816 10:05:46.482"></status>
</kw>
<msg timestamp="20170816 10:05:46.485" level="INFO">${rc} = 1</msg>
<msg timestamp="20170816 10:05:46.485" level="INFO">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status starttime="20170816 10:05:46.409" status="PASS" endtime="20170816 10:05:46.485"></status>
</kw>
<msg timestamp="20170816 10:05:46.488" level="INFO">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status starttime="20170816 10:05:46.361" status="PASS" endtime="20170816 10:05:46.488"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170816 10:05:46.495" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status starttime="20170816 10:05:46.493" status="PASS" endtime="20170816 10:05:46.495"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:05:46.498" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170816 10:05:46.497" status="PASS" endtime="20170816 10:05:46.498"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170816 10:05:46.498" status="PASS" endtime="20170816 10:05:46.498"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 10:05:46.509" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 10:05:46.526" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 10:05:46.526" level="INFO">${output} = /tmp/fspcibld/10646/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170816 10:05:46.499" status="PASS" endtime="20170816 10:05:46.526"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170816 10:05:46.535" status="PASS" endtime="20170816 10:05:46.537"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170816 10:05:46.538" status="PASS" endtime="20170816 10:05:46.539"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:05:46.540" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170816 10:05:46.539" status="PASS" endtime="20170816 10:05:46.540"></status>
</kw>
<msg timestamp="20170816 10:05:46.540" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170816 10:05:46.496" status="PASS" endtime="20170816 10:05:46.540"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:05:46.542" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170816 10:05:46.541" status="PASS" endtime="20170816 10:05:46.542"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170816 10:05:46.542" status="PASS" endtime="20170816 10:05:46.542"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 10:05:46.552" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170816 10:05:46.572" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 10:05:46.572" level="INFO">${output} = </msg>
<status starttime="20170816 10:05:46.543" status="PASS" endtime="20170816 10:05:46.573"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170816 10:05:46.574" status="PASS" endtime="20170816 10:05:46.575"></status>
</kw>
<status starttime="20170816 10:05:46.359" status="PASS" endtime="20170816 10:05:46.575"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170816 10:05:46.576" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170816 10:05:46.578" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170816 10:05:46.578" status="PASS" endtime="20170816 10:05:46.578"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:05:46.580" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170816 10:05:46.579" status="PASS" endtime="20170816 10:05:46.580"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:05:46.584" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:05:46.583" status="PASS" endtime="20170816 10:05:46.585"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:05:46.585" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:05:46.585" status="PASS" endtime="20170816 10:05:46.585"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:05:46.586" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:05:46.586" status="PASS" endtime="20170816 10:05:46.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:05:46.587" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:05:46.586" status="PASS" endtime="20170816 10:05:46.587"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:05:47.156" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:05:46.587" status="PASS" endtime="20170816 10:05:47.156"></status>
</kw>
<msg timestamp="20170816 10:05:47.156" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:05:47.156" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:46.587" status="PASS" endtime="20170816 10:05:47.156"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:05:47.157" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:47.157" status="PASS" endtime="20170816 10:05:47.157"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:05:47.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:47.157" status="PASS" endtime="20170816 10:05:47.158"></status>
</kw>
<status starttime="20170816 10:05:46.583" status="PASS" endtime="20170816 10:05:47.158"></status>
</kw>
<status starttime="20170816 10:05:46.582" status="PASS" endtime="20170816 10:05:47.158"></status>
</kw>
<status starttime="20170816 10:05:46.581" status="PASS" endtime="20170816 10:05:47.158"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:05:47.159" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170816 10:05:47.158" status="PASS" endtime="20170816 10:05:47.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:05:47.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:05:47.159" status="PASS" endtime="20170816 10:05:47.159"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170816 10:05:47.160" status="PASS" endtime="20170816 10:05:47.160"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:05:47.161" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170816 10:05:47.161" status="PASS" endtime="20170816 10:05:47.161"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:05:47.162" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170816 10:05:47.162" status="PASS" endtime="20170816 10:05:47.162"></status>
</kw>
<status starttime="20170816 10:05:47.162" status="PASS" endtime="20170816 10:05:47.163"></status>
</kw>
<status starttime="20170816 10:05:47.160" status="PASS" endtime="20170816 10:05:47.163"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:05:48.519" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170816 10:05:48.519" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:47.163" status="PASS" endtime="20170816 10:05:48.519"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:05:48.520" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:05:48.520" status="PASS" endtime="20170816 10:05:48.520"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:05:48.521" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:05:48.521" status="PASS" endtime="20170816 10:05:48.521"></status>
</kw>
<status starttime="20170816 10:05:48.521" status="PASS" endtime="20170816 10:05:48.522"></status>
</kw>
<status starttime="20170816 10:05:48.519" status="PASS" endtime="20170816 10:05:48.522"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:05:48.522" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:05:48.522" status="PASS" endtime="20170816 10:05:48.522"></status>
</kw>
<msg timestamp="20170816 10:05:48.523" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:46.580" status="PASS" endtime="20170816 10:05:48.523"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:05:48.524" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:48.523" status="PASS" endtime="20170816 10:05:48.524"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170816 10:05:48.524" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:05:48.525" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:05:48.525" level="INFO">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status starttime="20170816 10:05:48.524" status="PASS" endtime="20170816 10:05:48.525"></status>
</kw>
<status starttime="20170816 10:05:46.579" status="PASS" endtime="20170816 10:05:48.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170816 10:05:48.525" status="PASS" endtime="20170816 10:05:48.526"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:05:48.533" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:05:48.532" status="PASS" endtime="20170816 10:05:48.533"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:05:48.534" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:05:48.533" status="PASS" endtime="20170816 10:05:48.534"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:05:48.535" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:05:48.534" status="PASS" endtime="20170816 10:05:48.535"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:05:48.536" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:05:48.535" status="PASS" endtime="20170816 10:05:48.536"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:05:49.246" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:05:48.537" status="PASS" endtime="20170816 10:05:49.246"></status>
</kw>
<msg timestamp="20170816 10:05:49.247" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:05:49.247" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:48.537" status="PASS" endtime="20170816 10:05:49.247"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:05:49.247" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:49.247" status="PASS" endtime="20170816 10:05:49.247"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:05:49.248" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:49.248" status="PASS" endtime="20170816 10:05:49.248"></status>
</kw>
<status starttime="20170816 10:05:48.531" status="PASS" endtime="20170816 10:05:49.248"></status>
</kw>
<status starttime="20170816 10:05:48.531" status="PASS" endtime="20170816 10:05:49.248"></status>
</kw>
<status starttime="20170816 10:05:48.530" status="PASS" endtime="20170816 10:05:49.248"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:05:49.249" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:05:49.249" status="PASS" endtime="20170816 10:05:49.249"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:05:49.251" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:05:49.251" status="PASS" endtime="20170816 10:05:49.251"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:05:49.252" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:05:49.252" status="PASS" endtime="20170816 10:05:49.252"></status>
</kw>
<status starttime="20170816 10:05:49.252" status="PASS" endtime="20170816 10:05:49.253"></status>
</kw>
<status starttime="20170816 10:05:49.250" status="PASS" endtime="20170816 10:05:49.253"></status>
</kw>
<status starttime="20170816 10:05:49.249" status="PASS" endtime="20170816 10:05:49.253"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:05:53.260" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:05:53.260" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:49.253" status="PASS" endtime="20170816 10:05:53.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:05:53.262" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:05:53.262" status="PASS" endtime="20170816 10:05:53.262"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:05:53.263" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:05:53.263" status="PASS" endtime="20170816 10:05:53.263"></status>
</kw>
<status starttime="20170816 10:05:53.262" status="PASS" endtime="20170816 10:05:53.263"></status>
</kw>
<status starttime="20170816 10:05:53.261" status="PASS" endtime="20170816 10:05:53.263"></status>
</kw>
<status starttime="20170816 10:05:53.261" status="PASS" endtime="20170816 10:05:53.263"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:05:53.264" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:05:53.264" status="PASS" endtime="20170816 10:05:53.264"></status>
</kw>
<msg timestamp="20170816 10:05:53.264" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:48.529" status="PASS" endtime="20170816 10:05:53.264"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:05:53.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:53.264" status="PASS" endtime="20170816 10:05:53.265"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:05:53.265" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:05:53.265" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:05:53.266" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:05:53.265" status="PASS" endtime="20170816 10:05:53.266"></status>
</kw>
<msg timestamp="20170816 10:05:53.266" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170816 10:05:48.528" status="PASS" endtime="20170816 10:05:53.266"></status>
</kw>
<msg timestamp="20170816 10:05:53.266" level="INFO">${power_state} = Off</msg>
<status starttime="20170816 10:05:48.528" status="PASS" endtime="20170816 10:05:53.266"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:05:53.266" status="PASS" endtime="20170816 10:05:53.267"></status>
</kw>
<status starttime="20170816 10:05:48.527" status="PASS" endtime="20170816 10:05:53.267"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:05:53.271" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:05:53.271" status="PASS" endtime="20170816 10:05:53.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:05:53.272" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:05:53.272" status="PASS" endtime="20170816 10:05:53.272"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:05:53.272" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:05:53.272" status="PASS" endtime="20170816 10:05:53.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:05:53.273" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:05:53.273" status="PASS" endtime="20170816 10:05:53.273"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:05:53.989" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:05:53.274" status="PASS" endtime="20170816 10:05:53.989"></status>
</kw>
<msg timestamp="20170816 10:05:53.989" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:05:53.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:53.273" status="PASS" endtime="20170816 10:05:53.990"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:05:53.990" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:53.990" status="PASS" endtime="20170816 10:05:53.990"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:05:53.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:53.991" status="PASS" endtime="20170816 10:05:53.991"></status>
</kw>
<status starttime="20170816 10:05:53.270" status="PASS" endtime="20170816 10:05:53.991"></status>
</kw>
<status starttime="20170816 10:05:53.269" status="PASS" endtime="20170816 10:05:53.991"></status>
</kw>
<status starttime="20170816 10:05:53.269" status="PASS" endtime="20170816 10:05:53.991"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:05:53.992" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:05:53.992" status="PASS" endtime="20170816 10:05:53.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:05:53.994" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:05:53.993" status="PASS" endtime="20170816 10:05:53.994"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:05:53.995" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:05:53.995" status="PASS" endtime="20170816 10:05:53.995"></status>
</kw>
<status starttime="20170816 10:05:53.994" status="PASS" endtime="20170816 10:05:53.995"></status>
</kw>
<status starttime="20170816 10:05:53.993" status="PASS" endtime="20170816 10:05:53.995"></status>
</kw>
<status starttime="20170816 10:05:53.992" status="PASS" endtime="20170816 10:05:53.995"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:05:54.214" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:05:54.214" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:53.996" status="PASS" endtime="20170816 10:05:54.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:05:54.216" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:05:54.216" status="PASS" endtime="20170816 10:05:54.216"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:05:54.217" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:05:54.217" status="PASS" endtime="20170816 10:05:54.217"></status>
</kw>
<status starttime="20170816 10:05:54.216" status="PASS" endtime="20170816 10:05:54.218"></status>
</kw>
<status starttime="20170816 10:05:54.215" status="PASS" endtime="20170816 10:05:54.218"></status>
</kw>
<status starttime="20170816 10:05:54.215" status="PASS" endtime="20170816 10:05:54.218"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:05:54.218" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:05:54.218" status="PASS" endtime="20170816 10:05:54.218"></status>
</kw>
<msg timestamp="20170816 10:05:54.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:53.268" status="PASS" endtime="20170816 10:05:54.218"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:05:54.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:54.219" status="PASS" endtime="20170816 10:05:54.219"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:05:54.220" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:05:54.220" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:05:54.220" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:05:54.219" status="PASS" endtime="20170816 10:05:54.220"></status>
</kw>
<msg timestamp="20170816 10:05:54.220" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170816 10:05:53.267" status="PASS" endtime="20170816 10:05:54.220"></status>
</kw>
<msg timestamp="20170816 10:05:54.220" level="INFO">${host_state} = Off</msg>
<status starttime="20170816 10:05:53.267" status="PASS" endtime="20170816 10:05:54.220"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:05:54.221" status="PASS" endtime="20170816 10:05:54.221"></status>
</kw>
<status starttime="20170816 10:05:48.527" status="PASS" endtime="20170816 10:05:54.221"></status>
</kw>
<status starttime="20170816 10:05:48.526" status="PASS" endtime="20170816 10:05:54.221"></status>
</kw>
<status starttime="20170816 10:05:46.577" status="PASS" endtime="20170816 10:05:54.221"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170816 10:05:54.222" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170816 10:05:54.222" status="PASS" endtime="20170816 10:05:54.222"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:05:54.223" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170816 10:05:54.223" status="PASS" endtime="20170816 10:05:54.223"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:05:54.226" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:05:54.226" status="PASS" endtime="20170816 10:05:54.226"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:05:54.227" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:05:54.227" status="PASS" endtime="20170816 10:05:54.227"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:05:54.228" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:05:54.227" status="PASS" endtime="20170816 10:05:54.228"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:05:54.228" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:05:54.228" status="PASS" endtime="20170816 10:05:54.228"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:05:54.580" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:05:54.229" status="PASS" endtime="20170816 10:05:54.580"></status>
</kw>
<msg timestamp="20170816 10:05:54.581" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:05:54.581" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:54.229" status="PASS" endtime="20170816 10:05:54.581"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:05:54.581" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:54.581" status="PASS" endtime="20170816 10:05:54.581"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:05:54.582" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:54.582" status="PASS" endtime="20170816 10:05:54.582"></status>
</kw>
<status starttime="20170816 10:05:54.225" status="PASS" endtime="20170816 10:05:54.582"></status>
</kw>
<status starttime="20170816 10:05:54.225" status="PASS" endtime="20170816 10:05:54.582"></status>
</kw>
<status starttime="20170816 10:05:54.224" status="PASS" endtime="20170816 10:05:54.582"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:05:54.583" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170816 10:05:54.583" status="PASS" endtime="20170816 10:05:54.583"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:05:54.584" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:05:54.583" status="PASS" endtime="20170816 10:05:54.584"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170816 10:05:54.584" status="PASS" endtime="20170816 10:05:54.585"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:05:54.586" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status starttime="20170816 10:05:54.585" status="PASS" endtime="20170816 10:05:54.586"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:05:54.587" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170816 10:05:54.587" status="PASS" endtime="20170816 10:05:54.587"></status>
</kw>
<status starttime="20170816 10:05:54.586" status="PASS" endtime="20170816 10:05:54.587"></status>
</kw>
<status starttime="20170816 10:05:54.585" status="PASS" endtime="20170816 10:05:54.587"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:05:55.031" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170816 10:05:55.031" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:54.588" status="PASS" endtime="20170816 10:05:55.031"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:05:55.032" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:05:55.032" status="PASS" endtime="20170816 10:05:55.033"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:05:55.034" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:05:55.033" status="PASS" endtime="20170816 10:05:55.034"></status>
</kw>
<status starttime="20170816 10:05:55.033" status="PASS" endtime="20170816 10:05:55.034"></status>
</kw>
<status starttime="20170816 10:05:55.031" status="PASS" endtime="20170816 10:05:55.034"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:05:55.035" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:05:55.034" status="PASS" endtime="20170816 10:05:55.035"></status>
</kw>
<msg timestamp="20170816 10:05:55.035" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:54.224" status="PASS" endtime="20170816 10:05:55.035"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:05:55.036" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:55.035" status="PASS" endtime="20170816 10:05:55.036"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170816 10:05:55.036" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:05:55.036" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:05:55.036" level="INFO">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status starttime="20170816 10:05:55.036" status="PASS" endtime="20170816 10:05:55.036"></status>
</kw>
<status starttime="20170816 10:05:54.223" status="PASS" endtime="20170816 10:05:55.037"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170816 10:05:55.037" status="PASS" endtime="20170816 10:05:55.037"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:05:55.042" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:05:55.041" status="PASS" endtime="20170816 10:05:55.043"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:05:55.043" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:05:55.043" status="PASS" endtime="20170816 10:05:55.043"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:05:55.044" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:05:55.043" status="PASS" endtime="20170816 10:05:55.044"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:05:55.044" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:05:55.044" status="PASS" endtime="20170816 10:05:55.044"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:05:57.005" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:05:55.045" status="PASS" endtime="20170816 10:05:57.005"></status>
</kw>
<msg timestamp="20170816 10:05:57.006" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:05:57.006" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:55.045" status="PASS" endtime="20170816 10:05:57.006"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:05:57.006" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:57.006" status="PASS" endtime="20170816 10:05:57.006"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:05:57.007" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:05:57.007" status="PASS" endtime="20170816 10:05:57.007"></status>
</kw>
<status starttime="20170816 10:05:55.041" status="PASS" endtime="20170816 10:05:57.007"></status>
</kw>
<status starttime="20170816 10:05:55.041" status="PASS" endtime="20170816 10:05:57.007"></status>
</kw>
<status starttime="20170816 10:05:55.040" status="PASS" endtime="20170816 10:05:57.007"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:05:57.008" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:05:57.008" status="PASS" endtime="20170816 10:05:57.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:05:57.010" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:05:57.009" status="PASS" endtime="20170816 10:05:57.010"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:05:57.011" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:05:57.011" status="PASS" endtime="20170816 10:05:57.011"></status>
</kw>
<status starttime="20170816 10:05:57.010" status="PASS" endtime="20170816 10:05:57.011"></status>
</kw>
<status starttime="20170816 10:05:57.009" status="PASS" endtime="20170816 10:05:57.011"></status>
</kw>
<status starttime="20170816 10:05:57.008" status="PASS" endtime="20170816 10:05:57.011"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:00.119" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:06:00.119" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:57.012" status="PASS" endtime="20170816 10:06:00.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:00.121" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:00.120" status="PASS" endtime="20170816 10:06:00.121"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:00.122" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:00.121" status="PASS" endtime="20170816 10:06:00.122"></status>
</kw>
<status starttime="20170816 10:06:00.121" status="PASS" endtime="20170816 10:06:00.122"></status>
</kw>
<status starttime="20170816 10:06:00.120" status="PASS" endtime="20170816 10:06:00.122"></status>
</kw>
<status starttime="20170816 10:06:00.119" status="PASS" endtime="20170816 10:06:00.122"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:00.122" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:00.122" status="PASS" endtime="20170816 10:06:00.122"></status>
</kw>
<msg timestamp="20170816 10:06:00.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:05:55.039" status="PASS" endtime="20170816 10:06:00.123"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:00.123" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:00.123" status="PASS" endtime="20170816 10:06:00.123"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:00.124" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:00.124" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:00.124" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:00.124" status="PASS" endtime="20170816 10:06:00.124"></status>
</kw>
<msg timestamp="20170816 10:06:00.124" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170816 10:05:55.039" status="PASS" endtime="20170816 10:06:00.124"></status>
</kw>
<msg timestamp="20170816 10:06:00.125" level="INFO">${power_state} = Off</msg>
<status starttime="20170816 10:05:55.038" status="PASS" endtime="20170816 10:06:00.125"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 10:06:00.125" level="FAIL">On != Off</msg>
<status starttime="20170816 10:06:00.125" status="FAIL" endtime="20170816 10:06:00.125"></status>
</kw>
<status starttime="20170816 10:05:55.038" status="FAIL" endtime="20170816 10:06:00.126"></status>
</kw>
<status starttime="20170816 10:05:55.038" status="FAIL" endtime="20170816 10:06:00.126"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:06:10.131" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:06:10.130" status="PASS" endtime="20170816 10:06:10.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:06:10.132" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:06:10.131" status="PASS" endtime="20170816 10:06:10.132"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:06:10.132" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:06:10.132" status="PASS" endtime="20170816 10:06:10.132"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:06:10.133" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:06:10.133" status="PASS" endtime="20170816 10:06:10.133"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:06:10.925" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:06:10.134" status="PASS" endtime="20170816 10:06:10.925"></status>
</kw>
<msg timestamp="20170816 10:06:10.925" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:06:10.925" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:10.133" status="PASS" endtime="20170816 10:06:10.926"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:06:10.926" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:10.926" status="PASS" endtime="20170816 10:06:10.926"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:10.927" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:10.926" status="PASS" endtime="20170816 10:06:10.927"></status>
</kw>
<status starttime="20170816 10:06:10.130" status="PASS" endtime="20170816 10:06:10.927"></status>
</kw>
<status starttime="20170816 10:06:10.129" status="PASS" endtime="20170816 10:06:10.927"></status>
</kw>
<status starttime="20170816 10:06:10.129" status="PASS" endtime="20170816 10:06:10.927"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:06:10.928" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:06:10.927" status="PASS" endtime="20170816 10:06:10.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:10.930" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:06:10.929" status="PASS" endtime="20170816 10:06:10.930"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:10.931" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:06:10.931" status="PASS" endtime="20170816 10:06:10.931"></status>
</kw>
<status starttime="20170816 10:06:10.930" status="PASS" endtime="20170816 10:06:10.931"></status>
</kw>
<status starttime="20170816 10:06:10.928" status="PASS" endtime="20170816 10:06:10.931"></status>
</kw>
<status starttime="20170816 10:06:10.928" status="PASS" endtime="20170816 10:06:10.931"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:11.656" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:06:11.656" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:10.932" status="PASS" endtime="20170816 10:06:11.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:11.658" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:11.657" status="PASS" endtime="20170816 10:06:11.658"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:11.659" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:11.658" status="PASS" endtime="20170816 10:06:11.659"></status>
</kw>
<status starttime="20170816 10:06:11.658" status="PASS" endtime="20170816 10:06:11.659"></status>
</kw>
<status starttime="20170816 10:06:11.657" status="PASS" endtime="20170816 10:06:11.659"></status>
</kw>
<status starttime="20170816 10:06:11.656" status="PASS" endtime="20170816 10:06:11.659"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:11.659" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:11.659" status="PASS" endtime="20170816 10:06:11.660"></status>
</kw>
<msg timestamp="20170816 10:06:11.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:10.128" status="PASS" endtime="20170816 10:06:11.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:11.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:11.660" status="PASS" endtime="20170816 10:06:11.661"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:11.661" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:11.661" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:11.661" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:11.661" status="PASS" endtime="20170816 10:06:11.661"></status>
</kw>
<msg timestamp="20170816 10:06:11.662" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:06:10.128" status="PASS" endtime="20170816 10:06:11.662"></status>
</kw>
<msg timestamp="20170816 10:06:11.662" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:06:10.127" status="PASS" endtime="20170816 10:06:11.662"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:06:11.662" status="PASS" endtime="20170816 10:06:11.663"></status>
</kw>
<status starttime="20170816 10:06:10.126" status="PASS" endtime="20170816 10:06:11.663"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:06:11.666" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:06:11.666" status="PASS" endtime="20170816 10:06:11.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:06:11.667" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:06:11.667" status="PASS" endtime="20170816 10:06:11.667"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:06:11.668" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:06:11.667" status="PASS" endtime="20170816 10:06:11.668"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:06:11.669" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:06:11.668" status="PASS" endtime="20170816 10:06:11.669"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:06:12.648" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:06:11.670" status="PASS" endtime="20170816 10:06:12.648"></status>
</kw>
<msg timestamp="20170816 10:06:12.648" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:06:12.648" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:11.669" status="PASS" endtime="20170816 10:06:12.648"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:06:12.649" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:12.649" status="PASS" endtime="20170816 10:06:12.649"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:12.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:12.649" status="PASS" endtime="20170816 10:06:12.650"></status>
</kw>
<status starttime="20170816 10:06:11.665" status="PASS" endtime="20170816 10:06:12.650"></status>
</kw>
<status starttime="20170816 10:06:11.665" status="PASS" endtime="20170816 10:06:12.650"></status>
</kw>
<status starttime="20170816 10:06:11.664" status="PASS" endtime="20170816 10:06:12.650"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:06:12.651" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:06:12.650" status="PASS" endtime="20170816 10:06:12.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:12.653" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:06:12.652" status="PASS" endtime="20170816 10:06:12.653"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:12.654" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:06:12.654" status="PASS" endtime="20170816 10:06:12.654"></status>
</kw>
<status starttime="20170816 10:06:12.653" status="PASS" endtime="20170816 10:06:12.654"></status>
</kw>
<status starttime="20170816 10:06:12.651" status="PASS" endtime="20170816 10:06:12.654"></status>
</kw>
<status starttime="20170816 10:06:12.651" status="PASS" endtime="20170816 10:06:12.654"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:13.295" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:06:13.295" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:12.654" status="PASS" endtime="20170816 10:06:13.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:13.297" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:13.297" status="PASS" endtime="20170816 10:06:13.297"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:13.298" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:13.298" status="PASS" endtime="20170816 10:06:13.298"></status>
</kw>
<status starttime="20170816 10:06:13.297" status="PASS" endtime="20170816 10:06:13.298"></status>
</kw>
<status starttime="20170816 10:06:13.296" status="PASS" endtime="20170816 10:06:13.298"></status>
</kw>
<status starttime="20170816 10:06:13.296" status="PASS" endtime="20170816 10:06:13.298"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:13.299" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:13.299" status="PASS" endtime="20170816 10:06:13.299"></status>
</kw>
<msg timestamp="20170816 10:06:13.299" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:11.664" status="PASS" endtime="20170816 10:06:13.299"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:13.300" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:13.299" status="PASS" endtime="20170816 10:06:13.300"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:13.301" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:13.301" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:13.301" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:13.300" status="PASS" endtime="20170816 10:06:13.301"></status>
</kw>
<msg timestamp="20170816 10:06:13.301" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:06:11.663" status="PASS" endtime="20170816 10:06:13.302"></status>
</kw>
<msg timestamp="20170816 10:06:13.302" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:06:11.663" status="PASS" endtime="20170816 10:06:13.302"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:06:13.302" status="PASS" endtime="20170816 10:06:13.303"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:06:13.311" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:06:13.311" status="PASS" endtime="20170816 10:06:13.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:06:13.312" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:06:13.312" status="PASS" endtime="20170816 10:06:13.312"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:06:13.313" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:06:13.312" status="PASS" endtime="20170816 10:06:13.313"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:06:13.313" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:06:13.313" status="PASS" endtime="20170816 10:06:13.313"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:06:13.933" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:06:13.314" status="PASS" endtime="20170816 10:06:13.933"></status>
</kw>
<msg timestamp="20170816 10:06:13.933" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:06:13.933" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:13.314" status="PASS" endtime="20170816 10:06:13.933"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:06:13.934" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:13.933" status="PASS" endtime="20170816 10:06:13.934"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:13.934" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:13.934" status="PASS" endtime="20170816 10:06:13.934"></status>
</kw>
<status starttime="20170816 10:06:13.310" status="PASS" endtime="20170816 10:06:13.935"></status>
</kw>
<status starttime="20170816 10:06:13.310" status="PASS" endtime="20170816 10:06:13.935"></status>
</kw>
<status starttime="20170816 10:06:13.307" status="PASS" endtime="20170816 10:06:13.935"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:06:13.935" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:06:13.935" status="PASS" endtime="20170816 10:06:13.935"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:13.937" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:06:13.937" status="PASS" endtime="20170816 10:06:13.937"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:13.938" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:06:13.938" status="PASS" endtime="20170816 10:06:13.938"></status>
</kw>
<status starttime="20170816 10:06:13.938" status="PASS" endtime="20170816 10:06:13.938"></status>
</kw>
<status starttime="20170816 10:06:13.936" status="PASS" endtime="20170816 10:06:13.939"></status>
</kw>
<status starttime="20170816 10:06:13.936" status="PASS" endtime="20170816 10:06:13.939"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:14.284" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:06:14.284" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:13.939" status="PASS" endtime="20170816 10:06:14.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:14.286" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:14.285" status="PASS" endtime="20170816 10:06:14.286"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:14.287" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:14.287" status="PASS" endtime="20170816 10:06:14.287"></status>
</kw>
<status starttime="20170816 10:06:14.286" status="PASS" endtime="20170816 10:06:14.287"></status>
</kw>
<status starttime="20170816 10:06:14.285" status="PASS" endtime="20170816 10:06:14.287"></status>
</kw>
<status starttime="20170816 10:06:14.284" status="PASS" endtime="20170816 10:06:14.287"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:14.288" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:14.288" status="PASS" endtime="20170816 10:06:14.288"></status>
</kw>
<msg timestamp="20170816 10:06:14.288" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:13.306" status="PASS" endtime="20170816 10:06:14.288"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:14.289" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:14.288" status="PASS" endtime="20170816 10:06:14.289"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:14.289" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:14.289" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:14.289" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:14.289" status="PASS" endtime="20170816 10:06:14.289"></status>
</kw>
<msg timestamp="20170816 10:06:14.290" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:06:13.305" status="PASS" endtime="20170816 10:06:14.290"></status>
</kw>
<msg timestamp="20170816 10:06:14.290" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:06:13.305" status="PASS" endtime="20170816 10:06:14.290"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:06:14.291" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:06:14.290" status="FAIL" endtime="20170816 10:06:14.291"></status>
</kw>
<status starttime="20170816 10:06:13.304" status="FAIL" endtime="20170816 10:06:14.291"></status>
</kw>
<msg timestamp="20170816 10:06:14.291" level="INFO">${status} = False</msg>
<status starttime="20170816 10:06:13.304" status="PASS" endtime="20170816 10:06:14.291"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:06:14.291" status="PASS" endtime="20170816 10:06:14.291"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:06:14.295" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:06:14.295" status="PASS" endtime="20170816 10:06:14.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:06:14.296" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:06:14.296" status="PASS" endtime="20170816 10:06:14.296"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:06:14.296" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:06:14.296" status="PASS" endtime="20170816 10:06:14.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:06:14.297" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:06:14.297" status="PASS" endtime="20170816 10:06:14.297"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:06:14.861" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:06:14.298" status="PASS" endtime="20170816 10:06:14.861"></status>
</kw>
<msg timestamp="20170816 10:06:14.861" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:06:14.861" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:14.297" status="PASS" endtime="20170816 10:06:14.862"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:06:14.862" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:14.862" status="PASS" endtime="20170816 10:06:14.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:14.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:14.862" status="PASS" endtime="20170816 10:06:14.863"></status>
</kw>
<status starttime="20170816 10:06:14.294" status="PASS" endtime="20170816 10:06:14.863"></status>
</kw>
<status starttime="20170816 10:06:14.294" status="PASS" endtime="20170816 10:06:14.863"></status>
</kw>
<status starttime="20170816 10:06:14.293" status="PASS" endtime="20170816 10:06:14.863"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:06:14.864" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:06:14.863" status="PASS" endtime="20170816 10:06:14.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:14.866" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:06:14.865" status="PASS" endtime="20170816 10:06:14.866"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:14.867" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:06:14.867" status="PASS" endtime="20170816 10:06:14.867"></status>
</kw>
<status starttime="20170816 10:06:14.866" status="PASS" endtime="20170816 10:06:14.867"></status>
</kw>
<status starttime="20170816 10:06:14.864" status="PASS" endtime="20170816 10:06:14.867"></status>
</kw>
<status starttime="20170816 10:06:14.864" status="PASS" endtime="20170816 10:06:14.867"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:14.956" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:06:14.956" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:14.868" status="PASS" endtime="20170816 10:06:14.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:14.958" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:14.957" status="PASS" endtime="20170816 10:06:14.958"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:14.959" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:14.959" status="PASS" endtime="20170816 10:06:14.959"></status>
</kw>
<status starttime="20170816 10:06:14.958" status="PASS" endtime="20170816 10:06:14.959"></status>
</kw>
<status starttime="20170816 10:06:14.957" status="PASS" endtime="20170816 10:06:14.959"></status>
</kw>
<status starttime="20170816 10:06:14.957" status="PASS" endtime="20170816 10:06:14.959"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:14.960" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:14.960" status="PASS" endtime="20170816 10:06:14.960"></status>
</kw>
<msg timestamp="20170816 10:06:14.960" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:14.293" status="PASS" endtime="20170816 10:06:14.960"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:14.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:14.961" status="PASS" endtime="20170816 10:06:14.961"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:14.962" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:14.962" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:14.962" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:14.962" status="PASS" endtime="20170816 10:06:14.962"></status>
</kw>
<msg timestamp="20170816 10:06:14.963" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170816 10:06:14.292" status="PASS" endtime="20170816 10:06:14.963"></status>
</kw>
<msg timestamp="20170816 10:06:14.963" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170816 10:06:14.292" status="PASS" endtime="20170816 10:06:14.963"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:06:14.964" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:06:14.964" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170816 10:06:14.963" status="FAIL" endtime="20170816 10:06:14.964"></status>
</kw>
<status starttime="20170816 10:06:13.303" status="FAIL" endtime="20170816 10:06:14.964"></status>
</kw>
<status starttime="20170816 10:06:10.126" status="FAIL" endtime="20170816 10:06:14.964"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:06:24.969" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:06:24.968" status="PASS" endtime="20170816 10:06:24.969"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:06:24.970" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:06:24.970" status="PASS" endtime="20170816 10:06:24.970"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:06:24.970" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:06:24.970" status="PASS" endtime="20170816 10:06:24.971"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:06:24.971" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:06:24.971" status="PASS" endtime="20170816 10:06:24.971"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:06:25.213" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:06:24.973" status="PASS" endtime="20170816 10:06:25.213"></status>
</kw>
<msg timestamp="20170816 10:06:25.214" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:06:25.214" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:24.972" status="PASS" endtime="20170816 10:06:25.214"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:06:25.214" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:25.214" status="PASS" endtime="20170816 10:06:25.214"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:25.215" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:25.215" status="PASS" endtime="20170816 10:06:25.215"></status>
</kw>
<status starttime="20170816 10:06:24.968" status="PASS" endtime="20170816 10:06:25.215"></status>
</kw>
<status starttime="20170816 10:06:24.968" status="PASS" endtime="20170816 10:06:25.215"></status>
</kw>
<status starttime="20170816 10:06:24.967" status="PASS" endtime="20170816 10:06:25.215"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:06:25.216" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:06:25.216" status="PASS" endtime="20170816 10:06:25.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:25.218" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:06:25.217" status="PASS" endtime="20170816 10:06:25.218"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:25.219" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:06:25.219" status="PASS" endtime="20170816 10:06:25.219"></status>
</kw>
<status starttime="20170816 10:06:25.218" status="PASS" endtime="20170816 10:06:25.219"></status>
</kw>
<status starttime="20170816 10:06:25.217" status="PASS" endtime="20170816 10:06:25.219"></status>
</kw>
<status starttime="20170816 10:06:25.216" status="PASS" endtime="20170816 10:06:25.219"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:25.281" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:06:25.281" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:25.220" status="PASS" endtime="20170816 10:06:25.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:25.283" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:25.282" status="PASS" endtime="20170816 10:06:25.283"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:25.284" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:25.283" status="PASS" endtime="20170816 10:06:25.284"></status>
</kw>
<status starttime="20170816 10:06:25.283" status="PASS" endtime="20170816 10:06:25.284"></status>
</kw>
<status starttime="20170816 10:06:25.282" status="PASS" endtime="20170816 10:06:25.284"></status>
</kw>
<status starttime="20170816 10:06:25.281" status="PASS" endtime="20170816 10:06:25.284"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:25.284" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:25.284" status="PASS" endtime="20170816 10:06:25.284"></status>
</kw>
<msg timestamp="20170816 10:06:25.285" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:24.966" status="PASS" endtime="20170816 10:06:25.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:25.285" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:25.285" status="PASS" endtime="20170816 10:06:25.285"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:25.286" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:25.286" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:25.286" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:25.286" status="PASS" endtime="20170816 10:06:25.286"></status>
</kw>
<msg timestamp="20170816 10:06:25.286" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:06:24.966" status="PASS" endtime="20170816 10:06:25.286"></status>
</kw>
<msg timestamp="20170816 10:06:25.287" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:06:24.965" status="PASS" endtime="20170816 10:06:25.287"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:06:25.287" status="PASS" endtime="20170816 10:06:25.287"></status>
</kw>
<status starttime="20170816 10:06:24.965" status="PASS" endtime="20170816 10:06:25.287"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:06:25.292" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:06:25.292" status="PASS" endtime="20170816 10:06:25.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:06:25.294" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:06:25.293" status="PASS" endtime="20170816 10:06:25.294"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:06:25.295" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:06:25.294" status="PASS" endtime="20170816 10:06:25.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:06:25.295" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:06:25.295" status="PASS" endtime="20170816 10:06:25.295"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:06:25.482" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:06:25.296" status="PASS" endtime="20170816 10:06:25.482"></status>
</kw>
<msg timestamp="20170816 10:06:25.482" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:06:25.482" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:25.296" status="PASS" endtime="20170816 10:06:25.482"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:06:25.483" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:25.482" status="PASS" endtime="20170816 10:06:25.483"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:25.483" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:25.483" status="PASS" endtime="20170816 10:06:25.483"></status>
</kw>
<status starttime="20170816 10:06:25.291" status="PASS" endtime="20170816 10:06:25.483"></status>
</kw>
<status starttime="20170816 10:06:25.290" status="PASS" endtime="20170816 10:06:25.484"></status>
</kw>
<status starttime="20170816 10:06:25.289" status="PASS" endtime="20170816 10:06:25.484"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:06:25.484" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:06:25.484" status="PASS" endtime="20170816 10:06:25.484"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:25.486" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:06:25.486" status="PASS" endtime="20170816 10:06:25.486"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:25.487" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:06:25.487" status="PASS" endtime="20170816 10:06:25.487"></status>
</kw>
<status starttime="20170816 10:06:25.486" status="PASS" endtime="20170816 10:06:25.487"></status>
</kw>
<status starttime="20170816 10:06:25.485" status="PASS" endtime="20170816 10:06:25.487"></status>
</kw>
<status starttime="20170816 10:06:25.485" status="PASS" endtime="20170816 10:06:25.487"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:25.587" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:06:25.587" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:25.488" status="PASS" endtime="20170816 10:06:25.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:25.589" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:25.588" status="PASS" endtime="20170816 10:06:25.589"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:25.590" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:25.589" status="PASS" endtime="20170816 10:06:25.590"></status>
</kw>
<status starttime="20170816 10:06:25.589" status="PASS" endtime="20170816 10:06:25.590"></status>
</kw>
<status starttime="20170816 10:06:25.588" status="PASS" endtime="20170816 10:06:25.590"></status>
</kw>
<status starttime="20170816 10:06:25.587" status="PASS" endtime="20170816 10:06:25.590"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:25.590" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:25.590" status="PASS" endtime="20170816 10:06:25.591"></status>
</kw>
<msg timestamp="20170816 10:06:25.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:25.289" status="PASS" endtime="20170816 10:06:25.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:25.591" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:25.591" status="PASS" endtime="20170816 10:06:25.591"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:25.592" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:25.592" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:25.592" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:25.592" status="PASS" endtime="20170816 10:06:25.592"></status>
</kw>
<msg timestamp="20170816 10:06:25.592" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:06:25.288" status="PASS" endtime="20170816 10:06:25.592"></status>
</kw>
<msg timestamp="20170816 10:06:25.593" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:06:25.287" status="PASS" endtime="20170816 10:06:25.593"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:06:25.593" status="PASS" endtime="20170816 10:06:25.593"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:06:25.598" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:06:25.598" status="PASS" endtime="20170816 10:06:25.598"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:06:25.599" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:06:25.599" status="PASS" endtime="20170816 10:06:25.599"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:06:25.599" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:06:25.599" status="PASS" endtime="20170816 10:06:25.599"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:06:25.600" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:06:25.600" status="PASS" endtime="20170816 10:06:25.600"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:06:25.795" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:06:25.601" status="PASS" endtime="20170816 10:06:25.795"></status>
</kw>
<msg timestamp="20170816 10:06:25.795" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:06:25.795" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:25.600" status="PASS" endtime="20170816 10:06:25.795"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:06:25.796" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:25.796" status="PASS" endtime="20170816 10:06:25.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:25.797" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:25.797" status="PASS" endtime="20170816 10:06:25.797"></status>
</kw>
<status starttime="20170816 10:06:25.597" status="PASS" endtime="20170816 10:06:25.797"></status>
</kw>
<status starttime="20170816 10:06:25.597" status="PASS" endtime="20170816 10:06:25.797"></status>
</kw>
<status starttime="20170816 10:06:25.596" status="PASS" endtime="20170816 10:06:25.798"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:06:25.798" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:06:25.798" status="PASS" endtime="20170816 10:06:25.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:25.801" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:06:25.800" status="PASS" endtime="20170816 10:06:25.801"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:25.802" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:06:25.801" status="PASS" endtime="20170816 10:06:25.802"></status>
</kw>
<status starttime="20170816 10:06:25.801" status="PASS" endtime="20170816 10:06:25.802"></status>
</kw>
<status starttime="20170816 10:06:25.799" status="PASS" endtime="20170816 10:06:25.802"></status>
</kw>
<status starttime="20170816 10:06:25.799" status="PASS" endtime="20170816 10:06:25.802"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:25.878" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:06:25.878" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:25.802" status="PASS" endtime="20170816 10:06:25.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:25.880" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:25.879" status="PASS" endtime="20170816 10:06:25.880"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:25.881" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:25.881" status="PASS" endtime="20170816 10:06:25.881"></status>
</kw>
<status starttime="20170816 10:06:25.880" status="PASS" endtime="20170816 10:06:25.881"></status>
</kw>
<status starttime="20170816 10:06:25.879" status="PASS" endtime="20170816 10:06:25.881"></status>
</kw>
<status starttime="20170816 10:06:25.879" status="PASS" endtime="20170816 10:06:25.881"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:25.882" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:25.881" status="PASS" endtime="20170816 10:06:25.882"></status>
</kw>
<msg timestamp="20170816 10:06:25.882" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:25.596" status="PASS" endtime="20170816 10:06:25.882"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:25.882" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:25.882" status="PASS" endtime="20170816 10:06:25.883"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:25.883" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:25.883" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:25.883" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:25.883" status="PASS" endtime="20170816 10:06:25.883"></status>
</kw>
<msg timestamp="20170816 10:06:25.884" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:06:25.595" status="PASS" endtime="20170816 10:06:25.884"></status>
</kw>
<msg timestamp="20170816 10:06:25.884" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:06:25.595" status="PASS" endtime="20170816 10:06:25.884"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:06:25.884" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:06:25.884" status="FAIL" endtime="20170816 10:06:25.884"></status>
</kw>
<status starttime="20170816 10:06:25.594" status="FAIL" endtime="20170816 10:06:25.885"></status>
</kw>
<msg timestamp="20170816 10:06:25.885" level="INFO">${status} = False</msg>
<status starttime="20170816 10:06:25.594" status="PASS" endtime="20170816 10:06:25.885"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:06:25.885" status="PASS" endtime="20170816 10:06:25.885"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:06:25.889" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:06:25.888" status="PASS" endtime="20170816 10:06:25.890"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:06:25.890" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:06:25.890" status="PASS" endtime="20170816 10:06:25.890"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:06:25.891" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:06:25.890" status="PASS" endtime="20170816 10:06:25.891"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:06:25.891" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:06:25.891" status="PASS" endtime="20170816 10:06:25.891"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:06:26.091" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:06:25.892" status="PASS" endtime="20170816 10:06:26.091"></status>
</kw>
<msg timestamp="20170816 10:06:26.091" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:06:26.091" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:25.892" status="PASS" endtime="20170816 10:06:26.091"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:06:26.092" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:26.092" status="PASS" endtime="20170816 10:06:26.092"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:26.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:26.092" status="PASS" endtime="20170816 10:06:26.093"></status>
</kw>
<status starttime="20170816 10:06:25.888" status="PASS" endtime="20170816 10:06:26.093"></status>
</kw>
<status starttime="20170816 10:06:25.888" status="PASS" endtime="20170816 10:06:26.093"></status>
</kw>
<status starttime="20170816 10:06:25.887" status="PASS" endtime="20170816 10:06:26.093"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:06:26.094" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:06:26.093" status="PASS" endtime="20170816 10:06:26.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:26.096" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:06:26.095" status="PASS" endtime="20170816 10:06:26.096"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:26.096" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:06:26.096" status="PASS" endtime="20170816 10:06:26.097"></status>
</kw>
<status starttime="20170816 10:06:26.096" status="PASS" endtime="20170816 10:06:26.097"></status>
</kw>
<status starttime="20170816 10:06:26.094" status="PASS" endtime="20170816 10:06:26.097"></status>
</kw>
<status starttime="20170816 10:06:26.094" status="PASS" endtime="20170816 10:06:26.097"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:26.196" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:06:26.196" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:26.097" status="PASS" endtime="20170816 10:06:26.196"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:26.198" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:26.197" status="PASS" endtime="20170816 10:06:26.198"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:26.199" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:26.198" status="PASS" endtime="20170816 10:06:26.199"></status>
</kw>
<status starttime="20170816 10:06:26.198" status="PASS" endtime="20170816 10:06:26.199"></status>
</kw>
<status starttime="20170816 10:06:26.197" status="PASS" endtime="20170816 10:06:26.199"></status>
</kw>
<status starttime="20170816 10:06:26.196" status="PASS" endtime="20170816 10:06:26.199"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:26.199" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:26.199" status="PASS" endtime="20170816 10:06:26.199"></status>
</kw>
<msg timestamp="20170816 10:06:26.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:25.886" status="PASS" endtime="20170816 10:06:26.200"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:26.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:26.200" status="PASS" endtime="20170816 10:06:26.201"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:26.201" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:26.202" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:26.202" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:26.201" status="PASS" endtime="20170816 10:06:26.202"></status>
</kw>
<msg timestamp="20170816 10:06:26.202" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170816 10:06:25.886" status="PASS" endtime="20170816 10:06:26.202"></status>
</kw>
<msg timestamp="20170816 10:06:26.202" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170816 10:06:25.885" status="PASS" endtime="20170816 10:06:26.203"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:06:26.203" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:06:26.204" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170816 10:06:26.203" status="FAIL" endtime="20170816 10:06:26.204"></status>
</kw>
<status starttime="20170816 10:06:25.593" status="FAIL" endtime="20170816 10:06:26.204"></status>
</kw>
<status starttime="20170816 10:06:24.965" status="FAIL" endtime="20170816 10:06:26.204"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:06:36.209" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:06:36.209" status="PASS" endtime="20170816 10:06:36.210"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:06:36.210" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:06:36.210" status="PASS" endtime="20170816 10:06:36.210"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:06:36.211" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:06:36.211" status="PASS" endtime="20170816 10:06:36.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:06:36.212" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:06:36.211" status="PASS" endtime="20170816 10:06:36.212"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:06:36.539" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:06:36.212" status="PASS" endtime="20170816 10:06:36.539"></status>
</kw>
<msg timestamp="20170816 10:06:36.540" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:06:36.540" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:36.212" status="PASS" endtime="20170816 10:06:36.540"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:06:36.540" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:36.540" status="PASS" endtime="20170816 10:06:36.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:36.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:36.541" status="PASS" endtime="20170816 10:06:36.541"></status>
</kw>
<status starttime="20170816 10:06:36.209" status="PASS" endtime="20170816 10:06:36.541"></status>
</kw>
<status starttime="20170816 10:06:36.208" status="PASS" endtime="20170816 10:06:36.541"></status>
</kw>
<status starttime="20170816 10:06:36.208" status="PASS" endtime="20170816 10:06:36.542"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:06:36.542" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:06:36.542" status="PASS" endtime="20170816 10:06:36.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:36.544" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:06:36.544" status="PASS" endtime="20170816 10:06:36.544"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:36.545" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:06:36.545" status="PASS" endtime="20170816 10:06:36.545"></status>
</kw>
<status starttime="20170816 10:06:36.545" status="PASS" endtime="20170816 10:06:36.545"></status>
</kw>
<status starttime="20170816 10:06:36.543" status="PASS" endtime="20170816 10:06:36.546"></status>
</kw>
<status starttime="20170816 10:06:36.543" status="PASS" endtime="20170816 10:06:36.546"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:36.797" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:06:36.797" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:36.546" status="PASS" endtime="20170816 10:06:36.797"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:36.799" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:36.798" status="PASS" endtime="20170816 10:06:36.799"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:36.799" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:36.799" status="PASS" endtime="20170816 10:06:36.800"></status>
</kw>
<status starttime="20170816 10:06:36.799" status="PASS" endtime="20170816 10:06:36.800"></status>
</kw>
<status starttime="20170816 10:06:36.798" status="PASS" endtime="20170816 10:06:36.800"></status>
</kw>
<status starttime="20170816 10:06:36.797" status="PASS" endtime="20170816 10:06:36.800"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:36.800" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:36.800" status="PASS" endtime="20170816 10:06:36.800"></status>
</kw>
<msg timestamp="20170816 10:06:36.801" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:36.207" status="PASS" endtime="20170816 10:06:36.801"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:36.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:36.801" status="PASS" endtime="20170816 10:06:36.801"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:36.802" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:36.802" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:36.802" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:36.801" status="PASS" endtime="20170816 10:06:36.802"></status>
</kw>
<msg timestamp="20170816 10:06:36.802" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:06:36.206" status="PASS" endtime="20170816 10:06:36.802"></status>
</kw>
<msg timestamp="20170816 10:06:36.803" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:06:36.205" status="PASS" endtime="20170816 10:06:36.803"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:06:36.803" status="PASS" endtime="20170816 10:06:36.803"></status>
</kw>
<status starttime="20170816 10:06:36.205" status="PASS" endtime="20170816 10:06:36.803"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:06:36.807" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:06:36.806" status="PASS" endtime="20170816 10:06:36.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:06:36.808" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:06:36.807" status="PASS" endtime="20170816 10:06:36.808"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:06:36.808" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:06:36.808" status="PASS" endtime="20170816 10:06:36.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:06:36.809" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:06:36.809" status="PASS" endtime="20170816 10:06:36.809"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:06:37.183" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:06:36.810" status="PASS" endtime="20170816 10:06:37.183"></status>
</kw>
<msg timestamp="20170816 10:06:37.183" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:06:37.183" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:36.809" status="PASS" endtime="20170816 10:06:37.183"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:06:37.184" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:37.183" status="PASS" endtime="20170816 10:06:37.184"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:37.185" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:37.184" status="PASS" endtime="20170816 10:06:37.185"></status>
</kw>
<status starttime="20170816 10:06:36.806" status="PASS" endtime="20170816 10:06:37.185"></status>
</kw>
<status starttime="20170816 10:06:36.806" status="PASS" endtime="20170816 10:06:37.185"></status>
</kw>
<status starttime="20170816 10:06:36.805" status="PASS" endtime="20170816 10:06:37.185"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:06:37.185" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:06:37.185" status="PASS" endtime="20170816 10:06:37.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:37.187" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:06:37.187" status="PASS" endtime="20170816 10:06:37.188"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:37.188" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:06:37.188" status="PASS" endtime="20170816 10:06:37.188"></status>
</kw>
<status starttime="20170816 10:06:37.188" status="PASS" endtime="20170816 10:06:37.189"></status>
</kw>
<status starttime="20170816 10:06:37.186" status="PASS" endtime="20170816 10:06:37.189"></status>
</kw>
<status starttime="20170816 10:06:37.186" status="PASS" endtime="20170816 10:06:37.189"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:37.749" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:06:37.749" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:37.189" status="PASS" endtime="20170816 10:06:37.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:37.751" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:37.751" status="PASS" endtime="20170816 10:06:37.751"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:37.752" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:37.752" status="PASS" endtime="20170816 10:06:37.752"></status>
</kw>
<status starttime="20170816 10:06:37.751" status="PASS" endtime="20170816 10:06:37.752"></status>
</kw>
<status starttime="20170816 10:06:37.750" status="PASS" endtime="20170816 10:06:37.752"></status>
</kw>
<status starttime="20170816 10:06:37.750" status="PASS" endtime="20170816 10:06:37.752"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:37.753" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:37.753" status="PASS" endtime="20170816 10:06:37.753"></status>
</kw>
<msg timestamp="20170816 10:06:37.753" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:36.804" status="PASS" endtime="20170816 10:06:37.753"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:37.754" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:37.753" status="PASS" endtime="20170816 10:06:37.754"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:37.754" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:37.754" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:37.754" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:37.754" status="PASS" endtime="20170816 10:06:37.754"></status>
</kw>
<msg timestamp="20170816 10:06:37.755" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:06:36.804" status="PASS" endtime="20170816 10:06:37.755"></status>
</kw>
<msg timestamp="20170816 10:06:37.755" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:06:36.803" status="PASS" endtime="20170816 10:06:37.755"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:06:37.755" status="PASS" endtime="20170816 10:06:37.756"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:06:37.761" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:06:37.761" status="PASS" endtime="20170816 10:06:37.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:06:37.762" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:06:37.762" status="PASS" endtime="20170816 10:06:37.762"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:06:37.763" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:06:37.762" status="PASS" endtime="20170816 10:06:37.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:06:37.763" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:06:37.763" status="PASS" endtime="20170816 10:06:37.763"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:06:38.110" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:06:37.764" status="PASS" endtime="20170816 10:06:38.110"></status>
</kw>
<msg timestamp="20170816 10:06:38.110" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:06:38.110" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:37.763" status="PASS" endtime="20170816 10:06:38.110"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:06:38.111" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:38.111" status="PASS" endtime="20170816 10:06:38.111"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:38.112" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:38.111" status="PASS" endtime="20170816 10:06:38.112"></status>
</kw>
<status starttime="20170816 10:06:37.760" status="PASS" endtime="20170816 10:06:38.112"></status>
</kw>
<status starttime="20170816 10:06:37.759" status="PASS" endtime="20170816 10:06:38.112"></status>
</kw>
<status starttime="20170816 10:06:37.759" status="PASS" endtime="20170816 10:06:38.112"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:06:38.113" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:06:38.112" status="PASS" endtime="20170816 10:06:38.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:38.115" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:06:38.114" status="PASS" endtime="20170816 10:06:38.115"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:38.116" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:06:38.115" status="PASS" endtime="20170816 10:06:38.116"></status>
</kw>
<status starttime="20170816 10:06:38.115" status="PASS" endtime="20170816 10:06:38.116"></status>
</kw>
<status starttime="20170816 10:06:38.113" status="PASS" endtime="20170816 10:06:38.116"></status>
</kw>
<status starttime="20170816 10:06:38.113" status="PASS" endtime="20170816 10:06:38.116"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:38.661" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:06:38.661" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:38.116" status="PASS" endtime="20170816 10:06:38.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:38.665" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:38.663" status="PASS" endtime="20170816 10:06:38.665"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:38.666" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:38.666" status="PASS" endtime="20170816 10:06:38.666"></status>
</kw>
<status starttime="20170816 10:06:38.666" status="PASS" endtime="20170816 10:06:38.666"></status>
</kw>
<status starttime="20170816 10:06:38.662" status="PASS" endtime="20170816 10:06:38.667"></status>
</kw>
<status starttime="20170816 10:06:38.662" status="PASS" endtime="20170816 10:06:38.667"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:38.667" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:38.667" status="PASS" endtime="20170816 10:06:38.667"></status>
</kw>
<msg timestamp="20170816 10:06:38.667" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:37.758" status="PASS" endtime="20170816 10:06:38.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:38.668" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:38.668" status="PASS" endtime="20170816 10:06:38.668"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:38.669" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:38.669" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:38.669" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:38.668" status="PASS" endtime="20170816 10:06:38.669"></status>
</kw>
<msg timestamp="20170816 10:06:38.669" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:06:37.757" status="PASS" endtime="20170816 10:06:38.669"></status>
</kw>
<msg timestamp="20170816 10:06:38.669" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:06:37.757" status="PASS" endtime="20170816 10:06:38.669"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:06:38.670" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:06:38.670" status="FAIL" endtime="20170816 10:06:38.670"></status>
</kw>
<status starttime="20170816 10:06:37.757" status="FAIL" endtime="20170816 10:06:38.670"></status>
</kw>
<msg timestamp="20170816 10:06:38.670" level="INFO">${status} = False</msg>
<status starttime="20170816 10:06:37.756" status="PASS" endtime="20170816 10:06:38.670"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:06:38.671" status="PASS" endtime="20170816 10:06:38.671"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:06:38.675" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:06:38.674" status="PASS" endtime="20170816 10:06:38.675"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:06:38.676" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:06:38.675" status="PASS" endtime="20170816 10:06:38.676"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:06:38.676" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:06:38.676" status="PASS" endtime="20170816 10:06:38.676"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:06:38.677" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:06:38.677" status="PASS" endtime="20170816 10:06:38.677"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:06:39.039" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:06:38.678" status="PASS" endtime="20170816 10:06:39.039"></status>
</kw>
<msg timestamp="20170816 10:06:39.039" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:06:39.039" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:38.677" status="PASS" endtime="20170816 10:06:39.039"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:06:39.040" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:39.039" status="PASS" endtime="20170816 10:06:39.040"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:39.040" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:39.040" status="PASS" endtime="20170816 10:06:39.041"></status>
</kw>
<status starttime="20170816 10:06:38.674" status="PASS" endtime="20170816 10:06:39.041"></status>
</kw>
<status starttime="20170816 10:06:38.673" status="PASS" endtime="20170816 10:06:39.041"></status>
</kw>
<status starttime="20170816 10:06:38.673" status="PASS" endtime="20170816 10:06:39.041"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:06:39.041" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:06:39.041" status="PASS" endtime="20170816 10:06:39.041"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:39.068" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:06:39.043" status="PASS" endtime="20170816 10:06:39.068"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:39.069" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:06:39.069" status="PASS" endtime="20170816 10:06:39.070"></status>
</kw>
<status starttime="20170816 10:06:39.069" status="PASS" endtime="20170816 10:06:39.070"></status>
</kw>
<status starttime="20170816 10:06:39.042" status="PASS" endtime="20170816 10:06:39.070"></status>
</kw>
<status starttime="20170816 10:06:39.042" status="PASS" endtime="20170816 10:06:39.070"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:39.660" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:06:39.660" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:39.070" status="PASS" endtime="20170816 10:06:39.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:39.661" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:39.661" status="PASS" endtime="20170816 10:06:39.662"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:39.662" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:39.662" status="PASS" endtime="20170816 10:06:39.662"></status>
</kw>
<status starttime="20170816 10:06:39.662" status="PASS" endtime="20170816 10:06:39.663"></status>
</kw>
<status starttime="20170816 10:06:39.661" status="PASS" endtime="20170816 10:06:39.663"></status>
</kw>
<status starttime="20170816 10:06:39.660" status="PASS" endtime="20170816 10:06:39.663"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:39.663" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:39.663" status="PASS" endtime="20170816 10:06:39.663"></status>
</kw>
<msg timestamp="20170816 10:06:39.663" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:38.672" status="PASS" endtime="20170816 10:06:39.663"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:39.664" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:39.664" status="PASS" endtime="20170816 10:06:39.664"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:39.665" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:39.665" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:39.665" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:39.664" status="PASS" endtime="20170816 10:06:39.665"></status>
</kw>
<msg timestamp="20170816 10:06:39.665" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:06:38.672" status="PASS" endtime="20170816 10:06:39.665"></status>
</kw>
<msg timestamp="20170816 10:06:39.665" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:06:38.671" status="PASS" endtime="20170816 10:06:39.665"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:06:39.666" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:06:39.666" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:06:39.666" status="FAIL" endtime="20170816 10:06:39.666"></status>
</kw>
<status starttime="20170816 10:06:37.756" status="FAIL" endtime="20170816 10:06:39.666"></status>
</kw>
<status starttime="20170816 10:06:36.205" status="FAIL" endtime="20170816 10:06:39.666"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:06:49.671" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:06:49.671" status="PASS" endtime="20170816 10:06:49.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:06:49.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:06:49.672" status="PASS" endtime="20170816 10:06:49.672"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:06:49.673" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:06:49.673" status="PASS" endtime="20170816 10:06:49.673"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:06:49.674" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:06:49.673" status="PASS" endtime="20170816 10:06:49.674"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:06:49.988" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:06:49.674" status="PASS" endtime="20170816 10:06:49.988"></status>
</kw>
<msg timestamp="20170816 10:06:49.988" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:06:49.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:49.674" status="PASS" endtime="20170816 10:06:49.988"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:06:49.989" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:49.988" status="PASS" endtime="20170816 10:06:49.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:49.989" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:49.989" status="PASS" endtime="20170816 10:06:49.989"></status>
</kw>
<status starttime="20170816 10:06:49.670" status="PASS" endtime="20170816 10:06:49.990"></status>
</kw>
<status starttime="20170816 10:06:49.670" status="PASS" endtime="20170816 10:06:49.990"></status>
</kw>
<status starttime="20170816 10:06:49.669" status="PASS" endtime="20170816 10:06:49.990"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:06:49.990" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:06:49.990" status="PASS" endtime="20170816 10:06:49.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:49.992" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:06:49.992" status="PASS" endtime="20170816 10:06:49.992"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:49.993" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:06:49.993" status="PASS" endtime="20170816 10:06:49.993"></status>
</kw>
<status starttime="20170816 10:06:49.993" status="PASS" endtime="20170816 10:06:49.994"></status>
</kw>
<status starttime="20170816 10:06:49.991" status="PASS" endtime="20170816 10:06:49.994"></status>
</kw>
<status starttime="20170816 10:06:49.991" status="PASS" endtime="20170816 10:06:49.994"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:50.596" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:06:50.596" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:49.994" status="PASS" endtime="20170816 10:06:50.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:50.598" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:50.597" status="PASS" endtime="20170816 10:06:50.598"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:50.598" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:50.598" status="PASS" endtime="20170816 10:06:50.599"></status>
</kw>
<status starttime="20170816 10:06:50.598" status="PASS" endtime="20170816 10:06:50.599"></status>
</kw>
<status starttime="20170816 10:06:50.597" status="PASS" endtime="20170816 10:06:50.599"></status>
</kw>
<status starttime="20170816 10:06:50.596" status="PASS" endtime="20170816 10:06:50.599"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:50.599" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:50.599" status="PASS" endtime="20170816 10:06:50.599"></status>
</kw>
<msg timestamp="20170816 10:06:50.600" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:49.668" status="PASS" endtime="20170816 10:06:50.600"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:50.600" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:50.600" status="PASS" endtime="20170816 10:06:50.600"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:50.601" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:50.601" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:50.601" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:50.601" status="PASS" endtime="20170816 10:06:50.601"></status>
</kw>
<msg timestamp="20170816 10:06:50.601" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:06:49.668" status="PASS" endtime="20170816 10:06:50.601"></status>
</kw>
<msg timestamp="20170816 10:06:50.602" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:06:49.668" status="PASS" endtime="20170816 10:06:50.602"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:06:50.602" status="PASS" endtime="20170816 10:06:50.602"></status>
</kw>
<status starttime="20170816 10:06:49.667" status="PASS" endtime="20170816 10:06:50.602"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:06:50.606" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:06:50.606" status="PASS" endtime="20170816 10:06:50.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:06:50.607" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:06:50.607" status="PASS" endtime="20170816 10:06:50.607"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:06:50.607" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:06:50.607" status="PASS" endtime="20170816 10:06:50.607"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:06:50.608" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:06:50.608" status="PASS" endtime="20170816 10:06:50.608"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:06:51.242" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:06:50.609" status="PASS" endtime="20170816 10:06:51.242"></status>
</kw>
<msg timestamp="20170816 10:06:51.242" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:06:51.242" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:50.608" status="PASS" endtime="20170816 10:06:51.242"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:06:51.243" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:51.243" status="PASS" endtime="20170816 10:06:51.243"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:51.243" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:51.243" status="PASS" endtime="20170816 10:06:51.244"></status>
</kw>
<status starttime="20170816 10:06:50.605" status="PASS" endtime="20170816 10:06:51.244"></status>
</kw>
<status starttime="20170816 10:06:50.605" status="PASS" endtime="20170816 10:06:51.244"></status>
</kw>
<status starttime="20170816 10:06:50.604" status="PASS" endtime="20170816 10:06:51.244"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:06:51.245" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:06:51.244" status="PASS" endtime="20170816 10:06:51.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:51.247" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:06:51.246" status="PASS" endtime="20170816 10:06:51.247"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:51.248" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:06:51.247" status="PASS" endtime="20170816 10:06:51.248"></status>
</kw>
<status starttime="20170816 10:06:51.247" status="PASS" endtime="20170816 10:06:51.248"></status>
</kw>
<status starttime="20170816 10:06:51.245" status="PASS" endtime="20170816 10:06:51.248"></status>
</kw>
<status starttime="20170816 10:06:51.245" status="PASS" endtime="20170816 10:06:51.248"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:51.811" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:06:51.811" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:51.248" status="PASS" endtime="20170816 10:06:51.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:51.813" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:51.813" status="PASS" endtime="20170816 10:06:51.813"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:51.814" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:51.814" status="PASS" endtime="20170816 10:06:51.814"></status>
</kw>
<status starttime="20170816 10:06:51.813" status="PASS" endtime="20170816 10:06:51.814"></status>
</kw>
<status starttime="20170816 10:06:51.812" status="PASS" endtime="20170816 10:06:51.814"></status>
</kw>
<status starttime="20170816 10:06:51.812" status="PASS" endtime="20170816 10:06:51.814"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:51.815" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:51.815" status="PASS" endtime="20170816 10:06:51.815"></status>
</kw>
<msg timestamp="20170816 10:06:51.815" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:50.604" status="PASS" endtime="20170816 10:06:51.815"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:51.816" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:51.815" status="PASS" endtime="20170816 10:06:51.816"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:51.816" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:51.816" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:51.816" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:51.816" status="PASS" endtime="20170816 10:06:51.816"></status>
</kw>
<msg timestamp="20170816 10:06:51.817" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:06:50.603" status="PASS" endtime="20170816 10:06:51.817"></status>
</kw>
<msg timestamp="20170816 10:06:51.817" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:06:50.602" status="PASS" endtime="20170816 10:06:51.817"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:06:51.817" status="PASS" endtime="20170816 10:06:51.818"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:06:51.822" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:06:51.822" status="PASS" endtime="20170816 10:06:51.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:06:51.823" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:06:51.823" status="PASS" endtime="20170816 10:06:51.823"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:06:51.824" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:06:51.824" status="PASS" endtime="20170816 10:06:51.824"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:06:51.825" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:06:51.824" status="PASS" endtime="20170816 10:06:51.825"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:06:52.128" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:06:51.825" status="PASS" endtime="20170816 10:06:52.128"></status>
</kw>
<msg timestamp="20170816 10:06:52.128" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:06:52.128" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:51.825" status="PASS" endtime="20170816 10:06:52.128"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:06:52.129" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:52.129" status="PASS" endtime="20170816 10:06:52.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:52.130" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:52.129" status="PASS" endtime="20170816 10:06:52.130"></status>
</kw>
<status starttime="20170816 10:06:51.821" status="PASS" endtime="20170816 10:06:52.130"></status>
</kw>
<status starttime="20170816 10:06:51.821" status="PASS" endtime="20170816 10:06:52.130"></status>
</kw>
<status starttime="20170816 10:06:51.820" status="PASS" endtime="20170816 10:06:52.130"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:06:52.131" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:06:52.130" status="PASS" endtime="20170816 10:06:52.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:52.133" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:06:52.132" status="PASS" endtime="20170816 10:06:52.133"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:52.134" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:06:52.133" status="PASS" endtime="20170816 10:06:52.134"></status>
</kw>
<status starttime="20170816 10:06:52.133" status="PASS" endtime="20170816 10:06:52.134"></status>
</kw>
<status starttime="20170816 10:06:52.131" status="PASS" endtime="20170816 10:06:52.134"></status>
</kw>
<status starttime="20170816 10:06:52.131" status="PASS" endtime="20170816 10:06:52.134"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:52.819" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:06:52.819" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:52.134" status="PASS" endtime="20170816 10:06:52.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:52.821" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:52.820" status="PASS" endtime="20170816 10:06:52.821"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:52.822" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:52.821" status="PASS" endtime="20170816 10:06:52.822"></status>
</kw>
<status starttime="20170816 10:06:52.821" status="PASS" endtime="20170816 10:06:52.822"></status>
</kw>
<status starttime="20170816 10:06:52.820" status="PASS" endtime="20170816 10:06:52.822"></status>
</kw>
<status starttime="20170816 10:06:52.819" status="PASS" endtime="20170816 10:06:52.822"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:52.822" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:52.822" status="PASS" endtime="20170816 10:06:52.822"></status>
</kw>
<msg timestamp="20170816 10:06:52.823" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:51.820" status="PASS" endtime="20170816 10:06:52.823"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:52.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:52.823" status="PASS" endtime="20170816 10:06:52.823"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:52.824" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:52.824" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:52.824" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:52.824" status="PASS" endtime="20170816 10:06:52.824"></status>
</kw>
<msg timestamp="20170816 10:06:52.824" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:06:51.819" status="PASS" endtime="20170816 10:06:52.824"></status>
</kw>
<msg timestamp="20170816 10:06:52.824" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:06:51.819" status="PASS" endtime="20170816 10:06:52.825"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:06:52.825" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:06:52.825" status="FAIL" endtime="20170816 10:06:52.825"></status>
</kw>
<status starttime="20170816 10:06:51.818" status="FAIL" endtime="20170816 10:06:52.825"></status>
</kw>
<msg timestamp="20170816 10:06:52.825" level="INFO">${status} = False</msg>
<status starttime="20170816 10:06:51.818" status="PASS" endtime="20170816 10:06:52.826"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:06:52.826" status="PASS" endtime="20170816 10:06:52.826"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:06:52.830" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:06:52.830" status="PASS" endtime="20170816 10:06:52.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:06:52.831" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:06:52.830" status="PASS" endtime="20170816 10:06:52.831"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:06:52.831" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:06:52.831" status="PASS" endtime="20170816 10:06:52.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:06:52.832" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:06:52.832" status="PASS" endtime="20170816 10:06:52.832"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:06:53.240" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:06:52.833" status="PASS" endtime="20170816 10:06:53.240"></status>
</kw>
<msg timestamp="20170816 10:06:53.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:06:53.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:52.832" status="PASS" endtime="20170816 10:06:53.241"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:06:53.241" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:53.241" status="PASS" endtime="20170816 10:06:53.241"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:53.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:53.241" status="PASS" endtime="20170816 10:06:53.242"></status>
</kw>
<status starttime="20170816 10:06:52.829" status="PASS" endtime="20170816 10:06:53.242"></status>
</kw>
<status starttime="20170816 10:06:52.829" status="PASS" endtime="20170816 10:06:53.242"></status>
</kw>
<status starttime="20170816 10:06:52.828" status="PASS" endtime="20170816 10:06:53.242"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:06:53.243" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:06:53.242" status="PASS" endtime="20170816 10:06:53.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:53.245" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:06:53.244" status="PASS" endtime="20170816 10:06:53.245"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:53.246" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:06:53.245" status="PASS" endtime="20170816 10:06:53.246"></status>
</kw>
<status starttime="20170816 10:06:53.245" status="PASS" endtime="20170816 10:06:53.246"></status>
</kw>
<status starttime="20170816 10:06:53.243" status="PASS" endtime="20170816 10:06:53.246"></status>
</kw>
<status starttime="20170816 10:06:53.243" status="PASS" endtime="20170816 10:06:53.246"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:06:53.759" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:06:53.759" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:53.246" status="PASS" endtime="20170816 10:06:53.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:06:53.761" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:53.761" status="PASS" endtime="20170816 10:06:53.761"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:06:53.762" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:06:53.762" status="PASS" endtime="20170816 10:06:53.762"></status>
</kw>
<status starttime="20170816 10:06:53.761" status="PASS" endtime="20170816 10:06:53.762"></status>
</kw>
<status starttime="20170816 10:06:53.760" status="PASS" endtime="20170816 10:06:53.762"></status>
</kw>
<status starttime="20170816 10:06:53.760" status="PASS" endtime="20170816 10:06:53.762"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:06:53.763" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:06:53.763" status="PASS" endtime="20170816 10:06:53.763"></status>
</kw>
<msg timestamp="20170816 10:06:53.763" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:06:52.827" status="PASS" endtime="20170816 10:06:53.763"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:06:53.764" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:06:53.763" status="PASS" endtime="20170816 10:06:53.764"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:06:53.764" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:06:53.764" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:06:53.764" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:06:53.764" status="PASS" endtime="20170816 10:06:53.765"></status>
</kw>
<msg timestamp="20170816 10:06:53.765" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:06:52.827" status="PASS" endtime="20170816 10:06:53.765"></status>
</kw>
<msg timestamp="20170816 10:06:53.765" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:06:52.826" status="PASS" endtime="20170816 10:06:53.765"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:06:53.766" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:06:53.766" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:06:53.765" status="FAIL" endtime="20170816 10:06:53.766"></status>
</kw>
<status starttime="20170816 10:06:51.818" status="FAIL" endtime="20170816 10:06:53.766"></status>
</kw>
<status starttime="20170816 10:06:49.667" status="FAIL" endtime="20170816 10:06:53.766"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:07:03.771" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:07:03.771" status="PASS" endtime="20170816 10:07:03.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:07:03.773" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:07:03.772" status="PASS" endtime="20170816 10:07:03.773"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:07:03.773" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:07:03.773" status="PASS" endtime="20170816 10:07:03.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:07:03.774" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:07:03.774" status="PASS" endtime="20170816 10:07:03.774"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:07:04.168" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:07:03.775" status="PASS" endtime="20170816 10:07:04.168"></status>
</kw>
<msg timestamp="20170816 10:07:04.169" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:07:04.169" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:03.775" status="PASS" endtime="20170816 10:07:04.169"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:07:04.169" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:04.169" status="PASS" endtime="20170816 10:07:04.169"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:04.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:04.170" status="PASS" endtime="20170816 10:07:04.170"></status>
</kw>
<status starttime="20170816 10:07:03.770" status="PASS" endtime="20170816 10:07:04.170"></status>
</kw>
<status starttime="20170816 10:07:03.769" status="PASS" endtime="20170816 10:07:04.170"></status>
</kw>
<status starttime="20170816 10:07:03.769" status="PASS" endtime="20170816 10:07:04.170"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:07:04.171" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:07:04.171" status="PASS" endtime="20170816 10:07:04.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:04.173" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:07:04.172" status="PASS" endtime="20170816 10:07:04.173"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:04.174" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:07:04.174" status="PASS" endtime="20170816 10:07:04.174"></status>
</kw>
<status starttime="20170816 10:07:04.173" status="PASS" endtime="20170816 10:07:04.174"></status>
</kw>
<status starttime="20170816 10:07:04.172" status="PASS" endtime="20170816 10:07:04.174"></status>
</kw>
<status starttime="20170816 10:07:04.171" status="PASS" endtime="20170816 10:07:04.175"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:07:04.448" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:07:04.448" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:04.175" status="PASS" endtime="20170816 10:07:04.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:04.450" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:04.449" status="PASS" endtime="20170816 10:07:04.450"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:04.451" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:04.451" status="PASS" endtime="20170816 10:07:04.451"></status>
</kw>
<status starttime="20170816 10:07:04.450" status="PASS" endtime="20170816 10:07:04.451"></status>
</kw>
<status starttime="20170816 10:07:04.449" status="PASS" endtime="20170816 10:07:04.451"></status>
</kw>
<status starttime="20170816 10:07:04.449" status="PASS" endtime="20170816 10:07:04.451"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:07:04.452" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:07:04.451" status="PASS" endtime="20170816 10:07:04.452"></status>
</kw>
<msg timestamp="20170816 10:07:04.452" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:03.768" status="PASS" endtime="20170816 10:07:04.452"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:04.453" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:04.452" status="PASS" endtime="20170816 10:07:04.453"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:07:04.453" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:07:04.454" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:07:04.454" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:07:04.453" status="PASS" endtime="20170816 10:07:04.454"></status>
</kw>
<msg timestamp="20170816 10:07:04.454" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:07:03.768" status="PASS" endtime="20170816 10:07:04.454"></status>
</kw>
<msg timestamp="20170816 10:07:04.455" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:07:03.767" status="PASS" endtime="20170816 10:07:04.455"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:07:04.455" status="PASS" endtime="20170816 10:07:04.455"></status>
</kw>
<status starttime="20170816 10:07:03.767" status="PASS" endtime="20170816 10:07:04.456"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:07:04.460" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:07:04.459" status="PASS" endtime="20170816 10:07:04.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:07:04.461" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:07:04.461" status="PASS" endtime="20170816 10:07:04.461"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:07:04.462" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:07:04.461" status="PASS" endtime="20170816 10:07:04.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:07:04.462" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:07:04.462" status="PASS" endtime="20170816 10:07:04.462"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:07:04.919" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:07:04.463" status="PASS" endtime="20170816 10:07:04.919"></status>
</kw>
<msg timestamp="20170816 10:07:04.919" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:07:04.919" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:04.463" status="PASS" endtime="20170816 10:07:04.919"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:07:04.920" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:04.920" status="PASS" endtime="20170816 10:07:04.920"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:04.921" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:04.920" status="PASS" endtime="20170816 10:07:04.921"></status>
</kw>
<status starttime="20170816 10:07:04.458" status="PASS" endtime="20170816 10:07:04.921"></status>
</kw>
<status starttime="20170816 10:07:04.458" status="PASS" endtime="20170816 10:07:04.921"></status>
</kw>
<status starttime="20170816 10:07:04.457" status="PASS" endtime="20170816 10:07:04.921"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:07:04.922" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:07:04.921" status="PASS" endtime="20170816 10:07:04.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:04.924" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:07:04.923" status="PASS" endtime="20170816 10:07:04.924"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:04.925" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:07:04.924" status="PASS" endtime="20170816 10:07:04.925"></status>
</kw>
<status starttime="20170816 10:07:04.924" status="PASS" endtime="20170816 10:07:04.925"></status>
</kw>
<status starttime="20170816 10:07:04.922" status="PASS" endtime="20170816 10:07:04.925"></status>
</kw>
<status starttime="20170816 10:07:04.922" status="PASS" endtime="20170816 10:07:04.925"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:07:05.508" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:07:05.508" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:04.925" status="PASS" endtime="20170816 10:07:05.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:05.510" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:05.510" status="PASS" endtime="20170816 10:07:05.510"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:05.511" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:05.511" status="PASS" endtime="20170816 10:07:05.511"></status>
</kw>
<status starttime="20170816 10:07:05.510" status="PASS" endtime="20170816 10:07:05.511"></status>
</kw>
<status starttime="20170816 10:07:05.509" status="PASS" endtime="20170816 10:07:05.511"></status>
</kw>
<status starttime="20170816 10:07:05.509" status="PASS" endtime="20170816 10:07:05.511"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:07:05.512" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:07:05.512" status="PASS" endtime="20170816 10:07:05.512"></status>
</kw>
<msg timestamp="20170816 10:07:05.512" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:04.457" status="PASS" endtime="20170816 10:07:05.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:05.513" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:05.512" status="PASS" endtime="20170816 10:07:05.513"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:07:05.513" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:07:05.513" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:07:05.513" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:07:05.513" status="PASS" endtime="20170816 10:07:05.513"></status>
</kw>
<msg timestamp="20170816 10:07:05.514" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:07:04.456" status="PASS" endtime="20170816 10:07:05.514"></status>
</kw>
<msg timestamp="20170816 10:07:05.514" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:07:04.456" status="PASS" endtime="20170816 10:07:05.514"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:07:05.514" status="PASS" endtime="20170816 10:07:05.515"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:07:05.519" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:07:05.519" status="PASS" endtime="20170816 10:07:05.520"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:07:05.520" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:07:05.520" status="PASS" endtime="20170816 10:07:05.520"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:07:05.521" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:07:05.520" status="PASS" endtime="20170816 10:07:05.521"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:07:05.522" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:07:05.521" status="PASS" endtime="20170816 10:07:05.522"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:07:05.928" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:07:05.522" status="PASS" endtime="20170816 10:07:05.928"></status>
</kw>
<msg timestamp="20170816 10:07:05.928" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:07:05.928" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:05.522" status="PASS" endtime="20170816 10:07:05.928"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:07:05.929" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:05.929" status="PASS" endtime="20170816 10:07:05.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:05.930" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:05.929" status="PASS" endtime="20170816 10:07:05.930"></status>
</kw>
<status starttime="20170816 10:07:05.518" status="PASS" endtime="20170816 10:07:05.930"></status>
</kw>
<status starttime="20170816 10:07:05.518" status="PASS" endtime="20170816 10:07:05.930"></status>
</kw>
<status starttime="20170816 10:07:05.517" status="PASS" endtime="20170816 10:07:05.930"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:07:05.931" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:07:05.930" status="PASS" endtime="20170816 10:07:05.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:05.933" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:07:05.932" status="PASS" endtime="20170816 10:07:05.933"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:05.934" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:07:05.933" status="PASS" endtime="20170816 10:07:05.934"></status>
</kw>
<status starttime="20170816 10:07:05.933" status="PASS" endtime="20170816 10:07:05.934"></status>
</kw>
<status starttime="20170816 10:07:05.931" status="PASS" endtime="20170816 10:07:05.934"></status>
</kw>
<status starttime="20170816 10:07:05.931" status="PASS" endtime="20170816 10:07:05.934"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:07:06.353" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:07:06.353" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:05.934" status="PASS" endtime="20170816 10:07:06.353"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:06.355" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:06.355" status="PASS" endtime="20170816 10:07:06.355"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:06.356" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:06.356" status="PASS" endtime="20170816 10:07:06.356"></status>
</kw>
<status starttime="20170816 10:07:06.355" status="PASS" endtime="20170816 10:07:06.356"></status>
</kw>
<status starttime="20170816 10:07:06.354" status="PASS" endtime="20170816 10:07:06.356"></status>
</kw>
<status starttime="20170816 10:07:06.354" status="PASS" endtime="20170816 10:07:06.356"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:07:06.357" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:07:06.357" status="PASS" endtime="20170816 10:07:06.357"></status>
</kw>
<msg timestamp="20170816 10:07:06.357" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:05.517" status="PASS" endtime="20170816 10:07:06.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:06.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:06.357" status="PASS" endtime="20170816 10:07:06.358"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:07:06.358" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:07:06.358" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:07:06.359" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:07:06.358" status="PASS" endtime="20170816 10:07:06.359"></status>
</kw>
<msg timestamp="20170816 10:07:06.359" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:07:05.516" status="PASS" endtime="20170816 10:07:06.359"></status>
</kw>
<msg timestamp="20170816 10:07:06.359" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:07:05.516" status="PASS" endtime="20170816 10:07:06.359"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:07:06.360" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:07:06.360" status="FAIL" endtime="20170816 10:07:06.360"></status>
</kw>
<status starttime="20170816 10:07:05.516" status="FAIL" endtime="20170816 10:07:06.360"></status>
</kw>
<msg timestamp="20170816 10:07:06.360" level="INFO">${status} = False</msg>
<status starttime="20170816 10:07:05.515" status="PASS" endtime="20170816 10:07:06.360"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:07:06.361" status="PASS" endtime="20170816 10:07:06.361"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:07:06.364" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:07:06.364" status="PASS" endtime="20170816 10:07:06.365"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:07:06.366" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:07:06.365" status="PASS" endtime="20170816 10:07:06.366"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:07:06.366" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:07:06.366" status="PASS" endtime="20170816 10:07:06.366"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:07:06.367" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:07:06.367" status="PASS" endtime="20170816 10:07:06.367"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:07:06.637" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:07:06.368" status="PASS" endtime="20170816 10:07:06.637"></status>
</kw>
<msg timestamp="20170816 10:07:06.637" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:07:06.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:06.367" status="PASS" endtime="20170816 10:07:06.637"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:07:06.638" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:06.638" status="PASS" endtime="20170816 10:07:06.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:06.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:06.638" status="PASS" endtime="20170816 10:07:06.639"></status>
</kw>
<status starttime="20170816 10:07:06.364" status="PASS" endtime="20170816 10:07:06.639"></status>
</kw>
<status starttime="20170816 10:07:06.363" status="PASS" endtime="20170816 10:07:06.639"></status>
</kw>
<status starttime="20170816 10:07:06.363" status="PASS" endtime="20170816 10:07:06.639"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:07:06.640" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:07:06.639" status="PASS" endtime="20170816 10:07:06.640"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:06.642" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:07:06.641" status="PASS" endtime="20170816 10:07:06.642"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:06.643" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:07:06.642" status="PASS" endtime="20170816 10:07:06.643"></status>
</kw>
<status starttime="20170816 10:07:06.642" status="PASS" endtime="20170816 10:07:06.643"></status>
</kw>
<status starttime="20170816 10:07:06.640" status="PASS" endtime="20170816 10:07:06.643"></status>
</kw>
<status starttime="20170816 10:07:06.640" status="PASS" endtime="20170816 10:07:06.643"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:07:07.521" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:07:07.521" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:06.643" status="PASS" endtime="20170816 10:07:07.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:07.523" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:07.522" status="PASS" endtime="20170816 10:07:07.523"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:07.524" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:07.524" status="PASS" endtime="20170816 10:07:07.524"></status>
</kw>
<status starttime="20170816 10:07:07.523" status="PASS" endtime="20170816 10:07:07.524"></status>
</kw>
<status starttime="20170816 10:07:07.522" status="PASS" endtime="20170816 10:07:07.524"></status>
</kw>
<status starttime="20170816 10:07:07.521" status="PASS" endtime="20170816 10:07:07.524"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:07:07.525" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:07:07.524" status="PASS" endtime="20170816 10:07:07.525"></status>
</kw>
<msg timestamp="20170816 10:07:07.525" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:06.362" status="PASS" endtime="20170816 10:07:07.525"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:07.525" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:07.525" status="PASS" endtime="20170816 10:07:07.525"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:07:07.526" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:07:07.526" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:07:07.526" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:07:07.526" status="PASS" endtime="20170816 10:07:07.526"></status>
</kw>
<msg timestamp="20170816 10:07:07.526" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:07:06.361" status="PASS" endtime="20170816 10:07:07.527"></status>
</kw>
<msg timestamp="20170816 10:07:07.527" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:07:06.361" status="PASS" endtime="20170816 10:07:07.527"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:07:07.527" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:07:07.527" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:07:07.527" status="FAIL" endtime="20170816 10:07:07.527"></status>
</kw>
<status starttime="20170816 10:07:05.515" status="FAIL" endtime="20170816 10:07:07.528"></status>
</kw>
<status starttime="20170816 10:07:03.766" status="FAIL" endtime="20170816 10:07:07.528"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:07:17.537" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:07:17.536" status="PASS" endtime="20170816 10:07:17.537"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:07:17.538" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:07:17.537" status="PASS" endtime="20170816 10:07:17.538"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:07:17.538" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:07:17.538" status="PASS" endtime="20170816 10:07:17.538"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:07:17.539" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:07:17.538" status="PASS" endtime="20170816 10:07:17.539"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:07:17.736" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:07:17.540" status="PASS" endtime="20170816 10:07:17.737"></status>
</kw>
<msg timestamp="20170816 10:07:17.737" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:07:17.737" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:17.539" status="PASS" endtime="20170816 10:07:17.737"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:07:17.737" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:17.737" status="PASS" endtime="20170816 10:07:17.737"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:17.738" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:17.738" status="PASS" endtime="20170816 10:07:17.738"></status>
</kw>
<status starttime="20170816 10:07:17.536" status="PASS" endtime="20170816 10:07:17.738"></status>
</kw>
<status starttime="20170816 10:07:17.535" status="PASS" endtime="20170816 10:07:17.738"></status>
</kw>
<status starttime="20170816 10:07:17.535" status="PASS" endtime="20170816 10:07:17.738"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:07:17.739" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:07:17.739" status="PASS" endtime="20170816 10:07:17.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:17.741" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:07:17.740" status="PASS" endtime="20170816 10:07:17.742"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:17.743" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:07:17.742" status="PASS" endtime="20170816 10:07:17.743"></status>
</kw>
<status starttime="20170816 10:07:17.742" status="PASS" endtime="20170816 10:07:17.743"></status>
</kw>
<status starttime="20170816 10:07:17.740" status="PASS" endtime="20170816 10:07:17.743"></status>
</kw>
<status starttime="20170816 10:07:17.739" status="PASS" endtime="20170816 10:07:17.743"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:07:17.815" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:07:17.815" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:17.743" status="PASS" endtime="20170816 10:07:17.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:17.817" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:17.816" status="PASS" endtime="20170816 10:07:17.817"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:17.817" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:17.817" status="PASS" endtime="20170816 10:07:17.818"></status>
</kw>
<status starttime="20170816 10:07:17.817" status="PASS" endtime="20170816 10:07:17.818"></status>
</kw>
<status starttime="20170816 10:07:17.816" status="PASS" endtime="20170816 10:07:17.818"></status>
</kw>
<status starttime="20170816 10:07:17.815" status="PASS" endtime="20170816 10:07:17.818"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:07:17.818" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:07:17.818" status="PASS" endtime="20170816 10:07:17.818"></status>
</kw>
<msg timestamp="20170816 10:07:17.819" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:17.534" status="PASS" endtime="20170816 10:07:17.819"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:17.819" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:17.819" status="PASS" endtime="20170816 10:07:17.819"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:07:17.820" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:07:17.820" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:07:17.820" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:07:17.819" status="PASS" endtime="20170816 10:07:17.820"></status>
</kw>
<msg timestamp="20170816 10:07:17.820" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:07:17.533" status="PASS" endtime="20170816 10:07:17.820"></status>
</kw>
<msg timestamp="20170816 10:07:17.821" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:07:17.529" status="PASS" endtime="20170816 10:07:17.821"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:07:17.821" status="PASS" endtime="20170816 10:07:17.821"></status>
</kw>
<status starttime="20170816 10:07:17.529" status="PASS" endtime="20170816 10:07:17.821"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:07:17.825" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:07:17.824" status="PASS" endtime="20170816 10:07:17.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:07:17.826" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:07:17.825" status="PASS" endtime="20170816 10:07:17.826"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:07:17.826" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:07:17.826" status="PASS" endtime="20170816 10:07:17.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:07:17.827" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:07:17.827" status="PASS" endtime="20170816 10:07:17.827"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:07:18.059" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:07:17.828" status="PASS" endtime="20170816 10:07:18.059"></status>
</kw>
<msg timestamp="20170816 10:07:18.059" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:07:18.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:17.827" status="PASS" endtime="20170816 10:07:18.059"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:07:18.060" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:18.060" status="PASS" endtime="20170816 10:07:18.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:18.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:18.060" status="PASS" endtime="20170816 10:07:18.061"></status>
</kw>
<status starttime="20170816 10:07:17.824" status="PASS" endtime="20170816 10:07:18.061"></status>
</kw>
<status starttime="20170816 10:07:17.824" status="PASS" endtime="20170816 10:07:18.061"></status>
</kw>
<status starttime="20170816 10:07:17.823" status="PASS" endtime="20170816 10:07:18.061"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:07:18.062" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:07:18.062" status="PASS" endtime="20170816 10:07:18.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:18.064" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:07:18.063" status="PASS" endtime="20170816 10:07:18.064"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:18.065" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:07:18.065" status="PASS" endtime="20170816 10:07:18.065"></status>
</kw>
<status starttime="20170816 10:07:18.064" status="PASS" endtime="20170816 10:07:18.065"></status>
</kw>
<status starttime="20170816 10:07:18.063" status="PASS" endtime="20170816 10:07:18.065"></status>
</kw>
<status starttime="20170816 10:07:18.062" status="PASS" endtime="20170816 10:07:18.065"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:07:18.548" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:07:18.548" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:18.066" status="PASS" endtime="20170816 10:07:18.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:18.550" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:18.549" status="PASS" endtime="20170816 10:07:18.550"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:18.551" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:18.551" status="PASS" endtime="20170816 10:07:18.551"></status>
</kw>
<status starttime="20170816 10:07:18.550" status="PASS" endtime="20170816 10:07:18.551"></status>
</kw>
<status starttime="20170816 10:07:18.549" status="PASS" endtime="20170816 10:07:18.551"></status>
</kw>
<status starttime="20170816 10:07:18.548" status="PASS" endtime="20170816 10:07:18.551"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:07:18.552" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:07:18.551" status="PASS" endtime="20170816 10:07:18.552"></status>
</kw>
<msg timestamp="20170816 10:07:18.552" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:17.822" status="PASS" endtime="20170816 10:07:18.552"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:18.553" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:18.552" status="PASS" endtime="20170816 10:07:18.553"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:07:18.553" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:07:18.553" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:07:18.553" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:07:18.553" status="PASS" endtime="20170816 10:07:18.553"></status>
</kw>
<msg timestamp="20170816 10:07:18.554" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:07:17.822" status="PASS" endtime="20170816 10:07:18.554"></status>
</kw>
<msg timestamp="20170816 10:07:18.554" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:07:17.822" status="PASS" endtime="20170816 10:07:18.554"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:07:18.554" status="PASS" endtime="20170816 10:07:18.554"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:07:18.560" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:07:18.559" status="PASS" endtime="20170816 10:07:18.560"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:07:18.561" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:07:18.560" status="PASS" endtime="20170816 10:07:18.561"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:07:18.561" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:07:18.561" status="PASS" endtime="20170816 10:07:18.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:07:18.562" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:07:18.562" status="PASS" endtime="20170816 10:07:18.562"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:07:19.266" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:07:18.563" status="PASS" endtime="20170816 10:07:19.266"></status>
</kw>
<msg timestamp="20170816 10:07:19.266" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:07:19.267" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:18.562" status="PASS" endtime="20170816 10:07:19.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:07:19.267" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:19.267" status="PASS" endtime="20170816 10:07:19.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:19.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:19.268" status="PASS" endtime="20170816 10:07:19.268"></status>
</kw>
<status starttime="20170816 10:07:18.559" status="PASS" endtime="20170816 10:07:19.268"></status>
</kw>
<status starttime="20170816 10:07:18.558" status="PASS" endtime="20170816 10:07:19.268"></status>
</kw>
<status starttime="20170816 10:07:18.557" status="PASS" endtime="20170816 10:07:19.268"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:07:19.269" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:07:19.269" status="PASS" endtime="20170816 10:07:19.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:19.271" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:07:19.270" status="PASS" endtime="20170816 10:07:19.271"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:19.272" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:07:19.272" status="PASS" endtime="20170816 10:07:19.272"></status>
</kw>
<status starttime="20170816 10:07:19.271" status="PASS" endtime="20170816 10:07:19.272"></status>
</kw>
<status starttime="20170816 10:07:19.270" status="PASS" endtime="20170816 10:07:19.272"></status>
</kw>
<status starttime="20170816 10:07:19.269" status="PASS" endtime="20170816 10:07:19.272"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:07:19.662" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:07:19.662" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:19.273" status="PASS" endtime="20170816 10:07:19.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:19.665" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:19.664" status="PASS" endtime="20170816 10:07:19.665"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:19.666" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:19.665" status="PASS" endtime="20170816 10:07:19.666"></status>
</kw>
<status starttime="20170816 10:07:19.665" status="PASS" endtime="20170816 10:07:19.666"></status>
</kw>
<status starttime="20170816 10:07:19.663" status="PASS" endtime="20170816 10:07:19.666"></status>
</kw>
<status starttime="20170816 10:07:19.663" status="PASS" endtime="20170816 10:07:19.666"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:07:19.666" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:07:19.666" status="PASS" endtime="20170816 10:07:19.667"></status>
</kw>
<msg timestamp="20170816 10:07:19.667" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:18.556" status="PASS" endtime="20170816 10:07:19.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:19.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:19.667" status="PASS" endtime="20170816 10:07:19.668"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:07:19.668" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:07:19.668" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:07:19.668" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:07:19.668" status="PASS" endtime="20170816 10:07:19.668"></status>
</kw>
<msg timestamp="20170816 10:07:19.669" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:07:18.556" status="PASS" endtime="20170816 10:07:19.669"></status>
</kw>
<msg timestamp="20170816 10:07:19.669" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:07:18.556" status="PASS" endtime="20170816 10:07:19.669"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:07:19.669" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:07:19.669" status="FAIL" endtime="20170816 10:07:19.670"></status>
</kw>
<status starttime="20170816 10:07:18.555" status="FAIL" endtime="20170816 10:07:19.670"></status>
</kw>
<msg timestamp="20170816 10:07:19.670" level="INFO">${status} = False</msg>
<status starttime="20170816 10:07:18.555" status="PASS" endtime="20170816 10:07:19.670"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:07:19.670" status="PASS" endtime="20170816 10:07:19.670"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:07:19.674" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:07:19.674" status="PASS" endtime="20170816 10:07:19.674"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:07:19.675" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:07:19.675" status="PASS" endtime="20170816 10:07:19.675"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:07:19.676" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:07:19.675" status="PASS" endtime="20170816 10:07:19.676"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:07:19.676" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:07:19.676" status="PASS" endtime="20170816 10:07:19.677"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:07:20.008" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:07:19.678" status="PASS" endtime="20170816 10:07:20.008"></status>
</kw>
<msg timestamp="20170816 10:07:20.008" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:07:20.008" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:19.677" status="PASS" endtime="20170816 10:07:20.008"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:07:20.009" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:20.009" status="PASS" endtime="20170816 10:07:20.009"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:20.010" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:20.009" status="PASS" endtime="20170816 10:07:20.010"></status>
</kw>
<status starttime="20170816 10:07:19.673" status="PASS" endtime="20170816 10:07:20.010"></status>
</kw>
<status starttime="20170816 10:07:19.673" status="PASS" endtime="20170816 10:07:20.010"></status>
</kw>
<status starttime="20170816 10:07:19.672" status="PASS" endtime="20170816 10:07:20.010"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:07:20.011" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:07:20.010" status="PASS" endtime="20170816 10:07:20.011"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:20.013" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:07:20.012" status="PASS" endtime="20170816 10:07:20.013"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:20.014" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:07:20.014" status="PASS" endtime="20170816 10:07:20.014"></status>
</kw>
<status starttime="20170816 10:07:20.013" status="PASS" endtime="20170816 10:07:20.014"></status>
</kw>
<status starttime="20170816 10:07:20.011" status="PASS" endtime="20170816 10:07:20.014"></status>
</kw>
<status starttime="20170816 10:07:20.011" status="PASS" endtime="20170816 10:07:20.015"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:07:23.658" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:07:23.658" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:20.015" status="PASS" endtime="20170816 10:07:23.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:23.660" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:23.659" status="PASS" endtime="20170816 10:07:23.660"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:23.661" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:23.661" status="PASS" endtime="20170816 10:07:23.661"></status>
</kw>
<status starttime="20170816 10:07:23.660" status="PASS" endtime="20170816 10:07:23.661"></status>
</kw>
<status starttime="20170816 10:07:23.659" status="PASS" endtime="20170816 10:07:23.661"></status>
</kw>
<status starttime="20170816 10:07:23.658" status="PASS" endtime="20170816 10:07:23.661"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:07:23.662" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:07:23.662" status="PASS" endtime="20170816 10:07:23.662"></status>
</kw>
<msg timestamp="20170816 10:07:23.662" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:19.672" status="PASS" endtime="20170816 10:07:23.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:23.663" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:23.662" status="PASS" endtime="20170816 10:07:23.663"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:07:23.663" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:07:23.663" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:07:23.663" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:07:23.663" status="PASS" endtime="20170816 10:07:23.663"></status>
</kw>
<msg timestamp="20170816 10:07:23.664" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:07:19.671" status="PASS" endtime="20170816 10:07:23.664"></status>
</kw>
<msg timestamp="20170816 10:07:23.664" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:07:19.671" status="PASS" endtime="20170816 10:07:23.664"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:07:23.664" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:07:23.665" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:07:23.664" status="FAIL" endtime="20170816 10:07:23.665"></status>
</kw>
<status starttime="20170816 10:07:18.555" status="FAIL" endtime="20170816 10:07:23.665"></status>
</kw>
<status starttime="20170816 10:07:17.528" status="FAIL" endtime="20170816 10:07:23.665"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:07:33.670" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:07:33.670" status="PASS" endtime="20170816 10:07:33.671"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:07:33.671" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:07:33.671" status="PASS" endtime="20170816 10:07:33.671"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:07:33.672" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:07:33.671" status="PASS" endtime="20170816 10:07:33.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:07:33.673" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:07:33.672" status="PASS" endtime="20170816 10:07:33.673"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:07:34.856" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:07:33.673" status="PASS" endtime="20170816 10:07:34.856"></status>
</kw>
<msg timestamp="20170816 10:07:34.856" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:07:34.857" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:33.673" status="PASS" endtime="20170816 10:07:34.857"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:07:34.857" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:34.857" status="PASS" endtime="20170816 10:07:34.857"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:34.858" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:34.858" status="PASS" endtime="20170816 10:07:34.858"></status>
</kw>
<status starttime="20170816 10:07:33.669" status="PASS" endtime="20170816 10:07:34.858"></status>
</kw>
<status starttime="20170816 10:07:33.669" status="PASS" endtime="20170816 10:07:34.858"></status>
</kw>
<status starttime="20170816 10:07:33.668" status="PASS" endtime="20170816 10:07:34.858"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:07:34.859" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:07:34.859" status="PASS" endtime="20170816 10:07:34.859"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:34.861" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:07:34.860" status="PASS" endtime="20170816 10:07:34.861"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:34.862" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:07:34.862" status="PASS" endtime="20170816 10:07:34.862"></status>
</kw>
<status starttime="20170816 10:07:34.861" status="PASS" endtime="20170816 10:07:34.862"></status>
</kw>
<status starttime="20170816 10:07:34.860" status="PASS" endtime="20170816 10:07:34.862"></status>
</kw>
<status starttime="20170816 10:07:34.859" status="PASS" endtime="20170816 10:07:34.862"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:07:35.168" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:07:35.168" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:34.863" status="PASS" endtime="20170816 10:07:35.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:35.170" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:35.170" status="PASS" endtime="20170816 10:07:35.170"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:35.171" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:35.171" status="PASS" endtime="20170816 10:07:35.171"></status>
</kw>
<status starttime="20170816 10:07:35.170" status="PASS" endtime="20170816 10:07:35.172"></status>
</kw>
<status starttime="20170816 10:07:35.169" status="PASS" endtime="20170816 10:07:35.172"></status>
</kw>
<status starttime="20170816 10:07:35.169" status="PASS" endtime="20170816 10:07:35.172"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:07:35.172" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:07:35.172" status="PASS" endtime="20170816 10:07:35.172"></status>
</kw>
<msg timestamp="20170816 10:07:35.172" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:33.667" status="PASS" endtime="20170816 10:07:35.172"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:35.173" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:35.173" status="PASS" endtime="20170816 10:07:35.173"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:07:35.174" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:07:35.174" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:07:35.174" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:07:35.173" status="PASS" endtime="20170816 10:07:35.174"></status>
</kw>
<msg timestamp="20170816 10:07:35.174" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170816 10:07:33.667" status="PASS" endtime="20170816 10:07:35.174"></status>
</kw>
<msg timestamp="20170816 10:07:35.174" level="INFO">${power_state} = Off</msg>
<status starttime="20170816 10:07:33.666" status="PASS" endtime="20170816 10:07:35.174"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 10:07:35.175" level="FAIL">On != Off</msg>
<status starttime="20170816 10:07:35.175" status="FAIL" endtime="20170816 10:07:35.175"></status>
</kw>
<status starttime="20170816 10:07:33.666" status="FAIL" endtime="20170816 10:07:35.175"></status>
</kw>
<status starttime="20170816 10:07:33.665" status="FAIL" endtime="20170816 10:07:35.175"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:07:45.181" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:07:45.180" status="PASS" endtime="20170816 10:07:45.181"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:07:45.182" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:07:45.181" status="PASS" endtime="20170816 10:07:45.182"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:07:45.182" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:07:45.182" status="PASS" endtime="20170816 10:07:45.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:07:45.183" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:07:45.183" status="PASS" endtime="20170816 10:07:45.183"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:07:45.579" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:07:45.184" status="PASS" endtime="20170816 10:07:45.579"></status>
</kw>
<msg timestamp="20170816 10:07:45.579" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:07:45.579" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:45.183" status="PASS" endtime="20170816 10:07:45.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:07:45.580" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:45.579" status="PASS" endtime="20170816 10:07:45.580"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:45.581" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:45.580" status="PASS" endtime="20170816 10:07:45.581"></status>
</kw>
<status starttime="20170816 10:07:45.180" status="PASS" endtime="20170816 10:07:45.581"></status>
</kw>
<status starttime="20170816 10:07:45.179" status="PASS" endtime="20170816 10:07:45.581"></status>
</kw>
<status starttime="20170816 10:07:45.178" status="PASS" endtime="20170816 10:07:45.581"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:07:45.582" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:07:45.581" status="PASS" endtime="20170816 10:07:45.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:45.584" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:07:45.583" status="PASS" endtime="20170816 10:07:45.584"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:45.584" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:07:45.584" status="PASS" endtime="20170816 10:07:45.585"></status>
</kw>
<status starttime="20170816 10:07:45.584" status="PASS" endtime="20170816 10:07:45.585"></status>
</kw>
<status starttime="20170816 10:07:45.582" status="PASS" endtime="20170816 10:07:45.585"></status>
</kw>
<status starttime="20170816 10:07:45.582" status="PASS" endtime="20170816 10:07:45.585"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:07:48.142" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:07:48.142" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:45.585" status="PASS" endtime="20170816 10:07:48.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:48.144" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:48.144" status="PASS" endtime="20170816 10:07:48.144"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:48.145" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:48.145" status="PASS" endtime="20170816 10:07:48.145"></status>
</kw>
<status starttime="20170816 10:07:48.145" status="PASS" endtime="20170816 10:07:48.145"></status>
</kw>
<status starttime="20170816 10:07:48.143" status="PASS" endtime="20170816 10:07:48.146"></status>
</kw>
<status starttime="20170816 10:07:48.143" status="PASS" endtime="20170816 10:07:48.146"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:07:48.146" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:07:48.146" status="PASS" endtime="20170816 10:07:48.146"></status>
</kw>
<msg timestamp="20170816 10:07:48.146" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:45.178" status="PASS" endtime="20170816 10:07:48.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:48.147" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:48.147" status="PASS" endtime="20170816 10:07:48.147"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:07:48.147" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:07:48.148" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:07:48.148" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:07:48.147" status="PASS" endtime="20170816 10:07:48.148"></status>
</kw>
<msg timestamp="20170816 10:07:48.148" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170816 10:07:45.177" status="PASS" endtime="20170816 10:07:48.148"></status>
</kw>
<msg timestamp="20170816 10:07:48.148" level="INFO">${power_state} = Off</msg>
<status starttime="20170816 10:07:45.177" status="PASS" endtime="20170816 10:07:48.148"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 10:07:48.149" level="FAIL">On != Off</msg>
<status starttime="20170816 10:07:48.149" status="FAIL" endtime="20170816 10:07:48.149"></status>
</kw>
<status starttime="20170816 10:07:45.176" status="FAIL" endtime="20170816 10:07:48.149"></status>
</kw>
<status starttime="20170816 10:07:45.176" status="FAIL" endtime="20170816 10:07:48.149"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:07:58.154" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:07:58.154" status="PASS" endtime="20170816 10:07:58.154"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:07:58.155" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:07:58.155" status="PASS" endtime="20170816 10:07:58.155"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:07:58.155" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:07:58.155" status="PASS" endtime="20170816 10:07:58.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:07:58.156" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:07:58.156" status="PASS" endtime="20170816 10:07:58.156"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:07:58.382" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:07:58.157" status="PASS" endtime="20170816 10:07:58.382"></status>
</kw>
<msg timestamp="20170816 10:07:58.382" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:07:58.383" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:58.156" status="PASS" endtime="20170816 10:07:58.383"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:07:58.383" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:58.383" status="PASS" endtime="20170816 10:07:58.383"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:58.384" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:58.383" status="PASS" endtime="20170816 10:07:58.384"></status>
</kw>
<status starttime="20170816 10:07:58.153" status="PASS" endtime="20170816 10:07:58.384"></status>
</kw>
<status starttime="20170816 10:07:58.153" status="PASS" endtime="20170816 10:07:58.384"></status>
</kw>
<status starttime="20170816 10:07:58.152" status="PASS" endtime="20170816 10:07:58.384"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:07:58.385" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:07:58.384" status="PASS" endtime="20170816 10:07:58.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:58.387" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:07:58.386" status="PASS" endtime="20170816 10:07:58.387"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:58.388" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:07:58.387" status="PASS" endtime="20170816 10:07:58.388"></status>
</kw>
<status starttime="20170816 10:07:58.387" status="PASS" endtime="20170816 10:07:58.388"></status>
</kw>
<status starttime="20170816 10:07:58.386" status="PASS" endtime="20170816 10:07:58.388"></status>
</kw>
<status starttime="20170816 10:07:58.385" status="PASS" endtime="20170816 10:07:58.388"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:07:58.494" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:07:58.494" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:58.388" status="PASS" endtime="20170816 10:07:58.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:58.496" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:58.496" status="PASS" endtime="20170816 10:07:58.496"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:58.497" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:58.497" status="PASS" endtime="20170816 10:07:58.498"></status>
</kw>
<status starttime="20170816 10:07:58.496" status="PASS" endtime="20170816 10:07:58.498"></status>
</kw>
<status starttime="20170816 10:07:58.495" status="PASS" endtime="20170816 10:07:58.498"></status>
</kw>
<status starttime="20170816 10:07:58.495" status="PASS" endtime="20170816 10:07:58.498"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:07:58.498" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:07:58.498" status="PASS" endtime="20170816 10:07:58.498"></status>
</kw>
<msg timestamp="20170816 10:07:58.498" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:58.151" status="PASS" endtime="20170816 10:07:58.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:58.499" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:58.499" status="PASS" endtime="20170816 10:07:58.499"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:07:58.500" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:07:58.500" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:07:58.500" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:07:58.499" status="PASS" endtime="20170816 10:07:58.500"></status>
</kw>
<msg timestamp="20170816 10:07:58.500" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:07:58.151" status="PASS" endtime="20170816 10:07:58.500"></status>
</kw>
<msg timestamp="20170816 10:07:58.501" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:07:58.150" status="PASS" endtime="20170816 10:07:58.501"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:07:58.501" status="PASS" endtime="20170816 10:07:58.501"></status>
</kw>
<status starttime="20170816 10:07:58.150" status="PASS" endtime="20170816 10:07:58.501"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:07:58.505" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:07:58.504" status="PASS" endtime="20170816 10:07:58.505"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:07:58.506" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:07:58.506" status="PASS" endtime="20170816 10:07:58.506"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:07:58.507" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:07:58.506" status="PASS" endtime="20170816 10:07:58.507"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:07:58.507" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:07:58.507" status="PASS" endtime="20170816 10:07:58.507"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:07:58.695" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:07:58.508" status="PASS" endtime="20170816 10:07:58.695"></status>
</kw>
<msg timestamp="20170816 10:07:58.695" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:07:58.695" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:58.507" status="PASS" endtime="20170816 10:07:58.695"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:07:58.696" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:58.696" status="PASS" endtime="20170816 10:07:58.696"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:58.696" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:58.696" status="PASS" endtime="20170816 10:07:58.697"></status>
</kw>
<status starttime="20170816 10:07:58.504" status="PASS" endtime="20170816 10:07:58.697"></status>
</kw>
<status starttime="20170816 10:07:58.503" status="PASS" endtime="20170816 10:07:58.697"></status>
</kw>
<status starttime="20170816 10:07:58.503" status="PASS" endtime="20170816 10:07:58.697"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:07:58.697" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:07:58.697" status="PASS" endtime="20170816 10:07:58.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:58.700" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:07:58.699" status="PASS" endtime="20170816 10:07:58.700"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:58.702" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:07:58.701" status="PASS" endtime="20170816 10:07:58.702"></status>
</kw>
<status starttime="20170816 10:07:58.700" status="PASS" endtime="20170816 10:07:58.702"></status>
</kw>
<status starttime="20170816 10:07:58.698" status="PASS" endtime="20170816 10:07:58.702"></status>
</kw>
<status starttime="20170816 10:07:58.698" status="PASS" endtime="20170816 10:07:58.702"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:07:58.789" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:07:58.789" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:58.702" status="PASS" endtime="20170816 10:07:58.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:58.791" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:58.790" status="PASS" endtime="20170816 10:07:58.791"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:58.792" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:58.792" status="PASS" endtime="20170816 10:07:58.792"></status>
</kw>
<status starttime="20170816 10:07:58.791" status="PASS" endtime="20170816 10:07:58.792"></status>
</kw>
<status starttime="20170816 10:07:58.790" status="PASS" endtime="20170816 10:07:58.792"></status>
</kw>
<status starttime="20170816 10:07:58.790" status="PASS" endtime="20170816 10:07:58.792"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:07:58.793" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:07:58.793" status="PASS" endtime="20170816 10:07:58.793"></status>
</kw>
<msg timestamp="20170816 10:07:58.793" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:58.502" status="PASS" endtime="20170816 10:07:58.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:58.794" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:58.793" status="PASS" endtime="20170816 10:07:58.794"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:07:58.794" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:07:58.794" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:07:58.794" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:07:58.794" status="PASS" endtime="20170816 10:07:58.794"></status>
</kw>
<msg timestamp="20170816 10:07:58.795" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:07:58.502" status="PASS" endtime="20170816 10:07:58.795"></status>
</kw>
<msg timestamp="20170816 10:07:58.795" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:07:58.501" status="PASS" endtime="20170816 10:07:58.795"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:07:58.795" status="PASS" endtime="20170816 10:07:58.796"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:07:58.800" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:07:58.800" status="PASS" endtime="20170816 10:07:58.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:07:58.801" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:07:58.801" status="PASS" endtime="20170816 10:07:58.801"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:07:58.802" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:07:58.801" status="PASS" endtime="20170816 10:07:58.802"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:07:58.803" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:07:58.802" status="PASS" endtime="20170816 10:07:58.803"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:07:59.005" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:07:58.804" status="PASS" endtime="20170816 10:07:59.005"></status>
</kw>
<msg timestamp="20170816 10:07:59.006" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:07:59.006" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:58.803" status="PASS" endtime="20170816 10:07:59.006"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:07:59.006" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:59.006" status="PASS" endtime="20170816 10:07:59.006"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:59.007" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:59.007" status="PASS" endtime="20170816 10:07:59.007"></status>
</kw>
<status starttime="20170816 10:07:58.799" status="PASS" endtime="20170816 10:07:59.007"></status>
</kw>
<status starttime="20170816 10:07:58.799" status="PASS" endtime="20170816 10:07:59.007"></status>
</kw>
<status starttime="20170816 10:07:58.798" status="PASS" endtime="20170816 10:07:59.007"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:07:59.008" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:07:59.007" status="PASS" endtime="20170816 10:07:59.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:59.012" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:07:59.009" status="PASS" endtime="20170816 10:07:59.013"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:59.013" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:07:59.013" status="PASS" endtime="20170816 10:07:59.014"></status>
</kw>
<status starttime="20170816 10:07:59.013" status="PASS" endtime="20170816 10:07:59.014"></status>
</kw>
<status starttime="20170816 10:07:59.009" status="PASS" endtime="20170816 10:07:59.014"></status>
</kw>
<status starttime="20170816 10:07:59.008" status="PASS" endtime="20170816 10:07:59.014"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:07:59.099" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:07:59.099" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:59.014" status="PASS" endtime="20170816 10:07:59.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:59.101" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:59.100" status="PASS" endtime="20170816 10:07:59.101"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:59.102" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:59.101" status="PASS" endtime="20170816 10:07:59.102"></status>
</kw>
<status starttime="20170816 10:07:59.101" status="PASS" endtime="20170816 10:07:59.102"></status>
</kw>
<status starttime="20170816 10:07:59.100" status="PASS" endtime="20170816 10:07:59.102"></status>
</kw>
<status starttime="20170816 10:07:59.099" status="PASS" endtime="20170816 10:07:59.102"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:07:59.102" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:07:59.102" status="PASS" endtime="20170816 10:07:59.103"></status>
</kw>
<msg timestamp="20170816 10:07:59.103" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:58.798" status="PASS" endtime="20170816 10:07:59.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:59.103" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:59.103" status="PASS" endtime="20170816 10:07:59.103"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:07:59.104" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:07:59.104" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:07:59.104" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:07:59.104" status="PASS" endtime="20170816 10:07:59.104"></status>
</kw>
<msg timestamp="20170816 10:07:59.104" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:07:58.797" status="PASS" endtime="20170816 10:07:59.104"></status>
</kw>
<msg timestamp="20170816 10:07:59.105" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:07:58.797" status="PASS" endtime="20170816 10:07:59.105"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:07:59.106" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:07:59.105" status="FAIL" endtime="20170816 10:07:59.106"></status>
</kw>
<status starttime="20170816 10:07:58.796" status="FAIL" endtime="20170816 10:07:59.106"></status>
</kw>
<msg timestamp="20170816 10:07:59.106" level="INFO">${status} = False</msg>
<status starttime="20170816 10:07:58.796" status="PASS" endtime="20170816 10:07:59.106"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:07:59.107" status="PASS" endtime="20170816 10:07:59.107"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:07:59.112" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:07:59.112" status="PASS" endtime="20170816 10:07:59.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:07:59.114" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:07:59.113" status="PASS" endtime="20170816 10:07:59.114"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:07:59.114" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:07:59.114" status="PASS" endtime="20170816 10:07:59.114"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:07:59.115" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:07:59.115" status="PASS" endtime="20170816 10:07:59.115"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:07:59.301" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:07:59.116" status="PASS" endtime="20170816 10:07:59.301"></status>
</kw>
<msg timestamp="20170816 10:07:59.301" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:07:59.301" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:59.115" status="PASS" endtime="20170816 10:07:59.301"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:07:59.302" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:59.302" status="PASS" endtime="20170816 10:07:59.302"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:59.303" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:59.302" status="PASS" endtime="20170816 10:07:59.303"></status>
</kw>
<status starttime="20170816 10:07:59.111" status="PASS" endtime="20170816 10:07:59.303"></status>
</kw>
<status starttime="20170816 10:07:59.110" status="PASS" endtime="20170816 10:07:59.303"></status>
</kw>
<status starttime="20170816 10:07:59.109" status="PASS" endtime="20170816 10:07:59.303"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:07:59.304" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:07:59.303" status="PASS" endtime="20170816 10:07:59.304"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:59.306" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:07:59.305" status="PASS" endtime="20170816 10:07:59.306"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:59.306" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:07:59.306" status="PASS" endtime="20170816 10:07:59.307"></status>
</kw>
<status starttime="20170816 10:07:59.306" status="PASS" endtime="20170816 10:07:59.307"></status>
</kw>
<status starttime="20170816 10:07:59.304" status="PASS" endtime="20170816 10:07:59.307"></status>
</kw>
<status starttime="20170816 10:07:59.304" status="PASS" endtime="20170816 10:07:59.307"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:07:59.395" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:07:59.395" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:59.307" status="PASS" endtime="20170816 10:07:59.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:07:59.397" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:59.396" status="PASS" endtime="20170816 10:07:59.397"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:07:59.398" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:07:59.397" status="PASS" endtime="20170816 10:07:59.398"></status>
</kw>
<status starttime="20170816 10:07:59.397" status="PASS" endtime="20170816 10:07:59.398"></status>
</kw>
<status starttime="20170816 10:07:59.396" status="PASS" endtime="20170816 10:07:59.398"></status>
</kw>
<status starttime="20170816 10:07:59.395" status="PASS" endtime="20170816 10:07:59.398"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:07:59.398" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:07:59.398" status="PASS" endtime="20170816 10:07:59.398"></status>
</kw>
<msg timestamp="20170816 10:07:59.399" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:07:59.109" status="PASS" endtime="20170816 10:07:59.399"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:07:59.399" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:07:59.399" status="PASS" endtime="20170816 10:07:59.399"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:07:59.400" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:07:59.400" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:07:59.400" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:07:59.400" status="PASS" endtime="20170816 10:07:59.400"></status>
</kw>
<msg timestamp="20170816 10:07:59.400" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:07:59.108" status="PASS" endtime="20170816 10:07:59.400"></status>
</kw>
<msg timestamp="20170816 10:07:59.401" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:07:59.107" status="PASS" endtime="20170816 10:07:59.401"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:07:59.401" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:07:59.401" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:07:59.401" status="FAIL" endtime="20170816 10:07:59.401"></status>
</kw>
<status starttime="20170816 10:07:58.796" status="FAIL" endtime="20170816 10:07:59.402"></status>
</kw>
<status starttime="20170816 10:07:58.150" status="FAIL" endtime="20170816 10:07:59.402"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:08:09.407" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:08:09.406" status="PASS" endtime="20170816 10:08:09.407"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:08:09.408" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:08:09.407" status="PASS" endtime="20170816 10:08:09.408"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:08:09.408" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:08:09.408" status="PASS" endtime="20170816 10:08:09.408"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:08:09.409" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:08:09.409" status="PASS" endtime="20170816 10:08:09.409"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:08:09.593" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:08:09.410" status="PASS" endtime="20170816 10:08:09.593"></status>
</kw>
<msg timestamp="20170816 10:08:09.593" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:08:09.593" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:09.409" status="PASS" endtime="20170816 10:08:09.593"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:08:09.594" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:09.593" status="PASS" endtime="20170816 10:08:09.594"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:09.594" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:09.594" status="PASS" endtime="20170816 10:08:09.594"></status>
</kw>
<status starttime="20170816 10:08:09.405" status="PASS" endtime="20170816 10:08:09.595"></status>
</kw>
<status starttime="20170816 10:08:09.405" status="PASS" endtime="20170816 10:08:09.595"></status>
</kw>
<status starttime="20170816 10:08:09.404" status="PASS" endtime="20170816 10:08:09.595"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:08:09.595" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:08:09.595" status="PASS" endtime="20170816 10:08:09.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:09.597" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:08:09.597" status="PASS" endtime="20170816 10:08:09.597"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:09.598" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:08:09.598" status="PASS" endtime="20170816 10:08:09.598"></status>
</kw>
<status starttime="20170816 10:08:09.598" status="PASS" endtime="20170816 10:08:09.599"></status>
</kw>
<status starttime="20170816 10:08:09.596" status="PASS" endtime="20170816 10:08:09.599"></status>
</kw>
<status starttime="20170816 10:08:09.596" status="PASS" endtime="20170816 10:08:09.599"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:08:09.661" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:08:09.661" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:09.599" status="PASS" endtime="20170816 10:08:09.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:09.662" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:09.662" status="PASS" endtime="20170816 10:08:09.663"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:09.664" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:09.663" status="PASS" endtime="20170816 10:08:09.664"></status>
</kw>
<status starttime="20170816 10:08:09.663" status="PASS" endtime="20170816 10:08:09.664"></status>
</kw>
<status starttime="20170816 10:08:09.661" status="PASS" endtime="20170816 10:08:09.664"></status>
</kw>
<status starttime="20170816 10:08:09.661" status="PASS" endtime="20170816 10:08:09.664"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:08:09.664" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:08:09.664" status="PASS" endtime="20170816 10:08:09.665"></status>
</kw>
<msg timestamp="20170816 10:08:09.665" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:09.404" status="PASS" endtime="20170816 10:08:09.665"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:09.665" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:09.665" status="PASS" endtime="20170816 10:08:09.665"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:08:09.666" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:08:09.666" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:08:09.666" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:08:09.666" status="PASS" endtime="20170816 10:08:09.666"></status>
</kw>
<msg timestamp="20170816 10:08:09.666" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:08:09.403" status="PASS" endtime="20170816 10:08:09.666"></status>
</kw>
<msg timestamp="20170816 10:08:09.667" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:08:09.403" status="PASS" endtime="20170816 10:08:09.667"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:08:09.667" status="PASS" endtime="20170816 10:08:09.667"></status>
</kw>
<status starttime="20170816 10:08:09.403" status="PASS" endtime="20170816 10:08:09.667"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:08:09.671" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:08:09.671" status="PASS" endtime="20170816 10:08:09.671"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:08:09.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:08:09.672" status="PASS" endtime="20170816 10:08:09.672"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:08:09.673" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:08:09.672" status="PASS" endtime="20170816 10:08:09.673"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:08:09.673" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:08:09.673" status="PASS" endtime="20170816 10:08:09.673"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:08:09.882" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:08:09.674" status="PASS" endtime="20170816 10:08:09.882"></status>
</kw>
<msg timestamp="20170816 10:08:09.882" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:08:09.882" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:09.674" status="PASS" endtime="20170816 10:08:09.882"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:08:09.883" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:09.882" status="PASS" endtime="20170816 10:08:09.883"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:09.883" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:09.883" status="PASS" endtime="20170816 10:08:09.883"></status>
</kw>
<status starttime="20170816 10:08:09.670" status="PASS" endtime="20170816 10:08:09.884"></status>
</kw>
<status starttime="20170816 10:08:09.670" status="PASS" endtime="20170816 10:08:09.884"></status>
</kw>
<status starttime="20170816 10:08:09.669" status="PASS" endtime="20170816 10:08:09.884"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:08:09.884" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:08:09.884" status="PASS" endtime="20170816 10:08:09.884"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:09.887" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:08:09.886" status="PASS" endtime="20170816 10:08:09.887"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:09.887" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:08:09.887" status="PASS" endtime="20170816 10:08:09.888"></status>
</kw>
<status starttime="20170816 10:08:09.887" status="PASS" endtime="20170816 10:08:09.888"></status>
</kw>
<status starttime="20170816 10:08:09.885" status="PASS" endtime="20170816 10:08:09.888"></status>
</kw>
<status starttime="20170816 10:08:09.885" status="PASS" endtime="20170816 10:08:09.888"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:08:09.986" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:08:09.986" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:09.888" status="PASS" endtime="20170816 10:08:09.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:09.988" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:09.988" status="PASS" endtime="20170816 10:08:09.988"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:09.989" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:09.989" status="PASS" endtime="20170816 10:08:09.989"></status>
</kw>
<status starttime="20170816 10:08:09.988" status="PASS" endtime="20170816 10:08:09.989"></status>
</kw>
<status starttime="20170816 10:08:09.987" status="PASS" endtime="20170816 10:08:09.989"></status>
</kw>
<status starttime="20170816 10:08:09.987" status="PASS" endtime="20170816 10:08:09.989"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:08:09.990" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:08:09.990" status="PASS" endtime="20170816 10:08:09.990"></status>
</kw>
<msg timestamp="20170816 10:08:09.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:09.668" status="PASS" endtime="20170816 10:08:09.990"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:09.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:09.991" status="PASS" endtime="20170816 10:08:09.991"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:08:09.992" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:08:09.992" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:08:09.992" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:08:09.991" status="PASS" endtime="20170816 10:08:09.992"></status>
</kw>
<msg timestamp="20170816 10:08:09.992" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:08:09.668" status="PASS" endtime="20170816 10:08:09.992"></status>
</kw>
<msg timestamp="20170816 10:08:09.992" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:08:09.668" status="PASS" endtime="20170816 10:08:09.992"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:08:09.993" status="PASS" endtime="20170816 10:08:09.993"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:08:09.997" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:08:09.997" status="PASS" endtime="20170816 10:08:09.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:08:09.999" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:08:09.998" status="PASS" endtime="20170816 10:08:09.999"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:08:09.999" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:08:09.999" status="PASS" endtime="20170816 10:08:09.999"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:08:10.000" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:08:09.999" status="PASS" endtime="20170816 10:08:10.000"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:08:10.192" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:08:10.001" status="PASS" endtime="20170816 10:08:10.192"></status>
</kw>
<msg timestamp="20170816 10:08:10.192" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:08:10.192" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:10.000" status="PASS" endtime="20170816 10:08:10.192"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:08:10.193" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:10.192" status="PASS" endtime="20170816 10:08:10.193"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:10.193" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:10.193" status="PASS" endtime="20170816 10:08:10.193"></status>
</kw>
<status starttime="20170816 10:08:09.996" status="PASS" endtime="20170816 10:08:10.193"></status>
</kw>
<status starttime="20170816 10:08:09.996" status="PASS" endtime="20170816 10:08:10.194"></status>
</kw>
<status starttime="20170816 10:08:09.996" status="PASS" endtime="20170816 10:08:10.194"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:08:10.194" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:08:10.194" status="PASS" endtime="20170816 10:08:10.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:10.196" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:08:10.196" status="PASS" endtime="20170816 10:08:10.196"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:10.197" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:08:10.197" status="PASS" endtime="20170816 10:08:10.197"></status>
</kw>
<status starttime="20170816 10:08:10.196" status="PASS" endtime="20170816 10:08:10.197"></status>
</kw>
<status starttime="20170816 10:08:10.195" status="PASS" endtime="20170816 10:08:10.197"></status>
</kw>
<status starttime="20170816 10:08:10.194" status="PASS" endtime="20170816 10:08:10.197"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:08:10.300" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:08:10.300" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:10.198" status="PASS" endtime="20170816 10:08:10.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:10.302" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:10.302" status="PASS" endtime="20170816 10:08:10.302"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:10.303" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:10.303" status="PASS" endtime="20170816 10:08:10.303"></status>
</kw>
<status starttime="20170816 10:08:10.302" status="PASS" endtime="20170816 10:08:10.303"></status>
</kw>
<status starttime="20170816 10:08:10.301" status="PASS" endtime="20170816 10:08:10.303"></status>
</kw>
<status starttime="20170816 10:08:10.301" status="PASS" endtime="20170816 10:08:10.303"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:08:10.304" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:08:10.304" status="PASS" endtime="20170816 10:08:10.304"></status>
</kw>
<msg timestamp="20170816 10:08:10.304" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:09.995" status="PASS" endtime="20170816 10:08:10.304"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:10.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:10.304" status="PASS" endtime="20170816 10:08:10.305"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:08:10.305" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:08:10.305" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:08:10.305" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:08:10.305" status="PASS" endtime="20170816 10:08:10.306"></status>
</kw>
<msg timestamp="20170816 10:08:10.306" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:08:09.994" status="PASS" endtime="20170816 10:08:10.306"></status>
</kw>
<msg timestamp="20170816 10:08:10.306" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:08:09.994" status="PASS" endtime="20170816 10:08:10.306"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:08:10.307" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:08:10.306" status="FAIL" endtime="20170816 10:08:10.307"></status>
</kw>
<status starttime="20170816 10:08:09.994" status="FAIL" endtime="20170816 10:08:10.307"></status>
</kw>
<msg timestamp="20170816 10:08:10.307" level="INFO">${status} = False</msg>
<status starttime="20170816 10:08:09.993" status="PASS" endtime="20170816 10:08:10.307"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:08:10.307" status="PASS" endtime="20170816 10:08:10.308"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:08:10.312" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:08:10.311" status="PASS" endtime="20170816 10:08:10.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:08:10.312" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:08:10.312" status="PASS" endtime="20170816 10:08:10.312"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:08:10.313" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:08:10.313" status="PASS" endtime="20170816 10:08:10.313"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:08:10.314" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:08:10.313" status="PASS" endtime="20170816 10:08:10.314"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:08:10.557" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:08:10.314" status="PASS" endtime="20170816 10:08:10.557"></status>
</kw>
<msg timestamp="20170816 10:08:10.557" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:08:10.557" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:10.314" status="PASS" endtime="20170816 10:08:10.557"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:08:10.558" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:10.558" status="PASS" endtime="20170816 10:08:10.558"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:10.559" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:10.558" status="PASS" endtime="20170816 10:08:10.559"></status>
</kw>
<status starttime="20170816 10:08:10.311" status="PASS" endtime="20170816 10:08:10.559"></status>
</kw>
<status starttime="20170816 10:08:10.310" status="PASS" endtime="20170816 10:08:10.559"></status>
</kw>
<status starttime="20170816 10:08:10.309" status="PASS" endtime="20170816 10:08:10.559"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:08:10.560" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:08:10.559" status="PASS" endtime="20170816 10:08:10.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:10.563" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:08:10.562" status="PASS" endtime="20170816 10:08:10.563"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:10.564" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:08:10.564" status="PASS" endtime="20170816 10:08:10.565"></status>
</kw>
<status starttime="20170816 10:08:10.563" status="PASS" endtime="20170816 10:08:10.565"></status>
</kw>
<status starttime="20170816 10:08:10.561" status="PASS" endtime="20170816 10:08:10.565"></status>
</kw>
<status starttime="20170816 10:08:10.560" status="PASS" endtime="20170816 10:08:10.565"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:08:10.653" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:08:10.654" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:10.565" status="PASS" endtime="20170816 10:08:10.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:10.656" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:10.655" status="PASS" endtime="20170816 10:08:10.656"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:10.657" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:10.656" status="PASS" endtime="20170816 10:08:10.657"></status>
</kw>
<status starttime="20170816 10:08:10.656" status="PASS" endtime="20170816 10:08:10.657"></status>
</kw>
<status starttime="20170816 10:08:10.654" status="PASS" endtime="20170816 10:08:10.657"></status>
</kw>
<status starttime="20170816 10:08:10.654" status="PASS" endtime="20170816 10:08:10.657"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:08:10.657" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:08:10.657" status="PASS" endtime="20170816 10:08:10.658"></status>
</kw>
<msg timestamp="20170816 10:08:10.658" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:10.309" status="PASS" endtime="20170816 10:08:10.658"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:10.658" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:10.658" status="PASS" endtime="20170816 10:08:10.658"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:08:10.659" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:08:10.659" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:08:10.659" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:08:10.659" status="PASS" endtime="20170816 10:08:10.659"></status>
</kw>
<msg timestamp="20170816 10:08:10.659" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:08:10.308" status="PASS" endtime="20170816 10:08:10.659"></status>
</kw>
<msg timestamp="20170816 10:08:10.660" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:08:10.308" status="PASS" endtime="20170816 10:08:10.660"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:08:10.660" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:08:10.660" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:08:10.660" status="FAIL" endtime="20170816 10:08:10.660"></status>
</kw>
<status starttime="20170816 10:08:09.993" status="FAIL" endtime="20170816 10:08:10.661"></status>
</kw>
<status starttime="20170816 10:08:09.402" status="FAIL" endtime="20170816 10:08:10.661"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:08:20.667" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:08:20.667" status="PASS" endtime="20170816 10:08:20.667"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:08:20.668" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:08:20.668" status="PASS" endtime="20170816 10:08:20.668"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:08:20.669" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:08:20.668" status="PASS" endtime="20170816 10:08:20.669"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:08:20.669" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:08:20.669" status="PASS" endtime="20170816 10:08:20.669"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:08:21.242" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:08:20.670" status="PASS" endtime="20170816 10:08:21.242"></status>
</kw>
<msg timestamp="20170816 10:08:21.242" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:08:21.243" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:20.670" status="PASS" endtime="20170816 10:08:21.243"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:08:21.243" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:21.243" status="PASS" endtime="20170816 10:08:21.244"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:21.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:21.244" status="PASS" endtime="20170816 10:08:21.245"></status>
</kw>
<status starttime="20170816 10:08:20.666" status="PASS" endtime="20170816 10:08:21.245"></status>
</kw>
<status starttime="20170816 10:08:20.666" status="PASS" endtime="20170816 10:08:21.245"></status>
</kw>
<status starttime="20170816 10:08:20.665" status="PASS" endtime="20170816 10:08:21.245"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:08:21.246" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:08:21.245" status="PASS" endtime="20170816 10:08:21.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:21.249" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:08:21.248" status="PASS" endtime="20170816 10:08:21.249"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:21.250" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:08:21.250" status="PASS" endtime="20170816 10:08:21.250"></status>
</kw>
<status starttime="20170816 10:08:21.249" status="PASS" endtime="20170816 10:08:21.251"></status>
</kw>
<status starttime="20170816 10:08:21.247" status="PASS" endtime="20170816 10:08:21.251"></status>
</kw>
<status starttime="20170816 10:08:21.246" status="PASS" endtime="20170816 10:08:21.251"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:08:21.788" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:08:21.789" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:21.251" status="PASS" endtime="20170816 10:08:21.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:21.790" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:21.790" status="PASS" endtime="20170816 10:08:21.791"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:21.791" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:21.791" status="PASS" endtime="20170816 10:08:21.791"></status>
</kw>
<status starttime="20170816 10:08:21.791" status="PASS" endtime="20170816 10:08:21.792"></status>
</kw>
<status starttime="20170816 10:08:21.789" status="PASS" endtime="20170816 10:08:21.792"></status>
</kw>
<status starttime="20170816 10:08:21.789" status="PASS" endtime="20170816 10:08:21.792"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:08:21.792" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:08:21.792" status="PASS" endtime="20170816 10:08:21.792"></status>
</kw>
<msg timestamp="20170816 10:08:21.793" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:20.664" status="PASS" endtime="20170816 10:08:21.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:21.793" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:21.793" status="PASS" endtime="20170816 10:08:21.793"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:08:21.794" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:08:21.794" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:08:21.794" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:08:21.794" status="PASS" endtime="20170816 10:08:21.794"></status>
</kw>
<msg timestamp="20170816 10:08:21.794" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:08:20.664" status="PASS" endtime="20170816 10:08:21.794"></status>
</kw>
<msg timestamp="20170816 10:08:21.795" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:08:20.663" status="PASS" endtime="20170816 10:08:21.795"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:08:21.795" status="PASS" endtime="20170816 10:08:21.795"></status>
</kw>
<status starttime="20170816 10:08:20.663" status="PASS" endtime="20170816 10:08:21.795"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:08:21.799" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:08:21.798" status="PASS" endtime="20170816 10:08:21.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:08:21.800" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:08:21.800" status="PASS" endtime="20170816 10:08:21.800"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:08:21.801" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:08:21.800" status="PASS" endtime="20170816 10:08:21.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:08:21.801" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:08:21.801" status="PASS" endtime="20170816 10:08:21.802"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:08:22.444" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:08:21.802" status="PASS" endtime="20170816 10:08:22.444"></status>
</kw>
<msg timestamp="20170816 10:08:22.444" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:08:22.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:21.802" status="PASS" endtime="20170816 10:08:22.444"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:08:22.445" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:22.445" status="PASS" endtime="20170816 10:08:22.445"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:22.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:22.445" status="PASS" endtime="20170816 10:08:22.446"></status>
</kw>
<status starttime="20170816 10:08:21.798" status="PASS" endtime="20170816 10:08:22.446"></status>
</kw>
<status starttime="20170816 10:08:21.798" status="PASS" endtime="20170816 10:08:22.446"></status>
</kw>
<status starttime="20170816 10:08:21.797" status="PASS" endtime="20170816 10:08:22.446"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:08:22.447" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:08:22.446" status="PASS" endtime="20170816 10:08:22.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:22.449" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:08:22.448" status="PASS" endtime="20170816 10:08:22.449"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:22.450" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:08:22.449" status="PASS" endtime="20170816 10:08:22.450"></status>
</kw>
<status starttime="20170816 10:08:22.449" status="PASS" endtime="20170816 10:08:22.450"></status>
</kw>
<status starttime="20170816 10:08:22.447" status="PASS" endtime="20170816 10:08:22.450"></status>
</kw>
<status starttime="20170816 10:08:22.447" status="PASS" endtime="20170816 10:08:22.450"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:08:23.060" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:08:23.061" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:22.450" status="PASS" endtime="20170816 10:08:23.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:23.063" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:23.062" status="PASS" endtime="20170816 10:08:23.063"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:23.063" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:23.063" status="PASS" endtime="20170816 10:08:23.064"></status>
</kw>
<status starttime="20170816 10:08:23.063" status="PASS" endtime="20170816 10:08:23.064"></status>
</kw>
<status starttime="20170816 10:08:23.061" status="PASS" endtime="20170816 10:08:23.064"></status>
</kw>
<status starttime="20170816 10:08:23.061" status="PASS" endtime="20170816 10:08:23.064"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:08:23.064" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:08:23.064" status="PASS" endtime="20170816 10:08:23.064"></status>
</kw>
<msg timestamp="20170816 10:08:23.065" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:21.796" status="PASS" endtime="20170816 10:08:23.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:23.065" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:23.065" status="PASS" endtime="20170816 10:08:23.065"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:08:23.066" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:08:23.066" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:08:23.066" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:08:23.066" status="PASS" endtime="20170816 10:08:23.066"></status>
</kw>
<msg timestamp="20170816 10:08:23.066" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:08:21.796" status="PASS" endtime="20170816 10:08:23.066"></status>
</kw>
<msg timestamp="20170816 10:08:23.067" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:08:21.795" status="PASS" endtime="20170816 10:08:23.067"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:08:23.067" status="PASS" endtime="20170816 10:08:23.067"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:08:23.073" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:08:23.072" status="PASS" endtime="20170816 10:08:23.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:08:23.074" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:08:23.073" status="PASS" endtime="20170816 10:08:23.074"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:08:23.074" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:08:23.074" status="PASS" endtime="20170816 10:08:23.074"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:08:23.075" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:08:23.075" status="PASS" endtime="20170816 10:08:23.075"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:08:23.431" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:08:23.076" status="PASS" endtime="20170816 10:08:23.431"></status>
</kw>
<msg timestamp="20170816 10:08:23.431" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:08:23.431" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:23.075" status="PASS" endtime="20170816 10:08:23.431"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:08:23.432" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:23.432" status="PASS" endtime="20170816 10:08:23.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:23.433" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:23.432" status="PASS" endtime="20170816 10:08:23.433"></status>
</kw>
<status starttime="20170816 10:08:23.072" status="PASS" endtime="20170816 10:08:23.433"></status>
</kw>
<status starttime="20170816 10:08:23.071" status="PASS" endtime="20170816 10:08:23.433"></status>
</kw>
<status starttime="20170816 10:08:23.071" status="PASS" endtime="20170816 10:08:23.433"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:08:23.434" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:08:23.433" status="PASS" endtime="20170816 10:08:23.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:23.436" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:08:23.435" status="PASS" endtime="20170816 10:08:23.436"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:23.437" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:08:23.437" status="PASS" endtime="20170816 10:08:23.437"></status>
</kw>
<status starttime="20170816 10:08:23.436" status="PASS" endtime="20170816 10:08:23.437"></status>
</kw>
<status starttime="20170816 10:08:23.434" status="PASS" endtime="20170816 10:08:23.437"></status>
</kw>
<status starttime="20170816 10:08:23.434" status="PASS" endtime="20170816 10:08:23.437"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:08:23.909" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:08:23.910" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:23.438" status="PASS" endtime="20170816 10:08:23.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:23.911" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:23.911" status="PASS" endtime="20170816 10:08:23.911"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:23.912" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:23.912" status="PASS" endtime="20170816 10:08:23.913"></status>
</kw>
<status starttime="20170816 10:08:23.912" status="PASS" endtime="20170816 10:08:23.913"></status>
</kw>
<status starttime="20170816 10:08:23.910" status="PASS" endtime="20170816 10:08:23.913"></status>
</kw>
<status starttime="20170816 10:08:23.910" status="PASS" endtime="20170816 10:08:23.913"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:08:23.913" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:08:23.913" status="PASS" endtime="20170816 10:08:23.913"></status>
</kw>
<msg timestamp="20170816 10:08:23.913" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:23.070" status="PASS" endtime="20170816 10:08:23.914"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:23.914" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:23.914" status="PASS" endtime="20170816 10:08:23.914"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:08:23.915" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:08:23.915" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:08:23.915" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:08:23.914" status="PASS" endtime="20170816 10:08:23.915"></status>
</kw>
<msg timestamp="20170816 10:08:23.915" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:08:23.070" status="PASS" endtime="20170816 10:08:23.915"></status>
</kw>
<msg timestamp="20170816 10:08:23.915" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:08:23.069" status="PASS" endtime="20170816 10:08:23.915"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:08:23.916" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:08:23.916" status="FAIL" endtime="20170816 10:08:23.916"></status>
</kw>
<status starttime="20170816 10:08:23.068" status="FAIL" endtime="20170816 10:08:23.916"></status>
</kw>
<msg timestamp="20170816 10:08:23.916" level="INFO">${status} = False</msg>
<status starttime="20170816 10:08:23.068" status="PASS" endtime="20170816 10:08:23.916"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:08:23.917" status="PASS" endtime="20170816 10:08:23.917"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:08:23.921" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:08:23.920" status="PASS" endtime="20170816 10:08:23.921"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:08:23.921" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:08:23.921" status="PASS" endtime="20170816 10:08:23.921"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:08:23.922" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:08:23.922" status="PASS" endtime="20170816 10:08:23.922"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:08:23.923" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:08:23.922" status="PASS" endtime="20170816 10:08:23.923"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:08:24.435" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:08:23.923" status="PASS" endtime="20170816 10:08:24.435"></status>
</kw>
<msg timestamp="20170816 10:08:24.435" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:08:24.435" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:23.923" status="PASS" endtime="20170816 10:08:24.435"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:08:24.436" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:24.436" status="PASS" endtime="20170816 10:08:24.436"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:24.437" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:24.436" status="PASS" endtime="20170816 10:08:24.437"></status>
</kw>
<status starttime="20170816 10:08:23.920" status="PASS" endtime="20170816 10:08:24.437"></status>
</kw>
<status starttime="20170816 10:08:23.919" status="PASS" endtime="20170816 10:08:24.437"></status>
</kw>
<status starttime="20170816 10:08:23.919" status="PASS" endtime="20170816 10:08:24.437"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:08:24.438" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:08:24.437" status="PASS" endtime="20170816 10:08:24.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:24.440" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:08:24.439" status="PASS" endtime="20170816 10:08:24.440"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:24.441" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:08:24.440" status="PASS" endtime="20170816 10:08:24.441"></status>
</kw>
<status starttime="20170816 10:08:24.440" status="PASS" endtime="20170816 10:08:24.441"></status>
</kw>
<status starttime="20170816 10:08:24.438" status="PASS" endtime="20170816 10:08:24.441"></status>
</kw>
<status starttime="20170816 10:08:24.438" status="PASS" endtime="20170816 10:08:24.441"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:08:25.525" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:08:25.526" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:24.441" status="PASS" endtime="20170816 10:08:25.526"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:25.528" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:25.527" status="PASS" endtime="20170816 10:08:25.528"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:25.528" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:25.528" status="PASS" endtime="20170816 10:08:25.529"></status>
</kw>
<status starttime="20170816 10:08:25.528" status="PASS" endtime="20170816 10:08:25.529"></status>
</kw>
<status starttime="20170816 10:08:25.527" status="PASS" endtime="20170816 10:08:25.529"></status>
</kw>
<status starttime="20170816 10:08:25.526" status="PASS" endtime="20170816 10:08:25.529"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:08:25.529" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:08:25.529" status="PASS" endtime="20170816 10:08:25.529"></status>
</kw>
<msg timestamp="20170816 10:08:25.530" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:23.918" status="PASS" endtime="20170816 10:08:25.530"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:25.530" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:25.530" status="PASS" endtime="20170816 10:08:25.530"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:08:25.531" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:08:25.531" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:08:25.531" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:08:25.530" status="PASS" endtime="20170816 10:08:25.531"></status>
</kw>
<msg timestamp="20170816 10:08:25.531" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:08:23.918" status="PASS" endtime="20170816 10:08:25.531"></status>
</kw>
<msg timestamp="20170816 10:08:25.531" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:08:23.917" status="PASS" endtime="20170816 10:08:25.531"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:08:25.532" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:08:25.532" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:08:25.532" status="FAIL" endtime="20170816 10:08:25.532"></status>
</kw>
<status starttime="20170816 10:08:23.067" status="FAIL" endtime="20170816 10:08:25.533"></status>
</kw>
<status starttime="20170816 10:08:20.662" status="FAIL" endtime="20170816 10:08:25.533"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:08:35.538" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:08:35.538" status="PASS" endtime="20170816 10:08:35.539"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:08:35.539" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:08:35.539" status="PASS" endtime="20170816 10:08:35.539"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:08:35.540" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:08:35.539" status="PASS" endtime="20170816 10:08:35.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:08:35.540" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:08:35.540" status="PASS" endtime="20170816 10:08:35.540"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:08:35.890" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:08:35.541" status="PASS" endtime="20170816 10:08:35.890"></status>
</kw>
<msg timestamp="20170816 10:08:35.890" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:08:35.890" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:35.541" status="PASS" endtime="20170816 10:08:35.890"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:08:35.891" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:35.890" status="PASS" endtime="20170816 10:08:35.891"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:35.891" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:35.891" status="PASS" endtime="20170816 10:08:35.892"></status>
</kw>
<status starttime="20170816 10:08:35.537" status="PASS" endtime="20170816 10:08:35.892"></status>
</kw>
<status starttime="20170816 10:08:35.536" status="PASS" endtime="20170816 10:08:35.892"></status>
</kw>
<status starttime="20170816 10:08:35.536" status="PASS" endtime="20170816 10:08:35.892"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:08:35.893" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:08:35.892" status="PASS" endtime="20170816 10:08:35.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:35.895" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:08:35.894" status="PASS" endtime="20170816 10:08:35.895"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:35.895" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:08:35.895" status="PASS" endtime="20170816 10:08:35.896"></status>
</kw>
<status starttime="20170816 10:08:35.895" status="PASS" endtime="20170816 10:08:35.896"></status>
</kw>
<status starttime="20170816 10:08:35.893" status="PASS" endtime="20170816 10:08:35.896"></status>
</kw>
<status starttime="20170816 10:08:35.893" status="PASS" endtime="20170816 10:08:35.896"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:08:36.118" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:08:36.118" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:35.896" status="PASS" endtime="20170816 10:08:36.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:36.120" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:36.120" status="PASS" endtime="20170816 10:08:36.120"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:36.121" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:36.121" status="PASS" endtime="20170816 10:08:36.122"></status>
</kw>
<status starttime="20170816 10:08:36.120" status="PASS" endtime="20170816 10:08:36.122"></status>
</kw>
<status starttime="20170816 10:08:36.119" status="PASS" endtime="20170816 10:08:36.122"></status>
</kw>
<status starttime="20170816 10:08:36.119" status="PASS" endtime="20170816 10:08:36.122"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:08:36.122" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:08:36.122" status="PASS" endtime="20170816 10:08:36.122"></status>
</kw>
<msg timestamp="20170816 10:08:36.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:35.535" status="PASS" endtime="20170816 10:08:36.123"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:36.123" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:36.123" status="PASS" endtime="20170816 10:08:36.123"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:08:36.124" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:08:36.124" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:08:36.124" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:08:36.124" status="PASS" endtime="20170816 10:08:36.124"></status>
</kw>
<msg timestamp="20170816 10:08:36.124" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:08:35.535" status="PASS" endtime="20170816 10:08:36.124"></status>
</kw>
<msg timestamp="20170816 10:08:36.125" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:08:35.534" status="PASS" endtime="20170816 10:08:36.125"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:08:36.125" status="PASS" endtime="20170816 10:08:36.125"></status>
</kw>
<status starttime="20170816 10:08:35.534" status="PASS" endtime="20170816 10:08:36.125"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:08:36.129" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:08:36.128" status="PASS" endtime="20170816 10:08:36.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:08:36.130" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:08:36.129" status="PASS" endtime="20170816 10:08:36.130"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:08:36.130" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:08:36.130" status="PASS" endtime="20170816 10:08:36.130"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:08:36.131" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:08:36.131" status="PASS" endtime="20170816 10:08:36.131"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:08:36.615" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:08:36.132" status="PASS" endtime="20170816 10:08:36.615"></status>
</kw>
<msg timestamp="20170816 10:08:36.616" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:08:36.616" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:36.131" status="PASS" endtime="20170816 10:08:36.616"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:08:36.616" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:36.616" status="PASS" endtime="20170816 10:08:36.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:36.617" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:36.617" status="PASS" endtime="20170816 10:08:36.617"></status>
</kw>
<status starttime="20170816 10:08:36.128" status="PASS" endtime="20170816 10:08:36.617"></status>
</kw>
<status starttime="20170816 10:08:36.128" status="PASS" endtime="20170816 10:08:36.617"></status>
</kw>
<status starttime="20170816 10:08:36.127" status="PASS" endtime="20170816 10:08:36.617"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:08:36.618" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:08:36.618" status="PASS" endtime="20170816 10:08:36.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:36.620" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:08:36.619" status="PASS" endtime="20170816 10:08:36.620"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:36.621" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:08:36.621" status="PASS" endtime="20170816 10:08:36.621"></status>
</kw>
<status starttime="20170816 10:08:36.621" status="PASS" endtime="20170816 10:08:36.622"></status>
</kw>
<status starttime="20170816 10:08:36.619" status="PASS" endtime="20170816 10:08:36.622"></status>
</kw>
<status starttime="20170816 10:08:36.618" status="PASS" endtime="20170816 10:08:36.622"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:08:37.316" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:08:37.316" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:36.622" status="PASS" endtime="20170816 10:08:37.316"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:37.318" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:37.317" status="PASS" endtime="20170816 10:08:37.318"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:37.319" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:37.318" status="PASS" endtime="20170816 10:08:37.319"></status>
</kw>
<status starttime="20170816 10:08:37.318" status="PASS" endtime="20170816 10:08:37.319"></status>
</kw>
<status starttime="20170816 10:08:37.317" status="PASS" endtime="20170816 10:08:37.319"></status>
</kw>
<status starttime="20170816 10:08:37.316" status="PASS" endtime="20170816 10:08:37.319"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:08:37.319" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:08:37.319" status="PASS" endtime="20170816 10:08:37.320"></status>
</kw>
<msg timestamp="20170816 10:08:37.320" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:36.126" status="PASS" endtime="20170816 10:08:37.320"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:37.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:37.320" status="PASS" endtime="20170816 10:08:37.320"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:08:37.321" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:08:37.321" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:08:37.321" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:08:37.321" status="PASS" endtime="20170816 10:08:37.321"></status>
</kw>
<msg timestamp="20170816 10:08:37.322" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:08:36.126" status="PASS" endtime="20170816 10:08:37.322"></status>
</kw>
<msg timestamp="20170816 10:08:37.322" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:08:36.125" status="PASS" endtime="20170816 10:08:37.322"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:08:37.322" status="PASS" endtime="20170816 10:08:37.322"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:08:37.327" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:08:37.327" status="PASS" endtime="20170816 10:08:37.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:08:37.328" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:08:37.328" status="PASS" endtime="20170816 10:08:37.328"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:08:37.329" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:08:37.329" status="PASS" endtime="20170816 10:08:37.329"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:08:37.329" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:08:37.329" status="PASS" endtime="20170816 10:08:37.330"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:08:37.680" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:08:37.330" status="PASS" endtime="20170816 10:08:37.680"></status>
</kw>
<msg timestamp="20170816 10:08:37.680" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:08:37.680" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:37.330" status="PASS" endtime="20170816 10:08:37.680"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:08:37.681" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:37.681" status="PASS" endtime="20170816 10:08:37.681"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:37.682" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:37.681" status="PASS" endtime="20170816 10:08:37.682"></status>
</kw>
<status starttime="20170816 10:08:37.326" status="PASS" endtime="20170816 10:08:37.682"></status>
</kw>
<status starttime="20170816 10:08:37.326" status="PASS" endtime="20170816 10:08:37.682"></status>
</kw>
<status starttime="20170816 10:08:37.325" status="PASS" endtime="20170816 10:08:37.682"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:08:37.683" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:08:37.682" status="PASS" endtime="20170816 10:08:37.683"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:37.685" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:08:37.684" status="PASS" endtime="20170816 10:08:37.685"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:37.686" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:08:37.686" status="PASS" endtime="20170816 10:08:37.686"></status>
</kw>
<status starttime="20170816 10:08:37.685" status="PASS" endtime="20170816 10:08:37.686"></status>
</kw>
<status starttime="20170816 10:08:37.684" status="PASS" endtime="20170816 10:08:37.686"></status>
</kw>
<status starttime="20170816 10:08:37.683" status="PASS" endtime="20170816 10:08:37.686"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:08:38.117" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:08:38.117" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:37.686" status="PASS" endtime="20170816 10:08:38.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:38.119" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:38.118" status="PASS" endtime="20170816 10:08:38.119"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:38.120" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:38.119" status="PASS" endtime="20170816 10:08:38.120"></status>
</kw>
<status starttime="20170816 10:08:38.119" status="PASS" endtime="20170816 10:08:38.120"></status>
</kw>
<status starttime="20170816 10:08:38.118" status="PASS" endtime="20170816 10:08:38.120"></status>
</kw>
<status starttime="20170816 10:08:38.117" status="PASS" endtime="20170816 10:08:38.120"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:08:38.121" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:08:38.121" status="PASS" endtime="20170816 10:08:38.121"></status>
</kw>
<msg timestamp="20170816 10:08:38.121" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:37.325" status="PASS" endtime="20170816 10:08:38.121"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:38.122" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:38.121" status="PASS" endtime="20170816 10:08:38.122"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:08:38.122" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:08:38.122" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:08:38.122" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:08:38.122" status="PASS" endtime="20170816 10:08:38.122"></status>
</kw>
<msg timestamp="20170816 10:08:38.123" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:08:37.324" status="PASS" endtime="20170816 10:08:38.123"></status>
</kw>
<msg timestamp="20170816 10:08:38.123" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:08:37.324" status="PASS" endtime="20170816 10:08:38.123"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:08:38.124" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:08:38.123" status="FAIL" endtime="20170816 10:08:38.124"></status>
</kw>
<status starttime="20170816 10:08:37.323" status="FAIL" endtime="20170816 10:08:38.124"></status>
</kw>
<msg timestamp="20170816 10:08:38.124" level="INFO">${status} = False</msg>
<status starttime="20170816 10:08:37.323" status="PASS" endtime="20170816 10:08:38.124"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:08:38.124" status="PASS" endtime="20170816 10:08:38.125"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:08:38.129" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:08:38.128" status="PASS" endtime="20170816 10:08:38.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:08:38.130" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:08:38.129" status="PASS" endtime="20170816 10:08:38.130"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:08:38.130" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:08:38.130" status="PASS" endtime="20170816 10:08:38.130"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:08:38.131" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:08:38.130" status="PASS" endtime="20170816 10:08:38.131"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:08:38.532" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:08:38.132" status="PASS" endtime="20170816 10:08:38.532"></status>
</kw>
<msg timestamp="20170816 10:08:38.532" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:08:38.532" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:38.131" status="PASS" endtime="20170816 10:08:38.532"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:08:38.533" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:38.532" status="PASS" endtime="20170816 10:08:38.533"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:38.533" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:38.533" status="PASS" endtime="20170816 10:08:38.533"></status>
</kw>
<status starttime="20170816 10:08:38.128" status="PASS" endtime="20170816 10:08:38.533"></status>
</kw>
<status starttime="20170816 10:08:38.127" status="PASS" endtime="20170816 10:08:38.534"></status>
</kw>
<status starttime="20170816 10:08:38.126" status="PASS" endtime="20170816 10:08:38.534"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:08:38.534" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:08:38.534" status="PASS" endtime="20170816 10:08:38.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:38.536" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:08:38.536" status="PASS" endtime="20170816 10:08:38.536"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:38.537" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:08:38.537" status="PASS" endtime="20170816 10:08:38.537"></status>
</kw>
<status starttime="20170816 10:08:38.537" status="PASS" endtime="20170816 10:08:38.538"></status>
</kw>
<status starttime="20170816 10:08:38.535" status="PASS" endtime="20170816 10:08:38.538"></status>
</kw>
<status starttime="20170816 10:08:38.535" status="PASS" endtime="20170816 10:08:38.538"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:08:39.108" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:08:39.108" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:38.538" status="PASS" endtime="20170816 10:08:39.108"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:39.110" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:39.110" status="PASS" endtime="20170816 10:08:39.111"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:39.111" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:39.111" status="PASS" endtime="20170816 10:08:39.112"></status>
</kw>
<status starttime="20170816 10:08:39.111" status="PASS" endtime="20170816 10:08:39.112"></status>
</kw>
<status starttime="20170816 10:08:39.109" status="PASS" endtime="20170816 10:08:39.112"></status>
</kw>
<status starttime="20170816 10:08:39.109" status="PASS" endtime="20170816 10:08:39.112"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:08:39.112" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:08:39.112" status="PASS" endtime="20170816 10:08:39.112"></status>
</kw>
<msg timestamp="20170816 10:08:39.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:38.126" status="PASS" endtime="20170816 10:08:39.113"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:39.113" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:39.113" status="PASS" endtime="20170816 10:08:39.113"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:08:39.114" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:08:39.114" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:08:39.114" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:08:39.114" status="PASS" endtime="20170816 10:08:39.114"></status>
</kw>
<msg timestamp="20170816 10:08:39.114" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:08:38.125" status="PASS" endtime="20170816 10:08:39.114"></status>
</kw>
<msg timestamp="20170816 10:08:39.115" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:08:38.125" status="PASS" endtime="20170816 10:08:39.115"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:08:39.115" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:08:39.115" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:08:39.115" status="FAIL" endtime="20170816 10:08:39.115"></status>
</kw>
<status starttime="20170816 10:08:37.323" status="FAIL" endtime="20170816 10:08:39.115"></status>
</kw>
<status starttime="20170816 10:08:35.533" status="FAIL" endtime="20170816 10:08:39.116"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:08:49.120" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:08:49.120" status="PASS" endtime="20170816 10:08:49.121"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:08:49.121" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:08:49.121" status="PASS" endtime="20170816 10:08:49.121"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:08:49.122" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:08:49.121" status="PASS" endtime="20170816 10:08:49.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:08:49.122" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:08:49.122" status="PASS" endtime="20170816 10:08:49.122"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:08:49.393" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:08:49.123" status="PASS" endtime="20170816 10:08:49.393"></status>
</kw>
<msg timestamp="20170816 10:08:49.393" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:08:49.393" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:49.123" status="PASS" endtime="20170816 10:08:49.393"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:08:49.394" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:49.394" status="PASS" endtime="20170816 10:08:49.394"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:49.395" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:49.394" status="PASS" endtime="20170816 10:08:49.395"></status>
</kw>
<status starttime="20170816 10:08:49.119" status="PASS" endtime="20170816 10:08:49.395"></status>
</kw>
<status starttime="20170816 10:08:49.119" status="PASS" endtime="20170816 10:08:49.395"></status>
</kw>
<status starttime="20170816 10:08:49.118" status="PASS" endtime="20170816 10:08:49.395"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:08:49.396" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:08:49.396" status="PASS" endtime="20170816 10:08:49.396"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:49.399" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:08:49.398" status="PASS" endtime="20170816 10:08:49.399"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:49.400" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:08:49.400" status="PASS" endtime="20170816 10:08:49.401"></status>
</kw>
<status starttime="20170816 10:08:49.399" status="PASS" endtime="20170816 10:08:49.401"></status>
</kw>
<status starttime="20170816 10:08:49.397" status="PASS" endtime="20170816 10:08:49.401"></status>
</kw>
<status starttime="20170816 10:08:49.397" status="PASS" endtime="20170816 10:08:49.401"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:08:49.793" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:08:49.793" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:49.401" status="PASS" endtime="20170816 10:08:49.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:49.795" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:49.794" status="PASS" endtime="20170816 10:08:49.795"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:49.796" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:49.796" status="PASS" endtime="20170816 10:08:49.796"></status>
</kw>
<status starttime="20170816 10:08:49.795" status="PASS" endtime="20170816 10:08:49.796"></status>
</kw>
<status starttime="20170816 10:08:49.794" status="PASS" endtime="20170816 10:08:49.796"></status>
</kw>
<status starttime="20170816 10:08:49.794" status="PASS" endtime="20170816 10:08:49.796"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:08:49.797" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:08:49.797" status="PASS" endtime="20170816 10:08:49.797"></status>
</kw>
<msg timestamp="20170816 10:08:49.797" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:49.118" status="PASS" endtime="20170816 10:08:49.797"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:49.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:49.797" status="PASS" endtime="20170816 10:08:49.798"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:08:49.798" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:08:49.798" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:08:49.798" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:08:49.798" status="PASS" endtime="20170816 10:08:49.798"></status>
</kw>
<msg timestamp="20170816 10:08:49.799" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:08:49.117" status="PASS" endtime="20170816 10:08:49.799"></status>
</kw>
<msg timestamp="20170816 10:08:49.799" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:08:49.117" status="PASS" endtime="20170816 10:08:49.799"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:08:49.799" status="PASS" endtime="20170816 10:08:49.799"></status>
</kw>
<status starttime="20170816 10:08:49.117" status="PASS" endtime="20170816 10:08:49.800"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:08:49.804" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:08:49.804" status="PASS" endtime="20170816 10:08:49.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:08:49.806" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:08:49.806" status="PASS" endtime="20170816 10:08:49.806"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:08:49.807" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:08:49.806" status="PASS" endtime="20170816 10:08:49.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:08:49.808" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:08:49.807" status="PASS" endtime="20170816 10:08:49.808"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:08:50.105" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:08:49.809" status="PASS" endtime="20170816 10:08:50.105"></status>
</kw>
<msg timestamp="20170816 10:08:50.105" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:08:50.105" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:49.808" status="PASS" endtime="20170816 10:08:50.105"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:08:50.106" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:50.106" status="PASS" endtime="20170816 10:08:50.106"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:50.107" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:50.106" status="PASS" endtime="20170816 10:08:50.107"></status>
</kw>
<status starttime="20170816 10:08:49.803" status="PASS" endtime="20170816 10:08:50.107"></status>
</kw>
<status starttime="20170816 10:08:49.802" status="PASS" endtime="20170816 10:08:50.107"></status>
</kw>
<status starttime="20170816 10:08:49.801" status="PASS" endtime="20170816 10:08:50.107"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:08:50.108" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:08:50.107" status="PASS" endtime="20170816 10:08:50.108"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:50.110" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:08:50.109" status="PASS" endtime="20170816 10:08:50.110"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:50.111" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:08:50.110" status="PASS" endtime="20170816 10:08:50.111"></status>
</kw>
<status starttime="20170816 10:08:50.110" status="PASS" endtime="20170816 10:08:50.111"></status>
</kw>
<status starttime="20170816 10:08:50.108" status="PASS" endtime="20170816 10:08:50.111"></status>
</kw>
<status starttime="20170816 10:08:50.108" status="PASS" endtime="20170816 10:08:50.111"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:08:50.758" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:08:50.758" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:50.111" status="PASS" endtime="20170816 10:08:50.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:50.760" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:50.759" status="PASS" endtime="20170816 10:08:50.760"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:50.761" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:50.761" status="PASS" endtime="20170816 10:08:50.761"></status>
</kw>
<status starttime="20170816 10:08:50.760" status="PASS" endtime="20170816 10:08:50.761"></status>
</kw>
<status starttime="20170816 10:08:50.759" status="PASS" endtime="20170816 10:08:50.761"></status>
</kw>
<status starttime="20170816 10:08:50.759" status="PASS" endtime="20170816 10:08:50.761"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:08:50.762" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:08:50.761" status="PASS" endtime="20170816 10:08:50.762"></status>
</kw>
<msg timestamp="20170816 10:08:50.762" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:49.801" status="PASS" endtime="20170816 10:08:50.762"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:50.762" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:50.762" status="PASS" endtime="20170816 10:08:50.763"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:08:50.763" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:08:50.763" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:08:50.763" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:08:50.763" status="PASS" endtime="20170816 10:08:50.763"></status>
</kw>
<msg timestamp="20170816 10:08:50.764" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:08:49.800" status="PASS" endtime="20170816 10:08:50.764"></status>
</kw>
<msg timestamp="20170816 10:08:50.764" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:08:49.800" status="PASS" endtime="20170816 10:08:50.764"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:08:50.764" status="PASS" endtime="20170816 10:08:50.764"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:08:50.769" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:08:50.769" status="PASS" endtime="20170816 10:08:50.769"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:08:50.770" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:08:50.770" status="PASS" endtime="20170816 10:08:50.770"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:08:50.771" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:08:50.770" status="PASS" endtime="20170816 10:08:50.771"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:08:50.771" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:08:50.771" status="PASS" endtime="20170816 10:08:50.771"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:08:51.024" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:08:50.772" status="PASS" endtime="20170816 10:08:51.024"></status>
</kw>
<msg timestamp="20170816 10:08:51.024" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:08:51.024" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:50.772" status="PASS" endtime="20170816 10:08:51.024"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:08:51.025" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:51.024" status="PASS" endtime="20170816 10:08:51.025"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:51.025" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:51.025" status="PASS" endtime="20170816 10:08:51.026"></status>
</kw>
<status starttime="20170816 10:08:50.768" status="PASS" endtime="20170816 10:08:51.026"></status>
</kw>
<status starttime="20170816 10:08:50.768" status="PASS" endtime="20170816 10:08:51.026"></status>
</kw>
<status starttime="20170816 10:08:50.767" status="PASS" endtime="20170816 10:08:51.026"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:08:51.026" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:08:51.026" status="PASS" endtime="20170816 10:08:51.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:51.029" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:08:51.028" status="PASS" endtime="20170816 10:08:51.029"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:51.030" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:08:51.029" status="PASS" endtime="20170816 10:08:51.030"></status>
</kw>
<status starttime="20170816 10:08:51.029" status="PASS" endtime="20170816 10:08:51.030"></status>
</kw>
<status starttime="20170816 10:08:51.027" status="PASS" endtime="20170816 10:08:51.030"></status>
</kw>
<status starttime="20170816 10:08:51.027" status="PASS" endtime="20170816 10:08:51.030"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:08:51.245" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:08:51.245" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:51.030" status="PASS" endtime="20170816 10:08:51.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:51.247" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:51.246" status="PASS" endtime="20170816 10:08:51.247"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:51.247" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:51.247" status="PASS" endtime="20170816 10:08:51.248"></status>
</kw>
<status starttime="20170816 10:08:51.247" status="PASS" endtime="20170816 10:08:51.248"></status>
</kw>
<status starttime="20170816 10:08:51.246" status="PASS" endtime="20170816 10:08:51.248"></status>
</kw>
<status starttime="20170816 10:08:51.245" status="PASS" endtime="20170816 10:08:51.248"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:08:51.248" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:08:51.248" status="PASS" endtime="20170816 10:08:51.248"></status>
</kw>
<msg timestamp="20170816 10:08:51.249" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:50.767" status="PASS" endtime="20170816 10:08:51.249"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:51.249" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:51.249" status="PASS" endtime="20170816 10:08:51.249"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:08:51.250" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:08:51.250" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:08:51.250" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:08:51.249" status="PASS" endtime="20170816 10:08:51.250"></status>
</kw>
<msg timestamp="20170816 10:08:51.250" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:08:50.766" status="PASS" endtime="20170816 10:08:51.250"></status>
</kw>
<msg timestamp="20170816 10:08:51.250" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:08:50.766" status="PASS" endtime="20170816 10:08:51.250"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:08:51.251" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:08:51.251" status="FAIL" endtime="20170816 10:08:51.251"></status>
</kw>
<status starttime="20170816 10:08:50.765" status="FAIL" endtime="20170816 10:08:51.251"></status>
</kw>
<msg timestamp="20170816 10:08:51.251" level="INFO">${status} = False</msg>
<status starttime="20170816 10:08:50.765" status="PASS" endtime="20170816 10:08:51.251"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:08:51.252" status="PASS" endtime="20170816 10:08:51.252"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:08:51.256" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:08:51.255" status="PASS" endtime="20170816 10:08:51.256"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:08:51.257" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:08:51.257" status="PASS" endtime="20170816 10:08:51.257"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:08:51.257" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:08:51.257" status="PASS" endtime="20170816 10:08:51.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:08:51.258" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:08:51.258" status="PASS" endtime="20170816 10:08:51.258"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:08:51.573" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:08:51.259" status="PASS" endtime="20170816 10:08:51.573"></status>
</kw>
<msg timestamp="20170816 10:08:51.573" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:08:51.574" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:51.258" status="PASS" endtime="20170816 10:08:51.574"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:08:51.574" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:51.574" status="PASS" endtime="20170816 10:08:51.574"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:51.575" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:51.574" status="PASS" endtime="20170816 10:08:51.575"></status>
</kw>
<status starttime="20170816 10:08:51.255" status="PASS" endtime="20170816 10:08:51.575"></status>
</kw>
<status starttime="20170816 10:08:51.254" status="PASS" endtime="20170816 10:08:51.575"></status>
</kw>
<status starttime="20170816 10:08:51.254" status="PASS" endtime="20170816 10:08:51.575"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:08:51.576" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:08:51.575" status="PASS" endtime="20170816 10:08:51.576"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:51.578" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:08:51.577" status="PASS" endtime="20170816 10:08:51.578"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:51.579" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:08:51.578" status="PASS" endtime="20170816 10:08:51.579"></status>
</kw>
<status starttime="20170816 10:08:51.578" status="PASS" endtime="20170816 10:08:51.579"></status>
</kw>
<status starttime="20170816 10:08:51.576" status="PASS" endtime="20170816 10:08:51.579"></status>
</kw>
<status starttime="20170816 10:08:51.576" status="PASS" endtime="20170816 10:08:51.579"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:08:51.668" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:08:51.668" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:51.579" status="PASS" endtime="20170816 10:08:51.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:08:51.669" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:51.669" status="PASS" endtime="20170816 10:08:51.670"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:08:51.670" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:08:51.670" status="PASS" endtime="20170816 10:08:51.670"></status>
</kw>
<status starttime="20170816 10:08:51.670" status="PASS" endtime="20170816 10:08:51.671"></status>
</kw>
<status starttime="20170816 10:08:51.669" status="PASS" endtime="20170816 10:08:51.671"></status>
</kw>
<status starttime="20170816 10:08:51.668" status="PASS" endtime="20170816 10:08:51.671"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:08:51.671" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:08:51.671" status="PASS" endtime="20170816 10:08:51.671"></status>
</kw>
<msg timestamp="20170816 10:08:51.671" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:08:51.253" status="PASS" endtime="20170816 10:08:51.671"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:08:51.672" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:08:51.672" status="PASS" endtime="20170816 10:08:51.672"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:08:51.673" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:08:51.673" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:08:51.673" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:08:51.672" status="PASS" endtime="20170816 10:08:51.673"></status>
</kw>
<msg timestamp="20170816 10:08:51.673" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:08:51.253" status="PASS" endtime="20170816 10:08:51.673"></status>
</kw>
<msg timestamp="20170816 10:08:51.673" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:08:51.252" status="PASS" endtime="20170816 10:08:51.674"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:08:51.674" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:08:51.674" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:08:51.674" status="FAIL" endtime="20170816 10:08:51.674"></status>
</kw>
<status starttime="20170816 10:08:50.765" status="FAIL" endtime="20170816 10:08:51.675"></status>
</kw>
<status starttime="20170816 10:08:49.116" status="FAIL" endtime="20170816 10:08:51.675"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:09:01.683" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:09:01.682" status="PASS" endtime="20170816 10:09:01.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:09:01.684" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:09:01.683" status="PASS" endtime="20170816 10:09:01.684"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:09:01.684" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:09:01.684" status="PASS" endtime="20170816 10:09:01.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:09:01.685" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:09:01.685" status="PASS" endtime="20170816 10:09:01.685"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:09:02.060" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:09:01.686" status="PASS" endtime="20170816 10:09:02.060"></status>
</kw>
<msg timestamp="20170816 10:09:02.060" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:09:02.060" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:01.685" status="PASS" endtime="20170816 10:09:02.060"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:09:02.061" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:02.060" status="PASS" endtime="20170816 10:09:02.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:02.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:02.061" status="PASS" endtime="20170816 10:09:02.061"></status>
</kw>
<status starttime="20170816 10:09:01.679" status="PASS" endtime="20170816 10:09:02.062"></status>
</kw>
<status starttime="20170816 10:09:01.678" status="PASS" endtime="20170816 10:09:02.062"></status>
</kw>
<status starttime="20170816 10:09:01.678" status="PASS" endtime="20170816 10:09:02.062"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:09:02.062" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:09:02.062" status="PASS" endtime="20170816 10:09:02.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:02.065" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:02.064" status="PASS" endtime="20170816 10:09:02.065"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:02.065" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:02.065" status="PASS" endtime="20170816 10:09:02.066"></status>
</kw>
<status starttime="20170816 10:09:02.065" status="PASS" endtime="20170816 10:09:02.066"></status>
</kw>
<status starttime="20170816 10:09:02.063" status="PASS" endtime="20170816 10:09:02.066"></status>
</kw>
<status starttime="20170816 10:09:02.063" status="PASS" endtime="20170816 10:09:02.066"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:09:05.985" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:09:05.985" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:02.066" status="PASS" endtime="20170816 10:09:05.985"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:05.987" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:05.986" status="PASS" endtime="20170816 10:09:05.987"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:05.988" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:05.988" status="PASS" endtime="20170816 10:09:05.988"></status>
</kw>
<status starttime="20170816 10:09:05.987" status="PASS" endtime="20170816 10:09:05.988"></status>
</kw>
<status starttime="20170816 10:09:05.986" status="PASS" endtime="20170816 10:09:05.989"></status>
</kw>
<status starttime="20170816 10:09:05.986" status="PASS" endtime="20170816 10:09:05.989"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:09:05.989" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:09:05.989" status="PASS" endtime="20170816 10:09:05.989"></status>
</kw>
<msg timestamp="20170816 10:09:05.989" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:01.677" status="PASS" endtime="20170816 10:09:05.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:05.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:05.990" status="PASS" endtime="20170816 10:09:05.990"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:09:05.991" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:09:05.991" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:09:05.991" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:09:05.990" status="PASS" endtime="20170816 10:09:05.991"></status>
</kw>
<msg timestamp="20170816 10:09:05.991" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:09:01.676" status="PASS" endtime="20170816 10:09:05.991"></status>
</kw>
<msg timestamp="20170816 10:09:05.991" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:09:01.676" status="PASS" endtime="20170816 10:09:05.991"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:09:05.992" status="PASS" endtime="20170816 10:09:05.992"></status>
</kw>
<status starttime="20170816 10:09:01.676" status="PASS" endtime="20170816 10:09:05.992"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:09:05.996" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:09:05.995" status="PASS" endtime="20170816 10:09:05.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:09:05.996" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:09:05.996" status="PASS" endtime="20170816 10:09:05.997"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:09:05.997" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:09:05.997" status="PASS" endtime="20170816 10:09:05.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:09:05.998" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:09:05.997" status="PASS" endtime="20170816 10:09:05.998"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:09:06.244" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:09:05.998" status="PASS" endtime="20170816 10:09:06.244"></status>
</kw>
<msg timestamp="20170816 10:09:06.244" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:09:06.244" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:05.998" status="PASS" endtime="20170816 10:09:06.244"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:09:06.245" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:06.244" status="PASS" endtime="20170816 10:09:06.245"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:06.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:06.245" status="PASS" endtime="20170816 10:09:06.245"></status>
</kw>
<status starttime="20170816 10:09:05.995" status="PASS" endtime="20170816 10:09:06.245"></status>
</kw>
<status starttime="20170816 10:09:05.994" status="PASS" endtime="20170816 10:09:06.245"></status>
</kw>
<status starttime="20170816 10:09:05.994" status="PASS" endtime="20170816 10:09:06.246"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:09:06.246" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:09:06.246" status="PASS" endtime="20170816 10:09:06.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:06.249" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:06.248" status="PASS" endtime="20170816 10:09:06.249"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:06.249" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:06.249" status="PASS" endtime="20170816 10:09:06.250"></status>
</kw>
<status starttime="20170816 10:09:06.249" status="PASS" endtime="20170816 10:09:06.250"></status>
</kw>
<status starttime="20170816 10:09:06.247" status="PASS" endtime="20170816 10:09:06.250"></status>
</kw>
<status starttime="20170816 10:09:06.246" status="PASS" endtime="20170816 10:09:06.250"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:09:06.608" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:09:06.609" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:06.250" status="PASS" endtime="20170816 10:09:06.609"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:06.610" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:06.610" status="PASS" endtime="20170816 10:09:06.610"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:06.611" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:06.611" status="PASS" endtime="20170816 10:09:06.611"></status>
</kw>
<status starttime="20170816 10:09:06.610" status="PASS" endtime="20170816 10:09:06.611"></status>
</kw>
<status starttime="20170816 10:09:06.609" status="PASS" endtime="20170816 10:09:06.612"></status>
</kw>
<status starttime="20170816 10:09:06.609" status="PASS" endtime="20170816 10:09:06.612"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:09:06.612" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:09:06.612" status="PASS" endtime="20170816 10:09:06.612"></status>
</kw>
<msg timestamp="20170816 10:09:06.612" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:05.993" status="PASS" endtime="20170816 10:09:06.612"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:06.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:06.613" status="PASS" endtime="20170816 10:09:06.613"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:09:06.614" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:09:06.614" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:09:06.614" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:09:06.613" status="PASS" endtime="20170816 10:09:06.614"></status>
</kw>
<msg timestamp="20170816 10:09:06.614" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:09:05.993" status="PASS" endtime="20170816 10:09:06.614"></status>
</kw>
<msg timestamp="20170816 10:09:06.614" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:09:05.992" status="PASS" endtime="20170816 10:09:06.614"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:09:06.615" status="PASS" endtime="20170816 10:09:06.615"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:09:06.619" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:09:06.619" status="PASS" endtime="20170816 10:09:06.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:09:06.621" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:09:06.620" status="PASS" endtime="20170816 10:09:06.621"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:09:06.621" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:09:06.621" status="PASS" endtime="20170816 10:09:06.621"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:09:06.622" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:09:06.622" status="PASS" endtime="20170816 10:09:06.622"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:09:07.006" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:09:06.623" status="PASS" endtime="20170816 10:09:07.006"></status>
</kw>
<msg timestamp="20170816 10:09:07.006" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:09:07.006" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:06.622" status="PASS" endtime="20170816 10:09:07.006"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:09:07.007" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:07.006" status="PASS" endtime="20170816 10:09:07.007"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:07.007" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:07.007" status="PASS" endtime="20170816 10:09:07.007"></status>
</kw>
<status starttime="20170816 10:09:06.619" status="PASS" endtime="20170816 10:09:07.008"></status>
</kw>
<status starttime="20170816 10:09:06.618" status="PASS" endtime="20170816 10:09:07.008"></status>
</kw>
<status starttime="20170816 10:09:06.618" status="PASS" endtime="20170816 10:09:07.008"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:09:07.008" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:09:07.008" status="PASS" endtime="20170816 10:09:07.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:07.010" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:09:07.010" status="PASS" endtime="20170816 10:09:07.010"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:07.011" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:09:07.011" status="PASS" endtime="20170816 10:09:07.011"></status>
</kw>
<status starttime="20170816 10:09:07.011" status="PASS" endtime="20170816 10:09:07.011"></status>
</kw>
<status starttime="20170816 10:09:07.009" status="PASS" endtime="20170816 10:09:07.012"></status>
</kw>
<status starttime="20170816 10:09:07.009" status="PASS" endtime="20170816 10:09:07.012"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:09:07.255" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:09:07.255" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:07.012" status="PASS" endtime="20170816 10:09:07.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:07.257" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:07.256" status="PASS" endtime="20170816 10:09:07.257"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:07.258" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:07.258" status="PASS" endtime="20170816 10:09:07.258"></status>
</kw>
<status starttime="20170816 10:09:07.257" status="PASS" endtime="20170816 10:09:07.258"></status>
</kw>
<status starttime="20170816 10:09:07.256" status="PASS" endtime="20170816 10:09:07.258"></status>
</kw>
<status starttime="20170816 10:09:07.255" status="PASS" endtime="20170816 10:09:07.258"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:09:07.259" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:09:07.258" status="PASS" endtime="20170816 10:09:07.259"></status>
</kw>
<msg timestamp="20170816 10:09:07.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:06.617" status="PASS" endtime="20170816 10:09:07.259"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:07.259" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:07.259" status="PASS" endtime="20170816 10:09:07.260"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:09:07.260" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:09:07.260" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:09:07.260" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:09:07.260" status="PASS" endtime="20170816 10:09:07.260"></status>
</kw>
<msg timestamp="20170816 10:09:07.261" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:09:06.616" status="PASS" endtime="20170816 10:09:07.261"></status>
</kw>
<msg timestamp="20170816 10:09:07.261" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:09:06.616" status="PASS" endtime="20170816 10:09:07.261"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:09:07.261" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:09:07.261" status="FAIL" endtime="20170816 10:09:07.262"></status>
</kw>
<status starttime="20170816 10:09:06.616" status="FAIL" endtime="20170816 10:09:07.262"></status>
</kw>
<msg timestamp="20170816 10:09:07.262" level="INFO">${status} = False</msg>
<status starttime="20170816 10:09:06.615" status="PASS" endtime="20170816 10:09:07.262"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:09:07.262" status="PASS" endtime="20170816 10:09:07.262"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:09:07.266" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:09:07.266" status="PASS" endtime="20170816 10:09:07.267"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:09:07.267" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:09:07.267" status="PASS" endtime="20170816 10:09:07.267"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:09:07.268" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:09:07.267" status="PASS" endtime="20170816 10:09:07.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:09:07.268" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:09:07.268" status="PASS" endtime="20170816 10:09:07.268"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:09:07.456" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:09:07.269" status="PASS" endtime="20170816 10:09:07.456"></status>
</kw>
<msg timestamp="20170816 10:09:07.456" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:09:07.456" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:07.269" status="PASS" endtime="20170816 10:09:07.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:09:07.457" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:07.456" status="PASS" endtime="20170816 10:09:07.457"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:07.457" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:07.457" status="PASS" endtime="20170816 10:09:07.457"></status>
</kw>
<status starttime="20170816 10:09:07.265" status="PASS" endtime="20170816 10:09:07.458"></status>
</kw>
<status starttime="20170816 10:09:07.265" status="PASS" endtime="20170816 10:09:07.458"></status>
</kw>
<status starttime="20170816 10:09:07.264" status="PASS" endtime="20170816 10:09:07.458"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:09:07.458" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:09:07.458" status="PASS" endtime="20170816 10:09:07.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:07.460" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:09:07.460" status="PASS" endtime="20170816 10:09:07.460"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:07.461" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:09:07.461" status="PASS" endtime="20170816 10:09:07.461"></status>
</kw>
<status starttime="20170816 10:09:07.460" status="PASS" endtime="20170816 10:09:07.461"></status>
</kw>
<status starttime="20170816 10:09:07.459" status="PASS" endtime="20170816 10:09:07.462"></status>
</kw>
<status starttime="20170816 10:09:07.459" status="PASS" endtime="20170816 10:09:07.462"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:09:07.556" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:09:07.556" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:07.462" status="PASS" endtime="20170816 10:09:07.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:07.558" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:07.557" status="PASS" endtime="20170816 10:09:07.558"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:07.559" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:07.559" status="PASS" endtime="20170816 10:09:07.559"></status>
</kw>
<status starttime="20170816 10:09:07.558" status="PASS" endtime="20170816 10:09:07.559"></status>
</kw>
<status starttime="20170816 10:09:07.557" status="PASS" endtime="20170816 10:09:07.559"></status>
</kw>
<status starttime="20170816 10:09:07.556" status="PASS" endtime="20170816 10:09:07.559"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:09:07.560" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:09:07.560" status="PASS" endtime="20170816 10:09:07.560"></status>
</kw>
<msg timestamp="20170816 10:09:07.560" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:07.264" status="PASS" endtime="20170816 10:09:07.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:07.561" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:07.560" status="PASS" endtime="20170816 10:09:07.561"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:09:07.561" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:09:07.561" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:09:07.561" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:09:07.561" status="PASS" endtime="20170816 10:09:07.561"></status>
</kw>
<msg timestamp="20170816 10:09:07.562" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:09:07.263" status="PASS" endtime="20170816 10:09:07.562"></status>
</kw>
<msg timestamp="20170816 10:09:07.562" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:09:07.263" status="PASS" endtime="20170816 10:09:07.562"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:09:07.562" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:09:07.563" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:09:07.562" status="FAIL" endtime="20170816 10:09:07.563"></status>
</kw>
<status starttime="20170816 10:09:06.615" status="FAIL" endtime="20170816 10:09:07.563"></status>
</kw>
<status starttime="20170816 10:09:01.675" status="FAIL" endtime="20170816 10:09:07.563"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:09:17.569" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:09:17.568" status="PASS" endtime="20170816 10:09:17.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:09:17.570" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:09:17.569" status="PASS" endtime="20170816 10:09:17.570"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:09:17.570" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:09:17.570" status="PASS" endtime="20170816 10:09:17.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:09:17.571" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:09:17.571" status="PASS" endtime="20170816 10:09:17.571"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:09:18.196" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:09:17.572" status="PASS" endtime="20170816 10:09:18.196"></status>
</kw>
<msg timestamp="20170816 10:09:18.196" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:09:18.196" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:17.571" status="PASS" endtime="20170816 10:09:18.196"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:09:18.197" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:18.197" status="PASS" endtime="20170816 10:09:18.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:18.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:18.197" status="PASS" endtime="20170816 10:09:18.198"></status>
</kw>
<status starttime="20170816 10:09:17.568" status="PASS" endtime="20170816 10:09:18.198"></status>
</kw>
<status starttime="20170816 10:09:17.567" status="PASS" endtime="20170816 10:09:18.198"></status>
</kw>
<status starttime="20170816 10:09:17.567" status="PASS" endtime="20170816 10:09:18.198"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:09:18.199" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:09:18.198" status="PASS" endtime="20170816 10:09:18.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:18.201" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:18.200" status="PASS" endtime="20170816 10:09:18.201"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:18.202" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:18.202" status="PASS" endtime="20170816 10:09:18.202"></status>
</kw>
<status starttime="20170816 10:09:18.201" status="PASS" endtime="20170816 10:09:18.203"></status>
</kw>
<status starttime="20170816 10:09:18.199" status="PASS" endtime="20170816 10:09:18.203"></status>
</kw>
<status starttime="20170816 10:09:18.199" status="PASS" endtime="20170816 10:09:18.203"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:09:25.438" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:09:25.438" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:18.204" status="PASS" endtime="20170816 10:09:25.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:25.440" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:25.440" status="PASS" endtime="20170816 10:09:25.440"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:25.441" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:25.441" status="PASS" endtime="20170816 10:09:25.441"></status>
</kw>
<status starttime="20170816 10:09:25.441" status="PASS" endtime="20170816 10:09:25.442"></status>
</kw>
<status starttime="20170816 10:09:25.439" status="PASS" endtime="20170816 10:09:25.442"></status>
</kw>
<status starttime="20170816 10:09:25.439" status="PASS" endtime="20170816 10:09:25.442"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:09:25.442" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:09:25.442" status="PASS" endtime="20170816 10:09:25.442"></status>
</kw>
<msg timestamp="20170816 10:09:25.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:17.566" status="PASS" endtime="20170816 10:09:25.443"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:25.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:25.443" status="PASS" endtime="20170816 10:09:25.443"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:09:25.444" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:09:25.444" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:09:25.444" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:09:25.443" status="PASS" endtime="20170816 10:09:25.444"></status>
</kw>
<msg timestamp="20170816 10:09:25.444" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170816 10:09:17.566" status="PASS" endtime="20170816 10:09:25.444"></status>
</kw>
<msg timestamp="20170816 10:09:25.445" level="INFO">${power_state} = Off</msg>
<status starttime="20170816 10:09:17.565" status="PASS" endtime="20170816 10:09:25.445"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 10:09:25.445" level="FAIL">On != Off</msg>
<status starttime="20170816 10:09:25.445" status="FAIL" endtime="20170816 10:09:25.445"></status>
</kw>
<status starttime="20170816 10:09:17.565" status="FAIL" endtime="20170816 10:09:25.445"></status>
</kw>
<status starttime="20170816 10:09:17.564" status="FAIL" endtime="20170816 10:09:25.446"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:09:35.451" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:09:35.451" status="PASS" endtime="20170816 10:09:35.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:09:35.452" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:09:35.452" status="PASS" endtime="20170816 10:09:35.452"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:09:35.453" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:09:35.453" status="PASS" endtime="20170816 10:09:35.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:09:35.454" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:09:35.453" status="PASS" endtime="20170816 10:09:35.454"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:09:35.702" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:09:35.454" status="PASS" endtime="20170816 10:09:35.702"></status>
</kw>
<msg timestamp="20170816 10:09:35.702" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:09:35.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:35.454" status="PASS" endtime="20170816 10:09:35.703"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:09:35.703" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:35.703" status="PASS" endtime="20170816 10:09:35.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:35.704" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:35.704" status="PASS" endtime="20170816 10:09:35.704"></status>
</kw>
<status starttime="20170816 10:09:35.450" status="PASS" endtime="20170816 10:09:35.704"></status>
</kw>
<status starttime="20170816 10:09:35.450" status="PASS" endtime="20170816 10:09:35.704"></status>
</kw>
<status starttime="20170816 10:09:35.449" status="PASS" endtime="20170816 10:09:35.704"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:09:35.705" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:09:35.705" status="PASS" endtime="20170816 10:09:35.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:35.707" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:35.706" status="PASS" endtime="20170816 10:09:35.707"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:35.708" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:35.708" status="PASS" endtime="20170816 10:09:35.708"></status>
</kw>
<status starttime="20170816 10:09:35.707" status="PASS" endtime="20170816 10:09:35.708"></status>
</kw>
<status starttime="20170816 10:09:35.706" status="PASS" endtime="20170816 10:09:35.708"></status>
</kw>
<status starttime="20170816 10:09:35.705" status="PASS" endtime="20170816 10:09:35.708"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:09:35.770" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:09:35.770" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:35.709" status="PASS" endtime="20170816 10:09:35.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:35.772" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:35.772" status="PASS" endtime="20170816 10:09:35.772"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:35.774" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:35.773" status="PASS" endtime="20170816 10:09:35.774"></status>
</kw>
<status starttime="20170816 10:09:35.772" status="PASS" endtime="20170816 10:09:35.774"></status>
</kw>
<status starttime="20170816 10:09:35.771" status="PASS" endtime="20170816 10:09:35.774"></status>
</kw>
<status starttime="20170816 10:09:35.771" status="PASS" endtime="20170816 10:09:35.774"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:09:35.774" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:09:35.774" status="PASS" endtime="20170816 10:09:35.775"></status>
</kw>
<msg timestamp="20170816 10:09:35.775" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:35.448" status="PASS" endtime="20170816 10:09:35.775"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:35.775" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:35.775" status="PASS" endtime="20170816 10:09:35.776"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:09:35.776" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:09:35.776" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:09:35.776" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:09:35.776" status="PASS" endtime="20170816 10:09:35.776"></status>
</kw>
<msg timestamp="20170816 10:09:35.777" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:09:35.448" status="PASS" endtime="20170816 10:09:35.777"></status>
</kw>
<msg timestamp="20170816 10:09:35.777" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:09:35.447" status="PASS" endtime="20170816 10:09:35.777"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:09:35.777" status="PASS" endtime="20170816 10:09:35.777"></status>
</kw>
<status starttime="20170816 10:09:35.447" status="PASS" endtime="20170816 10:09:35.778"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:09:35.782" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:09:35.781" status="PASS" endtime="20170816 10:09:35.782"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:09:35.783" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:09:35.783" status="PASS" endtime="20170816 10:09:35.783"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:09:35.784" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:09:35.784" status="PASS" endtime="20170816 10:09:35.784"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:09:35.785" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:09:35.785" status="PASS" endtime="20170816 10:09:35.785"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:09:35.972" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:09:35.786" status="PASS" endtime="20170816 10:09:35.972"></status>
</kw>
<msg timestamp="20170816 10:09:35.972" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:09:35.972" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:35.786" status="PASS" endtime="20170816 10:09:35.973"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:09:35.973" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:35.973" status="PASS" endtime="20170816 10:09:35.973"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:35.974" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:35.974" status="PASS" endtime="20170816 10:09:35.974"></status>
</kw>
<status starttime="20170816 10:09:35.781" status="PASS" endtime="20170816 10:09:35.974"></status>
</kw>
<status starttime="20170816 10:09:35.780" status="PASS" endtime="20170816 10:09:35.974"></status>
</kw>
<status starttime="20170816 10:09:35.779" status="PASS" endtime="20170816 10:09:35.975"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:09:35.975" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:09:35.975" status="PASS" endtime="20170816 10:09:35.975"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:35.978" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:35.976" status="PASS" endtime="20170816 10:09:35.978"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:35.978" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:35.978" status="PASS" endtime="20170816 10:09:35.979"></status>
</kw>
<status starttime="20170816 10:09:35.978" status="PASS" endtime="20170816 10:09:35.979"></status>
</kw>
<status starttime="20170816 10:09:35.976" status="PASS" endtime="20170816 10:09:35.979"></status>
</kw>
<status starttime="20170816 10:09:35.975" status="PASS" endtime="20170816 10:09:35.979"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:09:36.066" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:09:36.066" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:35.979" status="PASS" endtime="20170816 10:09:36.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:36.068" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:36.068" status="PASS" endtime="20170816 10:09:36.068"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:36.069" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:36.069" status="PASS" endtime="20170816 10:09:36.069"></status>
</kw>
<status starttime="20170816 10:09:36.068" status="PASS" endtime="20170816 10:09:36.069"></status>
</kw>
<status starttime="20170816 10:09:36.067" status="PASS" endtime="20170816 10:09:36.069"></status>
</kw>
<status starttime="20170816 10:09:36.067" status="PASS" endtime="20170816 10:09:36.070"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:09:36.070" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:09:36.070" status="PASS" endtime="20170816 10:09:36.070"></status>
</kw>
<msg timestamp="20170816 10:09:36.070" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:35.779" status="PASS" endtime="20170816 10:09:36.070"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:36.071" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:36.070" status="PASS" endtime="20170816 10:09:36.071"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:09:36.071" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:09:36.071" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:09:36.072" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:09:36.071" status="PASS" endtime="20170816 10:09:36.072"></status>
</kw>
<msg timestamp="20170816 10:09:36.072" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:09:35.778" status="PASS" endtime="20170816 10:09:36.072"></status>
</kw>
<msg timestamp="20170816 10:09:36.072" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:09:35.778" status="PASS" endtime="20170816 10:09:36.072"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:09:36.072" status="PASS" endtime="20170816 10:09:36.073"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:09:36.077" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:09:36.077" status="PASS" endtime="20170816 10:09:36.078"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:09:36.079" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:09:36.078" status="PASS" endtime="20170816 10:09:36.079"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:09:36.079" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:09:36.079" status="PASS" endtime="20170816 10:09:36.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:09:36.080" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:09:36.080" status="PASS" endtime="20170816 10:09:36.080"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:09:36.280" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:09:36.081" status="PASS" endtime="20170816 10:09:36.281"></status>
</kw>
<msg timestamp="20170816 10:09:36.281" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:09:36.281" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:36.080" status="PASS" endtime="20170816 10:09:36.281"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:09:36.281" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:36.281" status="PASS" endtime="20170816 10:09:36.282"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:36.282" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:36.282" status="PASS" endtime="20170816 10:09:36.283"></status>
</kw>
<status starttime="20170816 10:09:36.076" status="PASS" endtime="20170816 10:09:36.283"></status>
</kw>
<status starttime="20170816 10:09:36.076" status="PASS" endtime="20170816 10:09:36.283"></status>
</kw>
<status starttime="20170816 10:09:36.075" status="PASS" endtime="20170816 10:09:36.283"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:09:36.284" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:09:36.283" status="PASS" endtime="20170816 10:09:36.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:36.287" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:09:36.286" status="PASS" endtime="20170816 10:09:36.287"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:36.288" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:09:36.288" status="PASS" endtime="20170816 10:09:36.289"></status>
</kw>
<status starttime="20170816 10:09:36.287" status="PASS" endtime="20170816 10:09:36.289"></status>
</kw>
<status starttime="20170816 10:09:36.285" status="PASS" endtime="20170816 10:09:36.289"></status>
</kw>
<status starttime="20170816 10:09:36.284" status="PASS" endtime="20170816 10:09:36.289"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:09:36.355" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:09:36.355" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:36.289" status="PASS" endtime="20170816 10:09:36.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:36.357" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:36.356" status="PASS" endtime="20170816 10:09:36.357"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:36.358" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:36.358" status="PASS" endtime="20170816 10:09:36.358"></status>
</kw>
<status starttime="20170816 10:09:36.357" status="PASS" endtime="20170816 10:09:36.358"></status>
</kw>
<status starttime="20170816 10:09:36.356" status="PASS" endtime="20170816 10:09:36.359"></status>
</kw>
<status starttime="20170816 10:09:36.355" status="PASS" endtime="20170816 10:09:36.359"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:09:36.359" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:09:36.359" status="PASS" endtime="20170816 10:09:36.359"></status>
</kw>
<msg timestamp="20170816 10:09:36.359" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:36.075" status="PASS" endtime="20170816 10:09:36.359"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:36.360" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:36.360" status="PASS" endtime="20170816 10:09:36.360"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:09:36.360" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:09:36.361" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:09:36.361" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:09:36.360" status="PASS" endtime="20170816 10:09:36.361"></status>
</kw>
<msg timestamp="20170816 10:09:36.361" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:09:36.074" status="PASS" endtime="20170816 10:09:36.361"></status>
</kw>
<msg timestamp="20170816 10:09:36.361" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:09:36.074" status="PASS" endtime="20170816 10:09:36.361"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:09:36.362" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:09:36.361" status="FAIL" endtime="20170816 10:09:36.362"></status>
</kw>
<status starttime="20170816 10:09:36.074" status="FAIL" endtime="20170816 10:09:36.362"></status>
</kw>
<msg timestamp="20170816 10:09:36.362" level="INFO">${status} = False</msg>
<status starttime="20170816 10:09:36.073" status="PASS" endtime="20170816 10:09:36.362"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:09:36.363" status="PASS" endtime="20170816 10:09:36.363"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:09:36.368" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:09:36.367" status="PASS" endtime="20170816 10:09:36.368"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:09:36.368" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:09:36.368" status="PASS" endtime="20170816 10:09:36.369"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:09:36.369" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:09:36.369" status="PASS" endtime="20170816 10:09:36.369"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:09:36.370" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:09:36.369" status="PASS" endtime="20170816 10:09:36.370"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:09:36.552" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:09:36.370" status="PASS" endtime="20170816 10:09:36.552"></status>
</kw>
<msg timestamp="20170816 10:09:36.552" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:09:36.552" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:36.370" status="PASS" endtime="20170816 10:09:36.552"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:09:36.553" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:36.552" status="PASS" endtime="20170816 10:09:36.553"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:36.553" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:36.553" status="PASS" endtime="20170816 10:09:36.553"></status>
</kw>
<status starttime="20170816 10:09:36.367" status="PASS" endtime="20170816 10:09:36.554"></status>
</kw>
<status starttime="20170816 10:09:36.366" status="PASS" endtime="20170816 10:09:36.554"></status>
</kw>
<status starttime="20170816 10:09:36.365" status="PASS" endtime="20170816 10:09:36.554"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:09:36.554" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:09:36.554" status="PASS" endtime="20170816 10:09:36.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:36.557" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:09:36.556" status="PASS" endtime="20170816 10:09:36.557"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:36.557" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:09:36.557" status="PASS" endtime="20170816 10:09:36.558"></status>
</kw>
<status starttime="20170816 10:09:36.557" status="PASS" endtime="20170816 10:09:36.558"></status>
</kw>
<status starttime="20170816 10:09:36.555" status="PASS" endtime="20170816 10:09:36.558"></status>
</kw>
<status starttime="20170816 10:09:36.555" status="PASS" endtime="20170816 10:09:36.558"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:09:36.665" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:09:36.665" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:36.558" status="PASS" endtime="20170816 10:09:36.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:36.670" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:36.670" status="PASS" endtime="20170816 10:09:36.670"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:36.671" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:36.671" status="PASS" endtime="20170816 10:09:36.671"></status>
</kw>
<status starttime="20170816 10:09:36.670" status="PASS" endtime="20170816 10:09:36.672"></status>
</kw>
<status starttime="20170816 10:09:36.666" status="PASS" endtime="20170816 10:09:36.672"></status>
</kw>
<status starttime="20170816 10:09:36.666" status="PASS" endtime="20170816 10:09:36.672"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:09:36.672" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:09:36.672" status="PASS" endtime="20170816 10:09:36.672"></status>
</kw>
<msg timestamp="20170816 10:09:36.672" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:36.365" status="PASS" endtime="20170816 10:09:36.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:36.673" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:36.673" status="PASS" endtime="20170816 10:09:36.673"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:09:36.674" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:09:36.674" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:09:36.674" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:09:36.673" status="PASS" endtime="20170816 10:09:36.674"></status>
</kw>
<msg timestamp="20170816 10:09:36.674" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:09:36.364" status="PASS" endtime="20170816 10:09:36.674"></status>
</kw>
<msg timestamp="20170816 10:09:36.675" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:09:36.363" status="PASS" endtime="20170816 10:09:36.675"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:09:36.675" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:09:36.675" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:09:36.675" status="FAIL" endtime="20170816 10:09:36.675"></status>
</kw>
<status starttime="20170816 10:09:36.073" status="FAIL" endtime="20170816 10:09:36.676"></status>
</kw>
<status starttime="20170816 10:09:35.446" status="FAIL" endtime="20170816 10:09:36.676"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:09:46.683" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:09:46.682" status="PASS" endtime="20170816 10:09:46.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:09:46.684" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:09:46.684" status="PASS" endtime="20170816 10:09:46.684"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:09:46.685" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:09:46.685" status="PASS" endtime="20170816 10:09:46.685"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:09:46.686" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:09:46.686" status="PASS" endtime="20170816 10:09:46.686"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:09:46.872" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:09:46.687" status="PASS" endtime="20170816 10:09:46.872"></status>
</kw>
<msg timestamp="20170816 10:09:46.872" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:09:46.872" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:46.687" status="PASS" endtime="20170816 10:09:46.873"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:09:46.873" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:46.873" status="PASS" endtime="20170816 10:09:46.873"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:46.874" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:46.874" status="PASS" endtime="20170816 10:09:46.874"></status>
</kw>
<status starttime="20170816 10:09:46.681" status="PASS" endtime="20170816 10:09:46.874"></status>
</kw>
<status starttime="20170816 10:09:46.681" status="PASS" endtime="20170816 10:09:46.874"></status>
</kw>
<status starttime="20170816 10:09:46.680" status="PASS" endtime="20170816 10:09:46.874"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:09:46.875" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:09:46.875" status="PASS" endtime="20170816 10:09:46.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:46.877" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:46.876" status="PASS" endtime="20170816 10:09:46.877"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:46.878" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:46.878" status="PASS" endtime="20170816 10:09:46.878"></status>
</kw>
<status starttime="20170816 10:09:46.877" status="PASS" endtime="20170816 10:09:46.878"></status>
</kw>
<status starttime="20170816 10:09:46.876" status="PASS" endtime="20170816 10:09:46.878"></status>
</kw>
<status starttime="20170816 10:09:46.875" status="PASS" endtime="20170816 10:09:46.878"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:09:46.942" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:09:46.942" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:46.879" status="PASS" endtime="20170816 10:09:46.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:46.944" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:46.944" status="PASS" endtime="20170816 10:09:46.944"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:46.945" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:46.945" status="PASS" endtime="20170816 10:09:46.945"></status>
</kw>
<status starttime="20170816 10:09:46.945" status="PASS" endtime="20170816 10:09:46.946"></status>
</kw>
<status starttime="20170816 10:09:46.943" status="PASS" endtime="20170816 10:09:46.946"></status>
</kw>
<status starttime="20170816 10:09:46.943" status="PASS" endtime="20170816 10:09:46.946"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:09:46.946" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:09:46.946" status="PASS" endtime="20170816 10:09:46.946"></status>
</kw>
<msg timestamp="20170816 10:09:46.946" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:46.679" status="PASS" endtime="20170816 10:09:46.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:46.947" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:46.947" status="PASS" endtime="20170816 10:09:46.947"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:09:46.948" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:09:46.948" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:09:46.948" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:09:46.947" status="PASS" endtime="20170816 10:09:46.948"></status>
</kw>
<msg timestamp="20170816 10:09:46.948" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:09:46.678" status="PASS" endtime="20170816 10:09:46.948"></status>
</kw>
<msg timestamp="20170816 10:09:46.948" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:09:46.678" status="PASS" endtime="20170816 10:09:46.948"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:09:46.949" status="PASS" endtime="20170816 10:09:46.949"></status>
</kw>
<status starttime="20170816 10:09:46.677" status="PASS" endtime="20170816 10:09:46.949"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:09:46.953" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:09:46.952" status="PASS" endtime="20170816 10:09:46.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:09:46.954" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:09:46.954" status="PASS" endtime="20170816 10:09:46.954"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:09:46.955" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:09:46.954" status="PASS" endtime="20170816 10:09:46.955"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:09:46.955" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:09:46.955" status="PASS" endtime="20170816 10:09:46.955"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:09:47.133" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:09:46.956" status="PASS" endtime="20170816 10:09:47.133"></status>
</kw>
<msg timestamp="20170816 10:09:47.134" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:09:47.134" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:46.955" status="PASS" endtime="20170816 10:09:47.134"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:09:47.134" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:47.134" status="PASS" endtime="20170816 10:09:47.135"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:47.135" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:47.135" status="PASS" endtime="20170816 10:09:47.135"></status>
</kw>
<status starttime="20170816 10:09:46.952" status="PASS" endtime="20170816 10:09:47.135"></status>
</kw>
<status starttime="20170816 10:09:46.951" status="PASS" endtime="20170816 10:09:47.135"></status>
</kw>
<status starttime="20170816 10:09:46.951" status="PASS" endtime="20170816 10:09:47.136"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:09:47.136" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:09:47.136" status="PASS" endtime="20170816 10:09:47.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:47.138" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:47.138" status="PASS" endtime="20170816 10:09:47.138"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:47.139" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:47.139" status="PASS" endtime="20170816 10:09:47.139"></status>
</kw>
<status starttime="20170816 10:09:47.138" status="PASS" endtime="20170816 10:09:47.139"></status>
</kw>
<status starttime="20170816 10:09:47.137" status="PASS" endtime="20170816 10:09:47.140"></status>
</kw>
<status starttime="20170816 10:09:47.136" status="PASS" endtime="20170816 10:09:47.140"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:09:47.242" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:09:47.242" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:47.140" status="PASS" endtime="20170816 10:09:47.242"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:47.244" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:47.243" status="PASS" endtime="20170816 10:09:47.244"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:47.244" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:47.244" status="PASS" endtime="20170816 10:09:47.245"></status>
</kw>
<status starttime="20170816 10:09:47.244" status="PASS" endtime="20170816 10:09:47.245"></status>
</kw>
<status starttime="20170816 10:09:47.243" status="PASS" endtime="20170816 10:09:47.245"></status>
</kw>
<status starttime="20170816 10:09:47.242" status="PASS" endtime="20170816 10:09:47.245"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:09:47.245" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:09:47.245" status="PASS" endtime="20170816 10:09:47.245"></status>
</kw>
<msg timestamp="20170816 10:09:47.246" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:46.950" status="PASS" endtime="20170816 10:09:47.246"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:47.246" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:47.246" status="PASS" endtime="20170816 10:09:47.246"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:09:47.247" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:09:47.247" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:09:47.247" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:09:47.247" status="PASS" endtime="20170816 10:09:47.247"></status>
</kw>
<msg timestamp="20170816 10:09:47.247" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:09:46.950" status="PASS" endtime="20170816 10:09:47.248"></status>
</kw>
<msg timestamp="20170816 10:09:47.248" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:09:46.949" status="PASS" endtime="20170816 10:09:47.248"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:09:47.248" status="PASS" endtime="20170816 10:09:47.248"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:09:47.253" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:09:47.253" status="PASS" endtime="20170816 10:09:47.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:09:47.254" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:09:47.254" status="PASS" endtime="20170816 10:09:47.254"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:09:47.255" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:09:47.255" status="PASS" endtime="20170816 10:09:47.255"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:09:47.256" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:09:47.255" status="PASS" endtime="20170816 10:09:47.256"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:09:47.448" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:09:47.256" status="PASS" endtime="20170816 10:09:47.448"></status>
</kw>
<msg timestamp="20170816 10:09:47.448" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:09:47.448" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:47.256" status="PASS" endtime="20170816 10:09:47.448"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:09:47.449" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:47.448" status="PASS" endtime="20170816 10:09:47.449"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:47.449" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:47.449" status="PASS" endtime="20170816 10:09:47.449"></status>
</kw>
<status starttime="20170816 10:09:47.252" status="PASS" endtime="20170816 10:09:47.450"></status>
</kw>
<status starttime="20170816 10:09:47.252" status="PASS" endtime="20170816 10:09:47.450"></status>
</kw>
<status starttime="20170816 10:09:47.251" status="PASS" endtime="20170816 10:09:47.450"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:09:47.450" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:09:47.450" status="PASS" endtime="20170816 10:09:47.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:47.453" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:09:47.452" status="PASS" endtime="20170816 10:09:47.453"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:47.454" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:09:47.454" status="PASS" endtime="20170816 10:09:47.454"></status>
</kw>
<status starttime="20170816 10:09:47.453" status="PASS" endtime="20170816 10:09:47.454"></status>
</kw>
<status starttime="20170816 10:09:47.451" status="PASS" endtime="20170816 10:09:47.454"></status>
</kw>
<status starttime="20170816 10:09:47.451" status="PASS" endtime="20170816 10:09:47.454"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:09:47.559" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:09:47.559" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:47.455" status="PASS" endtime="20170816 10:09:47.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:47.561" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:47.561" status="PASS" endtime="20170816 10:09:47.561"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:47.562" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:47.562" status="PASS" endtime="20170816 10:09:47.562"></status>
</kw>
<status starttime="20170816 10:09:47.562" status="PASS" endtime="20170816 10:09:47.563"></status>
</kw>
<status starttime="20170816 10:09:47.560" status="PASS" endtime="20170816 10:09:47.563"></status>
</kw>
<status starttime="20170816 10:09:47.560" status="PASS" endtime="20170816 10:09:47.563"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:09:47.563" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:09:47.563" status="PASS" endtime="20170816 10:09:47.563"></status>
</kw>
<msg timestamp="20170816 10:09:47.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:47.251" status="PASS" endtime="20170816 10:09:47.563"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:47.564" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:47.564" status="PASS" endtime="20170816 10:09:47.564"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:09:47.565" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:09:47.565" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:09:47.565" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:09:47.564" status="PASS" endtime="20170816 10:09:47.565"></status>
</kw>
<msg timestamp="20170816 10:09:47.565" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:09:47.250" status="PASS" endtime="20170816 10:09:47.565"></status>
</kw>
<msg timestamp="20170816 10:09:47.565" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:09:47.250" status="PASS" endtime="20170816 10:09:47.565"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:09:47.566" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:09:47.566" status="FAIL" endtime="20170816 10:09:47.566"></status>
</kw>
<status starttime="20170816 10:09:47.249" status="FAIL" endtime="20170816 10:09:47.566"></status>
</kw>
<msg timestamp="20170816 10:09:47.566" level="INFO">${status} = False</msg>
<status starttime="20170816 10:09:47.249" status="PASS" endtime="20170816 10:09:47.566"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:09:47.567" status="PASS" endtime="20170816 10:09:47.567"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:09:47.571" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:09:47.570" status="PASS" endtime="20170816 10:09:47.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:09:47.571" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:09:47.571" status="PASS" endtime="20170816 10:09:47.572"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:09:47.572" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:09:47.572" status="PASS" endtime="20170816 10:09:47.572"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:09:47.573" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:09:47.572" status="PASS" endtime="20170816 10:09:47.573"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:09:47.802" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:09:47.574" status="PASS" endtime="20170816 10:09:47.802"></status>
</kw>
<msg timestamp="20170816 10:09:47.802" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:09:47.802" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:47.573" status="PASS" endtime="20170816 10:09:47.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:09:47.803" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:47.803" status="PASS" endtime="20170816 10:09:47.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:47.804" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:47.803" status="PASS" endtime="20170816 10:09:47.804"></status>
</kw>
<status starttime="20170816 10:09:47.570" status="PASS" endtime="20170816 10:09:47.804"></status>
</kw>
<status starttime="20170816 10:09:47.569" status="PASS" endtime="20170816 10:09:47.805"></status>
</kw>
<status starttime="20170816 10:09:47.569" status="PASS" endtime="20170816 10:09:47.805"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:09:47.806" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:09:47.805" status="PASS" endtime="20170816 10:09:47.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:47.809" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:09:47.808" status="PASS" endtime="20170816 10:09:47.809"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:47.810" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:09:47.810" status="PASS" endtime="20170816 10:09:47.810"></status>
</kw>
<status starttime="20170816 10:09:47.809" status="PASS" endtime="20170816 10:09:47.810"></status>
</kw>
<status starttime="20170816 10:09:47.807" status="PASS" endtime="20170816 10:09:47.810"></status>
</kw>
<status starttime="20170816 10:09:47.806" status="PASS" endtime="20170816 10:09:47.810"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:09:47.899" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:09:47.900" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:47.811" status="PASS" endtime="20170816 10:09:47.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:47.902" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:47.901" status="PASS" endtime="20170816 10:09:47.902"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:47.902" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:47.902" status="PASS" endtime="20170816 10:09:47.903"></status>
</kw>
<status starttime="20170816 10:09:47.902" status="PASS" endtime="20170816 10:09:47.903"></status>
</kw>
<status starttime="20170816 10:09:47.901" status="PASS" endtime="20170816 10:09:47.903"></status>
</kw>
<status starttime="20170816 10:09:47.900" status="PASS" endtime="20170816 10:09:47.903"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:09:47.903" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:09:47.903" status="PASS" endtime="20170816 10:09:47.904"></status>
</kw>
<msg timestamp="20170816 10:09:47.904" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:47.568" status="PASS" endtime="20170816 10:09:47.904"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:47.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:47.904" status="PASS" endtime="20170816 10:09:47.905"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:09:47.905" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:09:47.905" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:09:47.905" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:09:47.905" status="PASS" endtime="20170816 10:09:47.905"></status>
</kw>
<msg timestamp="20170816 10:09:47.906" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:09:47.568" status="PASS" endtime="20170816 10:09:47.906"></status>
</kw>
<msg timestamp="20170816 10:09:47.906" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:09:47.567" status="PASS" endtime="20170816 10:09:47.906"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:09:47.906" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:09:47.907" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:09:47.906" status="FAIL" endtime="20170816 10:09:47.907"></status>
</kw>
<status starttime="20170816 10:09:47.249" status="FAIL" endtime="20170816 10:09:47.907"></status>
</kw>
<status starttime="20170816 10:09:46.676" status="FAIL" endtime="20170816 10:09:47.907"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:09:57.913" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:09:57.912" status="PASS" endtime="20170816 10:09:57.913"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:09:57.914" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:09:57.913" status="PASS" endtime="20170816 10:09:57.914"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:09:57.914" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:09:57.914" status="PASS" endtime="20170816 10:09:57.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:09:57.915" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:09:57.915" status="PASS" endtime="20170816 10:09:57.915"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:09:58.383" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:09:57.916" status="PASS" endtime="20170816 10:09:58.383"></status>
</kw>
<msg timestamp="20170816 10:09:58.383" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:09:58.383" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:57.915" status="PASS" endtime="20170816 10:09:58.383"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:09:58.384" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:58.383" status="PASS" endtime="20170816 10:09:58.384"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:58.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:58.384" status="PASS" endtime="20170816 10:09:58.385"></status>
</kw>
<status starttime="20170816 10:09:57.911" status="PASS" endtime="20170816 10:09:58.385"></status>
</kw>
<status starttime="20170816 10:09:57.911" status="PASS" endtime="20170816 10:09:58.385"></status>
</kw>
<status starttime="20170816 10:09:57.910" status="PASS" endtime="20170816 10:09:58.385"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:09:58.386" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:09:58.385" status="PASS" endtime="20170816 10:09:58.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:58.388" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:58.387" status="PASS" endtime="20170816 10:09:58.388"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:58.389" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:58.389" status="PASS" endtime="20170816 10:09:58.389"></status>
</kw>
<status starttime="20170816 10:09:58.388" status="PASS" endtime="20170816 10:09:58.389"></status>
</kw>
<status starttime="20170816 10:09:58.387" status="PASS" endtime="20170816 10:09:58.389"></status>
</kw>
<status starttime="20170816 10:09:58.386" status="PASS" endtime="20170816 10:09:58.389"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:09:58.685" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:09:58.685" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:58.389" status="PASS" endtime="20170816 10:09:58.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:58.687" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:58.686" status="PASS" endtime="20170816 10:09:58.687"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:58.688" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:58.687" status="PASS" endtime="20170816 10:09:58.688"></status>
</kw>
<status starttime="20170816 10:09:58.687" status="PASS" endtime="20170816 10:09:58.688"></status>
</kw>
<status starttime="20170816 10:09:58.686" status="PASS" endtime="20170816 10:09:58.688"></status>
</kw>
<status starttime="20170816 10:09:58.685" status="PASS" endtime="20170816 10:09:58.689"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:09:58.689" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:09:58.689" status="PASS" endtime="20170816 10:09:58.689"></status>
</kw>
<msg timestamp="20170816 10:09:58.689" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:57.910" status="PASS" endtime="20170816 10:09:58.689"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:58.690" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:58.690" status="PASS" endtime="20170816 10:09:58.690"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:09:58.690" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:09:58.691" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:09:58.691" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:09:58.690" status="PASS" endtime="20170816 10:09:58.691"></status>
</kw>
<msg timestamp="20170816 10:09:58.691" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:09:57.909" status="PASS" endtime="20170816 10:09:58.691"></status>
</kw>
<msg timestamp="20170816 10:09:58.691" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:09:57.909" status="PASS" endtime="20170816 10:09:58.691"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:09:58.692" status="PASS" endtime="20170816 10:09:58.692"></status>
</kw>
<status starttime="20170816 10:09:57.908" status="PASS" endtime="20170816 10:09:58.692"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:09:58.696" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:09:58.695" status="PASS" endtime="20170816 10:09:58.696"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:09:58.697" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:09:58.696" status="PASS" endtime="20170816 10:09:58.697"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:09:58.697" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:09:58.697" status="PASS" endtime="20170816 10:09:58.697"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:09:58.698" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:09:58.697" status="PASS" endtime="20170816 10:09:58.698"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:09:59.032" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:09:58.699" status="PASS" endtime="20170816 10:09:59.032"></status>
</kw>
<msg timestamp="20170816 10:09:59.032" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:09:59.032" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:58.698" status="PASS" endtime="20170816 10:09:59.032"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:09:59.033" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:59.033" status="PASS" endtime="20170816 10:09:59.033"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:59.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:59.033" status="PASS" endtime="20170816 10:09:59.034"></status>
</kw>
<status starttime="20170816 10:09:58.695" status="PASS" endtime="20170816 10:09:59.034"></status>
</kw>
<status starttime="20170816 10:09:58.694" status="PASS" endtime="20170816 10:09:59.034"></status>
</kw>
<status starttime="20170816 10:09:58.694" status="PASS" endtime="20170816 10:09:59.034"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:09:59.035" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:09:59.034" status="PASS" endtime="20170816 10:09:59.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:59.037" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:59.036" status="PASS" endtime="20170816 10:09:59.037"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:59.038" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:09:59.038" status="PASS" endtime="20170816 10:09:59.038"></status>
</kw>
<status starttime="20170816 10:09:59.038" status="PASS" endtime="20170816 10:09:59.038"></status>
</kw>
<status starttime="20170816 10:09:59.036" status="PASS" endtime="20170816 10:09:59.039"></status>
</kw>
<status starttime="20170816 10:09:59.035" status="PASS" endtime="20170816 10:09:59.039"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:09:59.676" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:09:59.676" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:59.039" status="PASS" endtime="20170816 10:09:59.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:09:59.678" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:59.678" status="PASS" endtime="20170816 10:09:59.678"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:09:59.679" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:09:59.679" status="PASS" endtime="20170816 10:09:59.679"></status>
</kw>
<status starttime="20170816 10:09:59.679" status="PASS" endtime="20170816 10:09:59.680"></status>
</kw>
<status starttime="20170816 10:09:59.677" status="PASS" endtime="20170816 10:09:59.680"></status>
</kw>
<status starttime="20170816 10:09:59.677" status="PASS" endtime="20170816 10:09:59.680"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:09:59.680" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:09:59.680" status="PASS" endtime="20170816 10:09:59.680"></status>
</kw>
<msg timestamp="20170816 10:09:59.680" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:58.693" status="PASS" endtime="20170816 10:09:59.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:09:59.681" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:09:59.681" status="PASS" endtime="20170816 10:09:59.681"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:09:59.682" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:09:59.682" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:09:59.682" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:09:59.681" status="PASS" endtime="20170816 10:09:59.682"></status>
</kw>
<msg timestamp="20170816 10:09:59.682" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:09:58.692" status="PASS" endtime="20170816 10:09:59.682"></status>
</kw>
<msg timestamp="20170816 10:09:59.682" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:09:58.692" status="PASS" endtime="20170816 10:09:59.682"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:09:59.683" status="PASS" endtime="20170816 10:09:59.683"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:09:59.688" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:09:59.687" status="PASS" endtime="20170816 10:09:59.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:09:59.689" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:09:59.689" status="PASS" endtime="20170816 10:09:59.689"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:09:59.690" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:09:59.689" status="PASS" endtime="20170816 10:09:59.690"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:09:59.690" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:09:59.690" status="PASS" endtime="20170816 10:09:59.690"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:10:00.204" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:09:59.691" status="PASS" endtime="20170816 10:10:00.204"></status>
</kw>
<msg timestamp="20170816 10:10:00.204" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:10:00.204" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:59.690" status="PASS" endtime="20170816 10:10:00.204"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:10:00.205" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:00.205" status="PASS" endtime="20170816 10:10:00.205"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:00.206" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:00.205" status="PASS" endtime="20170816 10:10:00.206"></status>
</kw>
<status starttime="20170816 10:09:59.687" status="PASS" endtime="20170816 10:10:00.206"></status>
</kw>
<status starttime="20170816 10:09:59.686" status="PASS" endtime="20170816 10:10:00.206"></status>
</kw>
<status starttime="20170816 10:09:59.686" status="PASS" endtime="20170816 10:10:00.206"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:10:00.207" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:10:00.207" status="PASS" endtime="20170816 10:10:00.207"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:00.210" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:10:00.209" status="PASS" endtime="20170816 10:10:00.210"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:00.212" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:10:00.211" status="PASS" endtime="20170816 10:10:00.212"></status>
</kw>
<status starttime="20170816 10:10:00.211" status="PASS" endtime="20170816 10:10:00.212"></status>
</kw>
<status starttime="20170816 10:10:00.208" status="PASS" endtime="20170816 10:10:00.212"></status>
</kw>
<status starttime="20170816 10:10:00.208" status="PASS" endtime="20170816 10:10:00.212"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:10:00.612" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:10:00.612" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:00.212" status="PASS" endtime="20170816 10:10:00.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:00.614" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:00.613" status="PASS" endtime="20170816 10:10:00.614"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:00.615" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:00.614" status="PASS" endtime="20170816 10:10:00.615"></status>
</kw>
<status starttime="20170816 10:10:00.614" status="PASS" endtime="20170816 10:10:00.615"></status>
</kw>
<status starttime="20170816 10:10:00.613" status="PASS" endtime="20170816 10:10:00.615"></status>
</kw>
<status starttime="20170816 10:10:00.612" status="PASS" endtime="20170816 10:10:00.615"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:10:00.615" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:10:00.615" status="PASS" endtime="20170816 10:10:00.615"></status>
</kw>
<msg timestamp="20170816 10:10:00.616" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:09:59.685" status="PASS" endtime="20170816 10:10:00.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:00.616" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:00.616" status="PASS" endtime="20170816 10:10:00.616"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:10:00.617" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:10:00.617" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:10:00.617" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:10:00.617" status="PASS" endtime="20170816 10:10:00.617"></status>
</kw>
<msg timestamp="20170816 10:10:00.618" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:09:59.685" status="PASS" endtime="20170816 10:10:00.618"></status>
</kw>
<msg timestamp="20170816 10:10:00.618" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:09:59.684" status="PASS" endtime="20170816 10:10:00.618"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:10:00.618" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:10:00.618" status="FAIL" endtime="20170816 10:10:00.618"></status>
</kw>
<status starttime="20170816 10:09:59.684" status="FAIL" endtime="20170816 10:10:00.619"></status>
</kw>
<msg timestamp="20170816 10:10:00.619" level="INFO">${status} = False</msg>
<status starttime="20170816 10:09:59.684" status="PASS" endtime="20170816 10:10:00.619"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:10:00.619" status="PASS" endtime="20170816 10:10:00.620"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:10:00.625" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:10:00.624" status="PASS" endtime="20170816 10:10:00.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:10:00.626" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:10:00.626" status="PASS" endtime="20170816 10:10:00.626"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:10:00.627" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:10:00.627" status="PASS" endtime="20170816 10:10:00.627"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:10:00.628" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:10:00.628" status="PASS" endtime="20170816 10:10:00.628"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:10:01.053" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:10:00.629" status="PASS" endtime="20170816 10:10:01.053"></status>
</kw>
<msg timestamp="20170816 10:10:01.053" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:10:01.053" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:00.629" status="PASS" endtime="20170816 10:10:01.053"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:10:01.054" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:01.054" status="PASS" endtime="20170816 10:10:01.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:01.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:01.055" status="PASS" endtime="20170816 10:10:01.055"></status>
</kw>
<status starttime="20170816 10:10:00.624" status="PASS" endtime="20170816 10:10:01.055"></status>
</kw>
<status starttime="20170816 10:10:00.623" status="PASS" endtime="20170816 10:10:01.055"></status>
</kw>
<status starttime="20170816 10:10:00.622" status="PASS" endtime="20170816 10:10:01.055"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:10:01.056" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:10:01.056" status="PASS" endtime="20170816 10:10:01.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:01.058" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:10:01.057" status="PASS" endtime="20170816 10:10:01.058"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:01.059" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:10:01.059" status="PASS" endtime="20170816 10:10:01.059"></status>
</kw>
<status starttime="20170816 10:10:01.058" status="PASS" endtime="20170816 10:10:01.059"></status>
</kw>
<status starttime="20170816 10:10:01.057" status="PASS" endtime="20170816 10:10:01.059"></status>
</kw>
<status starttime="20170816 10:10:01.056" status="PASS" endtime="20170816 10:10:01.059"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:10:01.675" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:10:01.676" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:01.060" status="PASS" endtime="20170816 10:10:01.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:01.678" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:01.677" status="PASS" endtime="20170816 10:10:01.678"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:01.679" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:01.679" status="PASS" endtime="20170816 10:10:01.679"></status>
</kw>
<status starttime="20170816 10:10:01.678" status="PASS" endtime="20170816 10:10:01.679"></status>
</kw>
<status starttime="20170816 10:10:01.676" status="PASS" endtime="20170816 10:10:01.679"></status>
</kw>
<status starttime="20170816 10:10:01.676" status="PASS" endtime="20170816 10:10:01.679"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:10:01.680" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:10:01.680" status="PASS" endtime="20170816 10:10:01.680"></status>
</kw>
<msg timestamp="20170816 10:10:01.680" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:00.621" status="PASS" endtime="20170816 10:10:01.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:01.681" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:01.680" status="PASS" endtime="20170816 10:10:01.681"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:10:01.681" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:10:01.681" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:10:01.681" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:10:01.681" status="PASS" endtime="20170816 10:10:01.681"></status>
</kw>
<msg timestamp="20170816 10:10:01.682" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:10:00.620" status="PASS" endtime="20170816 10:10:01.682"></status>
</kw>
<msg timestamp="20170816 10:10:01.682" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:10:00.620" status="PASS" endtime="20170816 10:10:01.682"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:10:01.682" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:10:01.683" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:10:01.682" status="FAIL" endtime="20170816 10:10:01.683"></status>
</kw>
<status starttime="20170816 10:09:59.683" status="FAIL" endtime="20170816 10:10:01.683"></status>
</kw>
<status starttime="20170816 10:09:57.908" status="FAIL" endtime="20170816 10:10:01.683"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:10:11.688" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:10:11.688" status="PASS" endtime="20170816 10:10:11.689"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:10:11.689" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:10:11.689" status="PASS" endtime="20170816 10:10:11.689"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:10:11.690" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:10:11.690" status="PASS" endtime="20170816 10:10:11.690"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:10:11.691" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:10:11.690" status="PASS" endtime="20170816 10:10:11.691"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:10:12.062" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:10:11.691" status="PASS" endtime="20170816 10:10:12.062"></status>
</kw>
<msg timestamp="20170816 10:10:12.062" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:10:12.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:11.691" status="PASS" endtime="20170816 10:10:12.062"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:10:12.063" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:12.063" status="PASS" endtime="20170816 10:10:12.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:12.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:12.063" status="PASS" endtime="20170816 10:10:12.064"></status>
</kw>
<status starttime="20170816 10:10:11.687" status="PASS" endtime="20170816 10:10:12.064"></status>
</kw>
<status starttime="20170816 10:10:11.687" status="PASS" endtime="20170816 10:10:12.064"></status>
</kw>
<status starttime="20170816 10:10:11.686" status="PASS" endtime="20170816 10:10:12.064"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:10:12.065" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:10:12.065" status="PASS" endtime="20170816 10:10:12.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:12.067" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:10:12.066" status="PASS" endtime="20170816 10:10:12.067"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:12.068" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:10:12.068" status="PASS" endtime="20170816 10:10:12.068"></status>
</kw>
<status starttime="20170816 10:10:12.067" status="PASS" endtime="20170816 10:10:12.068"></status>
</kw>
<status starttime="20170816 10:10:12.066" status="PASS" endtime="20170816 10:10:12.068"></status>
</kw>
<status starttime="20170816 10:10:12.065" status="PASS" endtime="20170816 10:10:12.069"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:10:12.482" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:10:12.482" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:12.069" status="PASS" endtime="20170816 10:10:12.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:12.485" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:12.484" status="PASS" endtime="20170816 10:10:12.485"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:12.485" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:12.485" status="PASS" endtime="20170816 10:10:12.486"></status>
</kw>
<status starttime="20170816 10:10:12.485" status="PASS" endtime="20170816 10:10:12.486"></status>
</kw>
<status starttime="20170816 10:10:12.483" status="PASS" endtime="20170816 10:10:12.486"></status>
</kw>
<status starttime="20170816 10:10:12.483" status="PASS" endtime="20170816 10:10:12.486"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:10:12.486" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:10:12.486" status="PASS" endtime="20170816 10:10:12.486"></status>
</kw>
<msg timestamp="20170816 10:10:12.487" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:11.686" status="PASS" endtime="20170816 10:10:12.487"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:12.487" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:12.487" status="PASS" endtime="20170816 10:10:12.487"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:10:12.488" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:10:12.488" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:10:12.488" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:10:12.488" status="PASS" endtime="20170816 10:10:12.488"></status>
</kw>
<msg timestamp="20170816 10:10:12.488" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:10:11.685" status="PASS" endtime="20170816 10:10:12.488"></status>
</kw>
<msg timestamp="20170816 10:10:12.489" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:10:11.685" status="PASS" endtime="20170816 10:10:12.489"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:10:12.489" status="PASS" endtime="20170816 10:10:12.489"></status>
</kw>
<status starttime="20170816 10:10:11.684" status="PASS" endtime="20170816 10:10:12.489"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:10:12.493" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:10:12.492" status="PASS" endtime="20170816 10:10:12.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:10:12.494" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:10:12.494" status="PASS" endtime="20170816 10:10:12.494"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:10:12.495" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:10:12.494" status="PASS" endtime="20170816 10:10:12.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:10:12.495" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:10:12.495" status="PASS" endtime="20170816 10:10:12.496"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:10:12.777" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:10:12.496" status="PASS" endtime="20170816 10:10:12.777"></status>
</kw>
<msg timestamp="20170816 10:10:12.777" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:10:12.777" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:12.496" status="PASS" endtime="20170816 10:10:12.777"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:10:12.778" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:12.777" status="PASS" endtime="20170816 10:10:12.778"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:12.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:12.778" status="PASS" endtime="20170816 10:10:12.778"></status>
</kw>
<status starttime="20170816 10:10:12.492" status="PASS" endtime="20170816 10:10:12.779"></status>
</kw>
<status starttime="20170816 10:10:12.492" status="PASS" endtime="20170816 10:10:12.779"></status>
</kw>
<status starttime="20170816 10:10:12.491" status="PASS" endtime="20170816 10:10:12.779"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:10:12.779" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:10:12.779" status="PASS" endtime="20170816 10:10:12.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:12.782" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:10:12.781" status="PASS" endtime="20170816 10:10:12.782"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:12.782" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:10:12.782" status="PASS" endtime="20170816 10:10:12.783"></status>
</kw>
<status starttime="20170816 10:10:12.782" status="PASS" endtime="20170816 10:10:12.783"></status>
</kw>
<status starttime="20170816 10:10:12.780" status="PASS" endtime="20170816 10:10:12.783"></status>
</kw>
<status starttime="20170816 10:10:12.780" status="PASS" endtime="20170816 10:10:12.783"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:10:13.545" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:10:13.546" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:12.783" status="PASS" endtime="20170816 10:10:13.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:13.548" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:13.547" status="PASS" endtime="20170816 10:10:13.548"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:13.549" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:13.549" status="PASS" endtime="20170816 10:10:13.550"></status>
</kw>
<status starttime="20170816 10:10:13.548" status="PASS" endtime="20170816 10:10:13.550"></status>
</kw>
<status starttime="20170816 10:10:13.547" status="PASS" endtime="20170816 10:10:13.550"></status>
</kw>
<status starttime="20170816 10:10:13.546" status="PASS" endtime="20170816 10:10:13.550"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:10:13.550" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:10:13.550" status="PASS" endtime="20170816 10:10:13.550"></status>
</kw>
<msg timestamp="20170816 10:10:13.551" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:12.490" status="PASS" endtime="20170816 10:10:13.551"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:13.551" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:13.551" status="PASS" endtime="20170816 10:10:13.551"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:10:13.552" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:10:13.552" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:10:13.552" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:10:13.552" status="PASS" endtime="20170816 10:10:13.552"></status>
</kw>
<msg timestamp="20170816 10:10:13.552" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:10:12.490" status="PASS" endtime="20170816 10:10:13.552"></status>
</kw>
<msg timestamp="20170816 10:10:13.553" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:10:12.489" status="PASS" endtime="20170816 10:10:13.553"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:10:13.553" status="PASS" endtime="20170816 10:10:13.553"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:10:13.558" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:10:13.558" status="PASS" endtime="20170816 10:10:13.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:10:13.560" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:10:13.559" status="PASS" endtime="20170816 10:10:13.560"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:10:13.560" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:10:13.560" status="PASS" endtime="20170816 10:10:13.560"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:10:13.561" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:10:13.561" status="PASS" endtime="20170816 10:10:13.561"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:10:13.971" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:10:13.562" status="PASS" endtime="20170816 10:10:13.971"></status>
</kw>
<msg timestamp="20170816 10:10:13.972" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:10:13.972" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:13.561" status="PASS" endtime="20170816 10:10:13.972"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:10:13.972" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:13.972" status="PASS" endtime="20170816 10:10:13.972"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:13.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:13.973" status="PASS" endtime="20170816 10:10:13.973"></status>
</kw>
<status starttime="20170816 10:10:13.558" status="PASS" endtime="20170816 10:10:13.973"></status>
</kw>
<status starttime="20170816 10:10:13.557" status="PASS" endtime="20170816 10:10:13.973"></status>
</kw>
<status starttime="20170816 10:10:13.557" status="PASS" endtime="20170816 10:10:13.973"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:10:13.974" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:10:13.974" status="PASS" endtime="20170816 10:10:13.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:13.977" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:10:13.976" status="PASS" endtime="20170816 10:10:13.977"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:13.978" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:10:13.977" status="PASS" endtime="20170816 10:10:13.978"></status>
</kw>
<status starttime="20170816 10:10:13.977" status="PASS" endtime="20170816 10:10:13.978"></status>
</kw>
<status starttime="20170816 10:10:13.975" status="PASS" endtime="20170816 10:10:13.978"></status>
</kw>
<status starttime="20170816 10:10:13.975" status="PASS" endtime="20170816 10:10:13.978"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:10:14.474" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:10:14.475" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:13.978" status="PASS" endtime="20170816 10:10:14.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:14.477" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:14.476" status="PASS" endtime="20170816 10:10:14.477"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:14.478" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:14.477" status="PASS" endtime="20170816 10:10:14.478"></status>
</kw>
<status starttime="20170816 10:10:14.477" status="PASS" endtime="20170816 10:10:14.478"></status>
</kw>
<status starttime="20170816 10:10:14.476" status="PASS" endtime="20170816 10:10:14.478"></status>
</kw>
<status starttime="20170816 10:10:14.475" status="PASS" endtime="20170816 10:10:14.478"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:10:14.479" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:10:14.478" status="PASS" endtime="20170816 10:10:14.479"></status>
</kw>
<msg timestamp="20170816 10:10:14.479" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:13.556" status="PASS" endtime="20170816 10:10:14.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:14.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:14.479" status="PASS" endtime="20170816 10:10:14.480"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:10:14.480" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:10:14.480" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:10:14.480" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:10:14.480" status="PASS" endtime="20170816 10:10:14.480"></status>
</kw>
<msg timestamp="20170816 10:10:14.481" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:10:13.555" status="PASS" endtime="20170816 10:10:14.481"></status>
</kw>
<msg timestamp="20170816 10:10:14.481" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:10:13.555" status="PASS" endtime="20170816 10:10:14.481"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:10:14.482" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:10:14.481" status="FAIL" endtime="20170816 10:10:14.482"></status>
</kw>
<status starttime="20170816 10:10:13.554" status="FAIL" endtime="20170816 10:10:14.482"></status>
</kw>
<msg timestamp="20170816 10:10:14.482" level="INFO">${status} = False</msg>
<status starttime="20170816 10:10:13.554" status="PASS" endtime="20170816 10:10:14.482"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:10:14.482" status="PASS" endtime="20170816 10:10:14.482"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:10:14.486" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:10:14.486" status="PASS" endtime="20170816 10:10:14.486"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:10:14.487" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:10:14.487" status="PASS" endtime="20170816 10:10:14.487"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:10:14.488" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:10:14.487" status="PASS" endtime="20170816 10:10:14.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:10:14.488" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:10:14.488" status="PASS" endtime="20170816 10:10:14.488"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:10:14.891" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:10:14.489" status="PASS" endtime="20170816 10:10:14.891"></status>
</kw>
<msg timestamp="20170816 10:10:14.891" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:10:14.891" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:14.489" status="PASS" endtime="20170816 10:10:14.891"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:10:14.892" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:14.891" status="PASS" endtime="20170816 10:10:14.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:14.892" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:14.892" status="PASS" endtime="20170816 10:10:14.893"></status>
</kw>
<status starttime="20170816 10:10:14.485" status="PASS" endtime="20170816 10:10:14.893"></status>
</kw>
<status starttime="20170816 10:10:14.485" status="PASS" endtime="20170816 10:10:14.893"></status>
</kw>
<status starttime="20170816 10:10:14.484" status="PASS" endtime="20170816 10:10:14.893"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:10:14.893" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:10:14.893" status="PASS" endtime="20170816 10:10:14.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:14.896" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:10:14.895" status="PASS" endtime="20170816 10:10:14.896"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:14.896" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:10:14.896" status="PASS" endtime="20170816 10:10:14.897"></status>
</kw>
<status starttime="20170816 10:10:14.896" status="PASS" endtime="20170816 10:10:14.897"></status>
</kw>
<status starttime="20170816 10:10:14.894" status="PASS" endtime="20170816 10:10:14.897"></status>
</kw>
<status starttime="20170816 10:10:14.894" status="PASS" endtime="20170816 10:10:14.897"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:10:15.366" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:10:15.366" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:14.897" status="PASS" endtime="20170816 10:10:15.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:15.368" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:15.367" status="PASS" endtime="20170816 10:10:15.368"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:15.369" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:15.369" status="PASS" endtime="20170816 10:10:15.369"></status>
</kw>
<status starttime="20170816 10:10:15.368" status="PASS" endtime="20170816 10:10:15.369"></status>
</kw>
<status starttime="20170816 10:10:15.367" status="PASS" endtime="20170816 10:10:15.369"></status>
</kw>
<status starttime="20170816 10:10:15.366" status="PASS" endtime="20170816 10:10:15.369"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:10:15.370" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:10:15.370" status="PASS" endtime="20170816 10:10:15.370"></status>
</kw>
<msg timestamp="20170816 10:10:15.370" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:14.484" status="PASS" endtime="20170816 10:10:15.370"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:15.371" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:15.370" status="PASS" endtime="20170816 10:10:15.371"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:10:15.371" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:10:15.371" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:10:15.371" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:10:15.371" status="PASS" endtime="20170816 10:10:15.371"></status>
</kw>
<msg timestamp="20170816 10:10:15.372" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:10:14.483" status="PASS" endtime="20170816 10:10:15.372"></status>
</kw>
<msg timestamp="20170816 10:10:15.372" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:10:14.483" status="PASS" endtime="20170816 10:10:15.372"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:10:15.372" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:10:15.373" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:10:15.372" status="FAIL" endtime="20170816 10:10:15.373"></status>
</kw>
<status starttime="20170816 10:10:13.553" status="FAIL" endtime="20170816 10:10:15.373"></status>
</kw>
<status starttime="20170816 10:10:11.684" status="FAIL" endtime="20170816 10:10:15.373"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:10:25.379" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:10:25.379" status="PASS" endtime="20170816 10:10:25.380"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:10:25.380" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:10:25.380" status="PASS" endtime="20170816 10:10:25.380"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:10:25.381" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:10:25.380" status="PASS" endtime="20170816 10:10:25.381"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:10:25.381" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:10:25.381" status="PASS" endtime="20170816 10:10:25.381"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:10:25.733" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:10:25.382" status="PASS" endtime="20170816 10:10:25.733"></status>
</kw>
<msg timestamp="20170816 10:10:25.733" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:10:25.733" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:25.382" status="PASS" endtime="20170816 10:10:25.733"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:10:25.734" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:25.734" status="PASS" endtime="20170816 10:10:25.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:25.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:25.734" status="PASS" endtime="20170816 10:10:25.735"></status>
</kw>
<status starttime="20170816 10:10:25.378" status="PASS" endtime="20170816 10:10:25.735"></status>
</kw>
<status starttime="20170816 10:10:25.377" status="PASS" endtime="20170816 10:10:25.735"></status>
</kw>
<status starttime="20170816 10:10:25.377" status="PASS" endtime="20170816 10:10:25.735"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:10:25.736" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:10:25.735" status="PASS" endtime="20170816 10:10:25.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:25.738" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:10:25.737" status="PASS" endtime="20170816 10:10:25.738"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:25.739" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:10:25.739" status="PASS" endtime="20170816 10:10:25.739"></status>
</kw>
<status starttime="20170816 10:10:25.738" status="PASS" endtime="20170816 10:10:25.739"></status>
</kw>
<status starttime="20170816 10:10:25.737" status="PASS" endtime="20170816 10:10:25.739"></status>
</kw>
<status starttime="20170816 10:10:25.736" status="PASS" endtime="20170816 10:10:25.739"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:10:26.348" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:10:26.348" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:25.739" status="PASS" endtime="20170816 10:10:26.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:26.350" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:26.350" status="PASS" endtime="20170816 10:10:26.351"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:26.352" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:26.351" status="PASS" endtime="20170816 10:10:26.352"></status>
</kw>
<status starttime="20170816 10:10:26.351" status="PASS" endtime="20170816 10:10:26.352"></status>
</kw>
<status starttime="20170816 10:10:26.349" status="PASS" endtime="20170816 10:10:26.352"></status>
</kw>
<status starttime="20170816 10:10:26.349" status="PASS" endtime="20170816 10:10:26.352"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:10:26.353" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:10:26.352" status="PASS" endtime="20170816 10:10:26.353"></status>
</kw>
<msg timestamp="20170816 10:10:26.353" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:25.376" status="PASS" endtime="20170816 10:10:26.353"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:26.354" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:26.353" status="PASS" endtime="20170816 10:10:26.354"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:10:26.354" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:10:26.354" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:10:26.354" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:10:26.354" status="PASS" endtime="20170816 10:10:26.354"></status>
</kw>
<msg timestamp="20170816 10:10:26.355" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:10:25.375" status="PASS" endtime="20170816 10:10:26.355"></status>
</kw>
<msg timestamp="20170816 10:10:26.355" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:10:25.375" status="PASS" endtime="20170816 10:10:26.355"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:10:26.355" status="PASS" endtime="20170816 10:10:26.356"></status>
</kw>
<status starttime="20170816 10:10:25.375" status="PASS" endtime="20170816 10:10:26.356"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:10:26.359" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:10:26.359" status="PASS" endtime="20170816 10:10:26.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:10:26.360" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:10:26.360" status="PASS" endtime="20170816 10:10:26.360"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:10:26.361" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:10:26.361" status="PASS" endtime="20170816 10:10:26.361"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:10:26.362" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:10:26.361" status="PASS" endtime="20170816 10:10:26.362"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:10:26.736" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:10:26.363" status="PASS" endtime="20170816 10:10:26.737"></status>
</kw>
<msg timestamp="20170816 10:10:26.737" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:10:26.737" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:26.362" status="PASS" endtime="20170816 10:10:26.737"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:10:26.738" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:26.737" status="PASS" endtime="20170816 10:10:26.738"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:26.738" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:26.738" status="PASS" endtime="20170816 10:10:26.738"></status>
</kw>
<status starttime="20170816 10:10:26.358" status="PASS" endtime="20170816 10:10:26.739"></status>
</kw>
<status starttime="20170816 10:10:26.358" status="PASS" endtime="20170816 10:10:26.739"></status>
</kw>
<status starttime="20170816 10:10:26.357" status="PASS" endtime="20170816 10:10:26.739"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:10:26.739" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:10:26.739" status="PASS" endtime="20170816 10:10:26.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:26.742" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:10:26.741" status="PASS" endtime="20170816 10:10:26.742"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:26.743" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:10:26.743" status="PASS" endtime="20170816 10:10:26.743"></status>
</kw>
<status starttime="20170816 10:10:26.742" status="PASS" endtime="20170816 10:10:26.743"></status>
</kw>
<status starttime="20170816 10:10:26.740" status="PASS" endtime="20170816 10:10:26.743"></status>
</kw>
<status starttime="20170816 10:10:26.740" status="PASS" endtime="20170816 10:10:26.743"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:10:27.423" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:10:27.423" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:26.743" status="PASS" endtime="20170816 10:10:27.423"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:27.425" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:27.425" status="PASS" endtime="20170816 10:10:27.425"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:27.426" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:27.426" status="PASS" endtime="20170816 10:10:27.426"></status>
</kw>
<status starttime="20170816 10:10:27.426" status="PASS" endtime="20170816 10:10:27.427"></status>
</kw>
<status starttime="20170816 10:10:27.424" status="PASS" endtime="20170816 10:10:27.427"></status>
</kw>
<status starttime="20170816 10:10:27.424" status="PASS" endtime="20170816 10:10:27.427"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:10:27.427" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:10:27.427" status="PASS" endtime="20170816 10:10:27.427"></status>
</kw>
<msg timestamp="20170816 10:10:27.427" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:26.357" status="PASS" endtime="20170816 10:10:27.427"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:27.428" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:27.428" status="PASS" endtime="20170816 10:10:27.428"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:10:27.429" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:10:27.429" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:10:27.429" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:10:27.428" status="PASS" endtime="20170816 10:10:27.429"></status>
</kw>
<msg timestamp="20170816 10:10:27.429" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:10:26.356" status="PASS" endtime="20170816 10:10:27.429"></status>
</kw>
<msg timestamp="20170816 10:10:27.430" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:10:26.356" status="PASS" endtime="20170816 10:10:27.430"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:10:27.430" status="PASS" endtime="20170816 10:10:27.430"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:10:27.435" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:10:27.434" status="PASS" endtime="20170816 10:10:27.435"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:10:27.436" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:10:27.436" status="PASS" endtime="20170816 10:10:27.436"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:10:27.437" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:10:27.436" status="PASS" endtime="20170816 10:10:27.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:10:27.437" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:10:27.437" status="PASS" endtime="20170816 10:10:27.437"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:10:28.126" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:10:27.438" status="PASS" endtime="20170816 10:10:28.126"></status>
</kw>
<msg timestamp="20170816 10:10:28.126" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:10:28.126" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:27.438" status="PASS" endtime="20170816 10:10:28.126"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:10:28.127" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:28.127" status="PASS" endtime="20170816 10:10:28.127"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:28.128" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:28.128" status="PASS" endtime="20170816 10:10:28.128"></status>
</kw>
<status starttime="20170816 10:10:27.434" status="PASS" endtime="20170816 10:10:28.128"></status>
</kw>
<status starttime="20170816 10:10:27.433" status="PASS" endtime="20170816 10:10:28.128"></status>
</kw>
<status starttime="20170816 10:10:27.433" status="PASS" endtime="20170816 10:10:28.128"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:10:28.129" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:10:28.129" status="PASS" endtime="20170816 10:10:28.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:28.131" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:10:28.130" status="PASS" endtime="20170816 10:10:28.131"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:28.132" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:10:28.132" status="PASS" endtime="20170816 10:10:28.132"></status>
</kw>
<status starttime="20170816 10:10:28.131" status="PASS" endtime="20170816 10:10:28.132"></status>
</kw>
<status starttime="20170816 10:10:28.130" status="PASS" endtime="20170816 10:10:28.132"></status>
</kw>
<status starttime="20170816 10:10:28.129" status="PASS" endtime="20170816 10:10:28.132"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:10:28.478" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:10:28.478" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:28.133" status="PASS" endtime="20170816 10:10:28.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:28.481" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:28.480" status="PASS" endtime="20170816 10:10:28.481"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:28.482" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:28.481" status="PASS" endtime="20170816 10:10:28.482"></status>
</kw>
<status starttime="20170816 10:10:28.481" status="PASS" endtime="20170816 10:10:28.482"></status>
</kw>
<status starttime="20170816 10:10:28.479" status="PASS" endtime="20170816 10:10:28.482"></status>
</kw>
<status starttime="20170816 10:10:28.479" status="PASS" endtime="20170816 10:10:28.482"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:10:28.482" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:10:28.482" status="PASS" endtime="20170816 10:10:28.482"></status>
</kw>
<msg timestamp="20170816 10:10:28.483" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:27.432" status="PASS" endtime="20170816 10:10:28.483"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:28.483" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:28.483" status="PASS" endtime="20170816 10:10:28.483"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:10:28.484" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:10:28.484" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:10:28.484" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:10:28.484" status="PASS" endtime="20170816 10:10:28.484"></status>
</kw>
<msg timestamp="20170816 10:10:28.484" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:10:27.432" status="PASS" endtime="20170816 10:10:28.484"></status>
</kw>
<msg timestamp="20170816 10:10:28.485" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:10:27.431" status="PASS" endtime="20170816 10:10:28.485"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:10:28.485" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:10:28.485" status="FAIL" endtime="20170816 10:10:28.485"></status>
</kw>
<status starttime="20170816 10:10:27.431" status="FAIL" endtime="20170816 10:10:28.486"></status>
</kw>
<msg timestamp="20170816 10:10:28.486" level="INFO">${status} = False</msg>
<status starttime="20170816 10:10:27.431" status="PASS" endtime="20170816 10:10:28.486"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:10:28.486" status="PASS" endtime="20170816 10:10:28.486"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:10:28.490" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:10:28.490" status="PASS" endtime="20170816 10:10:28.491"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:10:28.491" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:10:28.491" status="PASS" endtime="20170816 10:10:28.491"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:10:28.492" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:10:28.492" status="PASS" endtime="20170816 10:10:28.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:10:28.493" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:10:28.492" status="PASS" endtime="20170816 10:10:28.493"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:10:28.674" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:10:28.493" status="PASS" endtime="20170816 10:10:28.674"></status>
</kw>
<msg timestamp="20170816 10:10:28.674" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:10:28.675" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:28.493" status="PASS" endtime="20170816 10:10:28.675"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:10:28.675" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:28.675" status="PASS" endtime="20170816 10:10:28.675"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:28.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:28.676" status="PASS" endtime="20170816 10:10:28.676"></status>
</kw>
<status starttime="20170816 10:10:28.489" status="PASS" endtime="20170816 10:10:28.676"></status>
</kw>
<status starttime="20170816 10:10:28.489" status="PASS" endtime="20170816 10:10:28.676"></status>
</kw>
<status starttime="20170816 10:10:28.488" status="PASS" endtime="20170816 10:10:28.676"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:10:28.677" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:10:28.677" status="PASS" endtime="20170816 10:10:28.677"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:28.679" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:10:28.678" status="PASS" endtime="20170816 10:10:28.679"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:28.680" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:10:28.680" status="PASS" endtime="20170816 10:10:28.680"></status>
</kw>
<status starttime="20170816 10:10:28.679" status="PASS" endtime="20170816 10:10:28.680"></status>
</kw>
<status starttime="20170816 10:10:28.678" status="PASS" endtime="20170816 10:10:28.680"></status>
</kw>
<status starttime="20170816 10:10:28.677" status="PASS" endtime="20170816 10:10:28.680"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:10:28.768" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:10:28.769" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:28.681" status="PASS" endtime="20170816 10:10:28.769"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:28.771" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:28.770" status="PASS" endtime="20170816 10:10:28.772"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:28.773" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:28.773" status="PASS" endtime="20170816 10:10:28.773"></status>
</kw>
<status starttime="20170816 10:10:28.772" status="PASS" endtime="20170816 10:10:28.773"></status>
</kw>
<status starttime="20170816 10:10:28.770" status="PASS" endtime="20170816 10:10:28.773"></status>
</kw>
<status starttime="20170816 10:10:28.769" status="PASS" endtime="20170816 10:10:28.773"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:10:28.774" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:10:28.774" status="PASS" endtime="20170816 10:10:28.774"></status>
</kw>
<msg timestamp="20170816 10:10:28.774" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:28.487" status="PASS" endtime="20170816 10:10:28.774"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:28.775" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:28.775" status="PASS" endtime="20170816 10:10:28.775"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:10:28.776" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:10:28.776" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:10:28.776" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:10:28.776" status="PASS" endtime="20170816 10:10:28.776"></status>
</kw>
<msg timestamp="20170816 10:10:28.776" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:10:28.487" status="PASS" endtime="20170816 10:10:28.776"></status>
</kw>
<msg timestamp="20170816 10:10:28.777" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:10:28.486" status="PASS" endtime="20170816 10:10:28.777"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:10:28.777" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:10:28.777" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:10:28.777" status="FAIL" endtime="20170816 10:10:28.777"></status>
</kw>
<status starttime="20170816 10:10:27.430" status="FAIL" endtime="20170816 10:10:28.778"></status>
</kw>
<status starttime="20170816 10:10:25.374" status="FAIL" endtime="20170816 10:10:28.778"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:10:38.784" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:10:38.784" status="PASS" endtime="20170816 10:10:38.785"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:10:38.786" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:10:38.785" status="PASS" endtime="20170816 10:10:38.786"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:10:38.787" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:10:38.786" status="PASS" endtime="20170816 10:10:38.787"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:10:38.788" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:10:38.787" status="PASS" endtime="20170816 10:10:38.788"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:10:38.966" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:10:38.789" status="PASS" endtime="20170816 10:10:38.966"></status>
</kw>
<msg timestamp="20170816 10:10:38.967" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:10:38.967" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:38.788" status="PASS" endtime="20170816 10:10:38.967"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:10:38.967" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:38.967" status="PASS" endtime="20170816 10:10:38.968"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:38.968" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:38.968" status="PASS" endtime="20170816 10:10:38.968"></status>
</kw>
<status starttime="20170816 10:10:38.783" status="PASS" endtime="20170816 10:10:38.968"></status>
</kw>
<status starttime="20170816 10:10:38.782" status="PASS" endtime="20170816 10:10:38.969"></status>
</kw>
<status starttime="20170816 10:10:38.782" status="PASS" endtime="20170816 10:10:38.969"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:10:38.969" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:10:38.969" status="PASS" endtime="20170816 10:10:38.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:38.971" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:10:38.971" status="PASS" endtime="20170816 10:10:38.971"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:38.972" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:10:38.972" status="PASS" endtime="20170816 10:10:38.972"></status>
</kw>
<status starttime="20170816 10:10:38.971" status="PASS" endtime="20170816 10:10:38.972"></status>
</kw>
<status starttime="20170816 10:10:38.970" status="PASS" endtime="20170816 10:10:38.973"></status>
</kw>
<status starttime="20170816 10:10:38.970" status="PASS" endtime="20170816 10:10:38.973"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:10:42.581" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:10:42.581" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:38.973" status="PASS" endtime="20170816 10:10:42.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:42.583" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:42.583" status="PASS" endtime="20170816 10:10:42.583"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:42.584" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:42.584" status="PASS" endtime="20170816 10:10:42.584"></status>
</kw>
<status starttime="20170816 10:10:42.583" status="PASS" endtime="20170816 10:10:42.584"></status>
</kw>
<status starttime="20170816 10:10:42.582" status="PASS" endtime="20170816 10:10:42.585"></status>
</kw>
<status starttime="20170816 10:10:42.582" status="PASS" endtime="20170816 10:10:42.585"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:10:42.585" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:10:42.585" status="PASS" endtime="20170816 10:10:42.585"></status>
</kw>
<msg timestamp="20170816 10:10:42.585" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:38.781" status="PASS" endtime="20170816 10:10:42.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:42.586" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:42.586" status="PASS" endtime="20170816 10:10:42.586"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:10:42.587" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:10:42.587" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:10:42.587" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:10:42.586" status="PASS" endtime="20170816 10:10:42.587"></status>
</kw>
<msg timestamp="20170816 10:10:42.587" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:10:38.780" status="PASS" endtime="20170816 10:10:42.587"></status>
</kw>
<msg timestamp="20170816 10:10:42.587" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:10:38.779" status="PASS" endtime="20170816 10:10:42.587"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:10:42.588" status="PASS" endtime="20170816 10:10:42.588"></status>
</kw>
<status starttime="20170816 10:10:38.779" status="PASS" endtime="20170816 10:10:42.588"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:10:42.592" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:10:42.591" status="PASS" endtime="20170816 10:10:42.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:10:42.596" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:10:42.596" status="PASS" endtime="20170816 10:10:42.597"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:10:42.597" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:10:42.597" status="PASS" endtime="20170816 10:10:42.597"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:10:42.598" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:10:42.597" status="PASS" endtime="20170816 10:10:42.598"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:10:43.450" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:10:42.599" status="PASS" endtime="20170816 10:10:43.450"></status>
</kw>
<msg timestamp="20170816 10:10:43.450" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:10:43.450" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:42.598" status="PASS" endtime="20170816 10:10:43.450"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:10:43.451" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:43.451" status="PASS" endtime="20170816 10:10:43.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:43.452" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:43.451" status="PASS" endtime="20170816 10:10:43.452"></status>
</kw>
<status starttime="20170816 10:10:42.591" status="PASS" endtime="20170816 10:10:43.452"></status>
</kw>
<status starttime="20170816 10:10:42.590" status="PASS" endtime="20170816 10:10:43.452"></status>
</kw>
<status starttime="20170816 10:10:42.590" status="PASS" endtime="20170816 10:10:43.452"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:10:43.453" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:10:43.452" status="PASS" endtime="20170816 10:10:43.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:43.455" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:10:43.454" status="PASS" endtime="20170816 10:10:43.455"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:43.456" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:10:43.456" status="PASS" endtime="20170816 10:10:43.456"></status>
</kw>
<status starttime="20170816 10:10:43.455" status="PASS" endtime="20170816 10:10:43.456"></status>
</kw>
<status starttime="20170816 10:10:43.454" status="PASS" endtime="20170816 10:10:43.456"></status>
</kw>
<status starttime="20170816 10:10:43.453" status="PASS" endtime="20170816 10:10:43.456"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:10:43.625" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:10:43.625" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:43.456" status="PASS" endtime="20170816 10:10:43.625"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:43.627" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:43.627" status="PASS" endtime="20170816 10:10:43.627"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:43.628" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:43.628" status="PASS" endtime="20170816 10:10:43.628"></status>
</kw>
<status starttime="20170816 10:10:43.627" status="PASS" endtime="20170816 10:10:43.628"></status>
</kw>
<status starttime="20170816 10:10:43.626" status="PASS" endtime="20170816 10:10:43.628"></status>
</kw>
<status starttime="20170816 10:10:43.625" status="PASS" endtime="20170816 10:10:43.629"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:10:43.629" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:10:43.629" status="PASS" endtime="20170816 10:10:43.629"></status>
</kw>
<msg timestamp="20170816 10:10:43.629" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:42.589" status="PASS" endtime="20170816 10:10:43.629"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:43.630" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:43.630" status="PASS" endtime="20170816 10:10:43.630"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:10:43.630" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:10:43.631" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:10:43.631" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:10:43.630" status="PASS" endtime="20170816 10:10:43.631"></status>
</kw>
<msg timestamp="20170816 10:10:43.631" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:10:42.589" status="PASS" endtime="20170816 10:10:43.631"></status>
</kw>
<msg timestamp="20170816 10:10:43.631" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:10:42.588" status="PASS" endtime="20170816 10:10:43.631"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:10:43.632" status="PASS" endtime="20170816 10:10:43.632"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:10:43.637" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:10:43.637" status="PASS" endtime="20170816 10:10:43.637"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:10:43.638" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:10:43.637" status="PASS" endtime="20170816 10:10:43.638"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:10:43.638" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:10:43.638" status="PASS" endtime="20170816 10:10:43.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:10:43.639" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:10:43.639" status="PASS" endtime="20170816 10:10:43.639"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:10:43.830" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:10:43.640" status="PASS" endtime="20170816 10:10:43.830"></status>
</kw>
<msg timestamp="20170816 10:10:43.831" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:10:43.831" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:43.639" status="PASS" endtime="20170816 10:10:43.831"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:10:43.832" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:43.831" status="PASS" endtime="20170816 10:10:43.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:43.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:43.832" status="PASS" endtime="20170816 10:10:43.832"></status>
</kw>
<status starttime="20170816 10:10:43.636" status="PASS" endtime="20170816 10:10:43.832"></status>
</kw>
<status starttime="20170816 10:10:43.636" status="PASS" endtime="20170816 10:10:43.833"></status>
</kw>
<status starttime="20170816 10:10:43.635" status="PASS" endtime="20170816 10:10:43.833"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:10:43.833" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:10:43.833" status="PASS" endtime="20170816 10:10:43.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:43.836" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:10:43.835" status="PASS" endtime="20170816 10:10:43.836"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:43.837" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:10:43.836" status="PASS" endtime="20170816 10:10:43.837"></status>
</kw>
<status starttime="20170816 10:10:43.836" status="PASS" endtime="20170816 10:10:43.837"></status>
</kw>
<status starttime="20170816 10:10:43.834" status="PASS" endtime="20170816 10:10:43.837"></status>
</kw>
<status starttime="20170816 10:10:43.834" status="PASS" endtime="20170816 10:10:43.837"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:10:43.923" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:10:43.923" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:43.837" status="PASS" endtime="20170816 10:10:43.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:43.925" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:43.924" status="PASS" endtime="20170816 10:10:43.925"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:43.926" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:43.925" status="PASS" endtime="20170816 10:10:43.926"></status>
</kw>
<status starttime="20170816 10:10:43.925" status="PASS" endtime="20170816 10:10:43.926"></status>
</kw>
<status starttime="20170816 10:10:43.924" status="PASS" endtime="20170816 10:10:43.926"></status>
</kw>
<status starttime="20170816 10:10:43.923" status="PASS" endtime="20170816 10:10:43.926"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:10:43.926" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:10:43.926" status="PASS" endtime="20170816 10:10:43.927"></status>
</kw>
<msg timestamp="20170816 10:10:43.927" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:43.634" status="PASS" endtime="20170816 10:10:43.927"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:43.927" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:43.927" status="PASS" endtime="20170816 10:10:43.927"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:10:43.928" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:10:43.928" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:10:43.928" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:10:43.928" status="PASS" endtime="20170816 10:10:43.928"></status>
</kw>
<msg timestamp="20170816 10:10:43.928" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:10:43.634" status="PASS" endtime="20170816 10:10:43.928"></status>
</kw>
<msg timestamp="20170816 10:10:43.929" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:10:43.633" status="PASS" endtime="20170816 10:10:43.929"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:10:43.929" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:10:43.929" status="FAIL" endtime="20170816 10:10:43.929"></status>
</kw>
<status starttime="20170816 10:10:43.633" status="FAIL" endtime="20170816 10:10:43.930"></status>
</kw>
<msg timestamp="20170816 10:10:43.930" level="INFO">${status} = False</msg>
<status starttime="20170816 10:10:43.632" status="PASS" endtime="20170816 10:10:43.930"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:10:43.930" status="PASS" endtime="20170816 10:10:43.930"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:10:43.934" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:10:43.934" status="PASS" endtime="20170816 10:10:43.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:10:43.935" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:10:43.935" status="PASS" endtime="20170816 10:10:43.935"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:10:43.936" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:10:43.935" status="PASS" endtime="20170816 10:10:43.936"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:10:43.936" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:10:43.936" status="PASS" endtime="20170816 10:10:43.936"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:10:44.182" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:10:43.937" status="PASS" endtime="20170816 10:10:44.182"></status>
</kw>
<msg timestamp="20170816 10:10:44.182" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:10:44.182" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:43.937" status="PASS" endtime="20170816 10:10:44.182"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:10:44.183" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:44.183" status="PASS" endtime="20170816 10:10:44.183"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:44.184" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:44.183" status="PASS" endtime="20170816 10:10:44.184"></status>
</kw>
<status starttime="20170816 10:10:43.933" status="PASS" endtime="20170816 10:10:44.184"></status>
</kw>
<status starttime="20170816 10:10:43.933" status="PASS" endtime="20170816 10:10:44.184"></status>
</kw>
<status starttime="20170816 10:10:43.932" status="PASS" endtime="20170816 10:10:44.184"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:10:44.185" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:10:44.184" status="PASS" endtime="20170816 10:10:44.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:44.187" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:10:44.186" status="PASS" endtime="20170816 10:10:44.187"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:44.188" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:10:44.188" status="PASS" endtime="20170816 10:10:44.188"></status>
</kw>
<status starttime="20170816 10:10:44.187" status="PASS" endtime="20170816 10:10:44.188"></status>
</kw>
<status starttime="20170816 10:10:44.186" status="PASS" endtime="20170816 10:10:44.188"></status>
</kw>
<status starttime="20170816 10:10:44.185" status="PASS" endtime="20170816 10:10:44.188"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:10:44.277" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:10:44.277" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:44.189" status="PASS" endtime="20170816 10:10:44.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:44.279" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:44.278" status="PASS" endtime="20170816 10:10:44.279"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:44.279" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:10:44.279" status="PASS" endtime="20170816 10:10:44.280"></status>
</kw>
<status starttime="20170816 10:10:44.279" status="PASS" endtime="20170816 10:10:44.280"></status>
</kw>
<status starttime="20170816 10:10:44.278" status="PASS" endtime="20170816 10:10:44.280"></status>
</kw>
<status starttime="20170816 10:10:44.277" status="PASS" endtime="20170816 10:10:44.280"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:10:44.280" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:10:44.280" status="PASS" endtime="20170816 10:10:44.280"></status>
</kw>
<msg timestamp="20170816 10:10:44.281" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:43.931" status="PASS" endtime="20170816 10:10:44.281"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:44.281" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:44.281" status="PASS" endtime="20170816 10:10:44.281"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:10:44.282" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:10:44.282" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:10:44.282" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:10:44.282" status="PASS" endtime="20170816 10:10:44.282"></status>
</kw>
<msg timestamp="20170816 10:10:44.282" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:10:43.931" status="PASS" endtime="20170816 10:10:44.282"></status>
</kw>
<msg timestamp="20170816 10:10:44.283" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:10:43.930" status="PASS" endtime="20170816 10:10:44.283"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:10:44.283" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:10:44.283" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:10:44.283" status="FAIL" endtime="20170816 10:10:44.283"></status>
</kw>
<status starttime="20170816 10:10:43.632" status="FAIL" endtime="20170816 10:10:44.284"></status>
</kw>
<status starttime="20170816 10:10:38.778" status="FAIL" endtime="20170816 10:10:44.284"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:10:54.289" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:10:54.289" status="PASS" endtime="20170816 10:10:54.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:10:54.290" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:10:54.290" status="PASS" endtime="20170816 10:10:54.290"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:10:54.291" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:10:54.291" status="PASS" endtime="20170816 10:10:54.291"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:10:54.292" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:10:54.291" status="PASS" endtime="20170816 10:10:54.292"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:10:55.017" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:10:54.293" status="PASS" endtime="20170816 10:10:55.018"></status>
</kw>
<msg timestamp="20170816 10:10:55.018" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:10:55.018" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:54.292" status="PASS" endtime="20170816 10:10:55.018"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:10:55.019" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:55.018" status="PASS" endtime="20170816 10:10:55.019"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:10:55.019" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:10:55.019" status="PASS" endtime="20170816 10:10:55.019"></status>
</kw>
<status starttime="20170816 10:10:54.288" status="PASS" endtime="20170816 10:10:55.020"></status>
</kw>
<status starttime="20170816 10:10:54.288" status="PASS" endtime="20170816 10:10:55.020"></status>
</kw>
<status starttime="20170816 10:10:54.287" status="PASS" endtime="20170816 10:10:55.020"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:10:55.020" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:10:55.020" status="PASS" endtime="20170816 10:10:55.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:10:55.022" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:10:55.022" status="PASS" endtime="20170816 10:10:55.022"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:10:55.023" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:10:55.023" status="PASS" endtime="20170816 10:10:55.023"></status>
</kw>
<status starttime="20170816 10:10:55.023" status="PASS" endtime="20170816 10:10:55.024"></status>
</kw>
<status starttime="20170816 10:10:55.021" status="PASS" endtime="20170816 10:10:55.024"></status>
</kw>
<status starttime="20170816 10:10:55.021" status="PASS" endtime="20170816 10:10:55.024"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:03.256" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:11:03.256" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:55.024" status="PASS" endtime="20170816 10:11:03.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:03.258" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:03.258" status="PASS" endtime="20170816 10:11:03.258"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:03.260" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:03.259" status="PASS" endtime="20170816 10:11:03.260"></status>
</kw>
<status starttime="20170816 10:11:03.258" status="PASS" endtime="20170816 10:11:03.260"></status>
</kw>
<status starttime="20170816 10:11:03.257" status="PASS" endtime="20170816 10:11:03.260"></status>
</kw>
<status starttime="20170816 10:11:03.257" status="PASS" endtime="20170816 10:11:03.260"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:03.261" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:03.261" status="PASS" endtime="20170816 10:11:03.261"></status>
</kw>
<msg timestamp="20170816 10:11:03.261" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:10:54.286" status="PASS" endtime="20170816 10:11:03.261"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:03.262" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:03.261" status="PASS" endtime="20170816 10:11:03.262"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:03.262" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:03.262" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:03.262" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:03.262" status="PASS" endtime="20170816 10:11:03.263"></status>
</kw>
<msg timestamp="20170816 10:11:03.263" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170816 10:10:54.286" status="PASS" endtime="20170816 10:11:03.263"></status>
</kw>
<msg timestamp="20170816 10:11:03.263" level="INFO">${power_state} = Off</msg>
<status starttime="20170816 10:10:54.285" status="PASS" endtime="20170816 10:11:03.263"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 10:11:03.264" level="FAIL">On != Off</msg>
<status starttime="20170816 10:11:03.263" status="FAIL" endtime="20170816 10:11:03.264"></status>
</kw>
<status starttime="20170816 10:10:54.285" status="FAIL" endtime="20170816 10:11:03.264"></status>
</kw>
<status starttime="20170816 10:10:54.284" status="FAIL" endtime="20170816 10:11:03.264"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:11:13.269" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:11:13.269" status="PASS" endtime="20170816 10:11:13.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:11:13.270" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:11:13.270" status="PASS" endtime="20170816 10:11:13.270"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:11:13.271" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:11:13.271" status="PASS" endtime="20170816 10:11:13.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:11:13.272" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:11:13.271" status="PASS" endtime="20170816 10:11:13.272"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:11:13.522" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:11:13.272" status="PASS" endtime="20170816 10:11:13.522"></status>
</kw>
<msg timestamp="20170816 10:11:13.522" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:11:13.522" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:13.272" status="PASS" endtime="20170816 10:11:13.522"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:11:13.523" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:13.522" status="PASS" endtime="20170816 10:11:13.523"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:13.523" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:13.523" status="PASS" endtime="20170816 10:11:13.523"></status>
</kw>
<status starttime="20170816 10:11:13.269" status="PASS" endtime="20170816 10:11:13.524"></status>
</kw>
<status starttime="20170816 10:11:13.268" status="PASS" endtime="20170816 10:11:13.524"></status>
</kw>
<status starttime="20170816 10:11:13.267" status="PASS" endtime="20170816 10:11:13.524"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:11:13.524" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:11:13.524" status="PASS" endtime="20170816 10:11:13.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:13.527" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:11:13.526" status="PASS" endtime="20170816 10:11:13.527"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:13.527" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:11:13.527" status="PASS" endtime="20170816 10:11:13.528"></status>
</kw>
<status starttime="20170816 10:11:13.527" status="PASS" endtime="20170816 10:11:13.528"></status>
</kw>
<status starttime="20170816 10:11:13.525" status="PASS" endtime="20170816 10:11:13.528"></status>
</kw>
<status starttime="20170816 10:11:13.525" status="PASS" endtime="20170816 10:11:13.528"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:13.590" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:11:13.590" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:13.528" status="PASS" endtime="20170816 10:11:13.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:13.592" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:13.591" status="PASS" endtime="20170816 10:11:13.592"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:13.593" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:13.592" status="PASS" endtime="20170816 10:11:13.593"></status>
</kw>
<status starttime="20170816 10:11:13.592" status="PASS" endtime="20170816 10:11:13.593"></status>
</kw>
<status starttime="20170816 10:11:13.591" status="PASS" endtime="20170816 10:11:13.593"></status>
</kw>
<status starttime="20170816 10:11:13.590" status="PASS" endtime="20170816 10:11:13.593"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:13.593" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:13.593" status="PASS" endtime="20170816 10:11:13.594"></status>
</kw>
<msg timestamp="20170816 10:11:13.594" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:13.267" status="PASS" endtime="20170816 10:11:13.594"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:13.594" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:13.594" status="PASS" endtime="20170816 10:11:13.594"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:13.595" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:13.595" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:13.595" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:13.595" status="PASS" endtime="20170816 10:11:13.595"></status>
</kw>
<msg timestamp="20170816 10:11:13.596" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:11:13.266" status="PASS" endtime="20170816 10:11:13.596"></status>
</kw>
<msg timestamp="20170816 10:11:13.596" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:11:13.266" status="PASS" endtime="20170816 10:11:13.596"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:11:13.596" status="PASS" endtime="20170816 10:11:13.596"></status>
</kw>
<status starttime="20170816 10:11:13.265" status="PASS" endtime="20170816 10:11:13.597"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:11:13.600" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:11:13.600" status="PASS" endtime="20170816 10:11:13.601"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:11:13.602" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:11:13.601" status="PASS" endtime="20170816 10:11:13.602"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:11:13.602" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:11:13.602" status="PASS" endtime="20170816 10:11:13.602"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:11:13.603" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:11:13.602" status="PASS" endtime="20170816 10:11:13.603"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:11:13.792" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:11:13.604" status="PASS" endtime="20170816 10:11:13.792"></status>
</kw>
<msg timestamp="20170816 10:11:13.792" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:11:13.792" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:13.603" status="PASS" endtime="20170816 10:11:13.792"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:11:13.793" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:13.793" status="PASS" endtime="20170816 10:11:13.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:13.794" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:13.793" status="PASS" endtime="20170816 10:11:13.794"></status>
</kw>
<status starttime="20170816 10:11:13.599" status="PASS" endtime="20170816 10:11:13.794"></status>
</kw>
<status starttime="20170816 10:11:13.599" status="PASS" endtime="20170816 10:11:13.794"></status>
</kw>
<status starttime="20170816 10:11:13.598" status="PASS" endtime="20170816 10:11:13.794"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:11:13.795" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:11:13.794" status="PASS" endtime="20170816 10:11:13.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:13.797" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:11:13.796" status="PASS" endtime="20170816 10:11:13.797"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:13.798" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:11:13.797" status="PASS" endtime="20170816 10:11:13.798"></status>
</kw>
<status starttime="20170816 10:11:13.797" status="PASS" endtime="20170816 10:11:13.798"></status>
</kw>
<status starttime="20170816 10:11:13.795" status="PASS" endtime="20170816 10:11:13.798"></status>
</kw>
<status starttime="20170816 10:11:13.795" status="PASS" endtime="20170816 10:11:13.798"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:13.898" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:11:13.898" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:13.798" status="PASS" endtime="20170816 10:11:13.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:13.900" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:13.899" status="PASS" endtime="20170816 10:11:13.900"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:13.901" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:13.900" status="PASS" endtime="20170816 10:11:13.901"></status>
</kw>
<status starttime="20170816 10:11:13.900" status="PASS" endtime="20170816 10:11:13.901"></status>
</kw>
<status starttime="20170816 10:11:13.899" status="PASS" endtime="20170816 10:11:13.901"></status>
</kw>
<status starttime="20170816 10:11:13.898" status="PASS" endtime="20170816 10:11:13.901"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:13.901" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:13.901" status="PASS" endtime="20170816 10:11:13.902"></status>
</kw>
<msg timestamp="20170816 10:11:13.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:13.598" status="PASS" endtime="20170816 10:11:13.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:13.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:13.902" status="PASS" endtime="20170816 10:11:13.902"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:13.903" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:13.903" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:13.903" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:13.903" status="PASS" endtime="20170816 10:11:13.903"></status>
</kw>
<msg timestamp="20170816 10:11:13.903" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:11:13.597" status="PASS" endtime="20170816 10:11:13.903"></status>
</kw>
<msg timestamp="20170816 10:11:13.904" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:11:13.597" status="PASS" endtime="20170816 10:11:13.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:11:13.904" status="PASS" endtime="20170816 10:11:13.904"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:11:13.909" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:11:13.909" status="PASS" endtime="20170816 10:11:13.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:11:13.910" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:11:13.910" status="PASS" endtime="20170816 10:11:13.910"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:11:13.911" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:11:13.911" status="PASS" endtime="20170816 10:11:13.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:11:13.912" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:11:13.911" status="PASS" endtime="20170816 10:11:13.912"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:11:14.116" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:11:13.913" status="PASS" endtime="20170816 10:11:14.116"></status>
</kw>
<msg timestamp="20170816 10:11:14.116" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:11:14.116" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:13.912" status="PASS" endtime="20170816 10:11:14.116"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:11:14.117" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:14.116" status="PASS" endtime="20170816 10:11:14.117"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:14.118" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:14.117" status="PASS" endtime="20170816 10:11:14.118"></status>
</kw>
<status starttime="20170816 10:11:13.908" status="PASS" endtime="20170816 10:11:14.118"></status>
</kw>
<status starttime="20170816 10:11:13.908" status="PASS" endtime="20170816 10:11:14.118"></status>
</kw>
<status starttime="20170816 10:11:13.907" status="PASS" endtime="20170816 10:11:14.118"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:11:14.119" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:11:14.118" status="PASS" endtime="20170816 10:11:14.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:14.121" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:11:14.120" status="PASS" endtime="20170816 10:11:14.121"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:14.122" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:11:14.122" status="PASS" endtime="20170816 10:11:14.122"></status>
</kw>
<status starttime="20170816 10:11:14.121" status="PASS" endtime="20170816 10:11:14.122"></status>
</kw>
<status starttime="20170816 10:11:14.119" status="PASS" endtime="20170816 10:11:14.122"></status>
</kw>
<status starttime="20170816 10:11:14.119" status="PASS" endtime="20170816 10:11:14.122"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:14.187" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:11:14.187" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:14.123" status="PASS" endtime="20170816 10:11:14.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:14.188" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:14.188" status="PASS" endtime="20170816 10:11:14.189"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:14.189" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:14.189" status="PASS" endtime="20170816 10:11:14.190"></status>
</kw>
<status starttime="20170816 10:11:14.189" status="PASS" endtime="20170816 10:11:14.190"></status>
</kw>
<status starttime="20170816 10:11:14.188" status="PASS" endtime="20170816 10:11:14.190"></status>
</kw>
<status starttime="20170816 10:11:14.187" status="PASS" endtime="20170816 10:11:14.190"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:14.190" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:14.190" status="PASS" endtime="20170816 10:11:14.190"></status>
</kw>
<msg timestamp="20170816 10:11:14.190" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:13.907" status="PASS" endtime="20170816 10:11:14.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:14.191" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:14.191" status="PASS" endtime="20170816 10:11:14.191"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:14.192" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:14.192" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:14.192" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:14.191" status="PASS" endtime="20170816 10:11:14.192"></status>
</kw>
<msg timestamp="20170816 10:11:14.192" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:11:13.906" status="PASS" endtime="20170816 10:11:14.192"></status>
</kw>
<msg timestamp="20170816 10:11:14.192" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:11:13.906" status="PASS" endtime="20170816 10:11:14.192"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:11:14.193" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:11:14.193" status="FAIL" endtime="20170816 10:11:14.193"></status>
</kw>
<status starttime="20170816 10:11:13.905" status="FAIL" endtime="20170816 10:11:14.193"></status>
</kw>
<msg timestamp="20170816 10:11:14.193" level="INFO">${status} = False</msg>
<status starttime="20170816 10:11:13.905" status="PASS" endtime="20170816 10:11:14.193"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:11:14.194" status="PASS" endtime="20170816 10:11:14.194"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:11:14.198" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:11:14.197" status="PASS" endtime="20170816 10:11:14.198"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:11:14.199" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:11:14.198" status="PASS" endtime="20170816 10:11:14.199"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:11:14.199" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:11:14.199" status="PASS" endtime="20170816 10:11:14.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:11:14.200" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:11:14.200" status="PASS" endtime="20170816 10:11:14.200"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:11:14.406" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:11:14.201" status="PASS" endtime="20170816 10:11:14.406"></status>
</kw>
<msg timestamp="20170816 10:11:14.407" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:11:14.407" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:14.200" status="PASS" endtime="20170816 10:11:14.407"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:11:14.407" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:14.407" status="PASS" endtime="20170816 10:11:14.407"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:14.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:14.408" status="PASS" endtime="20170816 10:11:14.408"></status>
</kw>
<status starttime="20170816 10:11:14.197" status="PASS" endtime="20170816 10:11:14.408"></status>
</kw>
<status starttime="20170816 10:11:14.197" status="PASS" endtime="20170816 10:11:14.408"></status>
</kw>
<status starttime="20170816 10:11:14.196" status="PASS" endtime="20170816 10:11:14.408"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:11:14.409" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:11:14.409" status="PASS" endtime="20170816 10:11:14.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:14.411" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:11:14.410" status="PASS" endtime="20170816 10:11:14.411"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:14.412" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:11:14.412" status="PASS" endtime="20170816 10:11:14.412"></status>
</kw>
<status starttime="20170816 10:11:14.411" status="PASS" endtime="20170816 10:11:14.412"></status>
</kw>
<status starttime="20170816 10:11:14.410" status="PASS" endtime="20170816 10:11:14.412"></status>
</kw>
<status starttime="20170816 10:11:14.409" status="PASS" endtime="20170816 10:11:14.412"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:14.540" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:11:14.540" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:14.413" status="PASS" endtime="20170816 10:11:14.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:14.543" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:14.542" status="PASS" endtime="20170816 10:11:14.543"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:14.544" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:14.544" status="PASS" endtime="20170816 10:11:14.545"></status>
</kw>
<status starttime="20170816 10:11:14.543" status="PASS" endtime="20170816 10:11:14.545"></status>
</kw>
<status starttime="20170816 10:11:14.541" status="PASS" endtime="20170816 10:11:14.545"></status>
</kw>
<status starttime="20170816 10:11:14.541" status="PASS" endtime="20170816 10:11:14.545"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:14.545" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:14.545" status="PASS" endtime="20170816 10:11:14.545"></status>
</kw>
<msg timestamp="20170816 10:11:14.546" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:14.195" status="PASS" endtime="20170816 10:11:14.546"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:14.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:14.546" status="PASS" endtime="20170816 10:11:14.546"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:14.547" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:14.547" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:14.547" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:14.547" status="PASS" endtime="20170816 10:11:14.547"></status>
</kw>
<msg timestamp="20170816 10:11:14.547" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:11:14.195" status="PASS" endtime="20170816 10:11:14.547"></status>
</kw>
<msg timestamp="20170816 10:11:14.548" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:11:14.194" status="PASS" endtime="20170816 10:11:14.548"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:11:14.548" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:11:14.548" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:11:14.548" status="FAIL" endtime="20170816 10:11:14.548"></status>
</kw>
<status starttime="20170816 10:11:13.904" status="FAIL" endtime="20170816 10:11:14.549"></status>
</kw>
<status starttime="20170816 10:11:13.265" status="FAIL" endtime="20170816 10:11:14.549"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:11:24.554" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:11:24.554" status="PASS" endtime="20170816 10:11:24.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:11:24.555" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:11:24.555" status="PASS" endtime="20170816 10:11:24.555"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:11:24.556" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:11:24.556" status="PASS" endtime="20170816 10:11:24.556"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:11:24.557" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:11:24.556" status="PASS" endtime="20170816 10:11:24.557"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:11:24.744" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:11:24.558" status="PASS" endtime="20170816 10:11:24.745"></status>
</kw>
<msg timestamp="20170816 10:11:24.745" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:11:24.745" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:24.557" status="PASS" endtime="20170816 10:11:24.745"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:11:24.746" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:24.745" status="PASS" endtime="20170816 10:11:24.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:24.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:24.746" status="PASS" endtime="20170816 10:11:24.746"></status>
</kw>
<status starttime="20170816 10:11:24.553" status="PASS" endtime="20170816 10:11:24.747"></status>
</kw>
<status starttime="20170816 10:11:24.553" status="PASS" endtime="20170816 10:11:24.747"></status>
</kw>
<status starttime="20170816 10:11:24.552" status="PASS" endtime="20170816 10:11:24.747"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:11:24.747" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:11:24.747" status="PASS" endtime="20170816 10:11:24.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:24.749" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:11:24.749" status="PASS" endtime="20170816 10:11:24.749"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:24.750" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:11:24.750" status="PASS" endtime="20170816 10:11:24.750"></status>
</kw>
<status starttime="20170816 10:11:24.750" status="PASS" endtime="20170816 10:11:24.751"></status>
</kw>
<status starttime="20170816 10:11:24.748" status="PASS" endtime="20170816 10:11:24.751"></status>
</kw>
<status starttime="20170816 10:11:24.748" status="PASS" endtime="20170816 10:11:24.751"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:24.813" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:11:24.813" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:24.751" status="PASS" endtime="20170816 10:11:24.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:24.815" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:24.815" status="PASS" endtime="20170816 10:11:24.815"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:24.819" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:24.819" status="PASS" endtime="20170816 10:11:24.819"></status>
</kw>
<status starttime="20170816 10:11:24.815" status="PASS" endtime="20170816 10:11:24.819"></status>
</kw>
<status starttime="20170816 10:11:24.814" status="PASS" endtime="20170816 10:11:24.819"></status>
</kw>
<status starttime="20170816 10:11:24.814" status="PASS" endtime="20170816 10:11:24.820"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:24.820" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:24.820" status="PASS" endtime="20170816 10:11:24.820"></status>
</kw>
<msg timestamp="20170816 10:11:24.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:24.551" status="PASS" endtime="20170816 10:11:24.820"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:24.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:24.821" status="PASS" endtime="20170816 10:11:24.821"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:24.822" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:24.822" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:24.822" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:24.821" status="PASS" endtime="20170816 10:11:24.822"></status>
</kw>
<msg timestamp="20170816 10:11:24.822" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:11:24.551" status="PASS" endtime="20170816 10:11:24.822"></status>
</kw>
<msg timestamp="20170816 10:11:24.822" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:11:24.550" status="PASS" endtime="20170816 10:11:24.823"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:11:24.823" status="PASS" endtime="20170816 10:11:24.823"></status>
</kw>
<status starttime="20170816 10:11:24.550" status="PASS" endtime="20170816 10:11:24.823"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:11:24.827" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:11:24.827" status="PASS" endtime="20170816 10:11:24.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:11:24.828" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:11:24.828" status="PASS" endtime="20170816 10:11:24.828"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:11:24.829" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:11:24.828" status="PASS" endtime="20170816 10:11:24.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:11:24.830" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:11:24.829" status="PASS" endtime="20170816 10:11:24.830"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:11:25.022" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:11:24.831" status="PASS" endtime="20170816 10:11:25.022"></status>
</kw>
<msg timestamp="20170816 10:11:25.023" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:11:25.023" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:24.830" status="PASS" endtime="20170816 10:11:25.023"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:11:25.023" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:25.023" status="PASS" endtime="20170816 10:11:25.023"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:25.024" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:25.024" status="PASS" endtime="20170816 10:11:25.024"></status>
</kw>
<status starttime="20170816 10:11:24.826" status="PASS" endtime="20170816 10:11:25.024"></status>
</kw>
<status starttime="20170816 10:11:24.826" status="PASS" endtime="20170816 10:11:25.024"></status>
</kw>
<status starttime="20170816 10:11:24.825" status="PASS" endtime="20170816 10:11:25.025"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:11:25.025" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:11:25.025" status="PASS" endtime="20170816 10:11:25.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:25.028" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:11:25.027" status="PASS" endtime="20170816 10:11:25.028"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:25.029" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:11:25.028" status="PASS" endtime="20170816 10:11:25.029"></status>
</kw>
<status starttime="20170816 10:11:25.028" status="PASS" endtime="20170816 10:11:25.029"></status>
</kw>
<status starttime="20170816 10:11:25.026" status="PASS" endtime="20170816 10:11:25.029"></status>
</kw>
<status starttime="20170816 10:11:25.025" status="PASS" endtime="20170816 10:11:25.029"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:25.117" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:11:25.117" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:25.029" status="PASS" endtime="20170816 10:11:25.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:25.119" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:25.118" status="PASS" endtime="20170816 10:11:25.119"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:25.120" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:25.119" status="PASS" endtime="20170816 10:11:25.120"></status>
</kw>
<status starttime="20170816 10:11:25.119" status="PASS" endtime="20170816 10:11:25.120"></status>
</kw>
<status starttime="20170816 10:11:25.118" status="PASS" endtime="20170816 10:11:25.120"></status>
</kw>
<status starttime="20170816 10:11:25.117" status="PASS" endtime="20170816 10:11:25.120"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:25.121" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:25.120" status="PASS" endtime="20170816 10:11:25.121"></status>
</kw>
<msg timestamp="20170816 10:11:25.121" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:24.824" status="PASS" endtime="20170816 10:11:25.121"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:25.121" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:25.121" status="PASS" endtime="20170816 10:11:25.122"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:25.122" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:25.122" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:25.122" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:25.122" status="PASS" endtime="20170816 10:11:25.122"></status>
</kw>
<msg timestamp="20170816 10:11:25.122" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:11:24.824" status="PASS" endtime="20170816 10:11:25.123"></status>
</kw>
<msg timestamp="20170816 10:11:25.123" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:11:24.823" status="PASS" endtime="20170816 10:11:25.123"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:11:25.123" status="PASS" endtime="20170816 10:11:25.123"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:11:25.128" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:11:25.128" status="PASS" endtime="20170816 10:11:25.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:11:25.129" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:11:25.129" status="PASS" endtime="20170816 10:11:25.129"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:11:25.130" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:11:25.130" status="PASS" endtime="20170816 10:11:25.130"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:11:25.131" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:11:25.130" status="PASS" endtime="20170816 10:11:25.131"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:11:25.406" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:11:25.131" status="PASS" endtime="20170816 10:11:25.406"></status>
</kw>
<msg timestamp="20170816 10:11:25.406" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:11:25.406" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:25.131" status="PASS" endtime="20170816 10:11:25.406"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:11:25.407" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:25.406" status="PASS" endtime="20170816 10:11:25.407"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:25.407" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:25.407" status="PASS" endtime="20170816 10:11:25.408"></status>
</kw>
<status starttime="20170816 10:11:25.127" status="PASS" endtime="20170816 10:11:25.408"></status>
</kw>
<status starttime="20170816 10:11:25.127" status="PASS" endtime="20170816 10:11:25.408"></status>
</kw>
<status starttime="20170816 10:11:25.126" status="PASS" endtime="20170816 10:11:25.408"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:11:25.408" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:11:25.408" status="PASS" endtime="20170816 10:11:25.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:25.411" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:11:25.410" status="PASS" endtime="20170816 10:11:25.411"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:25.411" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:11:25.411" status="PASS" endtime="20170816 10:11:25.412"></status>
</kw>
<status starttime="20170816 10:11:25.411" status="PASS" endtime="20170816 10:11:25.412"></status>
</kw>
<status starttime="20170816 10:11:25.409" status="PASS" endtime="20170816 10:11:25.412"></status>
</kw>
<status starttime="20170816 10:11:25.409" status="PASS" endtime="20170816 10:11:25.412"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:25.496" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:11:25.497" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:25.412" status="PASS" endtime="20170816 10:11:25.497"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:25.498" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:25.498" status="PASS" endtime="20170816 10:11:25.498"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:25.499" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:25.499" status="PASS" endtime="20170816 10:11:25.499"></status>
</kw>
<status starttime="20170816 10:11:25.499" status="PASS" endtime="20170816 10:11:25.500"></status>
</kw>
<status starttime="20170816 10:11:25.497" status="PASS" endtime="20170816 10:11:25.500"></status>
</kw>
<status starttime="20170816 10:11:25.497" status="PASS" endtime="20170816 10:11:25.500"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:25.500" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:25.500" status="PASS" endtime="20170816 10:11:25.500"></status>
</kw>
<msg timestamp="20170816 10:11:25.500" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:25.125" status="PASS" endtime="20170816 10:11:25.501"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:25.501" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:25.501" status="PASS" endtime="20170816 10:11:25.501"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:25.502" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:25.502" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:25.502" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:25.501" status="PASS" endtime="20170816 10:11:25.502"></status>
</kw>
<msg timestamp="20170816 10:11:25.502" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:11:25.125" status="PASS" endtime="20170816 10:11:25.502"></status>
</kw>
<msg timestamp="20170816 10:11:25.502" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:11:25.125" status="PASS" endtime="20170816 10:11:25.502"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:11:25.503" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:11:25.503" status="FAIL" endtime="20170816 10:11:25.503"></status>
</kw>
<status starttime="20170816 10:11:25.124" status="FAIL" endtime="20170816 10:11:25.503"></status>
</kw>
<msg timestamp="20170816 10:11:25.503" level="INFO">${status} = False</msg>
<status starttime="20170816 10:11:25.124" status="PASS" endtime="20170816 10:11:25.504"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:11:25.504" status="PASS" endtime="20170816 10:11:25.504"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:11:25.508" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:11:25.508" status="PASS" endtime="20170816 10:11:25.509"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:11:25.509" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:11:25.509" status="PASS" endtime="20170816 10:11:25.509"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:11:25.510" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:11:25.509" status="PASS" endtime="20170816 10:11:25.510"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:11:25.510" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:11:25.510" status="PASS" endtime="20170816 10:11:25.510"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:11:25.717" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:11:25.511" status="PASS" endtime="20170816 10:11:25.717"></status>
</kw>
<msg timestamp="20170816 10:11:25.717" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:11:25.717" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:25.511" status="PASS" endtime="20170816 10:11:25.717"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:11:25.718" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:25.718" status="PASS" endtime="20170816 10:11:25.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:25.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:25.718" status="PASS" endtime="20170816 10:11:25.719"></status>
</kw>
<status starttime="20170816 10:11:25.507" status="PASS" endtime="20170816 10:11:25.719"></status>
</kw>
<status starttime="20170816 10:11:25.507" status="PASS" endtime="20170816 10:11:25.719"></status>
</kw>
<status starttime="20170816 10:11:25.506" status="PASS" endtime="20170816 10:11:25.719"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:11:25.720" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:11:25.720" status="PASS" endtime="20170816 10:11:25.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:25.722" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:11:25.721" status="PASS" endtime="20170816 10:11:25.722"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:25.723" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:11:25.723" status="PASS" endtime="20170816 10:11:25.723"></status>
</kw>
<status starttime="20170816 10:11:25.722" status="PASS" endtime="20170816 10:11:25.723"></status>
</kw>
<status starttime="20170816 10:11:25.721" status="PASS" endtime="20170816 10:11:25.723"></status>
</kw>
<status starttime="20170816 10:11:25.720" status="PASS" endtime="20170816 10:11:25.723"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:25.812" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:11:25.812" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:25.724" status="PASS" endtime="20170816 10:11:25.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:25.815" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:25.814" status="PASS" endtime="20170816 10:11:25.815"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:25.815" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:25.815" status="PASS" endtime="20170816 10:11:25.816"></status>
</kw>
<status starttime="20170816 10:11:25.815" status="PASS" endtime="20170816 10:11:25.816"></status>
</kw>
<status starttime="20170816 10:11:25.813" status="PASS" endtime="20170816 10:11:25.816"></status>
</kw>
<status starttime="20170816 10:11:25.813" status="PASS" endtime="20170816 10:11:25.816"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:25.816" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:25.816" status="PASS" endtime="20170816 10:11:25.816"></status>
</kw>
<msg timestamp="20170816 10:11:25.817" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:25.505" status="PASS" endtime="20170816 10:11:25.817"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:25.817" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:25.817" status="PASS" endtime="20170816 10:11:25.817"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:25.818" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:25.818" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:25.818" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:25.818" status="PASS" endtime="20170816 10:11:25.818"></status>
</kw>
<msg timestamp="20170816 10:11:25.818" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:11:25.505" status="PASS" endtime="20170816 10:11:25.818"></status>
</kw>
<msg timestamp="20170816 10:11:25.819" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:11:25.504" status="PASS" endtime="20170816 10:11:25.819"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:11:25.819" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:11:25.819" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:11:25.819" status="FAIL" endtime="20170816 10:11:25.819"></status>
</kw>
<status starttime="20170816 10:11:25.124" status="FAIL" endtime="20170816 10:11:25.820"></status>
</kw>
<status starttime="20170816 10:11:24.549" status="FAIL" endtime="20170816 10:11:25.820"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:11:35.825" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:11:35.825" status="PASS" endtime="20170816 10:11:35.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:11:35.826" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:11:35.826" status="PASS" endtime="20170816 10:11:35.826"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:11:35.827" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:11:35.826" status="PASS" endtime="20170816 10:11:35.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:11:35.827" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:11:35.827" status="PASS" endtime="20170816 10:11:35.827"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:11:36.298" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:11:35.828" status="PASS" endtime="20170816 10:11:36.298"></status>
</kw>
<msg timestamp="20170816 10:11:36.299" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:11:36.299" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:35.828" status="PASS" endtime="20170816 10:11:36.299"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:11:36.299" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:36.299" status="PASS" endtime="20170816 10:11:36.299"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:36.300" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:36.300" status="PASS" endtime="20170816 10:11:36.300"></status>
</kw>
<status starttime="20170816 10:11:35.824" status="PASS" endtime="20170816 10:11:36.300"></status>
</kw>
<status starttime="20170816 10:11:35.824" status="PASS" endtime="20170816 10:11:36.300"></status>
</kw>
<status starttime="20170816 10:11:35.823" status="PASS" endtime="20170816 10:11:36.301"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:11:36.301" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:11:36.301" status="PASS" endtime="20170816 10:11:36.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:36.303" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:11:36.302" status="PASS" endtime="20170816 10:11:36.303"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:36.304" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:11:36.304" status="PASS" endtime="20170816 10:11:36.304"></status>
</kw>
<status starttime="20170816 10:11:36.303" status="PASS" endtime="20170816 10:11:36.304"></status>
</kw>
<status starttime="20170816 10:11:36.302" status="PASS" endtime="20170816 10:11:36.304"></status>
</kw>
<status starttime="20170816 10:11:36.301" status="PASS" endtime="20170816 10:11:36.304"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:36.884" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:11:36.884" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:36.305" status="PASS" endtime="20170816 10:11:36.884"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:36.887" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:36.886" status="PASS" endtime="20170816 10:11:36.887"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:36.888" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:36.888" status="PASS" endtime="20170816 10:11:36.889"></status>
</kw>
<status starttime="20170816 10:11:36.887" status="PASS" endtime="20170816 10:11:36.889"></status>
</kw>
<status starttime="20170816 10:11:36.886" status="PASS" endtime="20170816 10:11:36.889"></status>
</kw>
<status starttime="20170816 10:11:36.885" status="PASS" endtime="20170816 10:11:36.889"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:36.889" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:36.889" status="PASS" endtime="20170816 10:11:36.889"></status>
</kw>
<msg timestamp="20170816 10:11:36.890" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:35.822" status="PASS" endtime="20170816 10:11:36.890"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:36.890" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:36.890" status="PASS" endtime="20170816 10:11:36.890"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:36.891" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:36.891" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:36.891" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:36.890" status="PASS" endtime="20170816 10:11:36.891"></status>
</kw>
<msg timestamp="20170816 10:11:36.891" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:11:35.822" status="PASS" endtime="20170816 10:11:36.891"></status>
</kw>
<msg timestamp="20170816 10:11:36.892" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:11:35.821" status="PASS" endtime="20170816 10:11:36.892"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:11:36.892" status="PASS" endtime="20170816 10:11:36.892"></status>
</kw>
<status starttime="20170816 10:11:35.821" status="PASS" endtime="20170816 10:11:36.892"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:11:36.896" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:11:36.895" status="PASS" endtime="20170816 10:11:36.897"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:11:36.897" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:11:36.897" status="PASS" endtime="20170816 10:11:36.897"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:11:36.898" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:11:36.897" status="PASS" endtime="20170816 10:11:36.898"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:11:36.898" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:11:36.898" status="PASS" endtime="20170816 10:11:36.898"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:11:37.387" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:11:36.899" status="PASS" endtime="20170816 10:11:37.387"></status>
</kw>
<msg timestamp="20170816 10:11:37.387" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:11:37.387" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:36.899" status="PASS" endtime="20170816 10:11:37.387"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:11:37.388" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:37.387" status="PASS" endtime="20170816 10:11:37.388"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:37.388" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:37.388" status="PASS" endtime="20170816 10:11:37.389"></status>
</kw>
<status starttime="20170816 10:11:36.895" status="PASS" endtime="20170816 10:11:37.389"></status>
</kw>
<status starttime="20170816 10:11:36.894" status="PASS" endtime="20170816 10:11:37.389"></status>
</kw>
<status starttime="20170816 10:11:36.894" status="PASS" endtime="20170816 10:11:37.389"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:11:37.390" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:11:37.389" status="PASS" endtime="20170816 10:11:37.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:37.393" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:11:37.392" status="PASS" endtime="20170816 10:11:37.393"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:37.394" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:11:37.394" status="PASS" endtime="20170816 10:11:37.394"></status>
</kw>
<status starttime="20170816 10:11:37.393" status="PASS" endtime="20170816 10:11:37.394"></status>
</kw>
<status starttime="20170816 10:11:37.391" status="PASS" endtime="20170816 10:11:37.394"></status>
</kw>
<status starttime="20170816 10:11:37.390" status="PASS" endtime="20170816 10:11:37.394"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:37.952" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:11:37.952" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:37.395" status="PASS" endtime="20170816 10:11:37.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:37.954" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:37.954" status="PASS" endtime="20170816 10:11:37.954"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:37.955" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:37.955" status="PASS" endtime="20170816 10:11:37.955"></status>
</kw>
<status starttime="20170816 10:11:37.954" status="PASS" endtime="20170816 10:11:37.955"></status>
</kw>
<status starttime="20170816 10:11:37.953" status="PASS" endtime="20170816 10:11:37.955"></status>
</kw>
<status starttime="20170816 10:11:37.953" status="PASS" endtime="20170816 10:11:37.955"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:37.956" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:37.956" status="PASS" endtime="20170816 10:11:37.956"></status>
</kw>
<msg timestamp="20170816 10:11:37.956" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:36.893" status="PASS" endtime="20170816 10:11:37.956"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:37.957" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:37.957" status="PASS" endtime="20170816 10:11:37.957"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:37.957" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:37.958" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:37.958" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:37.957" status="PASS" endtime="20170816 10:11:37.958"></status>
</kw>
<msg timestamp="20170816 10:11:37.958" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:11:36.893" status="PASS" endtime="20170816 10:11:37.958"></status>
</kw>
<msg timestamp="20170816 10:11:37.958" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:11:36.892" status="PASS" endtime="20170816 10:11:37.958"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:11:37.959" status="PASS" endtime="20170816 10:11:37.959"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:11:37.964" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:11:37.964" status="PASS" endtime="20170816 10:11:37.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:11:37.965" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:11:37.965" status="PASS" endtime="20170816 10:11:37.965"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:11:37.966" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:11:37.965" status="PASS" endtime="20170816 10:11:37.966"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:11:37.966" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:11:37.966" status="PASS" endtime="20170816 10:11:37.966"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:11:38.329" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:11:37.967" status="PASS" endtime="20170816 10:11:38.329"></status>
</kw>
<msg timestamp="20170816 10:11:38.329" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:11:38.329" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:37.967" status="PASS" endtime="20170816 10:11:38.329"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:11:38.330" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:38.330" status="PASS" endtime="20170816 10:11:38.330"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:38.331" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:38.330" status="PASS" endtime="20170816 10:11:38.331"></status>
</kw>
<status starttime="20170816 10:11:37.963" status="PASS" endtime="20170816 10:11:38.331"></status>
</kw>
<status starttime="20170816 10:11:37.963" status="PASS" endtime="20170816 10:11:38.331"></status>
</kw>
<status starttime="20170816 10:11:37.962" status="PASS" endtime="20170816 10:11:38.331"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:11:38.332" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:11:38.331" status="PASS" endtime="20170816 10:11:38.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:38.334" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:11:38.333" status="PASS" endtime="20170816 10:11:38.334"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:38.335" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:11:38.335" status="PASS" endtime="20170816 10:11:38.335"></status>
</kw>
<status starttime="20170816 10:11:38.334" status="PASS" endtime="20170816 10:11:38.335"></status>
</kw>
<status starttime="20170816 10:11:38.333" status="PASS" endtime="20170816 10:11:38.336"></status>
</kw>
<status starttime="20170816 10:11:38.332" status="PASS" endtime="20170816 10:11:38.336"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:38.739" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:11:38.739" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:38.336" status="PASS" endtime="20170816 10:11:38.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:38.741" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:38.741" status="PASS" endtime="20170816 10:11:38.741"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:38.742" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:38.742" status="PASS" endtime="20170816 10:11:38.742"></status>
</kw>
<status starttime="20170816 10:11:38.742" status="PASS" endtime="20170816 10:11:38.743"></status>
</kw>
<status starttime="20170816 10:11:38.740" status="PASS" endtime="20170816 10:11:38.743"></status>
</kw>
<status starttime="20170816 10:11:38.740" status="PASS" endtime="20170816 10:11:38.743"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:38.743" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:38.743" status="PASS" endtime="20170816 10:11:38.743"></status>
</kw>
<msg timestamp="20170816 10:11:38.743" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:37.962" status="PASS" endtime="20170816 10:11:38.744"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:38.744" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:38.744" status="PASS" endtime="20170816 10:11:38.744"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:38.745" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:38.745" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:38.745" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:38.744" status="PASS" endtime="20170816 10:11:38.745"></status>
</kw>
<msg timestamp="20170816 10:11:38.745" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:11:37.961" status="PASS" endtime="20170816 10:11:38.745"></status>
</kw>
<msg timestamp="20170816 10:11:38.745" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:11:37.960" status="PASS" endtime="20170816 10:11:38.745"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:11:38.746" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:11:38.746" status="FAIL" endtime="20170816 10:11:38.746"></status>
</kw>
<status starttime="20170816 10:11:37.960" status="FAIL" endtime="20170816 10:11:38.746"></status>
</kw>
<msg timestamp="20170816 10:11:38.747" level="INFO">${status} = False</msg>
<status starttime="20170816 10:11:37.960" status="PASS" endtime="20170816 10:11:38.747"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:11:38.747" status="PASS" endtime="20170816 10:11:38.747"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:11:38.751" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:11:38.750" status="PASS" endtime="20170816 10:11:38.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:11:38.752" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:11:38.752" status="PASS" endtime="20170816 10:11:38.752"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:11:38.753" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:11:38.752" status="PASS" endtime="20170816 10:11:38.753"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:11:38.754" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:11:38.753" status="PASS" endtime="20170816 10:11:38.754"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:11:38.984" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:11:38.754" status="PASS" endtime="20170816 10:11:38.984"></status>
</kw>
<msg timestamp="20170816 10:11:38.984" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:11:38.984" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:38.754" status="PASS" endtime="20170816 10:11:38.984"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:11:38.985" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:38.985" status="PASS" endtime="20170816 10:11:38.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:38.986" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:38.985" status="PASS" endtime="20170816 10:11:38.986"></status>
</kw>
<status starttime="20170816 10:11:38.750" status="PASS" endtime="20170816 10:11:38.986"></status>
</kw>
<status starttime="20170816 10:11:38.749" status="PASS" endtime="20170816 10:11:38.986"></status>
</kw>
<status starttime="20170816 10:11:38.749" status="PASS" endtime="20170816 10:11:38.986"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:11:38.987" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:11:38.986" status="PASS" endtime="20170816 10:11:38.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:38.989" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:11:38.988" status="PASS" endtime="20170816 10:11:38.989"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:38.990" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:11:38.989" status="PASS" endtime="20170816 10:11:38.990"></status>
</kw>
<status starttime="20170816 10:11:38.989" status="PASS" endtime="20170816 10:11:38.990"></status>
</kw>
<status starttime="20170816 10:11:38.987" status="PASS" endtime="20170816 10:11:38.990"></status>
</kw>
<status starttime="20170816 10:11:38.987" status="PASS" endtime="20170816 10:11:38.990"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:39.836" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:11:39.836" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:38.990" status="PASS" endtime="20170816 10:11:39.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:39.838" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:39.838" status="PASS" endtime="20170816 10:11:39.838"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:39.839" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:39.839" status="PASS" endtime="20170816 10:11:39.839"></status>
</kw>
<status starttime="20170816 10:11:39.839" status="PASS" endtime="20170816 10:11:39.840"></status>
</kw>
<status starttime="20170816 10:11:39.837" status="PASS" endtime="20170816 10:11:39.840"></status>
</kw>
<status starttime="20170816 10:11:39.837" status="PASS" endtime="20170816 10:11:39.840"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:39.840" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:39.840" status="PASS" endtime="20170816 10:11:39.840"></status>
</kw>
<msg timestamp="20170816 10:11:39.840" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:38.748" status="PASS" endtime="20170816 10:11:39.841"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:39.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:39.841" status="PASS" endtime="20170816 10:11:39.841"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:39.842" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:39.842" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:39.842" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:39.841" status="PASS" endtime="20170816 10:11:39.842"></status>
</kw>
<msg timestamp="20170816 10:11:39.842" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:11:38.748" status="PASS" endtime="20170816 10:11:39.842"></status>
</kw>
<msg timestamp="20170816 10:11:39.842" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:11:38.747" status="PASS" endtime="20170816 10:11:39.843"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:11:39.843" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:11:39.843" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:11:39.843" status="FAIL" endtime="20170816 10:11:39.843"></status>
</kw>
<status starttime="20170816 10:11:37.959" status="FAIL" endtime="20170816 10:11:39.843"></status>
</kw>
<status starttime="20170816 10:11:35.820" status="FAIL" endtime="20170816 10:11:39.844"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:11:49.849" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:11:49.849" status="PASS" endtime="20170816 10:11:49.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:11:49.850" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:11:49.850" status="PASS" endtime="20170816 10:11:49.850"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:11:49.851" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:11:49.851" status="PASS" endtime="20170816 10:11:49.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:11:49.852" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:11:49.851" status="PASS" endtime="20170816 10:11:49.852"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:11:50.207" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:11:49.852" status="PASS" endtime="20170816 10:11:50.207"></status>
</kw>
<msg timestamp="20170816 10:11:50.207" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:11:50.207" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:49.852" status="PASS" endtime="20170816 10:11:50.207"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:11:50.208" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:50.207" status="PASS" endtime="20170816 10:11:50.208"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:50.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:50.208" status="PASS" endtime="20170816 10:11:50.209"></status>
</kw>
<status starttime="20170816 10:11:49.848" status="PASS" endtime="20170816 10:11:50.209"></status>
</kw>
<status starttime="20170816 10:11:49.847" status="PASS" endtime="20170816 10:11:50.209"></status>
</kw>
<status starttime="20170816 10:11:49.847" status="PASS" endtime="20170816 10:11:50.209"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:11:50.210" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:11:50.209" status="PASS" endtime="20170816 10:11:50.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:50.212" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:11:50.211" status="PASS" endtime="20170816 10:11:50.212"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:50.214" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:11:50.213" status="PASS" endtime="20170816 10:11:50.214"></status>
</kw>
<status starttime="20170816 10:11:50.213" status="PASS" endtime="20170816 10:11:50.214"></status>
</kw>
<status starttime="20170816 10:11:50.210" status="PASS" endtime="20170816 10:11:50.214"></status>
</kw>
<status starttime="20170816 10:11:50.210" status="PASS" endtime="20170816 10:11:50.214"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:50.867" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:11:50.867" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:50.214" status="PASS" endtime="20170816 10:11:50.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:50.869" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:50.869" status="PASS" endtime="20170816 10:11:50.869"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:50.871" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:50.870" status="PASS" endtime="20170816 10:11:50.871"></status>
</kw>
<status starttime="20170816 10:11:50.869" status="PASS" endtime="20170816 10:11:50.871"></status>
</kw>
<status starttime="20170816 10:11:50.868" status="PASS" endtime="20170816 10:11:50.871"></status>
</kw>
<status starttime="20170816 10:11:50.868" status="PASS" endtime="20170816 10:11:50.871"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:50.871" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:50.871" status="PASS" endtime="20170816 10:11:50.871"></status>
</kw>
<msg timestamp="20170816 10:11:50.872" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:49.846" status="PASS" endtime="20170816 10:11:50.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:50.872" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:50.872" status="PASS" endtime="20170816 10:11:50.872"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:50.873" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:50.873" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:50.873" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:50.873" status="PASS" endtime="20170816 10:11:50.873"></status>
</kw>
<msg timestamp="20170816 10:11:50.873" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:11:49.846" status="PASS" endtime="20170816 10:11:50.873"></status>
</kw>
<msg timestamp="20170816 10:11:50.874" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:11:49.845" status="PASS" endtime="20170816 10:11:50.874"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:11:50.874" status="PASS" endtime="20170816 10:11:50.874"></status>
</kw>
<status starttime="20170816 10:11:49.845" status="PASS" endtime="20170816 10:11:50.874"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:11:50.878" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:11:50.878" status="PASS" endtime="20170816 10:11:50.878"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:11:50.879" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:11:50.879" status="PASS" endtime="20170816 10:11:50.879"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:11:50.879" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:11:50.879" status="PASS" endtime="20170816 10:11:50.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:11:50.880" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:11:50.880" status="PASS" endtime="20170816 10:11:50.880"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:11:51.214" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:11:50.881" status="PASS" endtime="20170816 10:11:51.214"></status>
</kw>
<msg timestamp="20170816 10:11:51.214" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:11:51.214" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:50.880" status="PASS" endtime="20170816 10:11:51.214"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:11:51.215" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:51.214" status="PASS" endtime="20170816 10:11:51.215"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:51.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:51.215" status="PASS" endtime="20170816 10:11:51.216"></status>
</kw>
<status starttime="20170816 10:11:50.877" status="PASS" endtime="20170816 10:11:51.216"></status>
</kw>
<status starttime="20170816 10:11:50.877" status="PASS" endtime="20170816 10:11:51.216"></status>
</kw>
<status starttime="20170816 10:11:50.876" status="PASS" endtime="20170816 10:11:51.216"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:11:51.217" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:11:51.216" status="PASS" endtime="20170816 10:11:51.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:51.222" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:11:51.218" status="PASS" endtime="20170816 10:11:51.222"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:51.223" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:11:51.223" status="PASS" endtime="20170816 10:11:51.223"></status>
</kw>
<status starttime="20170816 10:11:51.222" status="PASS" endtime="20170816 10:11:51.223"></status>
</kw>
<status starttime="20170816 10:11:51.218" status="PASS" endtime="20170816 10:11:51.224"></status>
</kw>
<status starttime="20170816 10:11:51.217" status="PASS" endtime="20170816 10:11:51.224"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:51.773" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:11:51.773" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:51.224" status="PASS" endtime="20170816 10:11:51.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:51.775" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:51.774" status="PASS" endtime="20170816 10:11:51.775"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:51.776" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:51.776" status="PASS" endtime="20170816 10:11:51.776"></status>
</kw>
<status starttime="20170816 10:11:51.775" status="PASS" endtime="20170816 10:11:51.776"></status>
</kw>
<status starttime="20170816 10:11:51.774" status="PASS" endtime="20170816 10:11:51.776"></status>
</kw>
<status starttime="20170816 10:11:51.773" status="PASS" endtime="20170816 10:11:51.777"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:51.777" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:51.777" status="PASS" endtime="20170816 10:11:51.777"></status>
</kw>
<msg timestamp="20170816 10:11:51.777" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:50.875" status="PASS" endtime="20170816 10:11:51.777"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:51.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:51.778" status="PASS" endtime="20170816 10:11:51.778"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:51.779" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:51.779" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:51.779" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:51.778" status="PASS" endtime="20170816 10:11:51.779"></status>
</kw>
<msg timestamp="20170816 10:11:51.779" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:11:50.875" status="PASS" endtime="20170816 10:11:51.779"></status>
</kw>
<msg timestamp="20170816 10:11:51.779" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:11:50.874" status="PASS" endtime="20170816 10:11:51.779"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:11:51.780" status="PASS" endtime="20170816 10:11:51.780"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:11:51.785" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:11:51.784" status="PASS" endtime="20170816 10:11:51.785"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:11:51.786" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:11:51.786" status="PASS" endtime="20170816 10:11:51.786"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:11:51.787" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:11:51.786" status="PASS" endtime="20170816 10:11:51.787"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:11:51.787" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:11:51.787" status="PASS" endtime="20170816 10:11:51.787"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:11:52.079" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:11:51.788" status="PASS" endtime="20170816 10:11:52.079"></status>
</kw>
<msg timestamp="20170816 10:11:52.079" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:11:52.079" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:51.788" status="PASS" endtime="20170816 10:11:52.079"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:11:52.080" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:52.080" status="PASS" endtime="20170816 10:11:52.080"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:52.081" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:52.081" status="PASS" endtime="20170816 10:11:52.081"></status>
</kw>
<status starttime="20170816 10:11:51.784" status="PASS" endtime="20170816 10:11:52.081"></status>
</kw>
<status starttime="20170816 10:11:51.783" status="PASS" endtime="20170816 10:11:52.081"></status>
</kw>
<status starttime="20170816 10:11:51.783" status="PASS" endtime="20170816 10:11:52.081"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:11:52.082" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:11:52.082" status="PASS" endtime="20170816 10:11:52.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:52.084" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:11:52.083" status="PASS" endtime="20170816 10:11:52.084"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:52.085" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:11:52.085" status="PASS" endtime="20170816 10:11:52.085"></status>
</kw>
<status starttime="20170816 10:11:52.084" status="PASS" endtime="20170816 10:11:52.085"></status>
</kw>
<status starttime="20170816 10:11:52.083" status="PASS" endtime="20170816 10:11:52.085"></status>
</kw>
<status starttime="20170816 10:11:52.082" status="PASS" endtime="20170816 10:11:52.085"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:52.774" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:11:52.774" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:52.086" status="PASS" endtime="20170816 10:11:52.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:52.777" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:52.776" status="PASS" endtime="20170816 10:11:52.777"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:52.778" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:52.777" status="PASS" endtime="20170816 10:11:52.778"></status>
</kw>
<status starttime="20170816 10:11:52.777" status="PASS" endtime="20170816 10:11:52.778"></status>
</kw>
<status starttime="20170816 10:11:52.775" status="PASS" endtime="20170816 10:11:52.778"></status>
</kw>
<status starttime="20170816 10:11:52.775" status="PASS" endtime="20170816 10:11:52.778"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:52.778" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:52.778" status="PASS" endtime="20170816 10:11:52.778"></status>
</kw>
<msg timestamp="20170816 10:11:52.779" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:51.782" status="PASS" endtime="20170816 10:11:52.779"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:52.779" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:52.779" status="PASS" endtime="20170816 10:11:52.779"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:52.780" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:52.780" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:52.780" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:52.780" status="PASS" endtime="20170816 10:11:52.780"></status>
</kw>
<msg timestamp="20170816 10:11:52.780" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:11:51.782" status="PASS" endtime="20170816 10:11:52.780"></status>
</kw>
<msg timestamp="20170816 10:11:52.781" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:11:51.781" status="PASS" endtime="20170816 10:11:52.781"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:11:52.781" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:11:52.781" status="FAIL" endtime="20170816 10:11:52.781"></status>
</kw>
<status starttime="20170816 10:11:51.781" status="FAIL" endtime="20170816 10:11:52.781"></status>
</kw>
<msg timestamp="20170816 10:11:52.782" level="INFO">${status} = False</msg>
<status starttime="20170816 10:11:51.781" status="PASS" endtime="20170816 10:11:52.782"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:11:52.782" status="PASS" endtime="20170816 10:11:52.782"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:11:52.786" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:11:52.786" status="PASS" endtime="20170816 10:11:52.787"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:11:52.787" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:11:52.787" status="PASS" endtime="20170816 10:11:52.787"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:11:52.788" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:11:52.788" status="PASS" endtime="20170816 10:11:52.788"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:11:52.789" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:11:52.789" status="PASS" endtime="20170816 10:11:52.789"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:11:53.116" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:11:52.790" status="PASS" endtime="20170816 10:11:53.117"></status>
</kw>
<msg timestamp="20170816 10:11:53.117" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:11:53.117" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:52.789" status="PASS" endtime="20170816 10:11:53.117"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:11:53.117" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:53.117" status="PASS" endtime="20170816 10:11:53.118"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:53.118" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:53.118" status="PASS" endtime="20170816 10:11:53.118"></status>
</kw>
<status starttime="20170816 10:11:52.786" status="PASS" endtime="20170816 10:11:53.118"></status>
</kw>
<status starttime="20170816 10:11:52.785" status="PASS" endtime="20170816 10:11:53.119"></status>
</kw>
<status starttime="20170816 10:11:52.784" status="PASS" endtime="20170816 10:11:53.119"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:11:53.119" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:11:53.119" status="PASS" endtime="20170816 10:11:53.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:53.121" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:11:53.121" status="PASS" endtime="20170816 10:11:53.121"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:53.122" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:11:53.122" status="PASS" endtime="20170816 10:11:53.122"></status>
</kw>
<status starttime="20170816 10:11:53.121" status="PASS" endtime="20170816 10:11:53.122"></status>
</kw>
<status starttime="20170816 10:11:53.120" status="PASS" endtime="20170816 10:11:53.123"></status>
</kw>
<status starttime="20170816 10:11:53.120" status="PASS" endtime="20170816 10:11:53.123"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:11:53.749" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:11:53.749" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:53.123" status="PASS" endtime="20170816 10:11:53.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:11:53.751" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:53.750" status="PASS" endtime="20170816 10:11:53.751"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:11:53.752" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:11:53.752" status="PASS" endtime="20170816 10:11:53.752"></status>
</kw>
<status starttime="20170816 10:11:53.752" status="PASS" endtime="20170816 10:11:53.753"></status>
</kw>
<status starttime="20170816 10:11:53.750" status="PASS" endtime="20170816 10:11:53.753"></status>
</kw>
<status starttime="20170816 10:11:53.749" status="PASS" endtime="20170816 10:11:53.753"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:11:53.753" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:11:53.753" status="PASS" endtime="20170816 10:11:53.753"></status>
</kw>
<msg timestamp="20170816 10:11:53.753" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:11:52.783" status="PASS" endtime="20170816 10:11:53.753"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:11:53.754" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:11:53.754" status="PASS" endtime="20170816 10:11:53.754"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:11:53.755" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:11:53.755" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:11:53.755" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:11:53.754" status="PASS" endtime="20170816 10:11:53.755"></status>
</kw>
<msg timestamp="20170816 10:11:53.755" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:11:52.783" status="PASS" endtime="20170816 10:11:53.755"></status>
</kw>
<msg timestamp="20170816 10:11:53.755" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:11:52.782" status="PASS" endtime="20170816 10:11:53.755"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:11:53.756" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:11:53.756" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:11:53.756" status="FAIL" endtime="20170816 10:11:53.756"></status>
</kw>
<status starttime="20170816 10:11:51.780" status="FAIL" endtime="20170816 10:11:53.756"></status>
</kw>
<status starttime="20170816 10:11:49.844" status="FAIL" endtime="20170816 10:11:53.757"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:12:03.762" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:12:03.761" status="PASS" endtime="20170816 10:12:03.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:12:03.763" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:12:03.762" status="PASS" endtime="20170816 10:12:03.763"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:12:03.763" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:12:03.763" status="PASS" endtime="20170816 10:12:03.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:12:03.764" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:12:03.764" status="PASS" endtime="20170816 10:12:03.764"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:12:04.122" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:12:03.765" status="PASS" endtime="20170816 10:12:04.123"></status>
</kw>
<msg timestamp="20170816 10:12:04.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:12:04.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:03.764" status="PASS" endtime="20170816 10:12:04.123"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:12:04.124" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:04.123" status="PASS" endtime="20170816 10:12:04.124"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:04.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:04.124" status="PASS" endtime="20170816 10:12:04.124"></status>
</kw>
<status starttime="20170816 10:12:03.761" status="PASS" endtime="20170816 10:12:04.124"></status>
</kw>
<status starttime="20170816 10:12:03.760" status="PASS" endtime="20170816 10:12:04.125"></status>
</kw>
<status starttime="20170816 10:12:03.760" status="PASS" endtime="20170816 10:12:04.125"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:12:04.125" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:12:04.125" status="PASS" endtime="20170816 10:12:04.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:04.127" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:04.127" status="PASS" endtime="20170816 10:12:04.127"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:04.128" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:04.128" status="PASS" endtime="20170816 10:12:04.128"></status>
</kw>
<status starttime="20170816 10:12:04.128" status="PASS" endtime="20170816 10:12:04.128"></status>
</kw>
<status starttime="20170816 10:12:04.126" status="PASS" endtime="20170816 10:12:04.129"></status>
</kw>
<status starttime="20170816 10:12:04.126" status="PASS" endtime="20170816 10:12:04.129"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:12:04.642" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:12:04.642" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:04.129" status="PASS" endtime="20170816 10:12:04.642"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:04.644" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:04.643" status="PASS" endtime="20170816 10:12:04.644"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:04.645" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:04.644" status="PASS" endtime="20170816 10:12:04.645"></status>
</kw>
<status starttime="20170816 10:12:04.644" status="PASS" endtime="20170816 10:12:04.645"></status>
</kw>
<status starttime="20170816 10:12:04.643" status="PASS" endtime="20170816 10:12:04.645"></status>
</kw>
<status starttime="20170816 10:12:04.642" status="PASS" endtime="20170816 10:12:04.645"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:12:04.645" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:12:04.645" status="PASS" endtime="20170816 10:12:04.646"></status>
</kw>
<msg timestamp="20170816 10:12:04.646" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:03.759" status="PASS" endtime="20170816 10:12:04.646"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:04.647" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:04.646" status="PASS" endtime="20170816 10:12:04.647"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:12:04.647" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:12:04.647" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:12:04.647" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:12:04.647" status="PASS" endtime="20170816 10:12:04.647"></status>
</kw>
<msg timestamp="20170816 10:12:04.648" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:12:03.758" status="PASS" endtime="20170816 10:12:04.648"></status>
</kw>
<msg timestamp="20170816 10:12:04.648" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:12:03.758" status="PASS" endtime="20170816 10:12:04.648"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:12:04.648" status="PASS" endtime="20170816 10:12:04.649"></status>
</kw>
<status starttime="20170816 10:12:03.758" status="PASS" endtime="20170816 10:12:04.649"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:12:04.652" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:12:04.652" status="PASS" endtime="20170816 10:12:04.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:12:04.654" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:12:04.654" status="PASS" endtime="20170816 10:12:04.654"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:12:04.654" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:12:04.654" status="PASS" endtime="20170816 10:12:04.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:12:04.655" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:12:04.655" status="PASS" endtime="20170816 10:12:04.655"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:12:05.174" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:12:04.657" status="PASS" endtime="20170816 10:12:05.174"></status>
</kw>
<msg timestamp="20170816 10:12:05.174" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:12:05.174" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:04.656" status="PASS" endtime="20170816 10:12:05.174"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:12:05.175" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:05.175" status="PASS" endtime="20170816 10:12:05.175"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:05.176" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:05.175" status="PASS" endtime="20170816 10:12:05.176"></status>
</kw>
<status starttime="20170816 10:12:04.652" status="PASS" endtime="20170816 10:12:05.176"></status>
</kw>
<status starttime="20170816 10:12:04.651" status="PASS" endtime="20170816 10:12:05.176"></status>
</kw>
<status starttime="20170816 10:12:04.651" status="PASS" endtime="20170816 10:12:05.177"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:12:05.177" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:12:05.177" status="PASS" endtime="20170816 10:12:05.177"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:05.179" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:05.179" status="PASS" endtime="20170816 10:12:05.179"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:05.180" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:05.180" status="PASS" endtime="20170816 10:12:05.180"></status>
</kw>
<status starttime="20170816 10:12:05.180" status="PASS" endtime="20170816 10:12:05.181"></status>
</kw>
<status starttime="20170816 10:12:05.178" status="PASS" endtime="20170816 10:12:05.181"></status>
</kw>
<status starttime="20170816 10:12:05.177" status="PASS" endtime="20170816 10:12:05.181"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:12:05.745" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:12:05.745" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:05.181" status="PASS" endtime="20170816 10:12:05.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:05.747" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:05.747" status="PASS" endtime="20170816 10:12:05.747"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:05.748" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:05.748" status="PASS" endtime="20170816 10:12:05.749"></status>
</kw>
<status starttime="20170816 10:12:05.748" status="PASS" endtime="20170816 10:12:05.749"></status>
</kw>
<status starttime="20170816 10:12:05.746" status="PASS" endtime="20170816 10:12:05.749"></status>
</kw>
<status starttime="20170816 10:12:05.746" status="PASS" endtime="20170816 10:12:05.749"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:12:05.749" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:12:05.749" status="PASS" endtime="20170816 10:12:05.749"></status>
</kw>
<msg timestamp="20170816 10:12:05.749" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:04.650" status="PASS" endtime="20170816 10:12:05.750"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:05.750" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:05.750" status="PASS" endtime="20170816 10:12:05.750"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:12:05.751" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:12:05.751" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:12:05.751" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:12:05.750" status="PASS" endtime="20170816 10:12:05.751"></status>
</kw>
<msg timestamp="20170816 10:12:05.751" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170816 10:12:04.650" status="PASS" endtime="20170816 10:12:05.751"></status>
</kw>
<msg timestamp="20170816 10:12:05.751" level="INFO">${host_state} = Running</msg>
<status starttime="20170816 10:12:04.649" status="PASS" endtime="20170816 10:12:05.752"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:12:05.752" status="PASS" endtime="20170816 10:12:05.752"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:12:05.758" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:12:05.758" status="PASS" endtime="20170816 10:12:05.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:12:05.759" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:12:05.759" status="PASS" endtime="20170816 10:12:05.759"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:12:05.760" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:12:05.760" status="PASS" endtime="20170816 10:12:05.760"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:12:05.761" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:12:05.760" status="PASS" endtime="20170816 10:12:05.761"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:12:06.550" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:12:05.761" status="PASS" endtime="20170816 10:12:06.551"></status>
</kw>
<msg timestamp="20170816 10:12:06.551" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:12:06.551" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:05.761" status="PASS" endtime="20170816 10:12:06.551"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:12:06.551" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:06.551" status="PASS" endtime="20170816 10:12:06.552"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:06.552" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:06.552" status="PASS" endtime="20170816 10:12:06.552"></status>
</kw>
<status starttime="20170816 10:12:05.757" status="PASS" endtime="20170816 10:12:06.552"></status>
</kw>
<status starttime="20170816 10:12:05.757" status="PASS" endtime="20170816 10:12:06.552"></status>
</kw>
<status starttime="20170816 10:12:05.756" status="PASS" endtime="20170816 10:12:06.553"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:12:06.553" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170816 10:12:06.553" status="PASS" endtime="20170816 10:12:06.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:06.557" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:12:06.555" status="PASS" endtime="20170816 10:12:06.557"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:06.558" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170816 10:12:06.558" status="PASS" endtime="20170816 10:12:06.558"></status>
</kw>
<status starttime="20170816 10:12:06.557" status="PASS" endtime="20170816 10:12:06.558"></status>
</kw>
<status starttime="20170816 10:12:06.554" status="PASS" endtime="20170816 10:12:06.558"></status>
</kw>
<status starttime="20170816 10:12:06.553" status="PASS" endtime="20170816 10:12:06.558"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:12:06.900" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 10:12:06.900" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:06.559" status="PASS" endtime="20170816 10:12:06.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:06.902" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:06.901" status="PASS" endtime="20170816 10:12:06.902"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:06.903" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:06.903" status="PASS" endtime="20170816 10:12:06.903"></status>
</kw>
<status starttime="20170816 10:12:06.902" status="PASS" endtime="20170816 10:12:06.903"></status>
</kw>
<status starttime="20170816 10:12:06.901" status="PASS" endtime="20170816 10:12:06.903"></status>
</kw>
<status starttime="20170816 10:12:06.900" status="PASS" endtime="20170816 10:12:06.903"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:12:06.904" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:12:06.903" status="PASS" endtime="20170816 10:12:06.904"></status>
</kw>
<msg timestamp="20170816 10:12:06.904" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:05.755" status="PASS" endtime="20170816 10:12:06.904"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:06.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:06.904" status="PASS" endtime="20170816 10:12:06.905"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:12:06.905" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:12:06.905" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:12:06.905" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:12:06.905" status="PASS" endtime="20170816 10:12:06.905"></status>
</kw>
<msg timestamp="20170816 10:12:06.906" level="INFO">${state} = Off</msg>
<status starttime="20170816 10:12:05.754" status="PASS" endtime="20170816 10:12:06.906"></status>
</kw>
<msg timestamp="20170816 10:12:06.906" level="INFO">${boot_progress} = Off</msg>
<status starttime="20170816 10:12:05.753" status="PASS" endtime="20170816 10:12:06.906"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 10:12:06.907" level="FAIL">Off != FW Progress, Starting OS</msg>
<status starttime="20170816 10:12:06.906" status="FAIL" endtime="20170816 10:12:06.907"></status>
</kw>
<status starttime="20170816 10:12:05.753" status="FAIL" endtime="20170816 10:12:06.907"></status>
</kw>
<msg timestamp="20170816 10:12:06.907" level="INFO">${status} = False</msg>
<status starttime="20170816 10:12:05.753" status="PASS" endtime="20170816 10:12:06.907"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170816 10:12:06.907" status="PASS" endtime="20170816 10:12:06.908"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:12:06.912" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:12:06.911" status="PASS" endtime="20170816 10:12:06.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:12:06.913" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:12:06.912" status="PASS" endtime="20170816 10:12:06.913"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:12:06.913" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:12:06.913" status="PASS" endtime="20170816 10:12:06.913"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:12:06.914" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:12:06.913" status="PASS" endtime="20170816 10:12:06.914"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:12:07.141" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:12:06.915" status="PASS" endtime="20170816 10:12:07.141"></status>
</kw>
<msg timestamp="20170816 10:12:07.141" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:12:07.141" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:06.914" status="PASS" endtime="20170816 10:12:07.141"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:12:07.142" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:07.141" status="PASS" endtime="20170816 10:12:07.142"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:07.142" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:07.142" status="PASS" endtime="20170816 10:12:07.143"></status>
</kw>
<status starttime="20170816 10:12:06.911" status="PASS" endtime="20170816 10:12:07.143"></status>
</kw>
<status starttime="20170816 10:12:06.910" status="PASS" endtime="20170816 10:12:07.143"></status>
</kw>
<status starttime="20170816 10:12:06.910" status="PASS" endtime="20170816 10:12:07.143"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:12:07.144" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170816 10:12:07.143" status="PASS" endtime="20170816 10:12:07.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:07.146" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:12:07.145" status="PASS" endtime="20170816 10:12:07.146"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:07.147" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170816 10:12:07.146" status="PASS" endtime="20170816 10:12:07.147"></status>
</kw>
<status starttime="20170816 10:12:07.146" status="PASS" endtime="20170816 10:12:07.147"></status>
</kw>
<status starttime="20170816 10:12:07.144" status="PASS" endtime="20170816 10:12:07.147"></status>
</kw>
<status starttime="20170816 10:12:07.144" status="PASS" endtime="20170816 10:12:07.147"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:12:07.279" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 10:12:07.279" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:07.147" status="PASS" endtime="20170816 10:12:07.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:07.281" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:07.280" status="PASS" endtime="20170816 10:12:07.281"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:07.282" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:07.281" status="PASS" endtime="20170816 10:12:07.282"></status>
</kw>
<status starttime="20170816 10:12:07.281" status="PASS" endtime="20170816 10:12:07.282"></status>
</kw>
<status starttime="20170816 10:12:07.280" status="PASS" endtime="20170816 10:12:07.282"></status>
</kw>
<status starttime="20170816 10:12:07.279" status="PASS" endtime="20170816 10:12:07.282"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:12:07.282" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:12:07.282" status="PASS" endtime="20170816 10:12:07.282"></status>
</kw>
<msg timestamp="20170816 10:12:07.283" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:06.909" status="PASS" endtime="20170816 10:12:07.283"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:07.283" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:07.283" status="PASS" endtime="20170816 10:12:07.283"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:12:07.284" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:12:07.284" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:12:07.284" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:12:07.284" status="PASS" endtime="20170816 10:12:07.284"></status>
</kw>
<msg timestamp="20170816 10:12:07.284" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:12:06.908" status="PASS" endtime="20170816 10:12:07.284"></status>
</kw>
<msg timestamp="20170816 10:12:07.285" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:12:06.908" status="PASS" endtime="20170816 10:12:07.285"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 10:12:07.285" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:12:07.285" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20170816 10:12:07.285" status="FAIL" endtime="20170816 10:12:07.285"></status>
</kw>
<status starttime="20170816 10:12:05.752" status="FAIL" endtime="20170816 10:12:07.286"></status>
</kw>
<status starttime="20170816 10:12:03.757" status="FAIL" endtime="20170816 10:12:07.286"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:12:17.292" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:12:17.291" status="PASS" endtime="20170816 10:12:17.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:12:17.293" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:12:17.292" status="PASS" endtime="20170816 10:12:17.293"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:12:17.293" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:12:17.293" status="PASS" endtime="20170816 10:12:17.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:12:17.294" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:12:17.294" status="PASS" endtime="20170816 10:12:17.294"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:12:17.476" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:12:17.295" status="PASS" endtime="20170816 10:12:17.476"></status>
</kw>
<msg timestamp="20170816 10:12:17.476" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:12:17.476" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:17.294" status="PASS" endtime="20170816 10:12:17.476"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:12:17.477" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:17.477" status="PASS" endtime="20170816 10:12:17.477"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:17.478" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:17.477" status="PASS" endtime="20170816 10:12:17.478"></status>
</kw>
<status starttime="20170816 10:12:17.290" status="PASS" endtime="20170816 10:12:17.478"></status>
</kw>
<status starttime="20170816 10:12:17.290" status="PASS" endtime="20170816 10:12:17.478"></status>
</kw>
<status starttime="20170816 10:12:17.289" status="PASS" endtime="20170816 10:12:17.478"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:12:17.479" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:12:17.478" status="PASS" endtime="20170816 10:12:17.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:17.481" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:17.480" status="PASS" endtime="20170816 10:12:17.481"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:17.482" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:17.481" status="PASS" endtime="20170816 10:12:17.482"></status>
</kw>
<status starttime="20170816 10:12:17.481" status="PASS" endtime="20170816 10:12:17.482"></status>
</kw>
<status starttime="20170816 10:12:17.479" status="PASS" endtime="20170816 10:12:17.482"></status>
</kw>
<status starttime="20170816 10:12:17.479" status="PASS" endtime="20170816 10:12:17.482"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:12:17.544" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:12:17.544" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:17.482" status="PASS" endtime="20170816 10:12:17.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:17.546" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:17.546" status="PASS" endtime="20170816 10:12:17.546"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:17.548" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:17.547" status="PASS" endtime="20170816 10:12:17.548"></status>
</kw>
<status starttime="20170816 10:12:17.546" status="PASS" endtime="20170816 10:12:17.548"></status>
</kw>
<status starttime="20170816 10:12:17.545" status="PASS" endtime="20170816 10:12:17.548"></status>
</kw>
<status starttime="20170816 10:12:17.545" status="PASS" endtime="20170816 10:12:17.548"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:12:17.548" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:12:17.548" status="PASS" endtime="20170816 10:12:17.548"></status>
</kw>
<msg timestamp="20170816 10:12:17.549" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:17.289" status="PASS" endtime="20170816 10:12:17.549"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:17.549" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:17.549" status="PASS" endtime="20170816 10:12:17.549"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:12:17.550" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:12:17.550" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:12:17.550" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:12:17.550" status="PASS" endtime="20170816 10:12:17.550"></status>
</kw>
<msg timestamp="20170816 10:12:17.550" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:12:17.288" status="PASS" endtime="20170816 10:12:17.550"></status>
</kw>
<msg timestamp="20170816 10:12:17.551" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:12:17.287" status="PASS" endtime="20170816 10:12:17.551"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:12:17.551" status="PASS" endtime="20170816 10:12:17.551"></status>
</kw>
<status starttime="20170816 10:12:17.287" status="PASS" endtime="20170816 10:12:17.551"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:12:17.555" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:12:17.555" status="PASS" endtime="20170816 10:12:17.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:12:17.556" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:12:17.556" status="PASS" endtime="20170816 10:12:17.556"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:12:17.557" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:12:17.556" status="PASS" endtime="20170816 10:12:17.557"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:12:17.557" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:12:17.557" status="PASS" endtime="20170816 10:12:17.557"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:12:17.802" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:12:17.558" status="PASS" endtime="20170816 10:12:17.802"></status>
</kw>
<msg timestamp="20170816 10:12:17.802" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:12:17.802" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:17.558" status="PASS" endtime="20170816 10:12:17.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:12:17.803" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:17.803" status="PASS" endtime="20170816 10:12:17.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:17.804" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:17.803" status="PASS" endtime="20170816 10:12:17.804"></status>
</kw>
<status starttime="20170816 10:12:17.554" status="PASS" endtime="20170816 10:12:17.804"></status>
</kw>
<status starttime="20170816 10:12:17.554" status="PASS" endtime="20170816 10:12:17.804"></status>
</kw>
<status starttime="20170816 10:12:17.553" status="PASS" endtime="20170816 10:12:17.804"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:12:17.805" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:12:17.804" status="PASS" endtime="20170816 10:12:17.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:17.807" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:17.806" status="PASS" endtime="20170816 10:12:17.807"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:17.808" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:17.808" status="PASS" endtime="20170816 10:12:17.808"></status>
</kw>
<status starttime="20170816 10:12:17.807" status="PASS" endtime="20170816 10:12:17.808"></status>
</kw>
<status starttime="20170816 10:12:17.805" status="PASS" endtime="20170816 10:12:17.809"></status>
</kw>
<status starttime="20170816 10:12:17.805" status="PASS" endtime="20170816 10:12:17.809"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:12:17.939" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:12:17.939" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:17.809" status="PASS" endtime="20170816 10:12:17.939"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:17.941" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:17.940" status="PASS" endtime="20170816 10:12:17.941"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:17.942" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:17.942" status="PASS" endtime="20170816 10:12:17.942"></status>
</kw>
<status starttime="20170816 10:12:17.941" status="PASS" endtime="20170816 10:12:17.942"></status>
</kw>
<status starttime="20170816 10:12:17.940" status="PASS" endtime="20170816 10:12:17.942"></status>
</kw>
<status starttime="20170816 10:12:17.940" status="PASS" endtime="20170816 10:12:17.942"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:12:17.943" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:12:17.943" status="PASS" endtime="20170816 10:12:17.943"></status>
</kw>
<msg timestamp="20170816 10:12:17.943" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:17.552" status="PASS" endtime="20170816 10:12:17.943"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:17.944" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:17.943" status="PASS" endtime="20170816 10:12:17.944"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:12:17.944" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:12:17.944" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:12:17.944" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:12:17.944" status="PASS" endtime="20170816 10:12:17.945"></status>
</kw>
<msg timestamp="20170816 10:12:17.945" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:12:17.552" status="PASS" endtime="20170816 10:12:17.945"></status>
</kw>
<msg timestamp="20170816 10:12:17.945" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:12:17.551" status="PASS" endtime="20170816 10:12:17.945"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:12:17.946" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:12:17.946" status="FAIL" endtime="20170816 10:12:17.946"></status>
</kw>
<status starttime="20170816 10:12:17.286" status="FAIL" endtime="20170816 10:12:17.946"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:12:27.952" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:12:27.951" status="PASS" endtime="20170816 10:12:27.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:12:27.953" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:12:27.952" status="PASS" endtime="20170816 10:12:27.953"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:12:27.957" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:12:27.953" status="PASS" endtime="20170816 10:12:27.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:12:27.957" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:12:27.957" status="PASS" endtime="20170816 10:12:27.957"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:12:28.410" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:12:27.958" status="PASS" endtime="20170816 10:12:28.411"></status>
</kw>
<msg timestamp="20170816 10:12:28.411" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:12:28.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:27.958" status="PASS" endtime="20170816 10:12:28.411"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:12:28.412" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:28.411" status="PASS" endtime="20170816 10:12:28.412"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:28.412" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:28.412" status="PASS" endtime="20170816 10:12:28.412"></status>
</kw>
<status starttime="20170816 10:12:27.951" status="PASS" endtime="20170816 10:12:28.413"></status>
</kw>
<status starttime="20170816 10:12:27.950" status="PASS" endtime="20170816 10:12:28.413"></status>
</kw>
<status starttime="20170816 10:12:27.950" status="PASS" endtime="20170816 10:12:28.413"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:12:28.413" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:12:28.413" status="PASS" endtime="20170816 10:12:28.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:28.415" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:28.415" status="PASS" endtime="20170816 10:12:28.415"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:28.416" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:28.416" status="PASS" endtime="20170816 10:12:28.417"></status>
</kw>
<status starttime="20170816 10:12:28.416" status="PASS" endtime="20170816 10:12:28.417"></status>
</kw>
<status starttime="20170816 10:12:28.414" status="PASS" endtime="20170816 10:12:28.417"></status>
</kw>
<status starttime="20170816 10:12:28.414" status="PASS" endtime="20170816 10:12:28.417"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:12:28.522" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:12:28.522" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:28.417" status="PASS" endtime="20170816 10:12:28.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:28.524" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:28.523" status="PASS" endtime="20170816 10:12:28.524"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:28.525" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:28.525" status="PASS" endtime="20170816 10:12:28.525"></status>
</kw>
<status starttime="20170816 10:12:28.524" status="PASS" endtime="20170816 10:12:28.525"></status>
</kw>
<status starttime="20170816 10:12:28.523" status="PASS" endtime="20170816 10:12:28.525"></status>
</kw>
<status starttime="20170816 10:12:28.522" status="PASS" endtime="20170816 10:12:28.525"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:12:28.526" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:12:28.525" status="PASS" endtime="20170816 10:12:28.526"></status>
</kw>
<msg timestamp="20170816 10:12:28.526" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:27.949" status="PASS" endtime="20170816 10:12:28.526"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:28.527" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:28.526" status="PASS" endtime="20170816 10:12:28.527"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:12:28.527" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:12:28.527" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:12:28.527" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:12:28.527" status="PASS" endtime="20170816 10:12:28.527"></status>
</kw>
<msg timestamp="20170816 10:12:28.528" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:12:27.948" status="PASS" endtime="20170816 10:12:28.528"></status>
</kw>
<msg timestamp="20170816 10:12:28.528" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:12:27.948" status="PASS" endtime="20170816 10:12:28.528"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:12:28.528" status="PASS" endtime="20170816 10:12:28.529"></status>
</kw>
<status starttime="20170816 10:12:27.948" status="PASS" endtime="20170816 10:12:28.529"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:12:28.533" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:12:28.532" status="PASS" endtime="20170816 10:12:28.533"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:12:28.534" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:12:28.533" status="PASS" endtime="20170816 10:12:28.534"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:12:28.534" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:12:28.534" status="PASS" endtime="20170816 10:12:28.534"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:12:28.535" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:12:28.534" status="PASS" endtime="20170816 10:12:28.535"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:12:28.783" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:12:28.536" status="PASS" endtime="20170816 10:12:28.783"></status>
</kw>
<msg timestamp="20170816 10:12:28.783" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:12:28.783" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:28.535" status="PASS" endtime="20170816 10:12:28.783"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:12:28.784" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:28.783" status="PASS" endtime="20170816 10:12:28.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:28.784" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:28.784" status="PASS" endtime="20170816 10:12:28.785"></status>
</kw>
<status starttime="20170816 10:12:28.532" status="PASS" endtime="20170816 10:12:28.785"></status>
</kw>
<status starttime="20170816 10:12:28.531" status="PASS" endtime="20170816 10:12:28.785"></status>
</kw>
<status starttime="20170816 10:12:28.530" status="PASS" endtime="20170816 10:12:28.785"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:12:28.785" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:12:28.785" status="PASS" endtime="20170816 10:12:28.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:28.788" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:28.787" status="PASS" endtime="20170816 10:12:28.788"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:28.789" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:28.788" status="PASS" endtime="20170816 10:12:28.789"></status>
</kw>
<status starttime="20170816 10:12:28.788" status="PASS" endtime="20170816 10:12:28.789"></status>
</kw>
<status starttime="20170816 10:12:28.786" status="PASS" endtime="20170816 10:12:28.789"></status>
</kw>
<status starttime="20170816 10:12:28.786" status="PASS" endtime="20170816 10:12:28.789"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:12:28.889" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:12:28.889" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:28.789" status="PASS" endtime="20170816 10:12:28.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:28.890" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:28.890" status="PASS" endtime="20170816 10:12:28.891"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:28.892" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:28.892" status="PASS" endtime="20170816 10:12:28.892"></status>
</kw>
<status starttime="20170816 10:12:28.891" status="PASS" endtime="20170816 10:12:28.892"></status>
</kw>
<status starttime="20170816 10:12:28.890" status="PASS" endtime="20170816 10:12:28.892"></status>
</kw>
<status starttime="20170816 10:12:28.889" status="PASS" endtime="20170816 10:12:28.892"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:12:28.893" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:12:28.892" status="PASS" endtime="20170816 10:12:28.893"></status>
</kw>
<msg timestamp="20170816 10:12:28.893" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:28.530" status="PASS" endtime="20170816 10:12:28.893"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:28.894" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:28.893" status="PASS" endtime="20170816 10:12:28.894"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:12:28.894" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:12:28.894" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:12:28.894" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:12:28.894" status="PASS" endtime="20170816 10:12:28.894"></status>
</kw>
<msg timestamp="20170816 10:12:28.895" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:12:28.529" status="PASS" endtime="20170816 10:12:28.895"></status>
</kw>
<msg timestamp="20170816 10:12:28.895" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:12:28.529" status="PASS" endtime="20170816 10:12:28.895"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:12:28.896" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:12:28.895" status="FAIL" endtime="20170816 10:12:28.896"></status>
</kw>
<status starttime="20170816 10:12:27.947" status="FAIL" endtime="20170816 10:12:28.896"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:12:38.901" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:12:38.901" status="PASS" endtime="20170816 10:12:38.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:12:38.902" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:12:38.902" status="PASS" endtime="20170816 10:12:38.902"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:12:38.903" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:12:38.902" status="PASS" endtime="20170816 10:12:38.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:12:38.903" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:12:38.903" status="PASS" endtime="20170816 10:12:38.903"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:12:39.103" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:12:38.904" status="PASS" endtime="20170816 10:12:39.103"></status>
</kw>
<msg timestamp="20170816 10:12:39.103" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:12:39.103" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:38.904" status="PASS" endtime="20170816 10:12:39.103"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:12:39.104" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:39.103" status="PASS" endtime="20170816 10:12:39.104"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:39.105" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:39.104" status="PASS" endtime="20170816 10:12:39.105"></status>
</kw>
<status starttime="20170816 10:12:38.900" status="PASS" endtime="20170816 10:12:39.105"></status>
</kw>
<status starttime="20170816 10:12:38.900" status="PASS" endtime="20170816 10:12:39.105"></status>
</kw>
<status starttime="20170816 10:12:38.899" status="PASS" endtime="20170816 10:12:39.105"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:12:39.105" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:12:39.105" status="PASS" endtime="20170816 10:12:39.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:39.108" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:39.107" status="PASS" endtime="20170816 10:12:39.108"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:39.109" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:39.108" status="PASS" endtime="20170816 10:12:39.109"></status>
</kw>
<status starttime="20170816 10:12:39.108" status="PASS" endtime="20170816 10:12:39.109"></status>
</kw>
<status starttime="20170816 10:12:39.106" status="PASS" endtime="20170816 10:12:39.109"></status>
</kw>
<status starttime="20170816 10:12:39.106" status="PASS" endtime="20170816 10:12:39.109"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:12:39.173" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:12:39.173" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:39.109" status="PASS" endtime="20170816 10:12:39.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:39.175" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:39.175" status="PASS" endtime="20170816 10:12:39.175"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:39.176" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:39.176" status="PASS" endtime="20170816 10:12:39.176"></status>
</kw>
<status starttime="20170816 10:12:39.175" status="PASS" endtime="20170816 10:12:39.176"></status>
</kw>
<status starttime="20170816 10:12:39.174" status="PASS" endtime="20170816 10:12:39.176"></status>
</kw>
<status starttime="20170816 10:12:39.174" status="PASS" endtime="20170816 10:12:39.176"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:12:39.177" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:12:39.177" status="PASS" endtime="20170816 10:12:39.177"></status>
</kw>
<msg timestamp="20170816 10:12:39.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:38.898" status="PASS" endtime="20170816 10:12:39.177"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:39.178" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:39.178" status="PASS" endtime="20170816 10:12:39.178"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:12:39.178" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:12:39.179" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:12:39.179" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:12:39.178" status="PASS" endtime="20170816 10:12:39.179"></status>
</kw>
<msg timestamp="20170816 10:12:39.179" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:12:38.898" status="PASS" endtime="20170816 10:12:39.179"></status>
</kw>
<msg timestamp="20170816 10:12:39.179" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:12:38.897" status="PASS" endtime="20170816 10:12:39.179"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:12:39.180" status="PASS" endtime="20170816 10:12:39.180"></status>
</kw>
<status starttime="20170816 10:12:38.897" status="PASS" endtime="20170816 10:12:39.180"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:12:39.183" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:12:39.183" status="PASS" endtime="20170816 10:12:39.184"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:12:39.185" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:12:39.185" status="PASS" endtime="20170816 10:12:39.185"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:12:39.186" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:12:39.185" status="PASS" endtime="20170816 10:12:39.186"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:12:39.186" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:12:39.186" status="PASS" endtime="20170816 10:12:39.186"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:12:39.363" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:12:39.187" status="PASS" endtime="20170816 10:12:39.363"></status>
</kw>
<msg timestamp="20170816 10:12:39.363" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:12:39.363" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:39.187" status="PASS" endtime="20170816 10:12:39.363"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:12:39.364" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:39.364" status="PASS" endtime="20170816 10:12:39.364"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:39.365" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:39.364" status="PASS" endtime="20170816 10:12:39.365"></status>
</kw>
<status starttime="20170816 10:12:39.183" status="PASS" endtime="20170816 10:12:39.365"></status>
</kw>
<status starttime="20170816 10:12:39.182" status="PASS" endtime="20170816 10:12:39.365"></status>
</kw>
<status starttime="20170816 10:12:39.182" status="PASS" endtime="20170816 10:12:39.365"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:12:39.366" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:12:39.365" status="PASS" endtime="20170816 10:12:39.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:39.368" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:39.367" status="PASS" endtime="20170816 10:12:39.368"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:39.369" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:39.369" status="PASS" endtime="20170816 10:12:39.369"></status>
</kw>
<status starttime="20170816 10:12:39.368" status="PASS" endtime="20170816 10:12:39.369"></status>
</kw>
<status starttime="20170816 10:12:39.366" status="PASS" endtime="20170816 10:12:39.369"></status>
</kw>
<status starttime="20170816 10:12:39.366" status="PASS" endtime="20170816 10:12:39.369"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:12:39.457" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:12:39.457" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:39.369" status="PASS" endtime="20170816 10:12:39.457"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:39.459" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:39.458" status="PASS" endtime="20170816 10:12:39.459"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:39.460" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:39.460" status="PASS" endtime="20170816 10:12:39.460"></status>
</kw>
<status starttime="20170816 10:12:39.459" status="PASS" endtime="20170816 10:12:39.460"></status>
</kw>
<status starttime="20170816 10:12:39.458" status="PASS" endtime="20170816 10:12:39.460"></status>
</kw>
<status starttime="20170816 10:12:39.457" status="PASS" endtime="20170816 10:12:39.460"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:12:39.461" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:12:39.461" status="PASS" endtime="20170816 10:12:39.461"></status>
</kw>
<msg timestamp="20170816 10:12:39.461" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:39.181" status="PASS" endtime="20170816 10:12:39.461"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:39.462" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:39.462" status="PASS" endtime="20170816 10:12:39.462"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:12:39.463" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:12:39.463" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:12:39.463" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:12:39.462" status="PASS" endtime="20170816 10:12:39.463"></status>
</kw>
<msg timestamp="20170816 10:12:39.463" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:12:39.180" status="PASS" endtime="20170816 10:12:39.463"></status>
</kw>
<msg timestamp="20170816 10:12:39.463" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:12:39.180" status="PASS" endtime="20170816 10:12:39.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:12:39.464" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:12:39.464" status="FAIL" endtime="20170816 10:12:39.464"></status>
</kw>
<status starttime="20170816 10:12:38.896" status="FAIL" endtime="20170816 10:12:39.464"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:12:49.470" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:12:49.470" status="PASS" endtime="20170816 10:12:49.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:12:49.471" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:12:49.471" status="PASS" endtime="20170816 10:12:49.471"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:12:49.472" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:12:49.471" status="PASS" endtime="20170816 10:12:49.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:12:49.472" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:12:49.472" status="PASS" endtime="20170816 10:12:49.472"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:12:49.721" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:12:49.473" status="PASS" endtime="20170816 10:12:49.722"></status>
</kw>
<msg timestamp="20170816 10:12:49.722" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:12:49.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:49.473" status="PASS" endtime="20170816 10:12:49.722"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:12:49.723" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:49.722" status="PASS" endtime="20170816 10:12:49.723"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:49.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:49.723" status="PASS" endtime="20170816 10:12:49.723"></status>
</kw>
<status starttime="20170816 10:12:49.469" status="PASS" endtime="20170816 10:12:49.723"></status>
</kw>
<status starttime="20170816 10:12:49.469" status="PASS" endtime="20170816 10:12:49.724"></status>
</kw>
<status starttime="20170816 10:12:49.468" status="PASS" endtime="20170816 10:12:49.724"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:12:49.724" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:12:49.724" status="PASS" endtime="20170816 10:12:49.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:49.726" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:49.726" status="PASS" endtime="20170816 10:12:49.726"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:49.727" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:49.727" status="PASS" endtime="20170816 10:12:49.728"></status>
</kw>
<status starttime="20170816 10:12:49.727" status="PASS" endtime="20170816 10:12:49.728"></status>
</kw>
<status starttime="20170816 10:12:49.725" status="PASS" endtime="20170816 10:12:49.728"></status>
</kw>
<status starttime="20170816 10:12:49.725" status="PASS" endtime="20170816 10:12:49.728"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:12:49.790" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:12:49.790" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:49.728" status="PASS" endtime="20170816 10:12:49.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:49.792" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:49.792" status="PASS" endtime="20170816 10:12:49.792"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:49.793" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:49.793" status="PASS" endtime="20170816 10:12:49.793"></status>
</kw>
<status starttime="20170816 10:12:49.792" status="PASS" endtime="20170816 10:12:49.793"></status>
</kw>
<status starttime="20170816 10:12:49.791" status="PASS" endtime="20170816 10:12:49.794"></status>
</kw>
<status starttime="20170816 10:12:49.791" status="PASS" endtime="20170816 10:12:49.794"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:12:49.794" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:12:49.794" status="PASS" endtime="20170816 10:12:49.794"></status>
</kw>
<msg timestamp="20170816 10:12:49.794" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:49.468" status="PASS" endtime="20170816 10:12:49.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:49.795" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:49.795" status="PASS" endtime="20170816 10:12:49.795"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:12:49.795" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:12:49.796" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:12:49.796" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:12:49.795" status="PASS" endtime="20170816 10:12:49.796"></status>
</kw>
<msg timestamp="20170816 10:12:49.796" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:12:49.466" status="PASS" endtime="20170816 10:12:49.796"></status>
</kw>
<msg timestamp="20170816 10:12:49.796" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:12:49.466" status="PASS" endtime="20170816 10:12:49.796"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:12:49.797" status="PASS" endtime="20170816 10:12:49.797"></status>
</kw>
<status starttime="20170816 10:12:49.466" status="PASS" endtime="20170816 10:12:49.797"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:12:49.801" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:12:49.801" status="PASS" endtime="20170816 10:12:49.802"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:12:49.802" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:12:49.802" status="PASS" endtime="20170816 10:12:49.802"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:12:49.803" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:12:49.802" status="PASS" endtime="20170816 10:12:49.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:12:49.803" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:12:49.803" status="PASS" endtime="20170816 10:12:49.803"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:12:49.993" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:12:49.804" status="PASS" endtime="20170816 10:12:49.993"></status>
</kw>
<msg timestamp="20170816 10:12:49.993" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:12:49.993" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:49.804" status="PASS" endtime="20170816 10:12:49.993"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:12:49.994" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:49.994" status="PASS" endtime="20170816 10:12:49.994"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:49.995" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:49.994" status="PASS" endtime="20170816 10:12:49.995"></status>
</kw>
<status starttime="20170816 10:12:49.800" status="PASS" endtime="20170816 10:12:49.995"></status>
</kw>
<status starttime="20170816 10:12:49.800" status="PASS" endtime="20170816 10:12:49.995"></status>
</kw>
<status starttime="20170816 10:12:49.799" status="PASS" endtime="20170816 10:12:49.995"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:12:49.996" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:12:49.995" status="PASS" endtime="20170816 10:12:49.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:49.998" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:49.997" status="PASS" endtime="20170816 10:12:49.998"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:49.999" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:12:49.998" status="PASS" endtime="20170816 10:12:49.999"></status>
</kw>
<status starttime="20170816 10:12:49.998" status="PASS" endtime="20170816 10:12:49.999"></status>
</kw>
<status starttime="20170816 10:12:49.996" status="PASS" endtime="20170816 10:12:49.999"></status>
</kw>
<status starttime="20170816 10:12:49.996" status="PASS" endtime="20170816 10:12:49.999"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:12:50.107" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:12:50.107" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:49.999" status="PASS" endtime="20170816 10:12:50.108"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:12:50.109" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:50.109" status="PASS" endtime="20170816 10:12:50.109"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:12:50.110" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:12:50.110" status="PASS" endtime="20170816 10:12:50.110"></status>
</kw>
<status starttime="20170816 10:12:50.110" status="PASS" endtime="20170816 10:12:50.111"></status>
</kw>
<status starttime="20170816 10:12:50.108" status="PASS" endtime="20170816 10:12:50.111"></status>
</kw>
<status starttime="20170816 10:12:50.108" status="PASS" endtime="20170816 10:12:50.111"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:12:50.111" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:12:50.111" status="PASS" endtime="20170816 10:12:50.111"></status>
</kw>
<msg timestamp="20170816 10:12:50.111" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:12:49.798" status="PASS" endtime="20170816 10:12:50.111"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:12:50.112" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:12:50.112" status="PASS" endtime="20170816 10:12:50.112"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:12:50.113" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:12:50.113" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:12:50.113" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:12:50.113" status="PASS" endtime="20170816 10:12:50.113"></status>
</kw>
<msg timestamp="20170816 10:12:50.113" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:12:49.798" status="PASS" endtime="20170816 10:12:50.113"></status>
</kw>
<msg timestamp="20170816 10:12:50.114" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:12:49.797" status="PASS" endtime="20170816 10:12:50.114"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:12:50.114" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:12:50.114" status="FAIL" endtime="20170816 10:12:50.114"></status>
</kw>
<status starttime="20170816 10:12:49.465" status="FAIL" endtime="20170816 10:12:50.115"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:13:00.120" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:13:00.120" status="PASS" endtime="20170816 10:13:00.121"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:13:00.121" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:13:00.121" status="PASS" endtime="20170816 10:13:00.121"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:13:00.122" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:13:00.122" status="PASS" endtime="20170816 10:13:00.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:13:00.123" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:13:00.122" status="PASS" endtime="20170816 10:13:00.123"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:13:00.410" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:13:00.123" status="PASS" endtime="20170816 10:13:00.410"></status>
</kw>
<msg timestamp="20170816 10:13:00.410" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:13:00.410" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:00.123" status="PASS" endtime="20170816 10:13:00.410"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:13:00.411" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:00.410" status="PASS" endtime="20170816 10:13:00.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:00.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:00.411" status="PASS" endtime="20170816 10:13:00.412"></status>
</kw>
<status starttime="20170816 10:13:00.119" status="PASS" endtime="20170816 10:13:00.412"></status>
</kw>
<status starttime="20170816 10:13:00.118" status="PASS" endtime="20170816 10:13:00.412"></status>
</kw>
<status starttime="20170816 10:13:00.118" status="PASS" endtime="20170816 10:13:00.412"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:13:00.412" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:13:00.412" status="PASS" endtime="20170816 10:13:00.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:00.415" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:00.414" status="PASS" endtime="20170816 10:13:00.415"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:00.416" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:00.416" status="PASS" endtime="20170816 10:13:00.416"></status>
</kw>
<status starttime="20170816 10:13:00.415" status="PASS" endtime="20170816 10:13:00.416"></status>
</kw>
<status starttime="20170816 10:13:00.413" status="PASS" endtime="20170816 10:13:00.416"></status>
</kw>
<status starttime="20170816 10:13:00.413" status="PASS" endtime="20170816 10:13:00.417"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:13:00.479" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:13:00.480" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:00.417" status="PASS" endtime="20170816 10:13:00.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:00.481" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:00.481" status="PASS" endtime="20170816 10:13:00.481"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:00.483" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:00.482" status="PASS" endtime="20170816 10:13:00.483"></status>
</kw>
<status starttime="20170816 10:13:00.482" status="PASS" endtime="20170816 10:13:00.483"></status>
</kw>
<status starttime="20170816 10:13:00.480" status="PASS" endtime="20170816 10:13:00.483"></status>
</kw>
<status starttime="20170816 10:13:00.480" status="PASS" endtime="20170816 10:13:00.483"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:13:00.483" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:13:00.483" status="PASS" endtime="20170816 10:13:00.484"></status>
</kw>
<msg timestamp="20170816 10:13:00.484" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:00.117" status="PASS" endtime="20170816 10:13:00.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:00.484" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:00.484" status="PASS" endtime="20170816 10:13:00.485"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:13:00.485" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:13:00.485" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:13:00.485" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:13:00.485" status="PASS" endtime="20170816 10:13:00.485"></status>
</kw>
<msg timestamp="20170816 10:13:00.485" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:13:00.117" status="PASS" endtime="20170816 10:13:00.486"></status>
</kw>
<msg timestamp="20170816 10:13:00.486" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:13:00.116" status="PASS" endtime="20170816 10:13:00.486"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:13:00.486" status="PASS" endtime="20170816 10:13:00.486"></status>
</kw>
<status starttime="20170816 10:13:00.116" status="PASS" endtime="20170816 10:13:00.487"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:13:00.490" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:13:00.490" status="PASS" endtime="20170816 10:13:00.491"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:13:00.491" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:13:00.491" status="PASS" endtime="20170816 10:13:00.491"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:13:00.492" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:13:00.491" status="PASS" endtime="20170816 10:13:00.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:13:00.492" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:13:00.492" status="PASS" endtime="20170816 10:13:00.492"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:13:00.683" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:13:00.493" status="PASS" endtime="20170816 10:13:00.683"></status>
</kw>
<msg timestamp="20170816 10:13:00.683" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:13:00.683" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:00.493" status="PASS" endtime="20170816 10:13:00.683"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:13:00.684" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:00.684" status="PASS" endtime="20170816 10:13:00.684"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:00.685" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:00.684" status="PASS" endtime="20170816 10:13:00.685"></status>
</kw>
<status starttime="20170816 10:13:00.489" status="PASS" endtime="20170816 10:13:00.685"></status>
</kw>
<status starttime="20170816 10:13:00.489" status="PASS" endtime="20170816 10:13:00.685"></status>
</kw>
<status starttime="20170816 10:13:00.488" status="PASS" endtime="20170816 10:13:00.685"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:13:00.686" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:13:00.685" status="PASS" endtime="20170816 10:13:00.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:00.688" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:00.687" status="PASS" endtime="20170816 10:13:00.688"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:00.689" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:00.689" status="PASS" endtime="20170816 10:13:00.689"></status>
</kw>
<status starttime="20170816 10:13:00.689" status="PASS" endtime="20170816 10:13:00.690"></status>
</kw>
<status starttime="20170816 10:13:00.687" status="PASS" endtime="20170816 10:13:00.690"></status>
</kw>
<status starttime="20170816 10:13:00.686" status="PASS" endtime="20170816 10:13:00.690"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:13:00.801" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:13:00.801" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:00.690" status="PASS" endtime="20170816 10:13:00.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:00.803" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:00.802" status="PASS" endtime="20170816 10:13:00.803"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:00.804" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:00.804" status="PASS" endtime="20170816 10:13:00.804"></status>
</kw>
<status starttime="20170816 10:13:00.803" status="PASS" endtime="20170816 10:13:00.804"></status>
</kw>
<status starttime="20170816 10:13:00.802" status="PASS" endtime="20170816 10:13:00.804"></status>
</kw>
<status starttime="20170816 10:13:00.801" status="PASS" endtime="20170816 10:13:00.804"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:13:00.805" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:13:00.805" status="PASS" endtime="20170816 10:13:00.805"></status>
</kw>
<msg timestamp="20170816 10:13:00.805" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:00.488" status="PASS" endtime="20170816 10:13:00.805"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:00.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:00.805" status="PASS" endtime="20170816 10:13:00.806"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:13:00.806" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:13:00.806" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:13:00.806" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:13:00.806" status="PASS" endtime="20170816 10:13:00.806"></status>
</kw>
<msg timestamp="20170816 10:13:00.807" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:13:00.487" status="PASS" endtime="20170816 10:13:00.807"></status>
</kw>
<msg timestamp="20170816 10:13:00.807" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:13:00.487" status="PASS" endtime="20170816 10:13:00.807"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:13:00.808" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:13:00.807" status="FAIL" endtime="20170816 10:13:00.808"></status>
</kw>
<status starttime="20170816 10:13:00.115" status="FAIL" endtime="20170816 10:13:00.808"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:13:10.813" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:13:10.813" status="PASS" endtime="20170816 10:13:10.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:13:10.814" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:13:10.814" status="PASS" endtime="20170816 10:13:10.814"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:13:10.815" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:13:10.815" status="PASS" endtime="20170816 10:13:10.815"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:13:10.816" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:13:10.815" status="PASS" endtime="20170816 10:13:10.816"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:13:11.022" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:13:10.817" status="PASS" endtime="20170816 10:13:11.022"></status>
</kw>
<msg timestamp="20170816 10:13:11.022" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:13:11.022" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:10.816" status="PASS" endtime="20170816 10:13:11.022"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:13:11.023" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:11.023" status="PASS" endtime="20170816 10:13:11.023"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:11.024" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:11.023" status="PASS" endtime="20170816 10:13:11.024"></status>
</kw>
<status starttime="20170816 10:13:10.812" status="PASS" endtime="20170816 10:13:11.024"></status>
</kw>
<status starttime="20170816 10:13:10.812" status="PASS" endtime="20170816 10:13:11.024"></status>
</kw>
<status starttime="20170816 10:13:10.811" status="PASS" endtime="20170816 10:13:11.024"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:13:11.025" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:13:11.024" status="PASS" endtime="20170816 10:13:11.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:11.027" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:11.026" status="PASS" endtime="20170816 10:13:11.027"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:11.028" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:11.028" status="PASS" endtime="20170816 10:13:11.028"></status>
</kw>
<status starttime="20170816 10:13:11.027" status="PASS" endtime="20170816 10:13:11.028"></status>
</kw>
<status starttime="20170816 10:13:11.026" status="PASS" endtime="20170816 10:13:11.028"></status>
</kw>
<status starttime="20170816 10:13:11.025" status="PASS" endtime="20170816 10:13:11.028"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:13:11.090" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:13:11.090" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:11.029" status="PASS" endtime="20170816 10:13:11.090"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:11.092" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:11.092" status="PASS" endtime="20170816 10:13:11.092"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:11.093" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:11.093" status="PASS" endtime="20170816 10:13:11.093"></status>
</kw>
<status starttime="20170816 10:13:11.093" status="PASS" endtime="20170816 10:13:11.094"></status>
</kw>
<status starttime="20170816 10:13:11.091" status="PASS" endtime="20170816 10:13:11.094"></status>
</kw>
<status starttime="20170816 10:13:11.091" status="PASS" endtime="20170816 10:13:11.094"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:13:11.094" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:13:11.094" status="PASS" endtime="20170816 10:13:11.094"></status>
</kw>
<msg timestamp="20170816 10:13:11.094" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:10.811" status="PASS" endtime="20170816 10:13:11.094"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:11.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:11.095" status="PASS" endtime="20170816 10:13:11.095"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:13:11.096" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:13:11.096" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:13:11.096" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:13:11.095" status="PASS" endtime="20170816 10:13:11.096"></status>
</kw>
<msg timestamp="20170816 10:13:11.096" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:13:10.810" status="PASS" endtime="20170816 10:13:11.096"></status>
</kw>
<msg timestamp="20170816 10:13:11.096" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:13:10.810" status="PASS" endtime="20170816 10:13:11.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:13:11.097" status="PASS" endtime="20170816 10:13:11.097"></status>
</kw>
<status starttime="20170816 10:13:10.809" status="PASS" endtime="20170816 10:13:11.097"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:13:11.104" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:13:11.104" status="PASS" endtime="20170816 10:13:11.105"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:13:11.105" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:13:11.105" status="PASS" endtime="20170816 10:13:11.105"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:13:11.106" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:13:11.105" status="PASS" endtime="20170816 10:13:11.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:13:11.106" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:13:11.106" status="PASS" endtime="20170816 10:13:11.106"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:13:11.318" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:13:11.107" status="PASS" endtime="20170816 10:13:11.319"></status>
</kw>
<msg timestamp="20170816 10:13:11.319" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:13:11.319" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:11.107" status="PASS" endtime="20170816 10:13:11.319"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:13:11.319" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:11.319" status="PASS" endtime="20170816 10:13:11.320"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:11.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:11.320" status="PASS" endtime="20170816 10:13:11.320"></status>
</kw>
<status starttime="20170816 10:13:11.103" status="PASS" endtime="20170816 10:13:11.320"></status>
</kw>
<status starttime="20170816 10:13:11.099" status="PASS" endtime="20170816 10:13:11.320"></status>
</kw>
<status starttime="20170816 10:13:11.099" status="PASS" endtime="20170816 10:13:11.321"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:13:11.321" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:13:11.321" status="PASS" endtime="20170816 10:13:11.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:11.323" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:11.323" status="PASS" endtime="20170816 10:13:11.323"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:11.324" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:11.324" status="PASS" endtime="20170816 10:13:11.324"></status>
</kw>
<status starttime="20170816 10:13:11.323" status="PASS" endtime="20170816 10:13:11.324"></status>
</kw>
<status starttime="20170816 10:13:11.322" status="PASS" endtime="20170816 10:13:11.325"></status>
</kw>
<status starttime="20170816 10:13:11.321" status="PASS" endtime="20170816 10:13:11.325"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:13:11.450" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:13:11.450" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:11.325" status="PASS" endtime="20170816 10:13:11.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:11.452" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:11.451" status="PASS" endtime="20170816 10:13:11.452"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:11.453" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:11.453" status="PASS" endtime="20170816 10:13:11.453"></status>
</kw>
<status starttime="20170816 10:13:11.452" status="PASS" endtime="20170816 10:13:11.453"></status>
</kw>
<status starttime="20170816 10:13:11.451" status="PASS" endtime="20170816 10:13:11.453"></status>
</kw>
<status starttime="20170816 10:13:11.450" status="PASS" endtime="20170816 10:13:11.454"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:13:11.454" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:13:11.454" status="PASS" endtime="20170816 10:13:11.454"></status>
</kw>
<msg timestamp="20170816 10:13:11.454" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:11.098" status="PASS" endtime="20170816 10:13:11.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:11.455" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:11.454" status="PASS" endtime="20170816 10:13:11.455"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:13:11.455" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:13:11.455" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:13:11.456" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:13:11.455" status="PASS" endtime="20170816 10:13:11.456"></status>
</kw>
<msg timestamp="20170816 10:13:11.456" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:13:11.098" status="PASS" endtime="20170816 10:13:11.456"></status>
</kw>
<msg timestamp="20170816 10:13:11.456" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:13:11.097" status="PASS" endtime="20170816 10:13:11.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:13:11.457" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:13:11.456" status="FAIL" endtime="20170816 10:13:11.457"></status>
</kw>
<status starttime="20170816 10:13:10.809" status="FAIL" endtime="20170816 10:13:11.457"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:13:21.462" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:13:21.462" status="PASS" endtime="20170816 10:13:21.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:13:21.463" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:13:21.463" status="PASS" endtime="20170816 10:13:21.463"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:13:21.464" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:13:21.464" status="PASS" endtime="20170816 10:13:21.464"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:13:21.465" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:13:21.464" status="PASS" endtime="20170816 10:13:21.465"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:13:21.640" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:13:21.465" status="PASS" endtime="20170816 10:13:21.640"></status>
</kw>
<msg timestamp="20170816 10:13:21.640" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:13:21.640" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:21.465" status="PASS" endtime="20170816 10:13:21.640"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:13:21.641" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:21.641" status="PASS" endtime="20170816 10:13:21.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:21.642" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:21.641" status="PASS" endtime="20170816 10:13:21.642"></status>
</kw>
<status starttime="20170816 10:13:21.461" status="PASS" endtime="20170816 10:13:21.642"></status>
</kw>
<status starttime="20170816 10:13:21.461" status="PASS" endtime="20170816 10:13:21.642"></status>
</kw>
<status starttime="20170816 10:13:21.460" status="PASS" endtime="20170816 10:13:21.642"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:13:21.643" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:13:21.642" status="PASS" endtime="20170816 10:13:21.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:21.645" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:21.644" status="PASS" endtime="20170816 10:13:21.645"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:21.646" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:21.645" status="PASS" endtime="20170816 10:13:21.646"></status>
</kw>
<status starttime="20170816 10:13:21.645" status="PASS" endtime="20170816 10:13:21.646"></status>
</kw>
<status starttime="20170816 10:13:21.643" status="PASS" endtime="20170816 10:13:21.646"></status>
</kw>
<status starttime="20170816 10:13:21.643" status="PASS" endtime="20170816 10:13:21.646"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:13:21.715" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:13:21.715" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:21.646" status="PASS" endtime="20170816 10:13:21.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:21.717" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:21.717" status="PASS" endtime="20170816 10:13:21.717"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:21.718" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:21.718" status="PASS" endtime="20170816 10:13:21.718"></status>
</kw>
<status starttime="20170816 10:13:21.717" status="PASS" endtime="20170816 10:13:21.718"></status>
</kw>
<status starttime="20170816 10:13:21.716" status="PASS" endtime="20170816 10:13:21.718"></status>
</kw>
<status starttime="20170816 10:13:21.716" status="PASS" endtime="20170816 10:13:21.718"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:13:21.719" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:13:21.719" status="PASS" endtime="20170816 10:13:21.719"></status>
</kw>
<msg timestamp="20170816 10:13:21.719" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:21.460" status="PASS" endtime="20170816 10:13:21.719"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:21.720" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:21.720" status="PASS" endtime="20170816 10:13:21.720"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:13:21.720" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:13:21.721" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:13:21.721" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:13:21.720" status="PASS" endtime="20170816 10:13:21.721"></status>
</kw>
<msg timestamp="20170816 10:13:21.721" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:13:21.459" status="PASS" endtime="20170816 10:13:21.721"></status>
</kw>
<msg timestamp="20170816 10:13:21.721" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:13:21.459" status="PASS" endtime="20170816 10:13:21.721"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:13:21.722" status="PASS" endtime="20170816 10:13:21.722"></status>
</kw>
<status starttime="20170816 10:13:21.458" status="PASS" endtime="20170816 10:13:21.722"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:13:21.725" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:13:21.725" status="PASS" endtime="20170816 10:13:21.726"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:13:21.727" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:13:21.727" status="PASS" endtime="20170816 10:13:21.727"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:13:21.727" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:13:21.727" status="PASS" endtime="20170816 10:13:21.727"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:13:21.728" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:13:21.728" status="PASS" endtime="20170816 10:13:21.728"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:13:21.909" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:13:21.729" status="PASS" endtime="20170816 10:13:21.910"></status>
</kw>
<msg timestamp="20170816 10:13:21.910" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:13:21.910" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:21.728" status="PASS" endtime="20170816 10:13:21.910"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:13:21.911" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:21.910" status="PASS" endtime="20170816 10:13:21.911"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:21.912" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:21.911" status="PASS" endtime="20170816 10:13:21.912"></status>
</kw>
<status starttime="20170816 10:13:21.725" status="PASS" endtime="20170816 10:13:21.912"></status>
</kw>
<status starttime="20170816 10:13:21.724" status="PASS" endtime="20170816 10:13:21.912"></status>
</kw>
<status starttime="20170816 10:13:21.724" status="PASS" endtime="20170816 10:13:21.912"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:13:21.913" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:13:21.913" status="PASS" endtime="20170816 10:13:21.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:21.916" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:21.915" status="PASS" endtime="20170816 10:13:21.916"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:21.916" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:21.916" status="PASS" endtime="20170816 10:13:21.917"></status>
</kw>
<status starttime="20170816 10:13:21.916" status="PASS" endtime="20170816 10:13:21.917"></status>
</kw>
<status starttime="20170816 10:13:21.914" status="PASS" endtime="20170816 10:13:21.917"></status>
</kw>
<status starttime="20170816 10:13:21.914" status="PASS" endtime="20170816 10:13:21.917"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:13:22.005" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:13:22.005" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:21.917" status="PASS" endtime="20170816 10:13:22.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:22.007" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:22.006" status="PASS" endtime="20170816 10:13:22.007"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:22.008" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:22.007" status="PASS" endtime="20170816 10:13:22.008"></status>
</kw>
<status starttime="20170816 10:13:22.007" status="PASS" endtime="20170816 10:13:22.008"></status>
</kw>
<status starttime="20170816 10:13:22.006" status="PASS" endtime="20170816 10:13:22.008"></status>
</kw>
<status starttime="20170816 10:13:22.005" status="PASS" endtime="20170816 10:13:22.008"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:13:22.008" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:13:22.008" status="PASS" endtime="20170816 10:13:22.009"></status>
</kw>
<msg timestamp="20170816 10:13:22.009" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:21.723" status="PASS" endtime="20170816 10:13:22.009"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:22.009" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:22.009" status="PASS" endtime="20170816 10:13:22.009"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:13:22.010" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:13:22.010" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:13:22.010" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:13:22.010" status="PASS" endtime="20170816 10:13:22.010"></status>
</kw>
<msg timestamp="20170816 10:13:22.010" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:13:21.723" status="PASS" endtime="20170816 10:13:22.010"></status>
</kw>
<msg timestamp="20170816 10:13:22.011" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:13:21.722" status="PASS" endtime="20170816 10:13:22.011"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:13:22.011" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:13:22.011" status="FAIL" endtime="20170816 10:13:22.011"></status>
</kw>
<status starttime="20170816 10:13:21.458" status="FAIL" endtime="20170816 10:13:22.012"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:13:32.018" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:13:32.017" status="PASS" endtime="20170816 10:13:32.018"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:13:32.019" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:13:32.018" status="PASS" endtime="20170816 10:13:32.019"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:13:32.019" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:13:32.019" status="PASS" endtime="20170816 10:13:32.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:13:32.020" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:13:32.020" status="PASS" endtime="20170816 10:13:32.020"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:13:32.277" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:13:32.021" status="PASS" endtime="20170816 10:13:32.277"></status>
</kw>
<msg timestamp="20170816 10:13:32.278" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:13:32.278" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:32.020" status="PASS" endtime="20170816 10:13:32.278"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:13:32.278" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:32.278" status="PASS" endtime="20170816 10:13:32.278"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:32.279" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:32.279" status="PASS" endtime="20170816 10:13:32.279"></status>
</kw>
<status starttime="20170816 10:13:32.017" status="PASS" endtime="20170816 10:13:32.279"></status>
</kw>
<status starttime="20170816 10:13:32.016" status="PASS" endtime="20170816 10:13:32.279"></status>
</kw>
<status starttime="20170816 10:13:32.015" status="PASS" endtime="20170816 10:13:32.279"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:13:32.280" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:13:32.280" status="PASS" endtime="20170816 10:13:32.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:32.282" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:32.282" status="PASS" endtime="20170816 10:13:32.282"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:32.283" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:32.283" status="PASS" endtime="20170816 10:13:32.284"></status>
</kw>
<status starttime="20170816 10:13:32.282" status="PASS" endtime="20170816 10:13:32.284"></status>
</kw>
<status starttime="20170816 10:13:32.281" status="PASS" endtime="20170816 10:13:32.284"></status>
</kw>
<status starttime="20170816 10:13:32.280" status="PASS" endtime="20170816 10:13:32.284"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:13:32.346" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:13:32.346" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:32.284" status="PASS" endtime="20170816 10:13:32.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:32.348" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:32.347" status="PASS" endtime="20170816 10:13:32.348"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:32.349" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:32.349" status="PASS" endtime="20170816 10:13:32.349"></status>
</kw>
<status starttime="20170816 10:13:32.348" status="PASS" endtime="20170816 10:13:32.349"></status>
</kw>
<status starttime="20170816 10:13:32.347" status="PASS" endtime="20170816 10:13:32.349"></status>
</kw>
<status starttime="20170816 10:13:32.346" status="PASS" endtime="20170816 10:13:32.349"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:13:32.350" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:13:32.350" status="PASS" endtime="20170816 10:13:32.350"></status>
</kw>
<msg timestamp="20170816 10:13:32.350" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:32.015" status="PASS" endtime="20170816 10:13:32.350"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:32.351" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:32.350" status="PASS" endtime="20170816 10:13:32.351"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:13:32.351" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:13:32.351" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:13:32.351" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:13:32.351" status="PASS" endtime="20170816 10:13:32.351"></status>
</kw>
<msg timestamp="20170816 10:13:32.352" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:13:32.014" status="PASS" endtime="20170816 10:13:32.352"></status>
</kw>
<msg timestamp="20170816 10:13:32.352" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:13:32.013" status="PASS" endtime="20170816 10:13:32.352"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:13:32.353" status="PASS" endtime="20170816 10:13:32.353"></status>
</kw>
<status starttime="20170816 10:13:32.013" status="PASS" endtime="20170816 10:13:32.353"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:13:32.357" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:13:32.356" status="PASS" endtime="20170816 10:13:32.357"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:13:32.357" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:13:32.357" status="PASS" endtime="20170816 10:13:32.358"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:13:32.358" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:13:32.358" status="PASS" endtime="20170816 10:13:32.358"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:13:32.359" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:13:32.358" status="PASS" endtime="20170816 10:13:32.359"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:13:32.544" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:13:32.360" status="PASS" endtime="20170816 10:13:32.544"></status>
</kw>
<msg timestamp="20170816 10:13:32.544" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:13:32.544" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:32.359" status="PASS" endtime="20170816 10:13:32.544"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:13:32.545" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:32.545" status="PASS" endtime="20170816 10:13:32.545"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:32.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:32.545" status="PASS" endtime="20170816 10:13:32.546"></status>
</kw>
<status starttime="20170816 10:13:32.356" status="PASS" endtime="20170816 10:13:32.546"></status>
</kw>
<status starttime="20170816 10:13:32.355" status="PASS" endtime="20170816 10:13:32.546"></status>
</kw>
<status starttime="20170816 10:13:32.355" status="PASS" endtime="20170816 10:13:32.546"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:13:32.547" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:13:32.547" status="PASS" endtime="20170816 10:13:32.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:32.549" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:32.548" status="PASS" endtime="20170816 10:13:32.549"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:32.550" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:32.550" status="PASS" endtime="20170816 10:13:32.550"></status>
</kw>
<status starttime="20170816 10:13:32.549" status="PASS" endtime="20170816 10:13:32.550"></status>
</kw>
<status starttime="20170816 10:13:32.548" status="PASS" endtime="20170816 10:13:32.550"></status>
</kw>
<status starttime="20170816 10:13:32.547" status="PASS" endtime="20170816 10:13:32.550"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:13:32.640" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:13:32.640" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:32.551" status="PASS" endtime="20170816 10:13:32.640"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:32.642" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:32.642" status="PASS" endtime="20170816 10:13:32.642"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:32.643" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:32.643" status="PASS" endtime="20170816 10:13:32.643"></status>
</kw>
<status starttime="20170816 10:13:32.642" status="PASS" endtime="20170816 10:13:32.643"></status>
</kw>
<status starttime="20170816 10:13:32.641" status="PASS" endtime="20170816 10:13:32.643"></status>
</kw>
<status starttime="20170816 10:13:32.641" status="PASS" endtime="20170816 10:13:32.644"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:13:32.644" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:13:32.644" status="PASS" endtime="20170816 10:13:32.644"></status>
</kw>
<msg timestamp="20170816 10:13:32.644" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:32.354" status="PASS" endtime="20170816 10:13:32.644"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:32.645" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:32.645" status="PASS" endtime="20170816 10:13:32.645"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:13:32.645" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:13:32.645" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:13:32.646" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:13:32.645" status="PASS" endtime="20170816 10:13:32.646"></status>
</kw>
<msg timestamp="20170816 10:13:32.646" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:13:32.353" status="PASS" endtime="20170816 10:13:32.646"></status>
</kw>
<msg timestamp="20170816 10:13:32.646" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:13:32.353" status="PASS" endtime="20170816 10:13:32.646"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:13:32.647" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:13:32.647" status="FAIL" endtime="20170816 10:13:32.647"></status>
</kw>
<status starttime="20170816 10:13:32.012" status="FAIL" endtime="20170816 10:13:32.647"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:13:42.653" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:13:42.653" status="PASS" endtime="20170816 10:13:42.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:13:42.654" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:13:42.654" status="PASS" endtime="20170816 10:13:42.654"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:13:42.655" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:13:42.654" status="PASS" endtime="20170816 10:13:42.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:13:42.655" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:13:42.655" status="PASS" endtime="20170816 10:13:42.655"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:13:42.839" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:13:42.656" status="PASS" endtime="20170816 10:13:42.839"></status>
</kw>
<msg timestamp="20170816 10:13:42.840" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:13:42.840" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:42.656" status="PASS" endtime="20170816 10:13:42.840"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:13:42.840" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:42.840" status="PASS" endtime="20170816 10:13:42.840"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:42.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:42.841" status="PASS" endtime="20170816 10:13:42.841"></status>
</kw>
<status starttime="20170816 10:13:42.651" status="PASS" endtime="20170816 10:13:42.841"></status>
</kw>
<status starttime="20170816 10:13:42.651" status="PASS" endtime="20170816 10:13:42.841"></status>
</kw>
<status starttime="20170816 10:13:42.650" status="PASS" endtime="20170816 10:13:42.841"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:13:42.842" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:13:42.842" status="PASS" endtime="20170816 10:13:42.842"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:42.844" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:42.843" status="PASS" endtime="20170816 10:13:42.844"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:42.845" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:42.845" status="PASS" endtime="20170816 10:13:42.845"></status>
</kw>
<status starttime="20170816 10:13:42.844" status="PASS" endtime="20170816 10:13:42.845"></status>
</kw>
<status starttime="20170816 10:13:42.843" status="PASS" endtime="20170816 10:13:42.845"></status>
</kw>
<status starttime="20170816 10:13:42.842" status="PASS" endtime="20170816 10:13:42.845"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:13:42.923" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:13:42.923" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:42.846" status="PASS" endtime="20170816 10:13:42.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:42.925" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:42.924" status="PASS" endtime="20170816 10:13:42.925"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:42.926" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:42.926" status="PASS" endtime="20170816 10:13:42.926"></status>
</kw>
<status starttime="20170816 10:13:42.925" status="PASS" endtime="20170816 10:13:42.926"></status>
</kw>
<status starttime="20170816 10:13:42.924" status="PASS" endtime="20170816 10:13:42.926"></status>
</kw>
<status starttime="20170816 10:13:42.923" status="PASS" endtime="20170816 10:13:42.926"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:13:42.927" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:13:42.927" status="PASS" endtime="20170816 10:13:42.927"></status>
</kw>
<msg timestamp="20170816 10:13:42.927" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:42.650" status="PASS" endtime="20170816 10:13:42.927"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:42.928" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:42.927" status="PASS" endtime="20170816 10:13:42.928"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:13:42.928" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:13:42.929" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:13:42.929" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:13:42.928" status="PASS" endtime="20170816 10:13:42.929"></status>
</kw>
<msg timestamp="20170816 10:13:42.929" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:13:42.649" status="PASS" endtime="20170816 10:13:42.929"></status>
</kw>
<msg timestamp="20170816 10:13:42.929" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:13:42.649" status="PASS" endtime="20170816 10:13:42.929"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:13:42.930" status="PASS" endtime="20170816 10:13:42.930"></status>
</kw>
<status starttime="20170816 10:13:42.648" status="PASS" endtime="20170816 10:13:42.930"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:13:42.935" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:13:42.934" status="PASS" endtime="20170816 10:13:42.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:13:42.936" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:13:42.936" status="PASS" endtime="20170816 10:13:42.936"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:13:42.937" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:13:42.937" status="PASS" endtime="20170816 10:13:42.937"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:13:42.938" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:13:42.937" status="PASS" endtime="20170816 10:13:42.938"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:13:43.221" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:13:42.939" status="PASS" endtime="20170816 10:13:43.221"></status>
</kw>
<msg timestamp="20170816 10:13:43.221" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:13:43.221" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:42.939" status="PASS" endtime="20170816 10:13:43.222"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:13:43.222" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:43.222" status="PASS" endtime="20170816 10:13:43.222"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:43.223" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:43.222" status="PASS" endtime="20170816 10:13:43.223"></status>
</kw>
<status starttime="20170816 10:13:42.934" status="PASS" endtime="20170816 10:13:43.223"></status>
</kw>
<status starttime="20170816 10:13:42.933" status="PASS" endtime="20170816 10:13:43.223"></status>
</kw>
<status starttime="20170816 10:13:42.932" status="PASS" endtime="20170816 10:13:43.223"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:13:43.224" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:13:43.223" status="PASS" endtime="20170816 10:13:43.224"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:43.226" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:43.225" status="PASS" endtime="20170816 10:13:43.226"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:43.227" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:43.227" status="PASS" endtime="20170816 10:13:43.227"></status>
</kw>
<status starttime="20170816 10:13:43.226" status="PASS" endtime="20170816 10:13:43.227"></status>
</kw>
<status starttime="20170816 10:13:43.225" status="PASS" endtime="20170816 10:13:43.228"></status>
</kw>
<status starttime="20170816 10:13:43.224" status="PASS" endtime="20170816 10:13:43.228"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:13:43.345" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:13:43.345" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:43.228" status="PASS" endtime="20170816 10:13:43.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:43.347" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:43.347" status="PASS" endtime="20170816 10:13:43.347"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:43.348" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:43.348" status="PASS" endtime="20170816 10:13:43.348"></status>
</kw>
<status starttime="20170816 10:13:43.347" status="PASS" endtime="20170816 10:13:43.349"></status>
</kw>
<status starttime="20170816 10:13:43.346" status="PASS" endtime="20170816 10:13:43.349"></status>
</kw>
<status starttime="20170816 10:13:43.346" status="PASS" endtime="20170816 10:13:43.349"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:13:43.349" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:13:43.349" status="PASS" endtime="20170816 10:13:43.349"></status>
</kw>
<msg timestamp="20170816 10:13:43.349" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:42.931" status="PASS" endtime="20170816 10:13:43.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:43.350" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:43.350" status="PASS" endtime="20170816 10:13:43.350"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:13:43.351" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:13:43.351" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:13:43.351" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:13:43.350" status="PASS" endtime="20170816 10:13:43.351"></status>
</kw>
<msg timestamp="20170816 10:13:43.351" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:13:42.930" status="PASS" endtime="20170816 10:13:43.351"></status>
</kw>
<msg timestamp="20170816 10:13:43.351" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:13:42.930" status="PASS" endtime="20170816 10:13:43.352"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:13:43.352" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:13:43.352" status="FAIL" endtime="20170816 10:13:43.352"></status>
</kw>
<status starttime="20170816 10:13:42.648" status="FAIL" endtime="20170816 10:13:43.352"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:13:53.360" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:13:53.359" status="PASS" endtime="20170816 10:13:53.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:13:53.361" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:13:53.361" status="PASS" endtime="20170816 10:13:53.361"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:13:53.362" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:13:53.361" status="PASS" endtime="20170816 10:13:53.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:13:53.363" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:13:53.362" status="PASS" endtime="20170816 10:13:53.363"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:13:53.576" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:13:53.364" status="PASS" endtime="20170816 10:13:53.576"></status>
</kw>
<msg timestamp="20170816 10:13:53.576" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:13:53.576" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:53.364" status="PASS" endtime="20170816 10:13:53.576"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:13:53.577" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:53.576" status="PASS" endtime="20170816 10:13:53.577"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:53.577" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:53.577" status="PASS" endtime="20170816 10:13:53.578"></status>
</kw>
<status starttime="20170816 10:13:53.358" status="PASS" endtime="20170816 10:13:53.578"></status>
</kw>
<status starttime="20170816 10:13:53.358" status="PASS" endtime="20170816 10:13:53.578"></status>
</kw>
<status starttime="20170816 10:13:53.357" status="PASS" endtime="20170816 10:13:53.578"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:13:53.579" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:13:53.578" status="PASS" endtime="20170816 10:13:53.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:53.581" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:53.580" status="PASS" endtime="20170816 10:13:53.581"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:53.582" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:53.581" status="PASS" endtime="20170816 10:13:53.582"></status>
</kw>
<status starttime="20170816 10:13:53.581" status="PASS" endtime="20170816 10:13:53.582"></status>
</kw>
<status starttime="20170816 10:13:53.579" status="PASS" endtime="20170816 10:13:53.582"></status>
</kw>
<status starttime="20170816 10:13:53.579" status="PASS" endtime="20170816 10:13:53.582"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:13:53.656" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:13:53.656" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:53.582" status="PASS" endtime="20170816 10:13:53.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:53.658" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:53.657" status="PASS" endtime="20170816 10:13:53.658"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:53.659" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:53.659" status="PASS" endtime="20170816 10:13:53.659"></status>
</kw>
<status starttime="20170816 10:13:53.658" status="PASS" endtime="20170816 10:13:53.659"></status>
</kw>
<status starttime="20170816 10:13:53.657" status="PASS" endtime="20170816 10:13:53.659"></status>
</kw>
<status starttime="20170816 10:13:53.657" status="PASS" endtime="20170816 10:13:53.659"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:13:53.660" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:13:53.660" status="PASS" endtime="20170816 10:13:53.660"></status>
</kw>
<msg timestamp="20170816 10:13:53.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:53.356" status="PASS" endtime="20170816 10:13:53.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:53.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:53.660" status="PASS" endtime="20170816 10:13:53.661"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:13:53.661" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:13:53.661" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:13:53.661" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:13:53.661" status="PASS" endtime="20170816 10:13:53.661"></status>
</kw>
<msg timestamp="20170816 10:13:53.662" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:13:53.355" status="PASS" endtime="20170816 10:13:53.662"></status>
</kw>
<msg timestamp="20170816 10:13:53.662" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:13:53.354" status="PASS" endtime="20170816 10:13:53.662"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:13:53.662" status="PASS" endtime="20170816 10:13:53.663"></status>
</kw>
<status starttime="20170816 10:13:53.354" status="PASS" endtime="20170816 10:13:53.663"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:13:53.667" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:13:53.667" status="PASS" endtime="20170816 10:13:53.668"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:13:53.668" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:13:53.668" status="PASS" endtime="20170816 10:13:53.669"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:13:53.669" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:13:53.669" status="PASS" endtime="20170816 10:13:53.669"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:13:53.670" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:13:53.670" status="PASS" endtime="20170816 10:13:53.670"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:13:53.907" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:13:53.671" status="PASS" endtime="20170816 10:13:53.907"></status>
</kw>
<msg timestamp="20170816 10:13:53.907" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:13:53.908" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:53.671" status="PASS" endtime="20170816 10:13:53.908"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:13:53.908" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:53.908" status="PASS" endtime="20170816 10:13:53.908"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:53.909" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:53.909" status="PASS" endtime="20170816 10:13:53.909"></status>
</kw>
<status starttime="20170816 10:13:53.666" status="PASS" endtime="20170816 10:13:53.909"></status>
</kw>
<status starttime="20170816 10:13:53.665" status="PASS" endtime="20170816 10:13:53.909"></status>
</kw>
<status starttime="20170816 10:13:53.664" status="PASS" endtime="20170816 10:13:53.909"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:13:53.910" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:13:53.910" status="PASS" endtime="20170816 10:13:53.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:53.912" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:53.911" status="PASS" endtime="20170816 10:13:53.912"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:53.913" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:13:53.913" status="PASS" endtime="20170816 10:13:53.913"></status>
</kw>
<status starttime="20170816 10:13:53.912" status="PASS" endtime="20170816 10:13:53.913"></status>
</kw>
<status starttime="20170816 10:13:53.911" status="PASS" endtime="20170816 10:13:53.913"></status>
</kw>
<status starttime="20170816 10:13:53.910" status="PASS" endtime="20170816 10:13:53.913"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:13:54.033" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:13:54.033" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:53.914" status="PASS" endtime="20170816 10:13:54.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:13:54.038" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:54.034" status="PASS" endtime="20170816 10:13:54.038"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:13:54.039" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:13:54.039" status="PASS" endtime="20170816 10:13:54.039"></status>
</kw>
<status starttime="20170816 10:13:54.038" status="PASS" endtime="20170816 10:13:54.039"></status>
</kw>
<status starttime="20170816 10:13:54.034" status="PASS" endtime="20170816 10:13:54.039"></status>
</kw>
<status starttime="20170816 10:13:54.033" status="PASS" endtime="20170816 10:13:54.039"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:13:54.040" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:13:54.039" status="PASS" endtime="20170816 10:13:54.040"></status>
</kw>
<msg timestamp="20170816 10:13:54.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:13:53.664" status="PASS" endtime="20170816 10:13:54.040"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:13:54.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:13:54.040" status="PASS" endtime="20170816 10:13:54.041"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:13:54.041" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:13:54.041" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:13:54.041" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:13:54.041" status="PASS" endtime="20170816 10:13:54.041"></status>
</kw>
<msg timestamp="20170816 10:13:54.042" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:13:53.663" status="PASS" endtime="20170816 10:13:54.042"></status>
</kw>
<msg timestamp="20170816 10:13:54.042" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:13:53.663" status="PASS" endtime="20170816 10:13:54.042"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:13:54.043" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:13:54.042" status="FAIL" endtime="20170816 10:13:54.043"></status>
</kw>
<status starttime="20170816 10:13:53.353" status="FAIL" endtime="20170816 10:13:54.043"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:14:04.048" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:14:04.048" status="PASS" endtime="20170816 10:14:04.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:14:04.049" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:14:04.049" status="PASS" endtime="20170816 10:14:04.049"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:14:04.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:14:04.050" status="PASS" endtime="20170816 10:14:04.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:14:04.051" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:14:04.050" status="PASS" endtime="20170816 10:14:04.051"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:14:04.230" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:14:04.051" status="PASS" endtime="20170816 10:14:04.230"></status>
</kw>
<msg timestamp="20170816 10:14:04.231" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:14:04.231" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:04.051" status="PASS" endtime="20170816 10:14:04.231"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:14:04.231" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:04.231" status="PASS" endtime="20170816 10:14:04.231"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:04.232" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:04.232" status="PASS" endtime="20170816 10:14:04.232"></status>
</kw>
<status starttime="20170816 10:14:04.047" status="PASS" endtime="20170816 10:14:04.232"></status>
</kw>
<status starttime="20170816 10:14:04.047" status="PASS" endtime="20170816 10:14:04.232"></status>
</kw>
<status starttime="20170816 10:14:04.046" status="PASS" endtime="20170816 10:14:04.232"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:14:04.233" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:14:04.233" status="PASS" endtime="20170816 10:14:04.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:04.235" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:04.234" status="PASS" endtime="20170816 10:14:04.235"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:04.236" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:04.236" status="PASS" endtime="20170816 10:14:04.236"></status>
</kw>
<status starttime="20170816 10:14:04.235" status="PASS" endtime="20170816 10:14:04.236"></status>
</kw>
<status starttime="20170816 10:14:04.234" status="PASS" endtime="20170816 10:14:04.236"></status>
</kw>
<status starttime="20170816 10:14:04.233" status="PASS" endtime="20170816 10:14:04.237"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:14:04.299" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:14:04.299" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:04.237" status="PASS" endtime="20170816 10:14:04.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:04.301" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:04.300" status="PASS" endtime="20170816 10:14:04.301"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:04.302" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:04.301" status="PASS" endtime="20170816 10:14:04.302"></status>
</kw>
<status starttime="20170816 10:14:04.301" status="PASS" endtime="20170816 10:14:04.302"></status>
</kw>
<status starttime="20170816 10:14:04.300" status="PASS" endtime="20170816 10:14:04.302"></status>
</kw>
<status starttime="20170816 10:14:04.299" status="PASS" endtime="20170816 10:14:04.302"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:14:04.302" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:14:04.302" status="PASS" endtime="20170816 10:14:04.303"></status>
</kw>
<msg timestamp="20170816 10:14:04.303" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:04.046" status="PASS" endtime="20170816 10:14:04.303"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:04.303" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:04.303" status="PASS" endtime="20170816 10:14:04.303"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:14:04.304" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:14:04.304" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:14:04.304" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:14:04.304" status="PASS" endtime="20170816 10:14:04.304"></status>
</kw>
<msg timestamp="20170816 10:14:04.305" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:14:04.045" status="PASS" endtime="20170816 10:14:04.305"></status>
</kw>
<msg timestamp="20170816 10:14:04.305" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:14:04.045" status="PASS" endtime="20170816 10:14:04.305"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:14:04.305" status="PASS" endtime="20170816 10:14:04.306"></status>
</kw>
<status starttime="20170816 10:14:04.044" status="PASS" endtime="20170816 10:14:04.306"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:14:04.311" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:14:04.311" status="PASS" endtime="20170816 10:14:04.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:14:04.313" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:14:04.313" status="PASS" endtime="20170816 10:14:04.313"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:14:04.314" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:14:04.314" status="PASS" endtime="20170816 10:14:04.314"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:14:04.315" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:14:04.314" status="PASS" endtime="20170816 10:14:04.315"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:14:04.521" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:14:04.316" status="PASS" endtime="20170816 10:14:04.521"></status>
</kw>
<msg timestamp="20170816 10:14:04.521" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:14:04.521" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:04.315" status="PASS" endtime="20170816 10:14:04.521"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:14:04.522" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:04.522" status="PASS" endtime="20170816 10:14:04.522"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:04.523" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:04.522" status="PASS" endtime="20170816 10:14:04.523"></status>
</kw>
<status starttime="20170816 10:14:04.310" status="PASS" endtime="20170816 10:14:04.523"></status>
</kw>
<status starttime="20170816 10:14:04.309" status="PASS" endtime="20170816 10:14:04.523"></status>
</kw>
<status starttime="20170816 10:14:04.308" status="PASS" endtime="20170816 10:14:04.523"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:14:04.524" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:14:04.523" status="PASS" endtime="20170816 10:14:04.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:04.526" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:04.525" status="PASS" endtime="20170816 10:14:04.526"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:04.527" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:04.526" status="PASS" endtime="20170816 10:14:04.527"></status>
</kw>
<status starttime="20170816 10:14:04.526" status="PASS" endtime="20170816 10:14:04.527"></status>
</kw>
<status starttime="20170816 10:14:04.524" status="PASS" endtime="20170816 10:14:04.527"></status>
</kw>
<status starttime="20170816 10:14:04.524" status="PASS" endtime="20170816 10:14:04.527"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:14:04.664" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:14:04.664" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:04.527" status="PASS" endtime="20170816 10:14:04.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:04.666" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:04.665" status="PASS" endtime="20170816 10:14:04.666"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:04.667" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:04.667" status="PASS" endtime="20170816 10:14:04.667"></status>
</kw>
<status starttime="20170816 10:14:04.666" status="PASS" endtime="20170816 10:14:04.667"></status>
</kw>
<status starttime="20170816 10:14:04.665" status="PASS" endtime="20170816 10:14:04.667"></status>
</kw>
<status starttime="20170816 10:14:04.664" status="PASS" endtime="20170816 10:14:04.667"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:14:04.668" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:14:04.668" status="PASS" endtime="20170816 10:14:04.668"></status>
</kw>
<msg timestamp="20170816 10:14:04.668" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:04.308" status="PASS" endtime="20170816 10:14:04.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:04.669" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:04.668" status="PASS" endtime="20170816 10:14:04.669"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:14:04.669" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:14:04.669" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:14:04.669" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:14:04.669" status="PASS" endtime="20170816 10:14:04.670"></status>
</kw>
<msg timestamp="20170816 10:14:04.670" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:14:04.307" status="PASS" endtime="20170816 10:14:04.670"></status>
</kw>
<msg timestamp="20170816 10:14:04.670" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:14:04.306" status="PASS" endtime="20170816 10:14:04.670"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:14:04.671" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:14:04.670" status="FAIL" endtime="20170816 10:14:04.671"></status>
</kw>
<status starttime="20170816 10:14:04.044" status="FAIL" endtime="20170816 10:14:04.671"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:14:14.677" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:14:14.676" status="PASS" endtime="20170816 10:14:14.677"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:14:14.678" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:14:14.677" status="PASS" endtime="20170816 10:14:14.678"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:14:14.678" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:14:14.678" status="PASS" endtime="20170816 10:14:14.678"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:14:14.679" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:14:14.679" status="PASS" endtime="20170816 10:14:14.679"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:14:14.884" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:14:14.680" status="PASS" endtime="20170816 10:14:14.884"></status>
</kw>
<msg timestamp="20170816 10:14:14.885" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:14:14.885" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:14.679" status="PASS" endtime="20170816 10:14:14.885"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:14:14.885" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:14.885" status="PASS" endtime="20170816 10:14:14.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:14.886" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:14.886" status="PASS" endtime="20170816 10:14:14.886"></status>
</kw>
<status starttime="20170816 10:14:14.676" status="PASS" endtime="20170816 10:14:14.886"></status>
</kw>
<status starttime="20170816 10:14:14.675" status="PASS" endtime="20170816 10:14:14.886"></status>
</kw>
<status starttime="20170816 10:14:14.675" status="PASS" endtime="20170816 10:14:14.886"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:14:14.887" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:14:14.887" status="PASS" endtime="20170816 10:14:14.887"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:14.889" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:14.889" status="PASS" endtime="20170816 10:14:14.889"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:14.890" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:14.890" status="PASS" endtime="20170816 10:14:14.891"></status>
</kw>
<status starttime="20170816 10:14:14.889" status="PASS" endtime="20170816 10:14:14.891"></status>
</kw>
<status starttime="20170816 10:14:14.888" status="PASS" endtime="20170816 10:14:14.891"></status>
</kw>
<status starttime="20170816 10:14:14.887" status="PASS" endtime="20170816 10:14:14.891"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:14:14.953" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:14:14.953" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:14.891" status="PASS" endtime="20170816 10:14:14.953"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:14.955" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:14.955" status="PASS" endtime="20170816 10:14:14.955"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:14.956" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:14.956" status="PASS" endtime="20170816 10:14:14.956"></status>
</kw>
<status starttime="20170816 10:14:14.955" status="PASS" endtime="20170816 10:14:14.956"></status>
</kw>
<status starttime="20170816 10:14:14.954" status="PASS" endtime="20170816 10:14:14.956"></status>
</kw>
<status starttime="20170816 10:14:14.954" status="PASS" endtime="20170816 10:14:14.957"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:14:14.957" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:14:14.957" status="PASS" endtime="20170816 10:14:14.957"></status>
</kw>
<msg timestamp="20170816 10:14:14.957" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:14.674" status="PASS" endtime="20170816 10:14:14.957"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:14.958" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:14.958" status="PASS" endtime="20170816 10:14:14.958"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:14:14.958" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:14:14.959" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:14:14.959" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:14:14.958" status="PASS" endtime="20170816 10:14:14.959"></status>
</kw>
<msg timestamp="20170816 10:14:14.959" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:14:14.673" status="PASS" endtime="20170816 10:14:14.959"></status>
</kw>
<msg timestamp="20170816 10:14:14.959" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:14:14.673" status="PASS" endtime="20170816 10:14:14.959"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:14:14.960" status="PASS" endtime="20170816 10:14:14.960"></status>
</kw>
<status starttime="20170816 10:14:14.672" status="PASS" endtime="20170816 10:14:14.960"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:14:14.964" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:14:14.963" status="PASS" endtime="20170816 10:14:14.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:14:14.964" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:14:14.964" status="PASS" endtime="20170816 10:14:14.965"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:14:14.965" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:14:14.965" status="PASS" endtime="20170816 10:14:14.965"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:14:14.966" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:14:14.965" status="PASS" endtime="20170816 10:14:14.966"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:14:15.153" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:14:14.966" status="PASS" endtime="20170816 10:14:15.153"></status>
</kw>
<msg timestamp="20170816 10:14:15.153" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:14:15.153" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:14.966" status="PASS" endtime="20170816 10:14:15.153"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:14:15.154" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:15.154" status="PASS" endtime="20170816 10:14:15.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:15.155" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:15.154" status="PASS" endtime="20170816 10:14:15.155"></status>
</kw>
<status starttime="20170816 10:14:14.963" status="PASS" endtime="20170816 10:14:15.155"></status>
</kw>
<status starttime="20170816 10:14:14.962" status="PASS" endtime="20170816 10:14:15.155"></status>
</kw>
<status starttime="20170816 10:14:14.962" status="PASS" endtime="20170816 10:14:15.155"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:14:15.155" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:14:15.155" status="PASS" endtime="20170816 10:14:15.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:15.158" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:15.157" status="PASS" endtime="20170816 10:14:15.158"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:15.159" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:15.158" status="PASS" endtime="20170816 10:14:15.159"></status>
</kw>
<status starttime="20170816 10:14:15.158" status="PASS" endtime="20170816 10:14:15.159"></status>
</kw>
<status starttime="20170816 10:14:15.156" status="PASS" endtime="20170816 10:14:15.159"></status>
</kw>
<status starttime="20170816 10:14:15.156" status="PASS" endtime="20170816 10:14:15.159"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:14:15.258" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:14:15.259" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:15.159" status="PASS" endtime="20170816 10:14:15.259"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:15.260" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:15.260" status="PASS" endtime="20170816 10:14:15.261"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:15.261" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:15.261" status="PASS" endtime="20170816 10:14:15.262"></status>
</kw>
<status starttime="20170816 10:14:15.261" status="PASS" endtime="20170816 10:14:15.262"></status>
</kw>
<status starttime="20170816 10:14:15.259" status="PASS" endtime="20170816 10:14:15.262"></status>
</kw>
<status starttime="20170816 10:14:15.259" status="PASS" endtime="20170816 10:14:15.262"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:14:15.262" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:14:15.262" status="PASS" endtime="20170816 10:14:15.262"></status>
</kw>
<msg timestamp="20170816 10:14:15.263" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:14.961" status="PASS" endtime="20170816 10:14:15.263"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:15.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:15.263" status="PASS" endtime="20170816 10:14:15.263"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:14:15.264" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:14:15.264" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:14:15.264" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:14:15.263" status="PASS" endtime="20170816 10:14:15.264"></status>
</kw>
<msg timestamp="20170816 10:14:15.264" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:14:14.961" status="PASS" endtime="20170816 10:14:15.264"></status>
</kw>
<msg timestamp="20170816 10:14:15.265" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:14:14.960" status="PASS" endtime="20170816 10:14:15.265"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:14:15.265" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:14:15.265" status="FAIL" endtime="20170816 10:14:15.265"></status>
</kw>
<status starttime="20170816 10:14:14.672" status="FAIL" endtime="20170816 10:14:15.265"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:14:25.271" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:14:25.271" status="PASS" endtime="20170816 10:14:25.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:14:25.272" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:14:25.272" status="PASS" endtime="20170816 10:14:25.272"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:14:25.272" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:14:25.272" status="PASS" endtime="20170816 10:14:25.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:14:25.273" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:14:25.273" status="PASS" endtime="20170816 10:14:25.273"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:14:25.451" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:14:25.274" status="PASS" endtime="20170816 10:14:25.451"></status>
</kw>
<msg timestamp="20170816 10:14:25.451" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:14:25.452" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:25.273" status="PASS" endtime="20170816 10:14:25.452"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:14:25.452" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:25.452" status="PASS" endtime="20170816 10:14:25.452"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:25.453" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:25.453" status="PASS" endtime="20170816 10:14:25.453"></status>
</kw>
<status starttime="20170816 10:14:25.270" status="PASS" endtime="20170816 10:14:25.453"></status>
</kw>
<status starttime="20170816 10:14:25.269" status="PASS" endtime="20170816 10:14:25.453"></status>
</kw>
<status starttime="20170816 10:14:25.268" status="PASS" endtime="20170816 10:14:25.453"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:14:25.454" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:14:25.454" status="PASS" endtime="20170816 10:14:25.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:25.456" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:25.455" status="PASS" endtime="20170816 10:14:25.456"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:25.457" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:25.457" status="PASS" endtime="20170816 10:14:25.457"></status>
</kw>
<status starttime="20170816 10:14:25.456" status="PASS" endtime="20170816 10:14:25.457"></status>
</kw>
<status starttime="20170816 10:14:25.455" status="PASS" endtime="20170816 10:14:25.457"></status>
</kw>
<status starttime="20170816 10:14:25.454" status="PASS" endtime="20170816 10:14:25.457"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:14:25.519" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:14:25.520" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:25.458" status="PASS" endtime="20170816 10:14:25.520"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:25.521" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:25.521" status="PASS" endtime="20170816 10:14:25.521"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:25.523" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:25.522" status="PASS" endtime="20170816 10:14:25.523"></status>
</kw>
<status starttime="20170816 10:14:25.521" status="PASS" endtime="20170816 10:14:25.523"></status>
</kw>
<status starttime="20170816 10:14:25.520" status="PASS" endtime="20170816 10:14:25.523"></status>
</kw>
<status starttime="20170816 10:14:25.520" status="PASS" endtime="20170816 10:14:25.523"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:14:25.523" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:14:25.523" status="PASS" endtime="20170816 10:14:25.523"></status>
</kw>
<msg timestamp="20170816 10:14:25.524" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:25.268" status="PASS" endtime="20170816 10:14:25.524"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:25.524" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:25.524" status="PASS" endtime="20170816 10:14:25.524"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:14:25.525" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:14:25.525" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:14:25.525" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:14:25.525" status="PASS" endtime="20170816 10:14:25.525"></status>
</kw>
<msg timestamp="20170816 10:14:25.525" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:14:25.267" status="PASS" endtime="20170816 10:14:25.525"></status>
</kw>
<msg timestamp="20170816 10:14:25.526" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:14:25.267" status="PASS" endtime="20170816 10:14:25.526"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:14:25.526" status="PASS" endtime="20170816 10:14:25.526"></status>
</kw>
<status starttime="20170816 10:14:25.266" status="PASS" endtime="20170816 10:14:25.526"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:14:25.530" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:14:25.530" status="PASS" endtime="20170816 10:14:25.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:14:25.531" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:14:25.531" status="PASS" endtime="20170816 10:14:25.531"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:14:25.531" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:14:25.531" status="PASS" endtime="20170816 10:14:25.531"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:14:25.532" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:14:25.532" status="PASS" endtime="20170816 10:14:25.532"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:14:25.811" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:14:25.533" status="PASS" endtime="20170816 10:14:25.811"></status>
</kw>
<msg timestamp="20170816 10:14:25.811" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:14:25.811" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:25.532" status="PASS" endtime="20170816 10:14:25.811"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:14:25.811" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:25.811" status="PASS" endtime="20170816 10:14:25.812"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:25.812" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:25.812" status="PASS" endtime="20170816 10:14:25.812"></status>
</kw>
<status starttime="20170816 10:14:25.529" status="PASS" endtime="20170816 10:14:25.812"></status>
</kw>
<status starttime="20170816 10:14:25.529" status="PASS" endtime="20170816 10:14:25.812"></status>
</kw>
<status starttime="20170816 10:14:25.528" status="PASS" endtime="20170816 10:14:25.813"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:14:25.813" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:14:25.813" status="PASS" endtime="20170816 10:14:25.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:25.817" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:25.815" status="PASS" endtime="20170816 10:14:25.817"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:25.818" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:25.818" status="PASS" endtime="20170816 10:14:25.818"></status>
</kw>
<status starttime="20170816 10:14:25.817" status="PASS" endtime="20170816 10:14:25.818"></status>
</kw>
<status starttime="20170816 10:14:25.814" status="PASS" endtime="20170816 10:14:25.818"></status>
</kw>
<status starttime="20170816 10:14:25.814" status="PASS" endtime="20170816 10:14:25.818"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:14:25.911" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:14:25.911" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:25.819" status="PASS" endtime="20170816 10:14:25.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:25.913" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:25.912" status="PASS" endtime="20170816 10:14:25.913"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:25.914" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:25.913" status="PASS" endtime="20170816 10:14:25.914"></status>
</kw>
<status starttime="20170816 10:14:25.913" status="PASS" endtime="20170816 10:14:25.914"></status>
</kw>
<status starttime="20170816 10:14:25.912" status="PASS" endtime="20170816 10:14:25.914"></status>
</kw>
<status starttime="20170816 10:14:25.911" status="PASS" endtime="20170816 10:14:25.914"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:14:25.914" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:14:25.914" status="PASS" endtime="20170816 10:14:25.914"></status>
</kw>
<msg timestamp="20170816 10:14:25.915" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:25.527" status="PASS" endtime="20170816 10:14:25.915"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:25.915" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:25.915" status="PASS" endtime="20170816 10:14:25.915"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:14:25.916" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:14:25.916" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:14:25.916" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:14:25.915" status="PASS" endtime="20170816 10:14:25.916"></status>
</kw>
<msg timestamp="20170816 10:14:25.916" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:14:25.527" status="PASS" endtime="20170816 10:14:25.916"></status>
</kw>
<msg timestamp="20170816 10:14:25.917" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:14:25.526" status="PASS" endtime="20170816 10:14:25.917"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:14:25.917" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:14:25.917" status="FAIL" endtime="20170816 10:14:25.917"></status>
</kw>
<status starttime="20170816 10:14:25.266" status="FAIL" endtime="20170816 10:14:25.917"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:14:35.922" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:14:35.922" status="PASS" endtime="20170816 10:14:35.923"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:14:35.923" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:14:35.923" status="PASS" endtime="20170816 10:14:35.923"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:14:35.924" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:14:35.924" status="PASS" endtime="20170816 10:14:35.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:14:35.925" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:14:35.924" status="PASS" endtime="20170816 10:14:35.925"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:14:36.202" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:14:35.926" status="PASS" endtime="20170816 10:14:36.202"></status>
</kw>
<msg timestamp="20170816 10:14:36.202" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:14:36.203" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:35.925" status="PASS" endtime="20170816 10:14:36.203"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:14:36.203" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:36.203" status="PASS" endtime="20170816 10:14:36.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:36.204" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:36.204" status="PASS" endtime="20170816 10:14:36.204"></status>
</kw>
<status starttime="20170816 10:14:35.921" status="PASS" endtime="20170816 10:14:36.204"></status>
</kw>
<status starttime="20170816 10:14:35.921" status="PASS" endtime="20170816 10:14:36.204"></status>
</kw>
<status starttime="20170816 10:14:35.920" status="PASS" endtime="20170816 10:14:36.204"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:14:36.205" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:14:36.205" status="PASS" endtime="20170816 10:14:36.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:36.207" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:36.206" status="PASS" endtime="20170816 10:14:36.207"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:36.208" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:36.208" status="PASS" endtime="20170816 10:14:36.208"></status>
</kw>
<status starttime="20170816 10:14:36.207" status="PASS" endtime="20170816 10:14:36.208"></status>
</kw>
<status starttime="20170816 10:14:36.206" status="PASS" endtime="20170816 10:14:36.208"></status>
</kw>
<status starttime="20170816 10:14:36.205" status="PASS" endtime="20170816 10:14:36.208"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:14:36.306" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:14:36.306" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:36.209" status="PASS" endtime="20170816 10:14:36.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:36.308" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:36.307" status="PASS" endtime="20170816 10:14:36.308"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:36.308" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:36.308" status="PASS" endtime="20170816 10:14:36.309"></status>
</kw>
<status starttime="20170816 10:14:36.308" status="PASS" endtime="20170816 10:14:36.309"></status>
</kw>
<status starttime="20170816 10:14:36.307" status="PASS" endtime="20170816 10:14:36.309"></status>
</kw>
<status starttime="20170816 10:14:36.306" status="PASS" endtime="20170816 10:14:36.309"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:14:36.309" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:14:36.309" status="PASS" endtime="20170816 10:14:36.309"></status>
</kw>
<msg timestamp="20170816 10:14:36.310" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:35.920" status="PASS" endtime="20170816 10:14:36.310"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:36.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:36.310" status="PASS" endtime="20170816 10:14:36.310"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:14:36.311" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:14:36.311" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:14:36.311" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:14:36.311" status="PASS" endtime="20170816 10:14:36.311"></status>
</kw>
<msg timestamp="20170816 10:14:36.311" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:14:35.919" status="PASS" endtime="20170816 10:14:36.311"></status>
</kw>
<msg timestamp="20170816 10:14:36.312" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:14:35.919" status="PASS" endtime="20170816 10:14:36.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:14:36.312" status="PASS" endtime="20170816 10:14:36.312"></status>
</kw>
<status starttime="20170816 10:14:35.918" status="PASS" endtime="20170816 10:14:36.312"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:14:36.316" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:14:36.316" status="PASS" endtime="20170816 10:14:36.317"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:14:36.317" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:14:36.317" status="PASS" endtime="20170816 10:14:36.317"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:14:36.318" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:14:36.318" status="PASS" endtime="20170816 10:14:36.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:14:36.319" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:14:36.318" status="PASS" endtime="20170816 10:14:36.319"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:14:36.534" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:14:36.319" status="PASS" endtime="20170816 10:14:36.534"></status>
</kw>
<msg timestamp="20170816 10:14:36.535" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:14:36.535" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:36.319" status="PASS" endtime="20170816 10:14:36.535"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:14:36.535" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:36.535" status="PASS" endtime="20170816 10:14:36.535"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:36.536" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:36.536" status="PASS" endtime="20170816 10:14:36.536"></status>
</kw>
<status starttime="20170816 10:14:36.315" status="PASS" endtime="20170816 10:14:36.536"></status>
</kw>
<status starttime="20170816 10:14:36.315" status="PASS" endtime="20170816 10:14:36.536"></status>
</kw>
<status starttime="20170816 10:14:36.314" status="PASS" endtime="20170816 10:14:36.536"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:14:36.537" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:14:36.537" status="PASS" endtime="20170816 10:14:36.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:36.539" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:36.538" status="PASS" endtime="20170816 10:14:36.539"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:36.540" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:36.540" status="PASS" endtime="20170816 10:14:36.540"></status>
</kw>
<status starttime="20170816 10:14:36.539" status="PASS" endtime="20170816 10:14:36.540"></status>
</kw>
<status starttime="20170816 10:14:36.538" status="PASS" endtime="20170816 10:14:36.540"></status>
</kw>
<status starttime="20170816 10:14:36.537" status="PASS" endtime="20170816 10:14:36.541"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:14:36.641" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:14:36.641" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:36.541" status="PASS" endtime="20170816 10:14:36.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:36.643" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:36.642" status="PASS" endtime="20170816 10:14:36.643"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:36.644" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:36.644" status="PASS" endtime="20170816 10:14:36.644"></status>
</kw>
<status starttime="20170816 10:14:36.643" status="PASS" endtime="20170816 10:14:36.644"></status>
</kw>
<status starttime="20170816 10:14:36.642" status="PASS" endtime="20170816 10:14:36.644"></status>
</kw>
<status starttime="20170816 10:14:36.641" status="PASS" endtime="20170816 10:14:36.644"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:14:36.645" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:14:36.645" status="PASS" endtime="20170816 10:14:36.645"></status>
</kw>
<msg timestamp="20170816 10:14:36.645" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:36.313" status="PASS" endtime="20170816 10:14:36.645"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:36.646" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:36.646" status="PASS" endtime="20170816 10:14:36.646"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:14:36.647" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:14:36.647" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:14:36.647" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:14:36.646" status="PASS" endtime="20170816 10:14:36.647"></status>
</kw>
<msg timestamp="20170816 10:14:36.647" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:14:36.313" status="PASS" endtime="20170816 10:14:36.647"></status>
</kw>
<msg timestamp="20170816 10:14:36.647" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:14:36.313" status="PASS" endtime="20170816 10:14:36.647"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:14:36.648" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:14:36.648" status="FAIL" endtime="20170816 10:14:36.648"></status>
</kw>
<status starttime="20170816 10:14:35.918" status="FAIL" endtime="20170816 10:14:36.648"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:14:46.653" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:14:46.653" status="PASS" endtime="20170816 10:14:46.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:14:46.654" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:14:46.654" status="PASS" endtime="20170816 10:14:46.654"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:14:46.655" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:14:46.654" status="PASS" endtime="20170816 10:14:46.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:14:46.655" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:14:46.655" status="PASS" endtime="20170816 10:14:46.655"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:14:46.862" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:14:46.656" status="PASS" endtime="20170816 10:14:46.862"></status>
</kw>
<msg timestamp="20170816 10:14:46.862" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:14:46.862" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:46.656" status="PASS" endtime="20170816 10:14:46.862"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:14:46.863" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:46.862" status="PASS" endtime="20170816 10:14:46.863"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:46.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:46.863" status="PASS" endtime="20170816 10:14:46.863"></status>
</kw>
<status starttime="20170816 10:14:46.652" status="PASS" endtime="20170816 10:14:46.863"></status>
</kw>
<status starttime="20170816 10:14:46.652" status="PASS" endtime="20170816 10:14:46.864"></status>
</kw>
<status starttime="20170816 10:14:46.651" status="PASS" endtime="20170816 10:14:46.864"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:14:46.864" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:14:46.864" status="PASS" endtime="20170816 10:14:46.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:46.866" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:46.866" status="PASS" endtime="20170816 10:14:46.866"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:46.867" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:46.867" status="PASS" endtime="20170816 10:14:46.867"></status>
</kw>
<status starttime="20170816 10:14:46.866" status="PASS" endtime="20170816 10:14:46.867"></status>
</kw>
<status starttime="20170816 10:14:46.865" status="PASS" endtime="20170816 10:14:46.867"></status>
</kw>
<status starttime="20170816 10:14:46.864" status="PASS" endtime="20170816 10:14:46.867"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:14:46.989" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:14:46.989" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:46.868" status="PASS" endtime="20170816 10:14:46.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:46.991" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:46.990" status="PASS" endtime="20170816 10:14:46.991"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:46.992" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:46.992" status="PASS" endtime="20170816 10:14:46.992"></status>
</kw>
<status starttime="20170816 10:14:46.991" status="PASS" endtime="20170816 10:14:46.992"></status>
</kw>
<status starttime="20170816 10:14:46.990" status="PASS" endtime="20170816 10:14:46.992"></status>
</kw>
<status starttime="20170816 10:14:46.990" status="PASS" endtime="20170816 10:14:46.992"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:14:46.993" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:14:46.993" status="PASS" endtime="20170816 10:14:46.993"></status>
</kw>
<msg timestamp="20170816 10:14:46.993" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:46.650" status="PASS" endtime="20170816 10:14:46.993"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:46.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:46.993" status="PASS" endtime="20170816 10:14:46.994"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:14:46.994" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:14:46.994" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:14:46.994" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:14:46.994" status="PASS" endtime="20170816 10:14:46.994"></status>
</kw>
<msg timestamp="20170816 10:14:46.995" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:14:46.650" status="PASS" endtime="20170816 10:14:46.995"></status>
</kw>
<msg timestamp="20170816 10:14:46.995" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:14:46.649" status="PASS" endtime="20170816 10:14:46.995"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:14:46.995" status="PASS" endtime="20170816 10:14:46.995"></status>
</kw>
<status starttime="20170816 10:14:46.649" status="PASS" endtime="20170816 10:14:46.996"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:14:46.999" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:14:46.999" status="PASS" endtime="20170816 10:14:47.000"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:14:47.000" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:14:47.000" status="PASS" endtime="20170816 10:14:47.000"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:14:47.001" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:14:47.001" status="PASS" endtime="20170816 10:14:47.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:14:47.002" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:14:47.001" status="PASS" endtime="20170816 10:14:47.002"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:14:47.188" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:14:47.002" status="PASS" endtime="20170816 10:14:47.189"></status>
</kw>
<msg timestamp="20170816 10:14:47.189" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:14:47.189" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:47.002" status="PASS" endtime="20170816 10:14:47.189"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:14:47.189" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:47.189" status="PASS" endtime="20170816 10:14:47.189"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:47.190" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:47.190" status="PASS" endtime="20170816 10:14:47.190"></status>
</kw>
<status starttime="20170816 10:14:46.998" status="PASS" endtime="20170816 10:14:47.190"></status>
</kw>
<status starttime="20170816 10:14:46.998" status="PASS" endtime="20170816 10:14:47.190"></status>
</kw>
<status starttime="20170816 10:14:46.997" status="PASS" endtime="20170816 10:14:47.190"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:14:47.191" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:14:47.191" status="PASS" endtime="20170816 10:14:47.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:47.193" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:47.192" status="PASS" endtime="20170816 10:14:47.193"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:47.194" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:47.194" status="PASS" endtime="20170816 10:14:47.194"></status>
</kw>
<status starttime="20170816 10:14:47.194" status="PASS" endtime="20170816 10:14:47.194"></status>
</kw>
<status starttime="20170816 10:14:47.192" status="PASS" endtime="20170816 10:14:47.195"></status>
</kw>
<status starttime="20170816 10:14:47.191" status="PASS" endtime="20170816 10:14:47.195"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:14:47.282" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:14:47.282" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:47.195" status="PASS" endtime="20170816 10:14:47.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:47.284" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:47.283" status="PASS" endtime="20170816 10:14:47.284"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:47.285" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:47.285" status="PASS" endtime="20170816 10:14:47.285"></status>
</kw>
<status starttime="20170816 10:14:47.284" status="PASS" endtime="20170816 10:14:47.285"></status>
</kw>
<status starttime="20170816 10:14:47.283" status="PASS" endtime="20170816 10:14:47.285"></status>
</kw>
<status starttime="20170816 10:14:47.283" status="PASS" endtime="20170816 10:14:47.285"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:14:47.286" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:14:47.285" status="PASS" endtime="20170816 10:14:47.286"></status>
</kw>
<msg timestamp="20170816 10:14:47.286" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:46.997" status="PASS" endtime="20170816 10:14:47.286"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:47.287" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:47.286" status="PASS" endtime="20170816 10:14:47.287"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:14:47.287" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:14:47.287" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:14:47.287" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:14:47.287" status="PASS" endtime="20170816 10:14:47.287"></status>
</kw>
<msg timestamp="20170816 10:14:47.288" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:14:46.996" status="PASS" endtime="20170816 10:14:47.288"></status>
</kw>
<msg timestamp="20170816 10:14:47.288" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:14:46.996" status="PASS" endtime="20170816 10:14:47.288"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:14:47.289" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:14:47.288" status="FAIL" endtime="20170816 10:14:47.289"></status>
</kw>
<status starttime="20170816 10:14:46.649" status="FAIL" endtime="20170816 10:14:47.289"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:14:57.294" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:14:57.294" status="PASS" endtime="20170816 10:14:57.294"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:14:57.295" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:14:57.295" status="PASS" endtime="20170816 10:14:57.295"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:14:57.295" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:14:57.295" status="PASS" endtime="20170816 10:14:57.296"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:14:57.296" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:14:57.296" status="PASS" endtime="20170816 10:14:57.296"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:14:57.483" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:14:57.297" status="PASS" endtime="20170816 10:14:57.483"></status>
</kw>
<msg timestamp="20170816 10:14:57.483" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:14:57.483" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:57.296" status="PASS" endtime="20170816 10:14:57.483"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:14:57.484" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:57.483" status="PASS" endtime="20170816 10:14:57.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:57.484" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:57.484" status="PASS" endtime="20170816 10:14:57.484"></status>
</kw>
<status starttime="20170816 10:14:57.293" status="PASS" endtime="20170816 10:14:57.485"></status>
</kw>
<status starttime="20170816 10:14:57.293" status="PASS" endtime="20170816 10:14:57.485"></status>
</kw>
<status starttime="20170816 10:14:57.292" status="PASS" endtime="20170816 10:14:57.485"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:14:57.486" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:14:57.485" status="PASS" endtime="20170816 10:14:57.486"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:57.489" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:57.488" status="PASS" endtime="20170816 10:14:57.489"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:57.490" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:57.490" status="PASS" endtime="20170816 10:14:57.491"></status>
</kw>
<status starttime="20170816 10:14:57.489" status="PASS" endtime="20170816 10:14:57.491"></status>
</kw>
<status starttime="20170816 10:14:57.487" status="PASS" endtime="20170816 10:14:57.491"></status>
</kw>
<status starttime="20170816 10:14:57.486" status="PASS" endtime="20170816 10:14:57.491"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:14:57.565" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:14:57.565" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:57.491" status="PASS" endtime="20170816 10:14:57.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:57.567" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:57.567" status="PASS" endtime="20170816 10:14:57.567"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:57.568" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:57.568" status="PASS" endtime="20170816 10:14:57.568"></status>
</kw>
<status starttime="20170816 10:14:57.567" status="PASS" endtime="20170816 10:14:57.568"></status>
</kw>
<status starttime="20170816 10:14:57.566" status="PASS" endtime="20170816 10:14:57.569"></status>
</kw>
<status starttime="20170816 10:14:57.566" status="PASS" endtime="20170816 10:14:57.569"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:14:57.569" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:14:57.569" status="PASS" endtime="20170816 10:14:57.569"></status>
</kw>
<msg timestamp="20170816 10:14:57.569" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:57.291" status="PASS" endtime="20170816 10:14:57.569"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:57.570" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:57.569" status="PASS" endtime="20170816 10:14:57.570"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:14:57.570" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:14:57.571" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:14:57.571" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:14:57.570" status="PASS" endtime="20170816 10:14:57.571"></status>
</kw>
<msg timestamp="20170816 10:14:57.571" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:14:57.290" status="PASS" endtime="20170816 10:14:57.571"></status>
</kw>
<msg timestamp="20170816 10:14:57.571" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:14:57.290" status="PASS" endtime="20170816 10:14:57.571"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:14:57.572" status="PASS" endtime="20170816 10:14:57.572"></status>
</kw>
<status starttime="20170816 10:14:57.290" status="PASS" endtime="20170816 10:14:57.572"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:14:57.575" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:14:57.575" status="PASS" endtime="20170816 10:14:57.576"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:14:57.576" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:14:57.576" status="PASS" endtime="20170816 10:14:57.576"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:14:57.577" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:14:57.577" status="PASS" endtime="20170816 10:14:57.577"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:14:57.577" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:14:57.577" status="PASS" endtime="20170816 10:14:57.578"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:14:57.862" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:14:57.578" status="PASS" endtime="20170816 10:14:57.862"></status>
</kw>
<msg timestamp="20170816 10:14:57.862" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:14:57.862" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:57.578" status="PASS" endtime="20170816 10:14:57.862"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:14:57.862" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:57.862" status="PASS" endtime="20170816 10:14:57.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:57.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:57.863" status="PASS" endtime="20170816 10:14:57.863"></status>
</kw>
<status starttime="20170816 10:14:57.575" status="PASS" endtime="20170816 10:14:57.863"></status>
</kw>
<status starttime="20170816 10:14:57.574" status="PASS" endtime="20170816 10:14:57.863"></status>
</kw>
<status starttime="20170816 10:14:57.574" status="PASS" endtime="20170816 10:14:57.863"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:14:57.864" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:14:57.864" status="PASS" endtime="20170816 10:14:57.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:57.866" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:57.865" status="PASS" endtime="20170816 10:14:57.866"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:57.867" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:14:57.867" status="PASS" endtime="20170816 10:14:57.867"></status>
</kw>
<status starttime="20170816 10:14:57.866" status="PASS" endtime="20170816 10:14:57.867"></status>
</kw>
<status starttime="20170816 10:14:57.865" status="PASS" endtime="20170816 10:14:57.867"></status>
</kw>
<status starttime="20170816 10:14:57.864" status="PASS" endtime="20170816 10:14:57.867"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:14:57.967" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:14:57.967" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:57.868" status="PASS" endtime="20170816 10:14:57.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:14:57.969" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:57.968" status="PASS" endtime="20170816 10:14:57.969"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:14:57.969" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:14:57.969" status="PASS" endtime="20170816 10:14:57.970"></status>
</kw>
<status starttime="20170816 10:14:57.969" status="PASS" endtime="20170816 10:14:57.970"></status>
</kw>
<status starttime="20170816 10:14:57.968" status="PASS" endtime="20170816 10:14:57.970"></status>
</kw>
<status starttime="20170816 10:14:57.967" status="PASS" endtime="20170816 10:14:57.970"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:14:57.970" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:14:57.970" status="PASS" endtime="20170816 10:14:57.970"></status>
</kw>
<msg timestamp="20170816 10:14:57.971" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:14:57.573" status="PASS" endtime="20170816 10:14:57.971"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:14:57.971" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:14:57.971" status="PASS" endtime="20170816 10:14:57.971"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:14:57.972" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:14:57.972" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:14:57.972" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:14:57.972" status="PASS" endtime="20170816 10:14:57.972"></status>
</kw>
<msg timestamp="20170816 10:14:57.972" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:14:57.572" status="PASS" endtime="20170816 10:14:57.972"></status>
</kw>
<msg timestamp="20170816 10:14:57.973" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:14:57.572" status="PASS" endtime="20170816 10:14:57.973"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:14:57.973" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:14:57.973" status="FAIL" endtime="20170816 10:14:57.973"></status>
</kw>
<status starttime="20170816 10:14:57.289" status="FAIL" endtime="20170816 10:14:57.973"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:15:07.979" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:15:07.979" status="PASS" endtime="20170816 10:15:07.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:15:07.980" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:15:07.980" status="PASS" endtime="20170816 10:15:07.980"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:15:07.981" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:15:07.981" status="PASS" endtime="20170816 10:15:07.981"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:15:07.982" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:15:07.981" status="PASS" endtime="20170816 10:15:07.982"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:15:08.161" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:15:07.982" status="PASS" endtime="20170816 10:15:08.161"></status>
</kw>
<msg timestamp="20170816 10:15:08.161" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:15:08.161" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:07.982" status="PASS" endtime="20170816 10:15:08.161"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:15:08.162" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:08.162" status="PASS" endtime="20170816 10:15:08.162"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:08.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:08.162" status="PASS" endtime="20170816 10:15:08.163"></status>
</kw>
<status starttime="20170816 10:15:07.978" status="PASS" endtime="20170816 10:15:08.163"></status>
</kw>
<status starttime="20170816 10:15:07.977" status="PASS" endtime="20170816 10:15:08.163"></status>
</kw>
<status starttime="20170816 10:15:07.977" status="PASS" endtime="20170816 10:15:08.163"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:15:08.164" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:15:08.163" status="PASS" endtime="20170816 10:15:08.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:08.166" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:08.165" status="PASS" endtime="20170816 10:15:08.166"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:08.167" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:08.166" status="PASS" endtime="20170816 10:15:08.167"></status>
</kw>
<status starttime="20170816 10:15:08.166" status="PASS" endtime="20170816 10:15:08.167"></status>
</kw>
<status starttime="20170816 10:15:08.164" status="PASS" endtime="20170816 10:15:08.167"></status>
</kw>
<status starttime="20170816 10:15:08.164" status="PASS" endtime="20170816 10:15:08.167"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:15:08.235" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:15:08.235" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:08.167" status="PASS" endtime="20170816 10:15:08.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:08.237" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:08.237" status="PASS" endtime="20170816 10:15:08.237"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:08.239" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:08.238" status="PASS" endtime="20170816 10:15:08.239"></status>
</kw>
<status starttime="20170816 10:15:08.237" status="PASS" endtime="20170816 10:15:08.239"></status>
</kw>
<status starttime="20170816 10:15:08.236" status="PASS" endtime="20170816 10:15:08.239"></status>
</kw>
<status starttime="20170816 10:15:08.236" status="PASS" endtime="20170816 10:15:08.239"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:15:08.239" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:15:08.239" status="PASS" endtime="20170816 10:15:08.239"></status>
</kw>
<msg timestamp="20170816 10:15:08.240" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:07.976" status="PASS" endtime="20170816 10:15:08.240"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:08.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:08.240" status="PASS" endtime="20170816 10:15:08.240"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:15:08.241" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:15:08.241" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:15:08.241" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:15:08.241" status="PASS" endtime="20170816 10:15:08.241"></status>
</kw>
<msg timestamp="20170816 10:15:08.241" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:15:07.975" status="PASS" endtime="20170816 10:15:08.241"></status>
</kw>
<msg timestamp="20170816 10:15:08.242" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:15:07.975" status="PASS" endtime="20170816 10:15:08.242"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:15:08.242" status="PASS" endtime="20170816 10:15:08.242"></status>
</kw>
<status starttime="20170816 10:15:07.975" status="PASS" endtime="20170816 10:15:08.242"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:15:08.246" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:15:08.246" status="PASS" endtime="20170816 10:15:08.246"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:15:08.247" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:15:08.247" status="PASS" endtime="20170816 10:15:08.247"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:15:08.247" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:15:08.247" status="PASS" endtime="20170816 10:15:08.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:15:08.248" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:15:08.248" status="PASS" endtime="20170816 10:15:08.248"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:15:08.425" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:15:08.249" status="PASS" endtime="20170816 10:15:08.425"></status>
</kw>
<msg timestamp="20170816 10:15:08.425" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:15:08.425" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:08.248" status="PASS" endtime="20170816 10:15:08.426"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:15:08.426" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:08.426" status="PASS" endtime="20170816 10:15:08.426"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:08.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:08.427" status="PASS" endtime="20170816 10:15:08.427"></status>
</kw>
<status starttime="20170816 10:15:08.245" status="PASS" endtime="20170816 10:15:08.427"></status>
</kw>
<status starttime="20170816 10:15:08.245" status="PASS" endtime="20170816 10:15:08.427"></status>
</kw>
<status starttime="20170816 10:15:08.244" status="PASS" endtime="20170816 10:15:08.427"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:15:08.428" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:15:08.428" status="PASS" endtime="20170816 10:15:08.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:08.431" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:08.429" status="PASS" endtime="20170816 10:15:08.431"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:08.431" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:08.431" status="PASS" endtime="20170816 10:15:08.432"></status>
</kw>
<status starttime="20170816 10:15:08.431" status="PASS" endtime="20170816 10:15:08.432"></status>
</kw>
<status starttime="20170816 10:15:08.429" status="PASS" endtime="20170816 10:15:08.432"></status>
</kw>
<status starttime="20170816 10:15:08.428" status="PASS" endtime="20170816 10:15:08.432"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:15:08.520" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:15:08.520" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:08.432" status="PASS" endtime="20170816 10:15:08.520"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:08.522" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:08.521" status="PASS" endtime="20170816 10:15:08.522"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:08.523" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:08.523" status="PASS" endtime="20170816 10:15:08.523"></status>
</kw>
<status starttime="20170816 10:15:08.522" status="PASS" endtime="20170816 10:15:08.523"></status>
</kw>
<status starttime="20170816 10:15:08.521" status="PASS" endtime="20170816 10:15:08.523"></status>
</kw>
<status starttime="20170816 10:15:08.520" status="PASS" endtime="20170816 10:15:08.523"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:15:08.524" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:15:08.523" status="PASS" endtime="20170816 10:15:08.524"></status>
</kw>
<msg timestamp="20170816 10:15:08.524" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:08.243" status="PASS" endtime="20170816 10:15:08.524"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:08.525" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:08.524" status="PASS" endtime="20170816 10:15:08.525"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:15:08.525" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:15:08.525" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:15:08.525" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:15:08.525" status="PASS" endtime="20170816 10:15:08.525"></status>
</kw>
<msg timestamp="20170816 10:15:08.526" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:15:08.243" status="PASS" endtime="20170816 10:15:08.526"></status>
</kw>
<msg timestamp="20170816 10:15:08.526" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:15:08.243" status="PASS" endtime="20170816 10:15:08.526"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:15:08.527" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:15:08.526" status="FAIL" endtime="20170816 10:15:08.527"></status>
</kw>
<status starttime="20170816 10:15:07.974" status="FAIL" endtime="20170816 10:15:08.527"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:15:18.532" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:15:18.532" status="PASS" endtime="20170816 10:15:18.533"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:15:18.533" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:15:18.533" status="PASS" endtime="20170816 10:15:18.533"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:15:18.534" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:15:18.534" status="PASS" endtime="20170816 10:15:18.534"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:15:18.535" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:15:18.534" status="PASS" endtime="20170816 10:15:18.535"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:15:18.740" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:15:18.536" status="PASS" endtime="20170816 10:15:18.740"></status>
</kw>
<msg timestamp="20170816 10:15:18.740" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:15:18.740" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:18.535" status="PASS" endtime="20170816 10:15:18.740"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:15:18.741" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:18.740" status="PASS" endtime="20170816 10:15:18.741"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:18.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:18.741" status="PASS" endtime="20170816 10:15:18.741"></status>
</kw>
<status starttime="20170816 10:15:18.531" status="PASS" endtime="20170816 10:15:18.742"></status>
</kw>
<status starttime="20170816 10:15:18.531" status="PASS" endtime="20170816 10:15:18.742"></status>
</kw>
<status starttime="20170816 10:15:18.530" status="PASS" endtime="20170816 10:15:18.742"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:15:18.742" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:15:18.742" status="PASS" endtime="20170816 10:15:18.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:18.744" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:18.744" status="PASS" endtime="20170816 10:15:18.744"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:18.745" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:18.745" status="PASS" endtime="20170816 10:15:18.745"></status>
</kw>
<status starttime="20170816 10:15:18.745" status="PASS" endtime="20170816 10:15:18.746"></status>
</kw>
<status starttime="20170816 10:15:18.743" status="PASS" endtime="20170816 10:15:18.746"></status>
</kw>
<status starttime="20170816 10:15:18.743" status="PASS" endtime="20170816 10:15:18.746"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:15:18.817" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:15:18.817" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:18.746" status="PASS" endtime="20170816 10:15:18.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:18.819" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:18.818" status="PASS" endtime="20170816 10:15:18.819"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:18.820" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:18.820" status="PASS" endtime="20170816 10:15:18.820"></status>
</kw>
<status starttime="20170816 10:15:18.819" status="PASS" endtime="20170816 10:15:18.821"></status>
</kw>
<status starttime="20170816 10:15:18.818" status="PASS" endtime="20170816 10:15:18.821"></status>
</kw>
<status starttime="20170816 10:15:18.817" status="PASS" endtime="20170816 10:15:18.821"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:15:18.821" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:15:18.821" status="PASS" endtime="20170816 10:15:18.821"></status>
</kw>
<msg timestamp="20170816 10:15:18.821" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:18.530" status="PASS" endtime="20170816 10:15:18.821"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:18.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:18.822" status="PASS" endtime="20170816 10:15:18.822"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:15:18.823" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:15:18.823" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:15:18.823" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:15:18.822" status="PASS" endtime="20170816 10:15:18.823"></status>
</kw>
<msg timestamp="20170816 10:15:18.823" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:15:18.529" status="PASS" endtime="20170816 10:15:18.823"></status>
</kw>
<msg timestamp="20170816 10:15:18.823" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:15:18.529" status="PASS" endtime="20170816 10:15:18.823"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:15:18.824" status="PASS" endtime="20170816 10:15:18.824"></status>
</kw>
<status starttime="20170816 10:15:18.528" status="PASS" endtime="20170816 10:15:18.824"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:15:18.828" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:15:18.828" status="PASS" endtime="20170816 10:15:18.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:15:18.829" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:15:18.829" status="PASS" endtime="20170816 10:15:18.829"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:15:18.830" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:15:18.829" status="PASS" endtime="20170816 10:15:18.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:15:18.830" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:15:18.830" status="PASS" endtime="20170816 10:15:18.830"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:15:19.022" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:15:18.831" status="PASS" endtime="20170816 10:15:19.022"></status>
</kw>
<msg timestamp="20170816 10:15:19.022" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:15:19.022" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:18.831" status="PASS" endtime="20170816 10:15:19.022"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:15:19.023" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:19.023" status="PASS" endtime="20170816 10:15:19.023"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:19.024" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:19.024" status="PASS" endtime="20170816 10:15:19.024"></status>
</kw>
<status starttime="20170816 10:15:18.827" status="PASS" endtime="20170816 10:15:19.024"></status>
</kw>
<status starttime="20170816 10:15:18.826" status="PASS" endtime="20170816 10:15:19.024"></status>
</kw>
<status starttime="20170816 10:15:18.826" status="PASS" endtime="20170816 10:15:19.025"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:15:19.025" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:15:19.025" status="PASS" endtime="20170816 10:15:19.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:19.029" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:19.028" status="PASS" endtime="20170816 10:15:19.029"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:19.030" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:19.030" status="PASS" endtime="20170816 10:15:19.030"></status>
</kw>
<status starttime="20170816 10:15:19.029" status="PASS" endtime="20170816 10:15:19.030"></status>
</kw>
<status starttime="20170816 10:15:19.027" status="PASS" endtime="20170816 10:15:19.030"></status>
</kw>
<status starttime="20170816 10:15:19.026" status="PASS" endtime="20170816 10:15:19.030"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:15:19.129" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:15:19.129" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:19.031" status="PASS" endtime="20170816 10:15:19.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:19.132" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:19.131" status="PASS" endtime="20170816 10:15:19.132"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:19.134" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:19.133" status="PASS" endtime="20170816 10:15:19.134"></status>
</kw>
<status starttime="20170816 10:15:19.132" status="PASS" endtime="20170816 10:15:19.134"></status>
</kw>
<status starttime="20170816 10:15:19.131" status="PASS" endtime="20170816 10:15:19.134"></status>
</kw>
<status starttime="20170816 10:15:19.130" status="PASS" endtime="20170816 10:15:19.134"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:15:19.135" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:15:19.134" status="PASS" endtime="20170816 10:15:19.135"></status>
</kw>
<msg timestamp="20170816 10:15:19.135" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:18.825" status="PASS" endtime="20170816 10:15:19.135"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:19.135" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:19.135" status="PASS" endtime="20170816 10:15:19.136"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:15:19.136" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:15:19.136" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:15:19.136" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:15:19.136" status="PASS" endtime="20170816 10:15:19.136"></status>
</kw>
<msg timestamp="20170816 10:15:19.137" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:15:18.825" status="PASS" endtime="20170816 10:15:19.137"></status>
</kw>
<msg timestamp="20170816 10:15:19.137" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:15:18.824" status="PASS" endtime="20170816 10:15:19.137"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:15:19.138" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:15:19.137" status="FAIL" endtime="20170816 10:15:19.138"></status>
</kw>
<status starttime="20170816 10:15:18.527" status="FAIL" endtime="20170816 10:15:19.138"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:15:29.143" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:15:29.143" status="PASS" endtime="20170816 10:15:29.143"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:15:29.144" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:15:29.144" status="PASS" endtime="20170816 10:15:29.144"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:15:29.145" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:15:29.144" status="PASS" endtime="20170816 10:15:29.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:15:29.145" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:15:29.145" status="PASS" endtime="20170816 10:15:29.145"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:15:29.362" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:15:29.146" status="PASS" endtime="20170816 10:15:29.362"></status>
</kw>
<msg timestamp="20170816 10:15:29.362" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:15:29.362" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:29.146" status="PASS" endtime="20170816 10:15:29.362"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:15:29.363" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:29.363" status="PASS" endtime="20170816 10:15:29.363"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:29.364" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:29.363" status="PASS" endtime="20170816 10:15:29.364"></status>
</kw>
<status starttime="20170816 10:15:29.142" status="PASS" endtime="20170816 10:15:29.364"></status>
</kw>
<status starttime="20170816 10:15:29.142" status="PASS" endtime="20170816 10:15:29.364"></status>
</kw>
<status starttime="20170816 10:15:29.141" status="PASS" endtime="20170816 10:15:29.364"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:15:29.365" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:15:29.364" status="PASS" endtime="20170816 10:15:29.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:29.367" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:29.366" status="PASS" endtime="20170816 10:15:29.367"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:29.368" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:29.367" status="PASS" endtime="20170816 10:15:29.368"></status>
</kw>
<status starttime="20170816 10:15:29.367" status="PASS" endtime="20170816 10:15:29.368"></status>
</kw>
<status starttime="20170816 10:15:29.365" status="PASS" endtime="20170816 10:15:29.368"></status>
</kw>
<status starttime="20170816 10:15:29.365" status="PASS" endtime="20170816 10:15:29.368"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:15:29.432" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:15:29.432" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:29.368" status="PASS" endtime="20170816 10:15:29.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:29.434" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:29.433" status="PASS" endtime="20170816 10:15:29.434"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:29.435" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:29.434" status="PASS" endtime="20170816 10:15:29.435"></status>
</kw>
<status starttime="20170816 10:15:29.434" status="PASS" endtime="20170816 10:15:29.435"></status>
</kw>
<status starttime="20170816 10:15:29.433" status="PASS" endtime="20170816 10:15:29.435"></status>
</kw>
<status starttime="20170816 10:15:29.432" status="PASS" endtime="20170816 10:15:29.435"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:15:29.435" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:15:29.435" status="PASS" endtime="20170816 10:15:29.436"></status>
</kw>
<msg timestamp="20170816 10:15:29.436" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:29.140" status="PASS" endtime="20170816 10:15:29.436"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:29.436" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:29.436" status="PASS" endtime="20170816 10:15:29.436"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:15:29.437" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:15:29.437" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:15:29.437" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:15:29.437" status="PASS" endtime="20170816 10:15:29.437"></status>
</kw>
<msg timestamp="20170816 10:15:29.437" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:15:29.140" status="PASS" endtime="20170816 10:15:29.437"></status>
</kw>
<msg timestamp="20170816 10:15:29.438" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:15:29.139" status="PASS" endtime="20170816 10:15:29.438"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:15:29.438" status="PASS" endtime="20170816 10:15:29.438"></status>
</kw>
<status starttime="20170816 10:15:29.139" status="PASS" endtime="20170816 10:15:29.438"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:15:29.442" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:15:29.442" status="PASS" endtime="20170816 10:15:29.446"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:15:29.446" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:15:29.446" status="PASS" endtime="20170816 10:15:29.446"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:15:29.447" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:15:29.447" status="PASS" endtime="20170816 10:15:29.447"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:15:29.448" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:15:29.448" status="PASS" endtime="20170816 10:15:29.448"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:15:29.660" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:15:29.449" status="PASS" endtime="20170816 10:15:29.660"></status>
</kw>
<msg timestamp="20170816 10:15:29.660" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:15:29.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:29.449" status="PASS" endtime="20170816 10:15:29.660"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:15:29.661" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:29.661" status="PASS" endtime="20170816 10:15:29.661"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:29.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:29.661" status="PASS" endtime="20170816 10:15:29.662"></status>
</kw>
<status starttime="20170816 10:15:29.441" status="PASS" endtime="20170816 10:15:29.662"></status>
</kw>
<status starttime="20170816 10:15:29.441" status="PASS" endtime="20170816 10:15:29.662"></status>
</kw>
<status starttime="20170816 10:15:29.440" status="PASS" endtime="20170816 10:15:29.662"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:15:29.663" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:15:29.662" status="PASS" endtime="20170816 10:15:29.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:29.665" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:29.664" status="PASS" endtime="20170816 10:15:29.665"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:29.666" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:29.666" status="PASS" endtime="20170816 10:15:29.666"></status>
</kw>
<status starttime="20170816 10:15:29.665" status="PASS" endtime="20170816 10:15:29.666"></status>
</kw>
<status starttime="20170816 10:15:29.664" status="PASS" endtime="20170816 10:15:29.666"></status>
</kw>
<status starttime="20170816 10:15:29.663" status="PASS" endtime="20170816 10:15:29.666"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:15:29.754" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:15:29.754" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:29.667" status="PASS" endtime="20170816 10:15:29.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:29.756" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:29.755" status="PASS" endtime="20170816 10:15:29.756"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:29.757" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:29.756" status="PASS" endtime="20170816 10:15:29.757"></status>
</kw>
<status starttime="20170816 10:15:29.756" status="PASS" endtime="20170816 10:15:29.757"></status>
</kw>
<status starttime="20170816 10:15:29.755" status="PASS" endtime="20170816 10:15:29.757"></status>
</kw>
<status starttime="20170816 10:15:29.754" status="PASS" endtime="20170816 10:15:29.757"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:15:29.757" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:15:29.757" status="PASS" endtime="20170816 10:15:29.757"></status>
</kw>
<msg timestamp="20170816 10:15:29.758" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:29.439" status="PASS" endtime="20170816 10:15:29.758"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:29.758" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:29.758" status="PASS" endtime="20170816 10:15:29.758"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:15:29.759" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:15:29.759" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:15:29.759" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:15:29.759" status="PASS" endtime="20170816 10:15:29.759"></status>
</kw>
<msg timestamp="20170816 10:15:29.759" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:15:29.439" status="PASS" endtime="20170816 10:15:29.759"></status>
</kw>
<msg timestamp="20170816 10:15:29.760" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:15:29.439" status="PASS" endtime="20170816 10:15:29.760"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:15:29.761" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:15:29.760" status="FAIL" endtime="20170816 10:15:29.761"></status>
</kw>
<status starttime="20170816 10:15:29.138" status="FAIL" endtime="20170816 10:15:29.761"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:15:39.766" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:15:39.766" status="PASS" endtime="20170816 10:15:39.767"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:15:39.767" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:15:39.767" status="PASS" endtime="20170816 10:15:39.767"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:15:39.768" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:15:39.768" status="PASS" endtime="20170816 10:15:39.768"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:15:39.769" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:15:39.768" status="PASS" endtime="20170816 10:15:39.769"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:15:39.953" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:15:39.769" status="PASS" endtime="20170816 10:15:39.953"></status>
</kw>
<msg timestamp="20170816 10:15:39.953" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:15:39.953" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:39.769" status="PASS" endtime="20170816 10:15:39.953"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:15:39.954" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:39.954" status="PASS" endtime="20170816 10:15:39.954"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:39.955" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:39.954" status="PASS" endtime="20170816 10:15:39.955"></status>
</kw>
<status starttime="20170816 10:15:39.766" status="PASS" endtime="20170816 10:15:39.955"></status>
</kw>
<status starttime="20170816 10:15:39.765" status="PASS" endtime="20170816 10:15:39.955"></status>
</kw>
<status starttime="20170816 10:15:39.764" status="PASS" endtime="20170816 10:15:39.955"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:15:39.956" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:15:39.956" status="PASS" endtime="20170816 10:15:39.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:39.958" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:39.958" status="PASS" endtime="20170816 10:15:39.958"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:39.959" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:39.959" status="PASS" endtime="20170816 10:15:39.960"></status>
</kw>
<status starttime="20170816 10:15:39.958" status="PASS" endtime="20170816 10:15:39.960"></status>
</kw>
<status starttime="20170816 10:15:39.957" status="PASS" endtime="20170816 10:15:39.960"></status>
</kw>
<status starttime="20170816 10:15:39.956" status="PASS" endtime="20170816 10:15:39.960"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:15:40.031" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:15:40.031" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:39.960" status="PASS" endtime="20170816 10:15:40.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:40.033" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:40.033" status="PASS" endtime="20170816 10:15:40.033"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:40.034" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:40.034" status="PASS" endtime="20170816 10:15:40.034"></status>
</kw>
<status starttime="20170816 10:15:40.033" status="PASS" endtime="20170816 10:15:40.034"></status>
</kw>
<status starttime="20170816 10:15:40.032" status="PASS" endtime="20170816 10:15:40.034"></status>
</kw>
<status starttime="20170816 10:15:40.031" status="PASS" endtime="20170816 10:15:40.034"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:15:40.035" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:15:40.035" status="PASS" endtime="20170816 10:15:40.035"></status>
</kw>
<msg timestamp="20170816 10:15:40.035" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:39.764" status="PASS" endtime="20170816 10:15:40.035"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:40.036" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:40.035" status="PASS" endtime="20170816 10:15:40.036"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:15:40.036" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:15:40.036" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:15:40.036" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:15:40.036" status="PASS" endtime="20170816 10:15:40.036"></status>
</kw>
<msg timestamp="20170816 10:15:40.037" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:15:39.763" status="PASS" endtime="20170816 10:15:40.037"></status>
</kw>
<msg timestamp="20170816 10:15:40.037" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:15:39.762" status="PASS" endtime="20170816 10:15:40.037"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:15:40.037" status="PASS" endtime="20170816 10:15:40.038"></status>
</kw>
<status starttime="20170816 10:15:39.762" status="PASS" endtime="20170816 10:15:40.038"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:15:40.041" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:15:40.041" status="PASS" endtime="20170816 10:15:40.042"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:15:40.042" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:15:40.042" status="PASS" endtime="20170816 10:15:40.042"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:15:40.043" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:15:40.042" status="PASS" endtime="20170816 10:15:40.043"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:15:40.043" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:15:40.043" status="PASS" endtime="20170816 10:15:40.044"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:15:40.261" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:15:40.044" status="PASS" endtime="20170816 10:15:40.261"></status>
</kw>
<msg timestamp="20170816 10:15:40.261" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:15:40.261" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:40.044" status="PASS" endtime="20170816 10:15:40.261"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:15:40.262" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:40.261" status="PASS" endtime="20170816 10:15:40.262"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:40.262" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:40.262" status="PASS" endtime="20170816 10:15:40.262"></status>
</kw>
<status starttime="20170816 10:15:40.040" status="PASS" endtime="20170816 10:15:40.262"></status>
</kw>
<status starttime="20170816 10:15:40.040" status="PASS" endtime="20170816 10:15:40.263"></status>
</kw>
<status starttime="20170816 10:15:40.039" status="PASS" endtime="20170816 10:15:40.263"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:15:40.263" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:15:40.263" status="PASS" endtime="20170816 10:15:40.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:40.266" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:40.265" status="PASS" endtime="20170816 10:15:40.266"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:40.267" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:40.267" status="PASS" endtime="20170816 10:15:40.267"></status>
</kw>
<status starttime="20170816 10:15:40.266" status="PASS" endtime="20170816 10:15:40.267"></status>
</kw>
<status starttime="20170816 10:15:40.264" status="PASS" endtime="20170816 10:15:40.267"></status>
</kw>
<status starttime="20170816 10:15:40.263" status="PASS" endtime="20170816 10:15:40.267"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:15:40.424" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:15:40.425" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:40.268" status="PASS" endtime="20170816 10:15:40.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:40.426" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:40.426" status="PASS" endtime="20170816 10:15:40.427"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:40.427" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:40.427" status="PASS" endtime="20170816 10:15:40.428"></status>
</kw>
<status starttime="20170816 10:15:40.427" status="PASS" endtime="20170816 10:15:40.428"></status>
</kw>
<status starttime="20170816 10:15:40.425" status="PASS" endtime="20170816 10:15:40.428"></status>
</kw>
<status starttime="20170816 10:15:40.425" status="PASS" endtime="20170816 10:15:40.428"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:15:40.428" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:15:40.428" status="PASS" endtime="20170816 10:15:40.428"></status>
</kw>
<msg timestamp="20170816 10:15:40.429" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:40.039" status="PASS" endtime="20170816 10:15:40.429"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:40.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:40.429" status="PASS" endtime="20170816 10:15:40.429"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:15:40.430" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:15:40.430" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:15:40.430" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:15:40.429" status="PASS" endtime="20170816 10:15:40.430"></status>
</kw>
<msg timestamp="20170816 10:15:40.430" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:15:40.038" status="PASS" endtime="20170816 10:15:40.430"></status>
</kw>
<msg timestamp="20170816 10:15:40.431" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:15:40.038" status="PASS" endtime="20170816 10:15:40.431"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:15:40.431" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:15:40.431" status="FAIL" endtime="20170816 10:15:40.431"></status>
</kw>
<status starttime="20170816 10:15:39.761" status="FAIL" endtime="20170816 10:15:40.432"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:15:50.439" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:15:50.438" status="PASS" endtime="20170816 10:15:50.440"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:15:50.440" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:15:50.440" status="PASS" endtime="20170816 10:15:50.440"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:15:50.441" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:15:50.441" status="PASS" endtime="20170816 10:15:50.441"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:15:50.442" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:15:50.442" status="PASS" endtime="20170816 10:15:50.442"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:15:50.625" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:15:50.443" status="PASS" endtime="20170816 10:15:50.625"></status>
</kw>
<msg timestamp="20170816 10:15:50.625" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:15:50.625" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:50.443" status="PASS" endtime="20170816 10:15:50.625"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:15:50.626" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:50.625" status="PASS" endtime="20170816 10:15:50.626"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:50.626" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:50.626" status="PASS" endtime="20170816 10:15:50.626"></status>
</kw>
<status starttime="20170816 10:15:50.437" status="PASS" endtime="20170816 10:15:50.627"></status>
</kw>
<status starttime="20170816 10:15:50.436" status="PASS" endtime="20170816 10:15:50.627"></status>
</kw>
<status starttime="20170816 10:15:50.435" status="PASS" endtime="20170816 10:15:50.627"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:15:50.627" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:15:50.627" status="PASS" endtime="20170816 10:15:50.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:50.630" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:50.629" status="PASS" endtime="20170816 10:15:50.630"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:50.630" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:50.630" status="PASS" endtime="20170816 10:15:50.631"></status>
</kw>
<status starttime="20170816 10:15:50.630" status="PASS" endtime="20170816 10:15:50.631"></status>
</kw>
<status starttime="20170816 10:15:50.628" status="PASS" endtime="20170816 10:15:50.631"></status>
</kw>
<status starttime="20170816 10:15:50.628" status="PASS" endtime="20170816 10:15:50.631"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:15:50.693" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:15:50.694" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:50.631" status="PASS" endtime="20170816 10:15:50.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:50.695" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:50.695" status="PASS" endtime="20170816 10:15:50.695"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:50.697" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:50.696" status="PASS" endtime="20170816 10:15:50.697"></status>
</kw>
<status starttime="20170816 10:15:50.695" status="PASS" endtime="20170816 10:15:50.697"></status>
</kw>
<status starttime="20170816 10:15:50.694" status="PASS" endtime="20170816 10:15:50.697"></status>
</kw>
<status starttime="20170816 10:15:50.694" status="PASS" endtime="20170816 10:15:50.697"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:15:50.697" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:15:50.697" status="PASS" endtime="20170816 10:15:50.698"></status>
</kw>
<msg timestamp="20170816 10:15:50.698" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:50.434" status="PASS" endtime="20170816 10:15:50.698"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:50.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:50.698" status="PASS" endtime="20170816 10:15:50.698"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:15:50.699" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:15:50.699" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:15:50.699" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:15:50.699" status="PASS" endtime="20170816 10:15:50.699"></status>
</kw>
<msg timestamp="20170816 10:15:50.699" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:15:50.434" status="PASS" endtime="20170816 10:15:50.699"></status>
</kw>
<msg timestamp="20170816 10:15:50.700" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:15:50.433" status="PASS" endtime="20170816 10:15:50.700"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:15:50.700" status="PASS" endtime="20170816 10:15:50.700"></status>
</kw>
<status starttime="20170816 10:15:50.433" status="PASS" endtime="20170816 10:15:50.700"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:15:50.704" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:15:50.704" status="PASS" endtime="20170816 10:15:50.704"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:15:50.705" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:15:50.705" status="PASS" endtime="20170816 10:15:50.705"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:15:50.706" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:15:50.705" status="PASS" endtime="20170816 10:15:50.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:15:50.706" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:15:50.706" status="PASS" endtime="20170816 10:15:50.706"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:15:50.892" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:15:50.707" status="PASS" endtime="20170816 10:15:50.892"></status>
</kw>
<msg timestamp="20170816 10:15:50.892" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:15:50.892" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:50.707" status="PASS" endtime="20170816 10:15:50.892"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:15:50.893" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:50.893" status="PASS" endtime="20170816 10:15:50.893"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:50.894" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:50.893" status="PASS" endtime="20170816 10:15:50.894"></status>
</kw>
<status starttime="20170816 10:15:50.703" status="PASS" endtime="20170816 10:15:50.894"></status>
</kw>
<status starttime="20170816 10:15:50.703" status="PASS" endtime="20170816 10:15:50.894"></status>
</kw>
<status starttime="20170816 10:15:50.702" status="PASS" endtime="20170816 10:15:50.894"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:15:50.895" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:15:50.894" status="PASS" endtime="20170816 10:15:50.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:50.897" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:50.896" status="PASS" endtime="20170816 10:15:50.897"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:50.898" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:15:50.898" status="PASS" endtime="20170816 10:15:50.898"></status>
</kw>
<status starttime="20170816 10:15:50.897" status="PASS" endtime="20170816 10:15:50.898"></status>
</kw>
<status starttime="20170816 10:15:50.895" status="PASS" endtime="20170816 10:15:50.898"></status>
</kw>
<status starttime="20170816 10:15:50.895" status="PASS" endtime="20170816 10:15:50.898"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:15:51.014" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:15:51.014" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:50.899" status="PASS" endtime="20170816 10:15:51.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:15:51.016" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:51.015" status="PASS" endtime="20170816 10:15:51.016"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:15:51.017" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:15:51.017" status="PASS" endtime="20170816 10:15:51.017"></status>
</kw>
<status starttime="20170816 10:15:51.016" status="PASS" endtime="20170816 10:15:51.017"></status>
</kw>
<status starttime="20170816 10:15:51.015" status="PASS" endtime="20170816 10:15:51.017"></status>
</kw>
<status starttime="20170816 10:15:51.014" status="PASS" endtime="20170816 10:15:51.017"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:15:51.018" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:15:51.018" status="PASS" endtime="20170816 10:15:51.018"></status>
</kw>
<msg timestamp="20170816 10:15:51.018" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:15:50.702" status="PASS" endtime="20170816 10:15:51.018"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:15:51.019" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:15:51.018" status="PASS" endtime="20170816 10:15:51.019"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:15:51.019" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:15:51.019" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:15:51.019" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:15:51.019" status="PASS" endtime="20170816 10:15:51.019"></status>
</kw>
<msg timestamp="20170816 10:15:51.020" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:15:50.701" status="PASS" endtime="20170816 10:15:51.020"></status>
</kw>
<msg timestamp="20170816 10:15:51.020" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:15:50.701" status="PASS" endtime="20170816 10:15:51.020"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:15:51.021" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:15:51.020" status="FAIL" endtime="20170816 10:15:51.021"></status>
</kw>
<status starttime="20170816 10:15:50.432" status="FAIL" endtime="20170816 10:15:51.021"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:01.026" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:01.026" status="PASS" endtime="20170816 10:16:01.027"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:01.027" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:01.027" status="PASS" endtime="20170816 10:16:01.027"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:01.028" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:01.027" status="PASS" endtime="20170816 10:16:01.028"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:01.029" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:01.028" status="PASS" endtime="20170816 10:16:01.029"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:01.218" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:01.030" status="PASS" endtime="20170816 10:16:01.218"></status>
</kw>
<msg timestamp="20170816 10:16:01.218" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:01.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:01.029" status="PASS" endtime="20170816 10:16:01.218"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:01.219" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:01.219" status="PASS" endtime="20170816 10:16:01.219"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:01.220" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:01.219" status="PASS" endtime="20170816 10:16:01.220"></status>
</kw>
<status starttime="20170816 10:16:01.025" status="PASS" endtime="20170816 10:16:01.220"></status>
</kw>
<status starttime="20170816 10:16:01.025" status="PASS" endtime="20170816 10:16:01.220"></status>
</kw>
<status starttime="20170816 10:16:01.024" status="PASS" endtime="20170816 10:16:01.220"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:01.221" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:16:01.220" status="PASS" endtime="20170816 10:16:01.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:01.223" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:16:01.222" status="PASS" endtime="20170816 10:16:01.223"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:01.224" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:16:01.224" status="PASS" endtime="20170816 10:16:01.224"></status>
</kw>
<status starttime="20170816 10:16:01.223" status="PASS" endtime="20170816 10:16:01.224"></status>
</kw>
<status starttime="20170816 10:16:01.221" status="PASS" endtime="20170816 10:16:01.224"></status>
</kw>
<status starttime="20170816 10:16:01.221" status="PASS" endtime="20170816 10:16:01.224"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:01.286" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:16:01.286" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:01.224" status="PASS" endtime="20170816 10:16:01.286"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:01.288" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:01.287" status="PASS" endtime="20170816 10:16:01.288"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:01.289" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:01.289" status="PASS" endtime="20170816 10:16:01.289"></status>
</kw>
<status starttime="20170816 10:16:01.288" status="PASS" endtime="20170816 10:16:01.289"></status>
</kw>
<status starttime="20170816 10:16:01.287" status="PASS" endtime="20170816 10:16:01.289"></status>
</kw>
<status starttime="20170816 10:16:01.287" status="PASS" endtime="20170816 10:16:01.289"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:01.290" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:01.290" status="PASS" endtime="20170816 10:16:01.290"></status>
</kw>
<msg timestamp="20170816 10:16:01.290" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:01.023" status="PASS" endtime="20170816 10:16:01.290"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:01.291" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:01.290" status="PASS" endtime="20170816 10:16:01.291"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:16:01.291" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:01.291" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:16:01.291" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:16:01.291" status="PASS" endtime="20170816 10:16:01.291"></status>
</kw>
<msg timestamp="20170816 10:16:01.292" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:16:01.023" status="PASS" endtime="20170816 10:16:01.292"></status>
</kw>
<msg timestamp="20170816 10:16:01.292" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:16:01.023" status="PASS" endtime="20170816 10:16:01.292"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:16:01.292" status="PASS" endtime="20170816 10:16:01.293"></status>
</kw>
<status starttime="20170816 10:16:01.022" status="PASS" endtime="20170816 10:16:01.293"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:01.297" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:01.296" status="PASS" endtime="20170816 10:16:01.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:01.298" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:01.297" status="PASS" endtime="20170816 10:16:01.298"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:01.299" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:01.298" status="PASS" endtime="20170816 10:16:01.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:01.300" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:01.299" status="PASS" endtime="20170816 10:16:01.300"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:01.493" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:01.301" status="PASS" endtime="20170816 10:16:01.493"></status>
</kw>
<msg timestamp="20170816 10:16:01.493" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:01.493" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:01.300" status="PASS" endtime="20170816 10:16:01.493"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:01.494" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:01.494" status="PASS" endtime="20170816 10:16:01.494"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:01.495" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:01.494" status="PASS" endtime="20170816 10:16:01.495"></status>
</kw>
<status starttime="20170816 10:16:01.296" status="PASS" endtime="20170816 10:16:01.495"></status>
</kw>
<status starttime="20170816 10:16:01.295" status="PASS" endtime="20170816 10:16:01.495"></status>
</kw>
<status starttime="20170816 10:16:01.294" status="PASS" endtime="20170816 10:16:01.495"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:01.496" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:16:01.495" status="PASS" endtime="20170816 10:16:01.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:01.498" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:16:01.497" status="PASS" endtime="20170816 10:16:01.498"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:01.499" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:16:01.499" status="PASS" endtime="20170816 10:16:01.499"></status>
</kw>
<status starttime="20170816 10:16:01.498" status="PASS" endtime="20170816 10:16:01.499"></status>
</kw>
<status starttime="20170816 10:16:01.497" status="PASS" endtime="20170816 10:16:01.499"></status>
</kw>
<status starttime="20170816 10:16:01.496" status="PASS" endtime="20170816 10:16:01.499"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:01.599" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:16:01.600" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:01.499" status="PASS" endtime="20170816 10:16:01.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:01.602" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:01.601" status="PASS" endtime="20170816 10:16:01.602"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:01.604" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:01.603" status="PASS" endtime="20170816 10:16:01.604"></status>
</kw>
<status starttime="20170816 10:16:01.602" status="PASS" endtime="20170816 10:16:01.604"></status>
</kw>
<status starttime="20170816 10:16:01.601" status="PASS" endtime="20170816 10:16:01.604"></status>
</kw>
<status starttime="20170816 10:16:01.600" status="PASS" endtime="20170816 10:16:01.604"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:01.605" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:01.604" status="PASS" endtime="20170816 10:16:01.605"></status>
</kw>
<msg timestamp="20170816 10:16:01.605" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:01.294" status="PASS" endtime="20170816 10:16:01.605"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:01.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:01.605" status="PASS" endtime="20170816 10:16:01.606"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:16:01.606" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:01.606" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:16:01.606" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:16:01.606" status="PASS" endtime="20170816 10:16:01.606"></status>
</kw>
<msg timestamp="20170816 10:16:01.606" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:16:01.293" status="PASS" endtime="20170816 10:16:01.607"></status>
</kw>
<msg timestamp="20170816 10:16:01.607" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:16:01.293" status="PASS" endtime="20170816 10:16:01.607"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:16:01.607" level="FAIL">Running != Quiesced</msg>
<status starttime="20170816 10:16:01.607" status="FAIL" endtime="20170816 10:16:01.608"></status>
</kw>
<status starttime="20170816 10:16:01.022" status="FAIL" endtime="20170816 10:16:01.608"></status>
</kw>
<msg timestamp="20170816 10:16:01.608" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</msg>
<status starttime="20170816 10:05:55.037" status="FAIL" endtime="20170816 10:16:01.608"></status>
</kw>
<status starttime="20170816 10:05:54.221" status="FAIL" endtime="20170816 10:16:01.608"></status>
</kw>
<status starttime="20170816 10:05:46.577" status="FAIL" endtime="20170816 10:16:01.608"></status>
</kw>
<status starttime="20170816 10:05:46.576" status="FAIL" endtime="20170816 10:16:01.608"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:01.613" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:01.613" status="PASS" endtime="20170816 10:16:01.614"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:01.614" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:01.614" status="PASS" endtime="20170816 10:16:01.614"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:01.615" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:01.614" status="PASS" endtime="20170816 10:16:01.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:01.616" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:01.615" status="PASS" endtime="20170816 10:16:01.616"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:01.835" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:01.616" status="PASS" endtime="20170816 10:16:01.835"></status>
</kw>
<msg timestamp="20170816 10:16:01.835" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:01.835" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:01.616" status="PASS" endtime="20170816 10:16:01.835"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:01.836" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:01.835" status="PASS" endtime="20170816 10:16:01.836"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:01.836" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:01.836" status="PASS" endtime="20170816 10:16:01.836"></status>
</kw>
<status starttime="20170816 10:16:01.612" status="PASS" endtime="20170816 10:16:01.837"></status>
</kw>
<status starttime="20170816 10:16:01.612" status="PASS" endtime="20170816 10:16:01.837"></status>
</kw>
<status starttime="20170816 10:16:01.611" status="PASS" endtime="20170816 10:16:01.837"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:01.837" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:16:01.837" status="PASS" endtime="20170816 10:16:01.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:01.839" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:16:01.839" status="PASS" endtime="20170816 10:16:01.839"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:01.840" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:16:01.840" status="PASS" endtime="20170816 10:16:01.841"></status>
</kw>
<status starttime="20170816 10:16:01.840" status="PASS" endtime="20170816 10:16:01.841"></status>
</kw>
<status starttime="20170816 10:16:01.838" status="PASS" endtime="20170816 10:16:01.841"></status>
</kw>
<status starttime="20170816 10:16:01.838" status="PASS" endtime="20170816 10:16:01.841"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:01.995" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:16:01.995" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:01.841" status="PASS" endtime="20170816 10:16:01.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:01.997" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:01.996" status="PASS" endtime="20170816 10:16:01.997"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:01.998" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:01.998" status="PASS" endtime="20170816 10:16:01.998"></status>
</kw>
<status starttime="20170816 10:16:01.997" status="PASS" endtime="20170816 10:16:01.998"></status>
</kw>
<status starttime="20170816 10:16:01.996" status="PASS" endtime="20170816 10:16:01.998"></status>
</kw>
<status starttime="20170816 10:16:01.995" status="PASS" endtime="20170816 10:16:01.998"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:01.999" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:01.998" status="PASS" endtime="20170816 10:16:01.999"></status>
</kw>
<msg timestamp="20170816 10:16:01.999" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:01.611" status="PASS" endtime="20170816 10:16:01.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:02.000" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:01.999" status="PASS" endtime="20170816 10:16:02.000"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:16:02.000" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:02.000" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:16:02.000" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:16:02.000" status="PASS" endtime="20170816 10:16:02.000"></status>
</kw>
<msg timestamp="20170816 10:16:02.001" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:16:01.610" status="PASS" endtime="20170816 10:16:02.001"></status>
</kw>
<msg timestamp="20170816 10:16:02.001" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:16:01.610" status="PASS" endtime="20170816 10:16:02.001"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status starttime="20170816 10:16:02.002" status="PASS" endtime="20170816 10:16:02.002"></status>
</kw>
<msg timestamp="20170816 10:16:02.002" level="INFO">${status} = True</msg>
<status starttime="20170816 10:16:02.001" status="PASS" endtime="20170816 10:16:02.002"></status>
</kw>
<msg timestamp="20170816 10:16:02.002" level="INFO">${status} = True</msg>
<status starttime="20170816 10:16:01.609" status="PASS" endtime="20170816 10:16:02.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170816 10:16:02.030" level="INFO">Length is 12</msg>
<status starttime="20170816 10:16:02.030" status="PASS" endtime="20170816 10:16:02.030"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 10:16:02.036" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 10:16:05.039" level="INFO">${RC} = 0</msg>
<msg timestamp="20170816 10:16:05.039" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.721 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.594 ms
64 bytes from 9.41.166.16...</msg>
<status starttime="20170816 10:16:02.031" status="PASS" endtime="20170816 10:16:05.039"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.042" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.721 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.594 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.599 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.572 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.572/0.621/0.721/0.063 ms</msg>
<status starttime="20170816 10:16:05.041" status="PASS" endtime="20170816 10:16:05.043"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170816 10:16:05.043" status="PASS" endtime="20170816 10:16:05.043"></status>
</kw>
<status starttime="20170816 10:16:02.029" status="PASS" endtime="20170816 10:16:05.043"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 10:16:05.057" level="INFO">${cur_time} = 2017-08-16 10:16:05:057025</msg>
<status starttime="20170816 10:16:05.057" status="PASS" endtime="20170816 10:16:05.057"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 10:16:05.058" level="INFO">${cur_time} = 20170816101605057025</msg>
<status starttime="20170816 10:16:05.058" status="PASS" endtime="20170816 10:16:05.058"></status>
</kw>
<status starttime="20170816 10:16:05.056" status="PASS" endtime="20170816 10:16:05.058"></status>
</kw>
<msg timestamp="20170816 10:16:05.058" level="INFO">${FFDC_TIME} = 20170816101605057025</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170816 10:16:05.072" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170816 10:16:05.072" status="PASS" endtime="20170816 10:16:05.073"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170816 10:16:05.073" level="INFO">${suite_name} = 20170816101605057025_TestsTestBasicPoweron</msg>
<status starttime="20170816 10:16:05.073" status="PASS" endtime="20170816 10:16:05.073"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170816 10:16:05.074" level="INFO">${test_name} = PowerOnTest</msg>
<status starttime="20170816 10:16:05.073" status="PASS" endtime="20170816 10:16:05.074"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170816 10:16:05.074" level="INFO">${test_name} = 20170816101605057025_PowerOnTest</msg>
<status starttime="20170816 10:16:05.074" status="PASS" endtime="20170816 10:16:05.075"></status>
</kw>
<status starttime="20170816 10:16:05.072" status="PASS" endtime="20170816 10:16:05.075"></status>
</kw>
<msg timestamp="20170816 10:16:05.075" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/</msg>
<msg timestamp="20170816 10:16:05.075" level="INFO">${FFDC_PREFIX} = 20170816101605057025_</msg>
<msg timestamp="20170816 10:16:05.095" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/</arg>
</arguments>
<msg timestamp="20170816 10:16:05.096" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.095" status="PASS" endtime="20170816 10:16:05.096"></status>
</kw>
<msg timestamp="20170816 10:16:05.101" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.122" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.121" status="PASS" endtime="20170816 10:16:05.122"></status>
</kw>
<status starttime="20170816 10:16:05.120" status="PASS" endtime="20170816 10:16:05.122"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.123" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.123" status="PASS" endtime="20170816 10:16:05.123"></status>
</kw>
<status starttime="20170816 10:16:05.122" status="PASS" endtime="20170816 10:16:05.123"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.125" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.124" status="PASS" endtime="20170816 10:16:05.125"></status>
</kw>
<status starttime="20170816 10:16:05.124" status="PASS" endtime="20170816 10:16:05.125"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.126" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.126" status="PASS" endtime="20170816 10:16:05.126"></status>
</kw>
<status starttime="20170816 10:16:05.125" status="PASS" endtime="20170816 10:16:05.126"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.128" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.127" status="PASS" endtime="20170816 10:16:05.128"></status>
</kw>
<status starttime="20170816 10:16:05.127" status="PASS" endtime="20170816 10:16:05.128"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.129" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.128" status="PASS" endtime="20170816 10:16:05.129"></status>
</kw>
<status starttime="20170816 10:16:05.128" status="PASS" endtime="20170816 10:16:05.129"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.130" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.130" status="PASS" endtime="20170816 10:16:05.130"></status>
</kw>
<status starttime="20170816 10:16:05.129" status="PASS" endtime="20170816 10:16:05.130"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.132" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.131" status="PASS" endtime="20170816 10:16:05.132"></status>
</kw>
<status starttime="20170816 10:16:05.131" status="PASS" endtime="20170816 10:16:05.132"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.133" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.132" status="PASS" endtime="20170816 10:16:05.133"></status>
</kw>
<status starttime="20170816 10:16:05.132" status="PASS" endtime="20170816 10:16:05.133"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.134" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.134" status="PASS" endtime="20170816 10:16:05.135"></status>
</kw>
<status starttime="20170816 10:16:05.134" status="PASS" endtime="20170816 10:16:05.135"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.136" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.135" status="PASS" endtime="20170816 10:16:05.136"></status>
</kw>
<status starttime="20170816 10:16:05.135" status="PASS" endtime="20170816 10:16:05.136"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.137" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.137" status="PASS" endtime="20170816 10:16:05.137"></status>
</kw>
<status starttime="20170816 10:16:05.136" status="PASS" endtime="20170816 10:16:05.137"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.138" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.138" status="PASS" endtime="20170816 10:16:05.138"></status>
</kw>
<status starttime="20170816 10:16:05.137" status="PASS" endtime="20170816 10:16:05.139"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170816 10:16:05.168" level="INFO">alias=bmc_connection
height=24
path_separator=/
port=22
prompt=# 
width=80
term_type=vt100
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
index=1</msg>
<msg timestamp="20170816 10:16:05.168" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170816 10:16:05.246" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170816 10:16:05.255" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170816 10:16:05.255" level="INFO">${stderr} = </msg>
<msg timestamp="20170816 10:16:05.255" level="INFO">${rc} = 0</msg>
<status starttime="20170816 10:16:05.139" status="PASS" endtime="20170816 10:16:05.255"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.256" level="INFO">Length is 0</msg>
<status starttime="20170816 10:16:05.256" status="PASS" endtime="20170816 10:16:05.256"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.256" level="INFO">Length is 11</msg>
<status starttime="20170816 10:16:05.256" status="PASS" endtime="20170816 10:16:05.256"></status>
</kw>
<msg timestamp="20170816 10:16:05.257" level="INFO">${model_name} = Witherspoon</msg>
<status starttime="20170816 10:16:05.139" status="PASS" endtime="20170816 10:16:05.257"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.258" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.258" status="PASS" endtime="20170816 10:16:05.258"></status>
</kw>
<status starttime="20170816 10:16:05.257" status="PASS" endtime="20170816 10:16:05.258"></status>
</kw>
<status starttime="20170816 10:16:05.133" status="PASS" endtime="20170816 10:16:05.258"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.259" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.259" status="PASS" endtime="20170816 10:16:05.259"></status>
</kw>
<status starttime="20170816 10:16:05.258" status="PASS" endtime="20170816 10:16:05.260"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170816 10:16:05.260" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status starttime="20170816 10:16:05.260" status="PASS" endtime="20170816 10:16:05.260"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.262" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.261" status="PASS" endtime="20170816 10:16:05.262"></status>
</kw>
<status starttime="20170816 10:16:05.261" status="PASS" endtime="20170816 10:16:05.262"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.263" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.263" status="PASS" endtime="20170816 10:16:05.263"></status>
</kw>
<status starttime="20170816 10:16:05.262" status="PASS" endtime="20170816 10:16:05.263"></status>
</kw>
<status starttime="20170816 10:16:05.260" status="PASS" endtime="20170816 10:16:05.263"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.264" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.264" status="PASS" endtime="20170816 10:16:05.265"></status>
</kw>
<status starttime="20170816 10:16:05.263" status="PASS" endtime="20170816 10:16:05.265"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.266" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.265" status="PASS" endtime="20170816 10:16:05.266"></status>
</kw>
<status starttime="20170816 10:16:05.265" status="PASS" endtime="20170816 10:16:05.266"></status>
</kw>
<status starttime="20170816 10:16:05.263" status="PASS" endtime="20170816 10:16:05.266"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.267" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.267" status="PASS" endtime="20170816 10:16:05.267"></status>
</kw>
<status starttime="20170816 10:16:05.266" status="PASS" endtime="20170816 10:16:05.267"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.269" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.268" status="PASS" endtime="20170816 10:16:05.269"></status>
</kw>
<status starttime="20170816 10:16:05.268" status="PASS" endtime="20170816 10:16:05.269"></status>
</kw>
<status starttime="20170816 10:16:05.266" status="PASS" endtime="20170816 10:16:05.269"></status>
</kw>
<status starttime="20170816 10:16:05.260" status="PASS" endtime="20170816 10:16:05.269"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.270" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.270" status="PASS" endtime="20170816 10:16:05.270"></status>
</kw>
<status starttime="20170816 10:16:05.269" status="PASS" endtime="20170816 10:16:05.270"></status>
</kw>
<status starttime="20170816 10:16:05.120" status="PASS" endtime="20170816 10:16:05.271"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170816 10:16:05.277" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170816 10:16:05.277" status="PASS" endtime="20170816 10:16:05.277"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170816 10:16:05.279" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('BMC Specific Files', 'BMC FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC ...</msg>
<status starttime="20170816 10:16:05.278" status="PASS" endtime="20170816 10:16:05.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170816 10:16:05.280" status="PASS" endtime="20170816 10:16:05.280"></status>
</kw>
<msg timestamp="20170816 10:16:05.280" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | BMC Specific Files | Core Files | OS FFDC | SEL Log ]</msg>
<status starttime="20170816 10:16:05.279" status="PASS" endtime="20170816 10:16:05.280"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170816 10:16:05.282" status="PASS" endtime="20170816 10:16:05.282"></status>
</kw>
<msg timestamp="20170816 10:16:05.282" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:05.282" level="INFO">${ret_values} = None</msg>
<status starttime="20170816 10:16:05.281" status="PASS" endtime="20170816 10:16:05.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170816 10:16:05.282" status="PASS" endtime="20170816 10:16:05.283"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170816 10:16:05.308" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status starttime="20170816 10:16:05.308" status="PASS" endtime="20170816 10:16:05.308"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170816 10:16:05.310" level="INFO">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') ]</msg>
<status starttime="20170816 10:16:05.309" status="PASS" endtime="20170816 10:16:05.310"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.315" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170816 10:16:05.310" status="PASS" endtime="20170816 10:16:05.315"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.318" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.318" status="PASS" endtime="20170816 10:16:05.318"></status>
</kw>
<status starttime="20170816 10:16:05.317" status="PASS" endtime="20170816 10:16:05.318"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.320" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.319" status="PASS" endtime="20170816 10:16:05.320"></status>
</kw>
<status starttime="20170816 10:16:05.319" status="PASS" endtime="20170816 10:16:05.320"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.321" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.321" status="PASS" endtime="20170816 10:16:05.321"></status>
</kw>
<status starttime="20170816 10:16:05.320" status="PASS" endtime="20170816 10:16:05.321"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.322" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.322" status="PASS" endtime="20170816 10:16:05.322"></status>
</kw>
<status starttime="20170816 10:16:05.321" status="PASS" endtime="20170816 10:16:05.323"></status>
</kw>
<status starttime="20170816 10:16:05.317" status="PASS" endtime="20170816 10:16:05.323"></status>
</kw>
<status starttime="20170816 10:16:05.316" status="PASS" endtime="20170816 10:16:05.323"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:16:05.323" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status starttime="20170816 10:16:05.323" status="PASS" endtime="20170816 10:16:05.324"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 10:16:05.396" level="INFO">alias=bmc_connection
height=24
path_separator=/
port=22
prompt=# 
width=80
term_type=vt100
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
index=1</msg>
<msg timestamp="20170816 10:16:05.397" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170816 10:16:05.497" level="INFO">Command exited with return code 0.</msg>
<status starttime="20170816 10:16:05.360" status="PASS" endtime="20170816 10:16:05.497"></status>
</kw>
<msg timestamp="20170816 10:16:05.497" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:05.497" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Wed Aug 16 04:03:43 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status starttime="20170816 10:16:05.324" status="PASS" endtime="20170816 10:16:05.497"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 10:16:05.498" level="INFO">${stdout} = Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Wed Aug 16 04:03:43 UTC 2017 armv6l GNU/Linux</msg>
<status starttime="20170816 10:16:05.497" status="PASS" endtime="20170816 10:16:05.498"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 10:16:05.498" level="INFO">${stderr} = </msg>
<status starttime="20170816 10:16:05.498" status="PASS" endtime="20170816 10:16:05.498"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.505" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.505" status="PASS" endtime="20170816 10:16:05.505"></status>
</kw>
<status starttime="20170816 10:16:05.504" status="PASS" endtime="20170816 10:16:05.505"></status>
</kw>
<status starttime="20170816 10:16:05.499" status="PASS" endtime="20170816 10:16:05.505"></status>
</kw>
<status starttime="20170816 10:16:05.316" status="PASS" endtime="20170816 10:16:05.505"></status>
</kw>
<status starttime="20170816 10:16:05.315" status="PASS" endtime="20170816 10:16:05.505"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.508" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.508" status="PASS" endtime="20170816 10:16:05.509"></status>
</kw>
<status starttime="20170816 10:16:05.508" status="PASS" endtime="20170816 10:16:05.509"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.510" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.510" status="PASS" endtime="20170816 10:16:05.510"></status>
</kw>
<status starttime="20170816 10:16:05.509" status="PASS" endtime="20170816 10:16:05.510"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.511" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.511" status="PASS" endtime="20170816 10:16:05.511"></status>
</kw>
<status starttime="20170816 10:16:05.510" status="PASS" endtime="20170816 10:16:05.511"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.512" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.512" status="PASS" endtime="20170816 10:16:05.513"></status>
</kw>
<status starttime="20170816 10:16:05.512" status="PASS" endtime="20170816 10:16:05.513"></status>
</kw>
<status starttime="20170816 10:16:05.507" status="PASS" endtime="20170816 10:16:05.513"></status>
</kw>
<status starttime="20170816 10:16:05.507" status="PASS" endtime="20170816 10:16:05.513"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:16:05.514" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status starttime="20170816 10:16:05.513" status="PASS" endtime="20170816 10:16:05.514"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 10:16:05.585" level="INFO">alias=bmc_connection
height=24
path_separator=/
port=22
prompt=# 
width=80
term_type=vt100
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
index=1</msg>
<msg timestamp="20170816 10:16:05.586" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170816 10:16:05.652" level="INFO">Command exited with return code 0.</msg>
<status starttime="20170816 10:16:05.545" status="PASS" endtime="20170816 10:16:05.652"></status>
</kw>
<msg timestamp="20170816 10:16:05.652" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:05.653" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status starttime="20170816 10:16:05.514" status="PASS" endtime="20170816 10:16:05.653"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 10:16:05.653" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status starttime="20170816 10:16:05.653" status="PASS" endtime="20170816 10:16:05.653"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 10:16:05.654" level="INFO">${stderr} = </msg>
<status starttime="20170816 10:16:05.654" status="PASS" endtime="20170816 10:16:05.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.660" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.660" status="PASS" endtime="20170816 10:16:05.660"></status>
</kw>
<status starttime="20170816 10:16:05.659" status="PASS" endtime="20170816 10:16:05.661"></status>
</kw>
<status starttime="20170816 10:16:05.654" status="PASS" endtime="20170816 10:16:05.661"></status>
</kw>
<status starttime="20170816 10:16:05.506" status="PASS" endtime="20170816 10:16:05.661"></status>
</kw>
<status starttime="20170816 10:16:05.506" status="PASS" endtime="20170816 10:16:05.661"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.664" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.663" status="PASS" endtime="20170816 10:16:05.664"></status>
</kw>
<status starttime="20170816 10:16:05.663" status="PASS" endtime="20170816 10:16:05.664"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.665" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.665" status="PASS" endtime="20170816 10:16:05.665"></status>
</kw>
<status starttime="20170816 10:16:05.664" status="PASS" endtime="20170816 10:16:05.665"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.666" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.666" status="PASS" endtime="20170816 10:16:05.666"></status>
</kw>
<status starttime="20170816 10:16:05.665" status="PASS" endtime="20170816 10:16:05.667"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.668" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.667" status="PASS" endtime="20170816 10:16:05.668"></status>
</kw>
<status starttime="20170816 10:16:05.667" status="PASS" endtime="20170816 10:16:05.668"></status>
</kw>
<status starttime="20170816 10:16:05.662" status="PASS" endtime="20170816 10:16:05.668"></status>
</kw>
<status starttime="20170816 10:16:05.662" status="PASS" endtime="20170816 10:16:05.668"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:16:05.669" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status starttime="20170816 10:16:05.668" status="PASS" endtime="20170816 10:16:05.669"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 10:16:05.736" level="INFO">alias=bmc_connection
height=24
path_separator=/
port=22
prompt=# 
width=80
term_type=vt100
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
index=1</msg>
<msg timestamp="20170816 10:16:05.736" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170816 10:16:05.793" level="INFO">Command exited with return code 0.</msg>
<status starttime="20170816 10:16:05.700" status="PASS" endtime="20170816 10:16:05.793"></status>
</kw>
<msg timestamp="20170816 10:16:05.793" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:05.793" level="INFO">${ret_values} = (u' 15:59:14 up 16 min,  load average: 0.43, 1.06, 0.97', u'', 0)</msg>
<status starttime="20170816 10:16:05.669" status="PASS" endtime="20170816 10:16:05.793"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 10:16:05.794" level="INFO">${stdout} =  15:59:14 up 16 min,  load average: 0.43, 1.06, 0.97</msg>
<status starttime="20170816 10:16:05.794" status="PASS" endtime="20170816 10:16:05.794"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 10:16:05.794" level="INFO">${stderr} = </msg>
<status starttime="20170816 10:16:05.794" status="PASS" endtime="20170816 10:16:05.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.801" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.801" status="PASS" endtime="20170816 10:16:05.801"></status>
</kw>
<status starttime="20170816 10:16:05.800" status="PASS" endtime="20170816 10:16:05.801"></status>
</kw>
<status starttime="20170816 10:16:05.795" status="PASS" endtime="20170816 10:16:05.801"></status>
</kw>
<status starttime="20170816 10:16:05.661" status="PASS" endtime="20170816 10:16:05.801"></status>
</kw>
<status starttime="20170816 10:16:05.661" status="PASS" endtime="20170816 10:16:05.802"></status>
</kw>
<status starttime="20170816 10:16:05.315" status="PASS" endtime="20170816 10:16:05.802"></status>
</kw>
<status starttime="20170816 10:16:05.309" status="PASS" endtime="20170816 10:16:05.802"></status>
</kw>
<status starttime="20170816 10:16:05.309" status="PASS" endtime="20170816 10:16:05.802"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170816 10:16:05.803" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20170816 10:16:05.802" status="PASS" endtime="20170816 10:16:05.803"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.803" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170816 10:16:05.803" status="PASS" endtime="20170816 10:16:05.804"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.807" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.806" status="PASS" endtime="20170816 10:16:05.807"></status>
</kw>
<status starttime="20170816 10:16:05.806" status="PASS" endtime="20170816 10:16:05.807"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.808" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.808" status="PASS" endtime="20170816 10:16:05.808"></status>
</kw>
<status starttime="20170816 10:16:05.807" status="PASS" endtime="20170816 10:16:05.808"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.809" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.809" status="PASS" endtime="20170816 10:16:05.809"></status>
</kw>
<status starttime="20170816 10:16:05.808" status="PASS" endtime="20170816 10:16:05.809"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.811" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.810" status="PASS" endtime="20170816 10:16:05.811"></status>
</kw>
<status starttime="20170816 10:16:05.810" status="PASS" endtime="20170816 10:16:05.811"></status>
</kw>
<status starttime="20170816 10:16:05.805" status="PASS" endtime="20170816 10:16:05.811"></status>
</kw>
<status starttime="20170816 10:16:05.805" status="PASS" endtime="20170816 10:16:05.811"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:16:05.812" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status starttime="20170816 10:16:05.811" status="PASS" endtime="20170816 10:16:05.812"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 10:16:05.879" level="INFO">alias=bmc_connection
height=24
path_separator=/
port=22
prompt=# 
width=80
term_type=vt100
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
index=1</msg>
<msg timestamp="20170816 10:16:05.879" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170816 10:16:05.926" level="INFO">Command exited with return code 0.</msg>
<status starttime="20170816 10:16:05.843" status="PASS" endtime="20170816 10:16:05.926"></status>
</kw>
<msg timestamp="20170816 10:16:05.926" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:05.926" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-257"\nVERSION_ID="v1.99.8-257-g60cf6ff"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status starttime="20170816 10:16:05.812" status="PASS" endtime="20170816 10:16:05.926"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 10:16:05.927" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-257"
VERSION_ID="v1.99.8-257-g60cf6ff"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status starttime="20170816 10:16:05.927" status="PASS" endtime="20170816 10:16:05.927"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 10:16:05.928" level="INFO">${stderr} = </msg>
<status starttime="20170816 10:16:05.928" status="PASS" endtime="20170816 10:16:05.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.938" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.937" status="PASS" endtime="20170816 10:16:05.938"></status>
</kw>
<status starttime="20170816 10:16:05.936" status="PASS" endtime="20170816 10:16:05.938"></status>
</kw>
<status starttime="20170816 10:16:05.928" status="PASS" endtime="20170816 10:16:05.938"></status>
</kw>
<status starttime="20170816 10:16:05.804" status="PASS" endtime="20170816 10:16:05.938"></status>
</kw>
<status starttime="20170816 10:16:05.804" status="PASS" endtime="20170816 10:16:05.938"></status>
</kw>
<status starttime="20170816 10:16:05.804" status="PASS" endtime="20170816 10:16:05.939"></status>
</kw>
<status starttime="20170816 10:16:05.802" status="PASS" endtime="20170816 10:16:05.939"></status>
</kw>
<status starttime="20170816 10:16:05.802" status="PASS" endtime="20170816 10:16:05.939"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170816 10:16:05.940" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status starttime="20170816 10:16:05.939" status="PASS" endtime="20170816 10:16:05.940"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.940" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170816 10:16:05.940" status="PASS" endtime="20170816 10:16:05.941"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.944" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.943" status="PASS" endtime="20170816 10:16:05.944"></status>
</kw>
<status starttime="20170816 10:16:05.943" status="PASS" endtime="20170816 10:16:05.944"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.945" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.945" status="PASS" endtime="20170816 10:16:05.945"></status>
</kw>
<status starttime="20170816 10:16:05.944" status="PASS" endtime="20170816 10:16:05.945"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.946" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.946" status="PASS" endtime="20170816 10:16:05.946"></status>
</kw>
<status starttime="20170816 10:16:05.945" status="PASS" endtime="20170816 10:16:05.946"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:05.947" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:05.947" status="PASS" endtime="20170816 10:16:05.948"></status>
</kw>
<status starttime="20170816 10:16:05.947" status="PASS" endtime="20170816 10:16:05.948"></status>
</kw>
<status starttime="20170816 10:16:05.942" status="PASS" endtime="20170816 10:16:05.948"></status>
</kw>
<status starttime="20170816 10:16:05.942" status="PASS" endtime="20170816 10:16:05.948"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:16:05.949" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status starttime="20170816 10:16:05.948" status="PASS" endtime="20170816 10:16:05.949"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 10:16:06.016" level="INFO">alias=bmc_connection
height=24
path_separator=/
port=22
prompt=# 
width=80
term_type=vt100
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
index=1</msg>
<msg timestamp="20170816 10:16:06.017" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170816 10:16:07.453" level="INFO">Command exited with return code 0.</msg>
<status starttime="20170816 10:16:05.980" status="PASS" endtime="20170816 10:16:07.453"></status>
</kw>
<msg timestamp="20170816 10:16:07.454" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:07.454" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status starttime="20170816 10:16:05.949" status="PASS" endtime="20170816 10:16:07.454"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 10:16:07.454" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status starttime="20170816 10:16:07.454" status="PASS" endtime="20170816 10:16:07.454"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 10:16:07.455" level="INFO">${stderr} = </msg>
<status starttime="20170816 10:16:07.455" status="PASS" endtime="20170816 10:16:07.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:07.462" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:07.461" status="PASS" endtime="20170816 10:16:07.462"></status>
</kw>
<status starttime="20170816 10:16:07.460" status="PASS" endtime="20170816 10:16:07.462"></status>
</kw>
<status starttime="20170816 10:16:07.455" status="PASS" endtime="20170816 10:16:07.462"></status>
</kw>
<status starttime="20170816 10:16:05.941" status="PASS" endtime="20170816 10:16:07.462"></status>
</kw>
<status starttime="20170816 10:16:05.941" status="PASS" endtime="20170816 10:16:07.462"></status>
</kw>
<status starttime="20170816 10:16:05.941" status="PASS" endtime="20170816 10:16:07.462"></status>
</kw>
<status starttime="20170816 10:16:05.939" status="PASS" endtime="20170816 10:16:07.462"></status>
</kw>
<status starttime="20170816 10:16:05.939" status="PASS" endtime="20170816 10:16:07.462"></status>
</kw>
<status starttime="20170816 10:16:05.308" status="PASS" endtime="20170816 10:16:07.462"></status>
</kw>
<status starttime="20170816 10:16:05.308" status="PASS" endtime="20170816 10:16:07.462"></status>
</kw>
<status starttime="20170816 10:16:05.283" status="PASS" endtime="20170816 10:16:07.463"></status>
</kw>
<status starttime="20170816 10:16:05.280" status="PASS" endtime="20170816 10:16:07.463"></status>
</kw>
<status starttime="20170816 10:16:05.280" status="PASS" endtime="20170816 10:16:07.463"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170816 10:16:07.464" status="PASS" endtime="20170816 10:16:07.464"></status>
</kw>
<msg timestamp="20170816 10:16:07.465" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:07.465" level="INFO">${ret_values} = None</msg>
<status starttime="20170816 10:16:07.464" status="PASS" endtime="20170816 10:16:07.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170816 10:16:07.465" status="PASS" endtime="20170816 10:16:07.465"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170816 10:16:07.495" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170816 10:16:07.495" status="PASS" endtime="20170816 10:16:07.495"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170816 10:16:07.496" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_led', '/org/op...</msg>
<status starttime="20170816 10:16:07.496" status="PASS" endtime="20170816 10:16:07.496"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 10:16:07.497" level="INFO">${logpath} = /tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_sensor_list.txt</msg>
<status starttime="20170816 10:16:07.497" status="PASS" endtime="20170816 10:16:07.497"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:07.500" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:07.499" status="PASS" endtime="20170816 10:16:07.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:07.501" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:07.501" status="PASS" endtime="20170816 10:16:07.501"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:07.502" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:07.502" status="PASS" endtime="20170816 10:16:07.502"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:07.503" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:07.502" status="PASS" endtime="20170816 10:16:07.503"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:07.686" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:07.503" status="PASS" endtime="20170816 10:16:07.686"></status>
</kw>
<msg timestamp="20170816 10:16:07.686" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:07.686" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:07.503" status="PASS" endtime="20170816 10:16:07.686"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:07.687" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:07.687" status="PASS" endtime="20170816 10:16:07.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:07.688" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:07.688" status="PASS" endtime="20170816 10:16:07.688"></status>
</kw>
<status starttime="20170816 10:16:07.499" status="PASS" endtime="20170816 10:16:07.688"></status>
</kw>
<status starttime="20170816 10:16:07.498" status="PASS" endtime="20170816 10:16:07.688"></status>
</kw>
<status starttime="20170816 10:16:07.498" status="PASS" endtime="20170816 10:16:07.688"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:07.689" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170816 10:16:07.689" status="PASS" endtime="20170816 10:16:07.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170816 10:16:07.689" status="PASS" endtime="20170816 10:16:07.690"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:07.935" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170816 10:16:07.935" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:07.690" status="PASS" endtime="20170816 10:16:07.935"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170816 10:16:07.936" status="PASS" endtime="20170816 10:16:07.936"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:07.936" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:07.936" status="PASS" endtime="20170816 10:16:07.936"></status>
</kw>
<msg timestamp="20170816 10:16:07.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:07.497" status="PASS" endtime="20170816 10:16:07.937"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:07.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:07.937" status="PASS" endtime="20170816 10:16:07.938"></status>
</kw>
<msg timestamp="20170816 10:16:07.938" level="INFO">${status} = True</msg>
<status starttime="20170816 10:16:07.937" status="PASS" endtime="20170816 10:16:07.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170816 10:16:07.938" status="PASS" endtime="20170816 10:16:07.938"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170816 10:16:07.939" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:07.939" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170816 10:16:07.939" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170816 10:16:07.939" status="PASS" endtime="20170816 10:16:07.939"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:07.941" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_sensor_list.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:07.940" status="PASS" endtime="20170816 10:16:07.941"></status>
</kw>
<status starttime="20170816 10:16:07.940" status="PASS" endtime="20170816 10:16:07.941"></status>
</kw>
<status starttime="20170816 10:16:07.496" status="PASS" endtime="20170816 10:16:07.941"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 10:16:07.942" level="INFO">${logpath} = /tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_record_log.txt</msg>
<status starttime="20170816 10:16:07.942" status="PASS" endtime="20170816 10:16:07.942"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:07.945" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:07.945" status="PASS" endtime="20170816 10:16:07.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:07.946" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:07.946" status="PASS" endtime="20170816 10:16:07.946"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:07.947" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:07.946" status="PASS" endtime="20170816 10:16:07.947"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:07.948" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:07.947" status="PASS" endtime="20170816 10:16:07.948"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:08.266" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:07.949" status="PASS" endtime="20170816 10:16:08.266"></status>
</kw>
<msg timestamp="20170816 10:16:08.266" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:08.266" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:07.948" status="PASS" endtime="20170816 10:16:08.266"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:08.267" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:08.267" status="PASS" endtime="20170816 10:16:08.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:08.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:08.267" status="PASS" endtime="20170816 10:16:08.268"></status>
</kw>
<status starttime="20170816 10:16:07.944" status="PASS" endtime="20170816 10:16:08.268"></status>
</kw>
<status starttime="20170816 10:16:07.944" status="PASS" endtime="20170816 10:16:08.268"></status>
</kw>
<status starttime="20170816 10:16:07.943" status="PASS" endtime="20170816 10:16:08.268"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:08.269" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170816 10:16:08.268" status="PASS" endtime="20170816 10:16:08.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170816 10:16:08.269" status="PASS" endtime="20170816 10:16:08.269"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:08.311" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170816 10:16:08.311" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170816 10:16:08.270" status="PASS" endtime="20170816 10:16:08.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170816 10:16:08.311" status="PASS" endtime="20170816 10:16:08.312"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:08.312" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:08.312" status="PASS" endtime="20170816 10:16:08.312"></status>
</kw>
<msg timestamp="20170816 10:16:08.312" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170816 10:16:07.942" status="PASS" endtime="20170816 10:16:08.312"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:08.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:16:08.314" level="FAIL">404 != 200</msg>
<status starttime="20170816 10:16:08.313" status="FAIL" endtime="20170816 10:16:08.314"></status>
</kw>
<msg timestamp="20170816 10:16:08.314" level="INFO">${status} = False</msg>
<status starttime="20170816 10:16:08.313" status="PASS" endtime="20170816 10:16:08.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170816 10:16:08.315" level="INFO">Continuing for loop from the next iteration.</msg>
<status starttime="20170816 10:16:08.315" status="PASS" endtime="20170816 10:16:08.315"></status>
</kw>
<status starttime="20170816 10:16:08.314" status="PASS" endtime="20170816 10:16:08.315"></status>
</kw>
<status starttime="20170816 10:16:07.941" status="PASS" endtime="20170816 10:16:08.315"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 10:16:08.316" level="INFO">${logpath} = /tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_elog.txt</msg>
<status starttime="20170816 10:16:08.315" status="PASS" endtime="20170816 10:16:08.316"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:08.319" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:08.318" status="PASS" endtime="20170816 10:16:08.320"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:08.321" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:08.321" status="PASS" endtime="20170816 10:16:08.321"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:08.322" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:08.321" status="PASS" endtime="20170816 10:16:08.322"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:08.323" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:08.322" status="PASS" endtime="20170816 10:16:08.323"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:08.505" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:08.323" status="PASS" endtime="20170816 10:16:08.505"></status>
</kw>
<msg timestamp="20170816 10:16:08.505" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:08.505" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:08.323" status="PASS" endtime="20170816 10:16:08.505"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:08.506" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:08.506" status="PASS" endtime="20170816 10:16:08.506"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:08.507" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:08.506" status="PASS" endtime="20170816 10:16:08.507"></status>
</kw>
<status starttime="20170816 10:16:08.318" status="PASS" endtime="20170816 10:16:08.507"></status>
</kw>
<status starttime="20170816 10:16:08.317" status="PASS" endtime="20170816 10:16:08.507"></status>
</kw>
<status starttime="20170816 10:16:08.317" status="PASS" endtime="20170816 10:16:08.507"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:08.508" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170816 10:16:08.507" status="PASS" endtime="20170816 10:16:08.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170816 10:16:08.508" status="PASS" endtime="20170816 10:16:08.508"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:08.700" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170816 10:16:08.700" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:08.509" status="PASS" endtime="20170816 10:16:08.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170816 10:16:08.701" status="PASS" endtime="20170816 10:16:08.701"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:08.702" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:08.701" status="PASS" endtime="20170816 10:16:08.702"></status>
</kw>
<msg timestamp="20170816 10:16:08.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:08.316" status="PASS" endtime="20170816 10:16:08.702"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:08.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:08.703" status="PASS" endtime="20170816 10:16:08.703"></status>
</kw>
<msg timestamp="20170816 10:16:08.703" level="INFO">${status} = True</msg>
<status starttime="20170816 10:16:08.702" status="PASS" endtime="20170816 10:16:08.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170816 10:16:08.704" status="PASS" endtime="20170816 10:16:08.704"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170816 10:16:08.705" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775118902, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775427531, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775525499, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775622491, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775720575, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775799655, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:08.705" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170816 10:16:08.705" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFile...</msg>
<status starttime="20170816 10:16:08.704" status="PASS" endtime="20170816 10:16:08.705"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:08.707" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_elog.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_elog.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:08.706" status="PASS" endtime="20170816 10:16:08.707"></status>
</kw>
<status starttime="20170816 10:16:08.705" status="PASS" endtime="20170816 10:16:08.707"></status>
</kw>
<status starttime="20170816 10:16:08.315" status="PASS" endtime="20170816 10:16:08.707"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 10:16:08.707" level="INFO">${logpath} = /tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_led.txt</msg>
<status starttime="20170816 10:16:08.707" status="PASS" endtime="20170816 10:16:08.708"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:08.710" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:08.710" status="PASS" endtime="20170816 10:16:08.711"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:08.744" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:08.711" status="PASS" endtime="20170816 10:16:08.744"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:08.745" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:08.744" status="PASS" endtime="20170816 10:16:08.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:08.746" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:08.745" status="PASS" endtime="20170816 10:16:08.746"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:09.009" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:08.747" status="PASS" endtime="20170816 10:16:09.009"></status>
</kw>
<msg timestamp="20170816 10:16:09.009" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:09.009" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:08.746" status="PASS" endtime="20170816 10:16:09.009"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:09.010" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:09.010" status="PASS" endtime="20170816 10:16:09.010"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:09.011" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:09.010" status="PASS" endtime="20170816 10:16:09.011"></status>
</kw>
<status starttime="20170816 10:16:08.709" status="PASS" endtime="20170816 10:16:09.011"></status>
</kw>
<status starttime="20170816 10:16:08.709" status="PASS" endtime="20170816 10:16:09.011"></status>
</kw>
<status starttime="20170816 10:16:08.708" status="PASS" endtime="20170816 10:16:09.011"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:09.012" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170816 10:16:09.011" status="PASS" endtime="20170816 10:16:09.012"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170816 10:16:09.012" status="PASS" endtime="20170816 10:16:09.012"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:09.054" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170816 10:16:09.054" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170816 10:16:09.013" status="PASS" endtime="20170816 10:16:09.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170816 10:16:09.054" status="PASS" endtime="20170816 10:16:09.054"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:09.055" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:09.055" status="PASS" endtime="20170816 10:16:09.055"></status>
</kw>
<msg timestamp="20170816 10:16:09.055" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170816 10:16:08.708" status="PASS" endtime="20170816 10:16:09.055"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:09.056" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 10:16:09.057" level="FAIL">404 != 200</msg>
<status starttime="20170816 10:16:09.056" status="FAIL" endtime="20170816 10:16:09.057"></status>
</kw>
<msg timestamp="20170816 10:16:09.057" level="INFO">${status} = False</msg>
<status starttime="20170816 10:16:09.056" status="PASS" endtime="20170816 10:16:09.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170816 10:16:09.058" level="INFO">Continuing for loop from the next iteration.</msg>
<status starttime="20170816 10:16:09.058" status="PASS" endtime="20170816 10:16:09.058"></status>
</kw>
<status starttime="20170816 10:16:09.057" status="PASS" endtime="20170816 10:16:09.058"></status>
</kw>
<status starttime="20170816 10:16:08.707" status="PASS" endtime="20170816 10:16:09.058"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 10:16:09.059" level="INFO">${logpath} = /tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_inventory.txt</msg>
<status starttime="20170816 10:16:09.058" status="PASS" endtime="20170816 10:16:09.059"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:09.062" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:09.061" status="PASS" endtime="20170816 10:16:09.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:09.063" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:09.062" status="PASS" endtime="20170816 10:16:09.063"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:09.064" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:09.063" status="PASS" endtime="20170816 10:16:09.064"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:09.064" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:09.064" status="PASS" endtime="20170816 10:16:09.064"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:09.248" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:09.065" status="PASS" endtime="20170816 10:16:09.248"></status>
</kw>
<msg timestamp="20170816 10:16:09.248" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:09.248" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:09.065" status="PASS" endtime="20170816 10:16:09.248"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:09.249" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:09.249" status="PASS" endtime="20170816 10:16:09.249"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:09.250" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:09.249" status="PASS" endtime="20170816 10:16:09.250"></status>
</kw>
<status starttime="20170816 10:16:09.061" status="PASS" endtime="20170816 10:16:09.250"></status>
</kw>
<status starttime="20170816 10:16:09.060" status="PASS" endtime="20170816 10:16:09.250"></status>
</kw>
<status starttime="20170816 10:16:09.060" status="PASS" endtime="20170816 10:16:09.250"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:09.251" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170816 10:16:09.250" status="PASS" endtime="20170816 10:16:09.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170816 10:16:09.251" status="PASS" endtime="20170816 10:16:09.251"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:10.775" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170816 10:16:10.776" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:09.252" status="PASS" endtime="20170816 10:16:10.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170816 10:16:10.776" status="PASS" endtime="20170816 10:16:10.776"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:10.777" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:10.777" status="PASS" endtime="20170816 10:16:10.777"></status>
</kw>
<msg timestamp="20170816 10:16:10.777" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:09.059" status="PASS" endtime="20170816 10:16:10.777"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:10.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:10.778" status="PASS" endtime="20170816 10:16:10.778"></status>
</kw>
<msg timestamp="20170816 10:16:10.778" level="INFO">${status} = True</msg>
<status starttime="20170816 10:16:10.777" status="PASS" endtime="20170816 10:16:10.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170816 10:16:10.779" status="PASS" endtime="20170816 10:16:10.779"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170816 10:16:10.781" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:10.782" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170816 10:16:10.782" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status starttime="20170816 10:16:10.779" status="PASS" endtime="20170816 10:16:10.782"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:10.783" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_inventory.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:10.783" status="PASS" endtime="20170816 10:16:10.783"></status>
</kw>
<status starttime="20170816 10:16:10.782" status="PASS" endtime="20170816 10:16:10.784"></status>
</kw>
<status starttime="20170816 10:16:09.058" status="PASS" endtime="20170816 10:16:10.784"></status>
</kw>
<status starttime="20170816 10:16:07.496" status="PASS" endtime="20170816 10:16:10.784"></status>
</kw>
<status starttime="20170816 10:16:07.495" status="PASS" endtime="20170816 10:16:10.784"></status>
</kw>
<status starttime="20170816 10:16:07.495" status="PASS" endtime="20170816 10:16:10.784"></status>
</kw>
<status starttime="20170816 10:16:07.495" status="PASS" endtime="20170816 10:16:10.784"></status>
</kw>
<status starttime="20170816 10:16:07.494" status="PASS" endtime="20170816 10:16:10.784"></status>
</kw>
<status starttime="20170816 10:16:07.465" status="PASS" endtime="20170816 10:16:10.784"></status>
</kw>
<status starttime="20170816 10:16:07.463" status="PASS" endtime="20170816 10:16:10.784"></status>
</kw>
<status starttime="20170816 10:16:07.463" status="PASS" endtime="20170816 10:16:10.784"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170816 10:16:10.786" status="PASS" endtime="20170816 10:16:10.786"></status>
</kw>
<msg timestamp="20170816 10:16:10.786" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:10.786" level="INFO">${ret_values} = None</msg>
<status starttime="20170816 10:16:10.785" status="PASS" endtime="20170816 10:16:10.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170816 10:16:10.787" status="PASS" endtime="20170816 10:16:10.787"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170816 10:16:10.813" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170816 10:16:10.813" status="PASS" endtime="20170816 10:16:10.813"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170816 10:16:10.814" level="INFO">@{cmd_list} = [ ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ...</msg>
<status starttime="20170816 10:16:10.814" status="PASS" endtime="20170816 10:16:10.814"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 10:16:10.815" level="INFO">${logpath} = /tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_journalctl.txt</msg>
<status starttime="20170816 10:16:10.815" status="PASS" endtime="20170816 10:16:10.815"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170816 10:16:10.816" status="PASS" endtime="20170816 10:16:10.817"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:16:10.817" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status starttime="20170816 10:16:10.817" status="PASS" endtime="20170816 10:16:10.817"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 10:16:10.883" level="INFO">alias=bmc_connection
height=24
path_separator=/
port=22
prompt=# 
width=80
term_type=vt100
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
index=1</msg>
<msg timestamp="20170816 10:16:10.884" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170816 10:16:13.850" level="INFO">Command exited with return code 0.</msg>
<status starttime="20170816 10:16:10.848" status="PASS" endtime="20170816 10:16:13.851"></status>
</kw>
<msg timestamp="20170816 10:16:13.851" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:13.855" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:59:19 UTC. --\nAug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 15:42:59 witherspoon kernel: Linu...</msg>
<status starttime="20170816 10:16:10.818" status="PASS" endtime="20170816 10:16:13.855"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 10:16:13.857" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:59:19 UTC. --
Aug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 15:42:59 witherspoon kernel: Linux ver...</msg>
<status starttime="20170816 10:16:13.856" status="PASS" endtime="20170816 10:16:13.857"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 10:16:13.858" level="INFO">${stderr} = </msg>
<status starttime="20170816 10:16:13.857" status="PASS" endtime="20170816 10:16:13.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:13.870" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_journalctl.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:13.868" status="PASS" endtime="20170816 10:16:13.870"></status>
</kw>
<status starttime="20170816 10:16:13.866" status="PASS" endtime="20170816 10:16:13.870"></status>
</kw>
<status starttime="20170816 10:16:13.858" status="PASS" endtime="20170816 10:16:13.870"></status>
</kw>
<status starttime="20170816 10:16:10.815" status="PASS" endtime="20170816 10:16:13.870"></status>
</kw>
<status starttime="20170816 10:16:10.815" status="PASS" endtime="20170816 10:16:13.870"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 10:16:13.871" level="INFO">${logpath} = /tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_proc_list.txt</msg>
<status starttime="20170816 10:16:13.870" status="PASS" endtime="20170816 10:16:13.871"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170816 10:16:13.872" status="PASS" endtime="20170816 10:16:13.872"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:16:13.873" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status starttime="20170816 10:16:13.873" status="PASS" endtime="20170816 10:16:13.873"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 10:16:13.942" level="INFO">alias=bmc_connection
height=24
path_separator=/
port=22
prompt=# 
width=80
term_type=vt100
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
index=1</msg>
<msg timestamp="20170816 10:16:13.942" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170816 10:16:14.341" level="INFO">Command exited with return code 0.</msg>
<status starttime="20170816 10:16:13.906" status="PASS" endtime="20170816 10:16:14.342"></status>
</kw>
<msg timestamp="20170816 10:16:14.342" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:14.342" level="INFO">${ret_values} = (u'Mem: 184608K used, 247640K free, 14692K shrd, 16452K buff, 71780K cached\nCPU:  14% usr  14% sys   0% nic  71% idle   0% io   0% irq   0% sirq\nLoad average: 0.60 1.08 0.98 1/155 2976\n  PID  PPID ...</msg>
<status starttime="20170816 10:16:13.873" status="PASS" endtime="20170816 10:16:14.342"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 10:16:14.343" level="INFO">${stdout} = Mem: 184608K used, 247640K free, 14692K shrd, 16452K buff, 71780K cached
CPU:  14% usr  14% sys   0% nic  71% idle   0% io   0% irq   0% sirq
Load average: 0.60 1.08 0.98 1/155 2976
  PID  PPID USER  ...</msg>
<status starttime="20170816 10:16:14.342" status="PASS" endtime="20170816 10:16:14.343"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 10:16:14.343" level="INFO">${stderr} = </msg>
<status starttime="20170816 10:16:14.343" status="PASS" endtime="20170816 10:16:14.343"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:14.350" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_proc_list.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:14.349" status="PASS" endtime="20170816 10:16:14.350"></status>
</kw>
<status starttime="20170816 10:16:14.349" status="PASS" endtime="20170816 10:16:14.350"></status>
</kw>
<status starttime="20170816 10:16:14.344" status="PASS" endtime="20170816 10:16:14.350"></status>
</kw>
<status starttime="20170816 10:16:13.871" status="PASS" endtime="20170816 10:16:14.350"></status>
</kw>
<status starttime="20170816 10:16:13.870" status="PASS" endtime="20170816 10:16:14.350"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 10:16:14.351" level="INFO">${logpath} = /tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_dmesg.txt</msg>
<status starttime="20170816 10:16:14.351" status="PASS" endtime="20170816 10:16:14.351"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170816 10:16:14.352" status="PASS" endtime="20170816 10:16:14.353"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:16:14.353" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status starttime="20170816 10:16:14.353" status="PASS" endtime="20170816 10:16:14.353"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 10:16:14.420" level="INFO">alias=bmc_connection
height=24
path_separator=/
port=22
prompt=# 
width=80
term_type=vt100
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
index=1</msg>
<msg timestamp="20170816 10:16:14.421" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170816 10:16:14.488" level="INFO">Command exited with return code 0.</msg>
<status starttime="20170816 10:16:14.385" status="PASS" endtime="20170816 10:16:14.488"></status>
</kw>
<msg timestamp="20170816 10:16:14.488" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:14.488" level="INFO">${ret_values} = (u'[    0.000000] sched_clock: 32 bits at 100 Hz, resolution 10000000ns, wraps every 21474836475000000ns\n[    0.090000] Calibrating delay loop... 789.70 BogoMIPS (lpj=3948544)\n[    0.090000] pid_max...</msg>
<status starttime="20170816 10:16:14.354" status="PASS" endtime="20170816 10:16:14.488"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 10:16:14.489" level="INFO">${stdout} = [    0.000000] sched_clock: 32 bits at 100 Hz, resolution 10000000ns, wraps every 21474836475000000ns
[    0.090000] Calibrating delay loop... 789.70 BogoMIPS (lpj=3948544)
[    0.090000] pid_max: def...</msg>
<status starttime="20170816 10:16:14.488" status="PASS" endtime="20170816 10:16:14.489"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 10:16:14.489" level="INFO">${stderr} = </msg>
<status starttime="20170816 10:16:14.489" status="PASS" endtime="20170816 10:16:14.489"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:14.496" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_dmesg.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:14.496" status="PASS" endtime="20170816 10:16:14.496"></status>
</kw>
<status starttime="20170816 10:16:14.495" status="PASS" endtime="20170816 10:16:14.496"></status>
</kw>
<status starttime="20170816 10:16:14.490" status="PASS" endtime="20170816 10:16:14.496"></status>
</kw>
<status starttime="20170816 10:16:14.351" status="PASS" endtime="20170816 10:16:14.497"></status>
</kw>
<status starttime="20170816 10:16:14.351" status="PASS" endtime="20170816 10:16:14.497"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 10:16:14.497" level="INFO">${logpath} = /tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_procinfo.txt</msg>
<status starttime="20170816 10:16:14.497" status="PASS" endtime="20170816 10:16:14.497"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170816 10:16:14.498" status="PASS" endtime="20170816 10:16:14.499"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:16:14.499" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status starttime="20170816 10:16:14.499" status="PASS" endtime="20170816 10:16:14.499"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 10:16:14.566" level="INFO">alias=bmc_connection
height=24
path_separator=/
port=22
prompt=# 
width=80
term_type=vt100
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
index=1</msg>
<msg timestamp="20170816 10:16:14.567" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170816 10:16:14.614" level="INFO">Command exited with return code 0.</msg>
<status starttime="20170816 10:16:14.530" status="PASS" endtime="20170816 10:16:14.614"></status>
</kw>
<msg timestamp="20170816 10:16:14.614" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:14.614" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status starttime="20170816 10:16:14.500" status="PASS" endtime="20170816 10:16:14.614"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 10:16:14.615" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status starttime="20170816 10:16:14.614" status="PASS" endtime="20170816 10:16:14.615"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 10:16:14.615" level="INFO">${stderr} = </msg>
<status starttime="20170816 10:16:14.615" status="PASS" endtime="20170816 10:16:14.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:14.622" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_procinfo.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:14.622" status="PASS" endtime="20170816 10:16:14.622"></status>
</kw>
<status starttime="20170816 10:16:14.621" status="PASS" endtime="20170816 10:16:14.622"></status>
</kw>
<status starttime="20170816 10:16:14.616" status="PASS" endtime="20170816 10:16:14.622"></status>
</kw>
<status starttime="20170816 10:16:14.498" status="PASS" endtime="20170816 10:16:14.623"></status>
</kw>
<status starttime="20170816 10:16:14.497" status="PASS" endtime="20170816 10:16:14.623"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 10:16:14.623" level="INFO">${logpath} = /tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_proc_fd_active_list.txt</msg>
<status starttime="20170816 10:16:14.623" status="PASS" endtime="20170816 10:16:14.623"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170816 10:16:14.624" status="PASS" endtime="20170816 10:16:14.625"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:16:14.625" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status starttime="20170816 10:16:14.625" status="PASS" endtime="20170816 10:16:14.625"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 10:16:14.693" level="INFO">alias=bmc_connection
height=24
path_separator=/
port=22
prompt=# 
width=80
term_type=vt100
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
index=1</msg>
<msg timestamp="20170816 10:16:14.693" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170816 10:16:15.194" level="INFO">Command exited with return code 0.</msg>
<status starttime="20170816 10:16:14.657" status="PASS" endtime="20170816 10:16:15.194"></status>
</kw>
<msg timestamp="20170816 10:16:15.194" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:15.195" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 15:59 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 15:59 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status starttime="20170816 10:16:14.626" status="PASS" endtime="20170816 10:16:15.195"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 10:16:15.196" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 15:59 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 15:59 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status starttime="20170816 10:16:15.196" status="PASS" endtime="20170816 10:16:15.196"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 10:16:15.197" level="INFO">${stderr} = ls: /proc/2979/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status starttime="20170816 10:16:15.197" status="PASS" endtime="20170816 10:16:15.197"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:15.204" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:15.203" status="PASS" endtime="20170816 10:16:15.204"></status>
</kw>
<status starttime="20170816 10:16:15.202" status="PASS" endtime="20170816 10:16:15.204"></status>
</kw>
<status starttime="20170816 10:16:15.197" status="PASS" endtime="20170816 10:16:15.204"></status>
</kw>
<status starttime="20170816 10:16:14.624" status="PASS" endtime="20170816 10:16:15.204"></status>
</kw>
<status starttime="20170816 10:16:14.623" status="PASS" endtime="20170816 10:16:15.205"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 10:16:15.205" level="INFO">${logpath} = /tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_meminfo.txt</msg>
<status starttime="20170816 10:16:15.205" status="PASS" endtime="20170816 10:16:15.205"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170816 10:16:15.206" status="PASS" endtime="20170816 10:16:15.207"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:16:15.207" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status starttime="20170816 10:16:15.207" status="PASS" endtime="20170816 10:16:15.207"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 10:16:15.277" level="INFO">alias=bmc_connection
height=24
path_separator=/
port=22
prompt=# 
width=80
term_type=vt100
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
index=1</msg>
<msg timestamp="20170816 10:16:15.277" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170816 10:16:15.324" level="INFO">Command exited with return code 0.</msg>
<status starttime="20170816 10:16:15.239" status="PASS" endtime="20170816 10:16:15.324"></status>
</kw>
<msg timestamp="20170816 10:16:15.325" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:15.325" level="INFO">${ret_values} = (u'MemTotal:         432248 kB\nMemFree:          247516 kB\nMemAvailable:     319624 kB\nBuffers:           16452 kB\nCached:            71784 kB\nSwapCached:            0 kB\nActive:           12534...</msg>
<status starttime="20170816 10:16:15.208" status="PASS" endtime="20170816 10:16:15.325"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 10:16:15.325" level="INFO">${stdout} = MemTotal:         432248 kB
MemFree:          247516 kB
MemAvailable:     319624 kB
Buffers:           16452 kB
Cached:            71784 kB
SwapCached:            0 kB
Active:           125344 kB
Inac...</msg>
<status starttime="20170816 10:16:15.325" status="PASS" endtime="20170816 10:16:15.325"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 10:16:15.326" level="INFO">${stderr} = </msg>
<status starttime="20170816 10:16:15.326" status="PASS" endtime="20170816 10:16:15.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170816 10:16:15.333" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_meminfo.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:15.332" status="PASS" endtime="20170816 10:16:15.333"></status>
</kw>
<status starttime="20170816 10:16:15.331" status="PASS" endtime="20170816 10:16:15.333"></status>
</kw>
<status starttime="20170816 10:16:15.326" status="PASS" endtime="20170816 10:16:15.333"></status>
</kw>
<status starttime="20170816 10:16:15.206" status="PASS" endtime="20170816 10:16:15.333"></status>
</kw>
<status starttime="20170816 10:16:15.205" status="PASS" endtime="20170816 10:16:15.333"></status>
</kw>
<status starttime="20170816 10:16:10.814" status="PASS" endtime="20170816 10:16:15.333"></status>
</kw>
<status starttime="20170816 10:16:10.814" status="PASS" endtime="20170816 10:16:15.333"></status>
</kw>
<status starttime="20170816 10:16:10.813" status="PASS" endtime="20170816 10:16:15.333"></status>
</kw>
<status starttime="20170816 10:16:10.813" status="PASS" endtime="20170816 10:16:15.333"></status>
</kw>
<status starttime="20170816 10:16:10.812" status="PASS" endtime="20170816 10:16:15.333"></status>
</kw>
<status starttime="20170816 10:16:10.787" status="PASS" endtime="20170816 10:16:15.334"></status>
</kw>
<status starttime="20170816 10:16:10.785" status="PASS" endtime="20170816 10:16:15.334"></status>
</kw>
<status starttime="20170816 10:16:10.784" status="PASS" endtime="20170816 10:16:15.334"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170816 10:16:15.335" status="PASS" endtime="20170816 10:16:15.336"></status>
</kw>
<msg timestamp="20170816 10:16:15.336" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:15.336" level="INFO">${ret_values} = None</msg>
<status starttime="20170816 10:16:15.335" status="PASS" endtime="20170816 10:16:15.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170816 10:16:15.336" status="PASS" endtime="20170816 10:16:15.336"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170816 10:16:15.394" level="INFO">alias=bmc_connection
height=24
path_separator=/
port=22
prompt=# 
width=80
term_type=vt100
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
index=1</msg>
<msg timestamp="20170816 10:16:15.394" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170816 10:16:15.451" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170816 10:16:15.463" level="INFO">${core_files} = None</msg>
<msg timestamp="20170816 10:16:15.463" level="INFO">${stderr} = None</msg>
<msg timestamp="20170816 10:16:15.463" level="INFO">${rc} = None</msg>
<msg timestamp="20170816 10:16:15.463" level="FAIL">#(UTC) 2017/08/16 10:16:15.462073 -    0.068255 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status starttime="20170816 10:16:15.362" status="FAIL" endtime="20170816 10:16:15.463"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170816 10:16:15.464" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170816 10:16:15.464" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status starttime="20170816 10:16:15.464" status="FAIL" endtime="20170816 10:16:15.464"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170816 10:16:15.474" status="PASS" endtime="20170816 10:16:15.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170816 10:16:15.484" status="PASS" endtime="20170816 10:16:16.252"></status>
</kw>
<status starttime="20170816 10:16:15.483" status="PASS" endtime="20170816 10:16:16.252"></status>
</kw>
<status starttime="20170816 10:16:15.481" status="PASS" endtime="20170816 10:16:16.252"></status>
</kw>
<status starttime="20170816 10:16:15.474" status="PASS" endtime="20170816 10:16:16.252"></status>
</kw>
<status starttime="20170816 10:16:15.464" status="PASS" endtime="20170816 10:16:16.252"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status starttime="20170816 10:16:16.252" status="PASS" endtime="20170816 10:16:16.253"></status>
</kw>
<status starttime="20170816 10:16:15.362" status="FAIL" endtime="20170816 10:16:16.253"></status>
</kw>
<status starttime="20170816 10:16:15.337" status="PASS" endtime="20170816 10:16:16.253"></status>
</kw>
<status starttime="20170816 10:16:15.334" status="PASS" endtime="20170816 10:16:16.253"></status>
</kw>
<status starttime="20170816 10:16:15.334" status="PASS" endtime="20170816 10:16:16.253"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170816 10:16:16.255" status="PASS" endtime="20170816 10:16:16.255"></status>
</kw>
<msg timestamp="20170816 10:16:16.255" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:16.255" level="INFO">${ret_values} = None</msg>
<status starttime="20170816 10:16:16.254" status="PASS" endtime="20170816 10:16:16.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170816 10:16:16.256" status="PASS" endtime="20170816 10:16:16.256"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170816 10:16:16.283" level="INFO">Returning from the enclosing user keyword.</msg>
<status starttime="20170816 10:16:16.283" status="PASS" endtime="20170816 10:16:16.283"></status>
</kw>
<status starttime="20170816 10:16:16.282" status="PASS" endtime="20170816 10:16:16.284"></status>
</kw>
<status starttime="20170816 10:16:16.256" status="PASS" endtime="20170816 10:16:16.284"></status>
</kw>
<status starttime="20170816 10:16:16.253" status="PASS" endtime="20170816 10:16:16.284"></status>
</kw>
<status starttime="20170816 10:16:16.253" status="PASS" endtime="20170816 10:16:16.284"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170816 10:16:16.285" status="PASS" endtime="20170816 10:16:16.286"></status>
</kw>
<msg timestamp="20170816 10:16:16.286" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:16.286" level="INFO">${ret_values} = None</msg>
<status starttime="20170816 10:16:16.285" status="PASS" endtime="20170816 10:16:16.286"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170816 10:16:16.286" status="PASS" endtime="20170816 10:16:16.286"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:16.315" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:16.315" status="PASS" endtime="20170816 10:16:16.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:16.316" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:16.316" status="PASS" endtime="20170816 10:16:16.317"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:16.317" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:16.317" status="PASS" endtime="20170816 10:16:16.317"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:16.318" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:16.317" status="PASS" endtime="20170816 10:16:16.318"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:16.525" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:16.318" status="PASS" endtime="20170816 10:16:16.525"></status>
</kw>
<msg timestamp="20170816 10:16:16.525" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:16.525" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:16.318" status="PASS" endtime="20170816 10:16:16.525"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:16.526" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:16.525" status="PASS" endtime="20170816 10:16:16.526"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:16.526" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:16.526" status="PASS" endtime="20170816 10:16:16.526"></status>
</kw>
<status starttime="20170816 10:16:16.314" status="PASS" endtime="20170816 10:16:16.527"></status>
</kw>
<status starttime="20170816 10:16:16.314" status="PASS" endtime="20170816 10:16:16.527"></status>
</kw>
<status starttime="20170816 10:16:16.313" status="PASS" endtime="20170816 10:16:16.527"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:16.528" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170816 10:16:16.527" status="PASS" endtime="20170816 10:16:16.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170816 10:16:16.528" status="PASS" endtime="20170816 10:16:16.528"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:16.740" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170816 10:16:16.740" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:16.528" status="PASS" endtime="20170816 10:16:16.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170816 10:16:16.741" status="PASS" endtime="20170816 10:16:16.741"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:16.741" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:16.741" status="PASS" endtime="20170816 10:16:16.742"></status>
</kw>
<msg timestamp="20170816 10:16:16.742" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:16.313" status="PASS" endtime="20170816 10:16:16.742"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:16.743" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:16.742" status="PASS" endtime="20170816 10:16:16.743"></status>
</kw>
<msg timestamp="20170816 10:16:16.743" level="INFO">${status} = True</msg>
<status starttime="20170816 10:16:16.742" status="PASS" endtime="20170816 10:16:16.743"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status starttime="20170816 10:16:16.743" status="PASS" endtime="20170816 10:16:16.744"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:16:16.744" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775118902, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775427531, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775525499, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775622491, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775720575, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775799655, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:16.744" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:16:16.744" level="INFO">${content} = {u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Timestamp': 1501775118902, u'Id': 1, u'associations': [], u'Reso...</msg>
<status starttime="20170816 10:16:16.744" status="PASS" endtime="20170816 10:16:16.744"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170816 10:16:16.745" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/entr...</msg>
<status starttime="20170816 10:16:16.745" status="PASS" endtime="20170816 10:16:16.745"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 10:16:16.746" level="INFO">${logpath} = /tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_esel</msg>
<status starttime="20170816 10:16:16.745" status="PASS" endtime="20170816 10:16:16.746"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170816 10:16:16.746" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_esel"&gt;/tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/20170816101605057025_esel&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:16.746" status="PASS" endtime="20170816 10:16:16.746"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170816 10:16:16.747" status="PASS" endtime="20170816 10:16:16.748"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:16.753" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:16.752" status="PASS" endtime="20170816 10:16:16.753"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:16.754" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:16.753" status="PASS" endtime="20170816 10:16:16.754"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:16.755" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:16.754" status="PASS" endtime="20170816 10:16:16.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:16.756" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:16.755" status="PASS" endtime="20170816 10:16:16.756"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.009" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:16.757" status="PASS" endtime="20170816 10:16:17.009"></status>
</kw>
<msg timestamp="20170816 10:16:17.009" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:17.009" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:16.756" status="PASS" endtime="20170816 10:16:17.009"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.010" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:17.009" status="PASS" endtime="20170816 10:16:17.010"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.010" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:17.010" status="PASS" endtime="20170816 10:16:17.010"></status>
</kw>
<status starttime="20170816 10:16:16.751" status="PASS" endtime="20170816 10:16:17.011"></status>
</kw>
<status starttime="20170816 10:16:16.750" status="PASS" endtime="20170816 10:16:17.011"></status>
</kw>
<status starttime="20170816 10:16:16.749" status="PASS" endtime="20170816 10:16:17.011"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:17.011" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status starttime="20170816 10:16:17.011" status="PASS" endtime="20170816 10:16:17.011"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170816 10:16:17.012" status="PASS" endtime="20170816 10:16:17.012"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:17.102" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 10:16:17.102" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:17.012" status="PASS" endtime="20170816 10:16:17.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170816 10:16:17.103" status="PASS" endtime="20170816 10:16:17.103"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:17.103" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:17.103" status="PASS" endtime="20170816 10:16:17.104"></status>
</kw>
<msg timestamp="20170816 10:16:17.104" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:16.748" status="PASS" endtime="20170816 10:16:17.104"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.105" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:17.104" status="PASS" endtime="20170816 10:16:17.105"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:16:17.105" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:17.105" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:16:17.105" level="INFO">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status starttime="20170816 10:16:17.105" status="PASS" endtime="20170816 10:16:17.105"></status>
</kw>
<msg timestamp="20170816 10:16:17.106" level="INFO">${esel_data} = []</msg>
<status starttime="20170816 10:16:16.748" status="PASS" endtime="20170816 10:16:17.106"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 10:16:17.106" level="INFO">Length is 0</msg>
<msg timestamp="20170816 10:16:17.106" level="INFO">${length} = 0</msg>
<status starttime="20170816 10:16:17.106" status="PASS" endtime="20170816 10:16:17.106"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.107" level="INFO">Continuing for loop from the next iteration.</msg>
<status starttime="20170816 10:16:17.107" status="PASS" endtime="20170816 10:16:17.107"></status>
</kw>
<status starttime="20170816 10:16:16.747" status="PASS" endtime="20170816 10:16:17.107"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170816 10:16:17.107" status="PASS" endtime="20170816 10:16:17.108"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:17.112" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:17.111" status="PASS" endtime="20170816 10:16:17.112"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:17.113" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:17.112" status="PASS" endtime="20170816 10:16:17.113"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:17.113" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:17.113" status="PASS" endtime="20170816 10:16:17.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:17.114" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:17.113" status="PASS" endtime="20170816 10:16:17.114"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.306" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:17.115" status="PASS" endtime="20170816 10:16:17.306"></status>
</kw>
<msg timestamp="20170816 10:16:17.307" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:17.307" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:17.114" status="PASS" endtime="20170816 10:16:17.307"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.307" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:17.307" status="PASS" endtime="20170816 10:16:17.307"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.308" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:17.308" status="PASS" endtime="20170816 10:16:17.308"></status>
</kw>
<status starttime="20170816 10:16:17.111" status="PASS" endtime="20170816 10:16:17.308"></status>
</kw>
<status starttime="20170816 10:16:17.110" status="PASS" endtime="20170816 10:16:17.308"></status>
</kw>
<status starttime="20170816 10:16:17.109" status="PASS" endtime="20170816 10:16:17.308"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:17.309" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status starttime="20170816 10:16:17.309" status="PASS" endtime="20170816 10:16:17.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170816 10:16:17.309" status="PASS" endtime="20170816 10:16:17.310"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:17.406" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 10:16:17.406" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:17.310" status="PASS" endtime="20170816 10:16:17.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170816 10:16:17.407" status="PASS" endtime="20170816 10:16:17.407"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:17.407" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:17.407" status="PASS" endtime="20170816 10:16:17.407"></status>
</kw>
<msg timestamp="20170816 10:16:17.408" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:17.109" status="PASS" endtime="20170816 10:16:17.408"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:17.408" status="PASS" endtime="20170816 10:16:17.408"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:16:17.409" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:17.409" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:16:17.409" level="INFO">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status starttime="20170816 10:16:17.409" status="PASS" endtime="20170816 10:16:17.409"></status>
</kw>
<msg timestamp="20170816 10:16:17.409" level="INFO">${esel_data} = []</msg>
<status starttime="20170816 10:16:17.108" status="PASS" endtime="20170816 10:16:17.409"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 10:16:17.410" level="INFO">Length is 0</msg>
<msg timestamp="20170816 10:16:17.410" level="INFO">${length} = 0</msg>
<status starttime="20170816 10:16:17.410" status="PASS" endtime="20170816 10:16:17.410"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.411" level="INFO">Continuing for loop from the next iteration.</msg>
<status starttime="20170816 10:16:17.410" status="PASS" endtime="20170816 10:16:17.411"></status>
</kw>
<status starttime="20170816 10:16:17.107" status="PASS" endtime="20170816 10:16:17.411"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170816 10:16:17.411" status="PASS" endtime="20170816 10:16:17.412"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:17.415" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:17.415" status="PASS" endtime="20170816 10:16:17.416"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:17.416" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:17.416" status="PASS" endtime="20170816 10:16:17.416"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:17.417" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:17.417" status="PASS" endtime="20170816 10:16:17.417"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:17.418" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:17.418" status="PASS" endtime="20170816 10:16:17.418"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.618" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:17.419" status="PASS" endtime="20170816 10:16:17.618"></status>
</kw>
<msg timestamp="20170816 10:16:17.618" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:17.618" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:17.419" status="PASS" endtime="20170816 10:16:17.618"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.619" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:17.618" status="PASS" endtime="20170816 10:16:17.619"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.619" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:17.619" status="PASS" endtime="20170816 10:16:17.620"></status>
</kw>
<status starttime="20170816 10:16:17.414" status="PASS" endtime="20170816 10:16:17.620"></status>
</kw>
<status starttime="20170816 10:16:17.414" status="PASS" endtime="20170816 10:16:17.620"></status>
</kw>
<status starttime="20170816 10:16:17.413" status="PASS" endtime="20170816 10:16:17.620"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:17.621" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status starttime="20170816 10:16:17.620" status="PASS" endtime="20170816 10:16:17.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170816 10:16:17.621" status="PASS" endtime="20170816 10:16:17.622"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:17.706" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 10:16:17.706" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:17.622" status="PASS" endtime="20170816 10:16:17.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170816 10:16:17.707" status="PASS" endtime="20170816 10:16:17.707"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:17.707" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:17.707" status="PASS" endtime="20170816 10:16:17.708"></status>
</kw>
<msg timestamp="20170816 10:16:17.708" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:17.412" status="PASS" endtime="20170816 10:16:17.708"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.708" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:17.708" status="PASS" endtime="20170816 10:16:17.709"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:16:17.709" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:17.709" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:16:17.709" level="INFO">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status starttime="20170816 10:16:17.709" status="PASS" endtime="20170816 10:16:17.709"></status>
</kw>
<msg timestamp="20170816 10:16:17.709" level="INFO">${esel_data} = []</msg>
<status starttime="20170816 10:16:17.412" status="PASS" endtime="20170816 10:16:17.710"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 10:16:17.710" level="INFO">Length is 0</msg>
<msg timestamp="20170816 10:16:17.710" level="INFO">${length} = 0</msg>
<status starttime="20170816 10:16:17.710" status="PASS" endtime="20170816 10:16:17.710"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.711" level="INFO">Continuing for loop from the next iteration.</msg>
<status starttime="20170816 10:16:17.710" status="PASS" endtime="20170816 10:16:17.711"></status>
</kw>
<status starttime="20170816 10:16:17.411" status="PASS" endtime="20170816 10:16:17.711"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170816 10:16:17.711" status="PASS" endtime="20170816 10:16:17.712"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:17.717" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:17.717" status="PASS" endtime="20170816 10:16:17.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:17.718" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:17.718" status="PASS" endtime="20170816 10:16:17.718"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:17.719" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:17.719" status="PASS" endtime="20170816 10:16:17.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:17.720" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:17.719" status="PASS" endtime="20170816 10:16:17.720"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.916" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:17.721" status="PASS" endtime="20170816 10:16:17.916"></status>
</kw>
<msg timestamp="20170816 10:16:17.916" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:17.917" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:17.720" status="PASS" endtime="20170816 10:16:17.917"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.917" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:17.917" status="PASS" endtime="20170816 10:16:17.917"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:17.918" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:17.918" status="PASS" endtime="20170816 10:16:17.918"></status>
</kw>
<status starttime="20170816 10:16:17.716" status="PASS" endtime="20170816 10:16:17.918"></status>
</kw>
<status starttime="20170816 10:16:17.716" status="PASS" endtime="20170816 10:16:17.918"></status>
</kw>
<status starttime="20170816 10:16:17.713" status="PASS" endtime="20170816 10:16:17.918"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:17.919" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status starttime="20170816 10:16:17.919" status="PASS" endtime="20170816 10:16:17.919"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170816 10:16:17.919" status="PASS" endtime="20170816 10:16:17.920"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:18.018" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 10:16:18.018" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:17.920" status="PASS" endtime="20170816 10:16:18.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170816 10:16:18.018" status="PASS" endtime="20170816 10:16:18.018"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:18.019" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:18.019" status="PASS" endtime="20170816 10:16:18.019"></status>
</kw>
<msg timestamp="20170816 10:16:18.019" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:17.713" status="PASS" endtime="20170816 10:16:18.019"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:18.020" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:18.019" status="PASS" endtime="20170816 10:16:18.020"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:16:18.020" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:18.020" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:16:18.021" level="INFO">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status starttime="20170816 10:16:18.020" status="PASS" endtime="20170816 10:16:18.021"></status>
</kw>
<msg timestamp="20170816 10:16:18.021" level="INFO">${esel_data} = []</msg>
<status starttime="20170816 10:16:17.712" status="PASS" endtime="20170816 10:16:18.021"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 10:16:18.021" level="INFO">Length is 0</msg>
<msg timestamp="20170816 10:16:18.021" level="INFO">${length} = 0</msg>
<status starttime="20170816 10:16:18.021" status="PASS" endtime="20170816 10:16:18.022"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 10:16:18.022" level="INFO">Continuing for loop from the next iteration.</msg>
<status starttime="20170816 10:16:18.022" status="PASS" endtime="20170816 10:16:18.022"></status>
</kw>
<status starttime="20170816 10:16:17.711" status="PASS" endtime="20170816 10:16:18.022"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170816 10:16:18.023" status="PASS" endtime="20170816 10:16:18.023"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:18.028" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:18.028" status="PASS" endtime="20170816 10:16:18.029"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:18.030" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:18.029" status="PASS" endtime="20170816 10:16:18.030"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:18.031" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:18.030" status="PASS" endtime="20170816 10:16:18.031"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:18.032" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:18.031" status="PASS" endtime="20170816 10:16:18.032"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:18.297" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:18.033" status="PASS" endtime="20170816 10:16:18.298"></status>
</kw>
<msg timestamp="20170816 10:16:18.298" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:18.298" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:18.032" status="PASS" endtime="20170816 10:16:18.298"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:18.298" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:18.298" status="PASS" endtime="20170816 10:16:18.299"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:18.299" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:18.299" status="PASS" endtime="20170816 10:16:18.299"></status>
</kw>
<status starttime="20170816 10:16:18.027" status="PASS" endtime="20170816 10:16:18.299"></status>
</kw>
<status starttime="20170816 10:16:18.026" status="PASS" endtime="20170816 10:16:18.299"></status>
</kw>
<status starttime="20170816 10:16:18.025" status="PASS" endtime="20170816 10:16:18.300"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:18.300" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status starttime="20170816 10:16:18.300" status="PASS" endtime="20170816 10:16:18.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170816 10:16:18.301" status="PASS" endtime="20170816 10:16:18.301"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:18.394" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 10:16:18.394" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:18.301" status="PASS" endtime="20170816 10:16:18.394"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170816 10:16:18.394" status="PASS" endtime="20170816 10:16:18.395"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:18.395" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:18.395" status="PASS" endtime="20170816 10:16:18.395"></status>
</kw>
<msg timestamp="20170816 10:16:18.395" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:18.024" status="PASS" endtime="20170816 10:16:18.395"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:18.396" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:18.395" status="PASS" endtime="20170816 10:16:18.396"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:16:18.396" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:18.397" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:16:18.397" level="INFO">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status starttime="20170816 10:16:18.396" status="PASS" endtime="20170816 10:16:18.397"></status>
</kw>
<msg timestamp="20170816 10:16:18.397" level="INFO">${esel_data} = []</msg>
<status starttime="20170816 10:16:18.023" status="PASS" endtime="20170816 10:16:18.397"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 10:16:18.398" level="INFO">Length is 0</msg>
<msg timestamp="20170816 10:16:18.398" level="INFO">${length} = 0</msg>
<status starttime="20170816 10:16:18.397" status="PASS" endtime="20170816 10:16:18.398"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 10:16:18.398" level="INFO">Continuing for loop from the next iteration.</msg>
<status starttime="20170816 10:16:18.398" status="PASS" endtime="20170816 10:16:18.398"></status>
</kw>
<status starttime="20170816 10:16:18.022" status="PASS" endtime="20170816 10:16:18.398"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/6">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170816 10:16:18.399" status="PASS" endtime="20170816 10:16:18.399"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:18.403" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:18.403" status="PASS" endtime="20170816 10:16:18.403"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:18.404" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:18.404" status="PASS" endtime="20170816 10:16:18.404"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:18.405" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:18.404" status="PASS" endtime="20170816 10:16:18.405"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:18.405" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:18.405" status="PASS" endtime="20170816 10:16:18.405"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:18.628" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:18.406" status="PASS" endtime="20170816 10:16:18.628"></status>
</kw>
<msg timestamp="20170816 10:16:18.628" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:18.629" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:18.405" status="PASS" endtime="20170816 10:16:18.629"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:18.629" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:18.629" status="PASS" endtime="20170816 10:16:18.629"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:18.630" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:18.630" status="PASS" endtime="20170816 10:16:18.630"></status>
</kw>
<status starttime="20170816 10:16:18.402" status="PASS" endtime="20170816 10:16:18.630"></status>
</kw>
<status starttime="20170816 10:16:18.402" status="PASS" endtime="20170816 10:16:18.630"></status>
</kw>
<status starttime="20170816 10:16:18.401" status="PASS" endtime="20170816 10:16:18.630"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:18.631" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status starttime="20170816 10:16:18.631" status="PASS" endtime="20170816 10:16:18.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170816 10:16:18.631" status="PASS" endtime="20170816 10:16:18.632"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:18.712" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 10:16:18.712" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:18.632" status="PASS" endtime="20170816 10:16:18.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170816 10:16:18.712" status="PASS" endtime="20170816 10:16:18.713"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:18.713" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:18.713" status="PASS" endtime="20170816 10:16:18.713"></status>
</kw>
<msg timestamp="20170816 10:16:18.713" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:18.400" status="PASS" endtime="20170816 10:16:18.713"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:18.714" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:18.714" status="PASS" endtime="20170816 10:16:18.714"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:16:18.715" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:18.715" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:16:18.715" level="INFO">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status starttime="20170816 10:16:18.714" status="PASS" endtime="20170816 10:16:18.715"></status>
</kw>
<msg timestamp="20170816 10:16:18.715" level="INFO">${esel_data} = []</msg>
<status starttime="20170816 10:16:18.399" status="PASS" endtime="20170816 10:16:18.715"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 10:16:18.716" level="INFO">Length is 0</msg>
<msg timestamp="20170816 10:16:18.716" level="INFO">${length} = 0</msg>
<status starttime="20170816 10:16:18.715" status="PASS" endtime="20170816 10:16:18.716"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 10:16:18.716" level="INFO">Continuing for loop from the next iteration.</msg>
<status starttime="20170816 10:16:18.716" status="PASS" endtime="20170816 10:16:18.716"></status>
</kw>
<status starttime="20170816 10:16:18.399" status="PASS" endtime="20170816 10:16:18.717"></status>
</kw>
<status starttime="20170816 10:16:16.747" status="PASS" endtime="20170816 10:16:18.717"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170816 10:16:18.721" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 10:16:18.724" level="INFO">${out} = </msg>
<status starttime="20170816 10:16:18.717" status="PASS" endtime="20170816 10:16:18.724"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170816 10:16:18.729" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status starttime="20170816 10:16:18.728" status="FAIL" endtime="20170816 10:16:18.729"></status>
</kw>
<msg timestamp="20170816 10:16:18.729" level="INFO">${status} = False</msg>
<status starttime="20170816 10:16:18.727" status="PASS" endtime="20170816 10:16:18.729"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170816 10:16:18.729" level="INFO">Returning from the enclosing user keyword.</msg>
<status starttime="20170816 10:16:18.729" status="PASS" endtime="20170816 10:16:18.730"></status>
</kw>
<status starttime="20170816 10:16:16.312" status="PASS" endtime="20170816 10:16:18.730"></status>
</kw>
<status starttime="20170816 10:16:16.287" status="PASS" endtime="20170816 10:16:18.730"></status>
</kw>
<status starttime="20170816 10:16:16.284" status="PASS" endtime="20170816 10:16:18.731"></status>
</kw>
<status starttime="20170816 10:16:16.284" status="PASS" endtime="20170816 10:16:18.731"></status>
</kw>
<status starttime="20170816 10:16:05.280" status="PASS" endtime="20170816 10:16:18.731"></status>
</kw>
<status starttime="20170816 10:16:05.278" status="PASS" endtime="20170816 10:16:18.731"></status>
</kw>
<status starttime="20170816 10:16:05.277" status="PASS" endtime="20170816 10:16:18.731"></status>
</kw>
<status starttime="20170816 10:16:05.277" status="PASS" endtime="20170816 10:16:18.731"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status starttime="20170816 10:16:18.740" status="PASS" endtime="20170816 10:16:18.740"></status>
</kw>
<status starttime="20170816 10:16:18.731" status="PASS" endtime="20170816 10:16:18.740"></status>
</kw>
<status starttime="20170816 10:16:05.276" status="PASS" endtime="20170816 10:16:18.740"></status>
</kw>
<status starttime="20170816 10:16:02.003" status="PASS" endtime="20170816 10:16:18.741"></status>
</kw>
<status starttime="20170816 10:16:02.003" status="PASS" endtime="20170816 10:16:18.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw name="Recover Quiesced Host" library="state_manager">
<doc>Recover host from quisced state.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:18.748" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:18.748" status="PASS" endtime="20170816 10:16:18.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:18.750" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:18.749" status="PASS" endtime="20170816 10:16:18.750"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:18.750" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:18.750" status="PASS" endtime="20170816 10:16:18.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:18.751" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:18.751" status="PASS" endtime="20170816 10:16:18.751"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:18.936" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:18.752" status="PASS" endtime="20170816 10:16:18.936"></status>
</kw>
<msg timestamp="20170816 10:16:18.937" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:18.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:18.751" status="PASS" endtime="20170816 10:16:18.937"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:18.937" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:18.937" status="PASS" endtime="20170816 10:16:18.937"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:18.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:18.938" status="PASS" endtime="20170816 10:16:18.938"></status>
</kw>
<status starttime="20170816 10:16:18.748" status="PASS" endtime="20170816 10:16:18.938"></status>
</kw>
<status starttime="20170816 10:16:18.747" status="PASS" endtime="20170816 10:16:18.938"></status>
</kw>
<status starttime="20170816 10:16:18.746" status="PASS" endtime="20170816 10:16:18.938"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:18.939" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:16:18.939" status="PASS" endtime="20170816 10:16:18.939"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:18.941" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:16:18.940" status="PASS" endtime="20170816 10:16:18.941"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:18.942" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:16:18.942" status="PASS" endtime="20170816 10:16:18.943"></status>
</kw>
<status starttime="20170816 10:16:18.941" status="PASS" endtime="20170816 10:16:18.943"></status>
</kw>
<status starttime="20170816 10:16:18.940" status="PASS" endtime="20170816 10:16:18.943"></status>
</kw>
<status starttime="20170816 10:16:18.939" status="PASS" endtime="20170816 10:16:18.943"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:19.031" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:16:19.031" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:18.943" status="PASS" endtime="20170816 10:16:19.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:19.033" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:19.033" status="PASS" endtime="20170816 10:16:19.033"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:19.034" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:19.034" status="PASS" endtime="20170816 10:16:19.034"></status>
</kw>
<status starttime="20170816 10:16:19.033" status="PASS" endtime="20170816 10:16:19.035"></status>
</kw>
<status starttime="20170816 10:16:19.032" status="PASS" endtime="20170816 10:16:19.035"></status>
</kw>
<status starttime="20170816 10:16:19.032" status="PASS" endtime="20170816 10:16:19.035"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:19.035" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:19.035" status="PASS" endtime="20170816 10:16:19.035"></status>
</kw>
<msg timestamp="20170816 10:16:19.036" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:18.745" status="PASS" endtime="20170816 10:16:19.036"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:19.036" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:19.036" status="PASS" endtime="20170816 10:16:19.037"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:16:19.037" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:19.037" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:16:19.038" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:16:19.037" status="PASS" endtime="20170816 10:16:19.038"></status>
</kw>
<msg timestamp="20170816 10:16:19.038" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:16:18.745" status="PASS" endtime="20170816 10:16:19.038"></status>
</kw>
<msg timestamp="20170816 10:16:19.038" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:16:18.743" status="PASS" endtime="20170816 10:16:19.039"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status starttime="20170816 10:16:19.039" status="PASS" endtime="20170816 10:16:19.040"></status>
</kw>
<msg timestamp="20170816 10:16:19.040" level="INFO">${status} = True</msg>
<status starttime="20170816 10:16:19.039" status="PASS" endtime="20170816 10:16:19.040"></status>
</kw>
<status starttime="20170816 10:16:18.743" status="PASS" endtime="20170816 10:16:19.040"></status>
</kw>
<msg timestamp="20170816 10:16:19.040" level="INFO">${resp} = True</msg>
<status starttime="20170816 10:16:18.742" status="PASS" endtime="20170816 10:16:19.041"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170816 10:16:19.043" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170816 10:16:19.043" status="PASS" endtime="20170816 10:16:19.043"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:19.045" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170816 10:16:19.045" status="PASS" endtime="20170816 10:16:19.045"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:19.049" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:19.049" status="PASS" endtime="20170816 10:16:19.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:19.050" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:19.050" status="PASS" endtime="20170816 10:16:19.051"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:19.051" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:19.051" status="PASS" endtime="20170816 10:16:19.051"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:19.052" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:19.052" status="PASS" endtime="20170816 10:16:19.052"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:19.284" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:19.053" status="PASS" endtime="20170816 10:16:19.284"></status>
</kw>
<msg timestamp="20170816 10:16:19.284" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:19.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:19.053" status="PASS" endtime="20170816 10:16:19.284"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:19.285" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:19.285" status="PASS" endtime="20170816 10:16:19.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:19.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:19.285" status="PASS" endtime="20170816 10:16:19.286"></status>
</kw>
<status starttime="20170816 10:16:19.048" status="PASS" endtime="20170816 10:16:19.286"></status>
</kw>
<status starttime="20170816 10:16:19.047" status="PASS" endtime="20170816 10:16:19.286"></status>
</kw>
<status starttime="20170816 10:16:19.046" status="PASS" endtime="20170816 10:16:19.286"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:19.287" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170816 10:16:19.287" status="PASS" endtime="20170816 10:16:19.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:19.288" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:19.288" status="PASS" endtime="20170816 10:16:19.288"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170816 10:16:19.288" status="PASS" endtime="20170816 10:16:19.289"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:19.291" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170816 10:16:19.290" status="PASS" endtime="20170816 10:16:19.291"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:19.292" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170816 10:16:19.292" status="PASS" endtime="20170816 10:16:19.293"></status>
</kw>
<status starttime="20170816 10:16:19.291" status="PASS" endtime="20170816 10:16:19.293"></status>
</kw>
<status starttime="20170816 10:16:19.289" status="PASS" endtime="20170816 10:16:19.293"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:19.640" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170816 10:16:19.640" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:19.293" status="PASS" endtime="20170816 10:16:19.640"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:19.642" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:19.641" status="PASS" endtime="20170816 10:16:19.642"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:19.643" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:19.642" status="PASS" endtime="20170816 10:16:19.643"></status>
</kw>
<status starttime="20170816 10:16:19.642" status="PASS" endtime="20170816 10:16:19.643"></status>
</kw>
<status starttime="20170816 10:16:19.640" status="PASS" endtime="20170816 10:16:19.643"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:19.643" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:19.643" status="PASS" endtime="20170816 10:16:19.644"></status>
</kw>
<msg timestamp="20170816 10:16:19.644" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:19.045" status="PASS" endtime="20170816 10:16:19.644"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:19.644" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:19.644" status="PASS" endtime="20170816 10:16:19.644"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170816 10:16:19.645" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:19.645" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:16:19.645" level="INFO">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status starttime="20170816 10:16:19.645" status="PASS" endtime="20170816 10:16:19.645"></status>
</kw>
<status starttime="20170816 10:16:19.044" status="PASS" endtime="20170816 10:16:19.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170816 10:16:19.646" status="PASS" endtime="20170816 10:16:19.646"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:19.651" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:19.651" status="PASS" endtime="20170816 10:16:19.651"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:19.652" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:19.652" status="PASS" endtime="20170816 10:16:19.652"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:19.653" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:19.653" status="PASS" endtime="20170816 10:16:19.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:19.654" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:19.654" status="PASS" endtime="20170816 10:16:19.654"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:21.080" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:19.656" status="PASS" endtime="20170816 10:16:21.080"></status>
</kw>
<msg timestamp="20170816 10:16:21.081" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:21.081" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:19.655" status="PASS" endtime="20170816 10:16:21.081"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:21.081" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:21.081" status="PASS" endtime="20170816 10:16:21.081"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:21.082" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:21.082" status="PASS" endtime="20170816 10:16:21.082"></status>
</kw>
<status starttime="20170816 10:16:19.650" status="PASS" endtime="20170816 10:16:21.082"></status>
</kw>
<status starttime="20170816 10:16:19.650" status="PASS" endtime="20170816 10:16:21.082"></status>
</kw>
<status starttime="20170816 10:16:19.649" status="PASS" endtime="20170816 10:16:21.082"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:21.083" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:16:21.083" status="PASS" endtime="20170816 10:16:21.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:21.085" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:16:21.085" status="PASS" endtime="20170816 10:16:21.085"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:21.086" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:16:21.086" status="PASS" endtime="20170816 10:16:21.087"></status>
</kw>
<status starttime="20170816 10:16:21.085" status="PASS" endtime="20170816 10:16:21.087"></status>
</kw>
<status starttime="20170816 10:16:21.084" status="PASS" endtime="20170816 10:16:21.087"></status>
</kw>
<status starttime="20170816 10:16:21.083" status="PASS" endtime="20170816 10:16:21.087"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:26.389" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:16:26.390" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:21.087" status="PASS" endtime="20170816 10:16:26.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:26.392" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:26.391" status="PASS" endtime="20170816 10:16:26.392"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:26.393" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:26.393" status="PASS" endtime="20170816 10:16:26.393"></status>
</kw>
<status starttime="20170816 10:16:26.392" status="PASS" endtime="20170816 10:16:26.393"></status>
</kw>
<status starttime="20170816 10:16:26.391" status="PASS" endtime="20170816 10:16:26.393"></status>
</kw>
<status starttime="20170816 10:16:26.390" status="PASS" endtime="20170816 10:16:26.393"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:26.394" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:26.394" status="PASS" endtime="20170816 10:16:26.394"></status>
</kw>
<msg timestamp="20170816 10:16:26.394" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:19.649" status="PASS" endtime="20170816 10:16:26.394"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:26.395" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:26.394" status="PASS" endtime="20170816 10:16:26.395"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:16:26.395" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:26.395" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:16:26.395" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:16:26.395" status="PASS" endtime="20170816 10:16:26.395"></status>
</kw>
<msg timestamp="20170816 10:16:26.396" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170816 10:16:19.648" status="PASS" endtime="20170816 10:16:26.396"></status>
</kw>
<msg timestamp="20170816 10:16:26.396" level="INFO">${power_state} = On</msg>
<status starttime="20170816 10:16:19.647" status="PASS" endtime="20170816 10:16:26.396"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 10:16:26.397" level="FAIL">Off != On</msg>
<status starttime="20170816 10:16:26.396" status="FAIL" endtime="20170816 10:16:26.397"></status>
</kw>
<status starttime="20170816 10:16:19.647" status="FAIL" endtime="20170816 10:16:26.397"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:26.401" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:26.400" status="PASS" endtime="20170816 10:16:26.401"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:26.402" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:26.401" status="PASS" endtime="20170816 10:16:26.402"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:26.403" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:26.402" status="PASS" endtime="20170816 10:16:26.403"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:26.404" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:26.403" status="PASS" endtime="20170816 10:16:26.404"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:26.583" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:26.405" status="PASS" endtime="20170816 10:16:26.583"></status>
</kw>
<msg timestamp="20170816 10:16:26.583" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:26.583" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:26.404" status="PASS" endtime="20170816 10:16:26.583"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:26.584" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:26.583" status="PASS" endtime="20170816 10:16:26.584"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:26.584" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:26.584" status="PASS" endtime="20170816 10:16:26.584"></status>
</kw>
<status starttime="20170816 10:16:26.400" status="PASS" endtime="20170816 10:16:26.585"></status>
</kw>
<status starttime="20170816 10:16:26.399" status="PASS" endtime="20170816 10:16:26.585"></status>
</kw>
<status starttime="20170816 10:16:26.399" status="PASS" endtime="20170816 10:16:26.585"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:26.585" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:16:26.585" status="PASS" endtime="20170816 10:16:26.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:26.587" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:16:26.587" status="PASS" endtime="20170816 10:16:26.587"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:26.588" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:16:26.588" status="PASS" endtime="20170816 10:16:26.588"></status>
</kw>
<status starttime="20170816 10:16:26.588" status="PASS" endtime="20170816 10:16:26.589"></status>
</kw>
<status starttime="20170816 10:16:26.586" status="PASS" endtime="20170816 10:16:26.589"></status>
</kw>
<status starttime="20170816 10:16:26.586" status="PASS" endtime="20170816 10:16:26.589"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:27.365" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:16:27.365" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:26.589" status="PASS" endtime="20170816 10:16:27.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:27.368" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:27.367" status="PASS" endtime="20170816 10:16:27.368"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:27.369" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:27.369" status="PASS" endtime="20170816 10:16:27.369"></status>
</kw>
<status starttime="20170816 10:16:27.368" status="PASS" endtime="20170816 10:16:27.369"></status>
</kw>
<status starttime="20170816 10:16:27.366" status="PASS" endtime="20170816 10:16:27.369"></status>
</kw>
<status starttime="20170816 10:16:27.366" status="PASS" endtime="20170816 10:16:27.370"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:27.370" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:27.370" status="PASS" endtime="20170816 10:16:27.370"></status>
</kw>
<msg timestamp="20170816 10:16:27.370" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:26.398" status="PASS" endtime="20170816 10:16:27.370"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:27.371" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:27.371" status="PASS" endtime="20170816 10:16:27.371"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:16:27.372" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:27.372" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:16:27.372" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:16:27.371" status="PASS" endtime="20170816 10:16:27.372"></status>
</kw>
<msg timestamp="20170816 10:16:27.372" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170816 10:16:26.398" status="PASS" endtime="20170816 10:16:27.372"></status>
</kw>
<msg timestamp="20170816 10:16:27.373" level="INFO">${host_state} = Quiesced</msg>
<status starttime="20170816 10:16:26.397" status="PASS" endtime="20170816 10:16:27.373"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 10:16:27.374" level="FAIL">Off != Quiesced</msg>
<status starttime="20170816 10:16:27.373" status="FAIL" endtime="20170816 10:16:27.374"></status>
</kw>
<status starttime="20170816 10:16:19.647" status="FAIL" endtime="20170816 10:16:27.374"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:37.380" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:37.380" status="PASS" endtime="20170816 10:16:37.380"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:37.381" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:37.381" status="PASS" endtime="20170816 10:16:37.381"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:37.382" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:37.381" status="PASS" endtime="20170816 10:16:37.382"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:37.383" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:37.382" status="PASS" endtime="20170816 10:16:37.383"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:37.574" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:37.384" status="PASS" endtime="20170816 10:16:37.574"></status>
</kw>
<msg timestamp="20170816 10:16:37.575" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:37.575" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:37.383" status="PASS" endtime="20170816 10:16:37.575"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:37.575" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:37.575" status="PASS" endtime="20170816 10:16:37.575"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:37.576" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:37.576" status="PASS" endtime="20170816 10:16:37.576"></status>
</kw>
<status starttime="20170816 10:16:37.378" status="PASS" endtime="20170816 10:16:37.576"></status>
</kw>
<status starttime="20170816 10:16:37.378" status="PASS" endtime="20170816 10:16:37.576"></status>
</kw>
<status starttime="20170816 10:16:37.377" status="PASS" endtime="20170816 10:16:37.577"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:37.577" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170816 10:16:37.577" status="PASS" endtime="20170816 10:16:37.577"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:37.579" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:16:37.579" status="PASS" endtime="20170816 10:16:37.579"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:37.580" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170816 10:16:37.580" status="PASS" endtime="20170816 10:16:37.580"></status>
</kw>
<status starttime="20170816 10:16:37.579" status="PASS" endtime="20170816 10:16:37.580"></status>
</kw>
<status starttime="20170816 10:16:37.578" status="PASS" endtime="20170816 10:16:37.581"></status>
</kw>
<status starttime="20170816 10:16:37.577" status="PASS" endtime="20170816 10:16:37.581"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:37.644" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 10:16:37.644" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:37.581" status="PASS" endtime="20170816 10:16:37.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:37.646" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:37.645" status="PASS" endtime="20170816 10:16:37.646"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:37.647" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:37.647" status="PASS" endtime="20170816 10:16:37.647"></status>
</kw>
<status starttime="20170816 10:16:37.646" status="PASS" endtime="20170816 10:16:37.647"></status>
</kw>
<status starttime="20170816 10:16:37.645" status="PASS" endtime="20170816 10:16:37.648"></status>
</kw>
<status starttime="20170816 10:16:37.645" status="PASS" endtime="20170816 10:16:37.648"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:37.648" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:37.648" status="PASS" endtime="20170816 10:16:37.648"></status>
</kw>
<msg timestamp="20170816 10:16:37.648" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:37.377" status="PASS" endtime="20170816 10:16:37.648"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:37.649" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:37.649" status="PASS" endtime="20170816 10:16:37.649"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:16:37.650" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:37.650" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:16:37.650" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:16:37.649" status="PASS" endtime="20170816 10:16:37.650"></status>
</kw>
<msg timestamp="20170816 10:16:37.650" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170816 10:16:37.376" status="PASS" endtime="20170816 10:16:37.650"></status>
</kw>
<msg timestamp="20170816 10:16:37.650" level="INFO">${power_state} = Off</msg>
<status starttime="20170816 10:16:37.376" status="PASS" endtime="20170816 10:16:37.650"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170816 10:16:37.651" status="PASS" endtime="20170816 10:16:37.651"></status>
</kw>
<status starttime="20170816 10:16:37.375" status="PASS" endtime="20170816 10:16:37.651"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 10:16:37.655" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170816 10:16:37.655" status="PASS" endtime="20170816 10:16:37.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 10:16:37.656" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170816 10:16:37.656" status="PASS" endtime="20170816 10:16:37.656"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 10:16:37.657" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170816 10:16:37.656" status="PASS" endtime="20170816 10:16:37.657"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 10:16:37.657" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170816 10:16:37.657" status="PASS" endtime="20170816 10:16:37.657"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 10:16:37.860" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170816 10:16:37.658" status="PASS" endtime="20170816 10:16:37.860"></status>
</kw>
<msg timestamp="20170816 10:16:37.861" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 10:16:37.861" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:37.658" status="PASS" endtime="20170816 10:16:37.861"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 10:16:37.862" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:37.861" status="PASS" endtime="20170816 10:16:37.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:37.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:37.862" status="PASS" endtime="20170816 10:16:37.863"></status>
</kw>
<status starttime="20170816 10:16:37.654" status="PASS" endtime="20170816 10:16:37.863"></status>
</kw>
<status starttime="20170816 10:16:37.654" status="PASS" endtime="20170816 10:16:37.863"></status>
</kw>
<status starttime="20170816 10:16:37.653" status="PASS" endtime="20170816 10:16:37.863"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 10:16:37.864" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170816 10:16:37.864" status="PASS" endtime="20170816 10:16:37.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:37.868" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:16:37.866" status="PASS" endtime="20170816 10:16:37.868"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:37.869" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170816 10:16:37.869" status="PASS" endtime="20170816 10:16:37.869"></status>
</kw>
<status starttime="20170816 10:16:37.868" status="PASS" endtime="20170816 10:16:37.869"></status>
</kw>
<status starttime="20170816 10:16:37.865" status="PASS" endtime="20170816 10:16:37.869"></status>
</kw>
<status starttime="20170816 10:16:37.865" status="PASS" endtime="20170816 10:16:37.870"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 10:16:37.977" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 10:16:37.977" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:37.870" status="PASS" endtime="20170816 10:16:37.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 10:16:37.979" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:37.978" status="PASS" endtime="20170816 10:16:37.979"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 10:16:37.980" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170816 10:16:37.979" status="PASS" endtime="20170816 10:16:37.980"></status>
</kw>
<status starttime="20170816 10:16:37.979" status="PASS" endtime="20170816 10:16:37.980"></status>
</kw>
<status starttime="20170816 10:16:37.978" status="PASS" endtime="20170816 10:16:37.980"></status>
</kw>
<status starttime="20170816 10:16:37.977" status="PASS" endtime="20170816 10:16:37.980"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 10:16:37.980" level="INFO">Delete All Sessions</msg>
<status starttime="20170816 10:16:37.980" status="PASS" endtime="20170816 10:16:37.981"></status>
</kw>
<msg timestamp="20170816 10:16:37.981" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170816 10:16:37.652" status="PASS" endtime="20170816 10:16:37.981"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 10:16:37.981" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170816 10:16:37.981" status="PASS" endtime="20170816 10:16:37.982"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 10:16:37.982" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 10:16:37.982" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 10:16:37.982" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status starttime="20170816 10:16:37.982" status="PASS" endtime="20170816 10:16:37.982"></status>
</kw>
<msg timestamp="20170816 10:16:37.983" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170816 10:16:37.652" status="PASS" endtime="20170816 10:16:37.983"></status>
</kw>
<msg timestamp="20170816 10:16:37.983" level="INFO">${host_state} = Off</msg>
<status starttime="20170816 10:16:37.651" status="PASS" endtime="20170816 10:16:37.983"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170816 10:16:37.983" status="PASS" endtime="20170816 10:16:37.984"></status>
</kw>
<status starttime="20170816 10:16:37.375" status="PASS" endtime="20170816 10:16:37.984"></status>
</kw>
<status starttime="20170816 10:16:19.646" status="PASS" endtime="20170816 10:16:37.984"></status>
</kw>
<status starttime="20170816 10:16:19.042" status="PASS" endtime="20170816 10:16:37.984"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg timestamp="20170816 10:16:37.984" level="INFO">HOST is recovered from quiesced state</msg>
<status starttime="20170816 10:16:37.984" status="PASS" endtime="20170816 10:16:37.984"></status>
</kw>
<status starttime="20170816 10:16:19.042" status="PASS" endtime="20170816 10:16:37.984"></status>
</kw>
<status starttime="20170816 10:16:19.041" status="PASS" endtime="20170816 10:16:37.985"></status>
</kw>
<status starttime="20170816 10:16:18.742" status="PASS" endtime="20170816 10:16:37.985"></status>
</kw>
<status starttime="20170816 10:16:18.741" status="PASS" endtime="20170816 10:16:37.985"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170816 10:16:38.001" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170816 10:16:37.985" status="PASS" endtime="20170816 10:16:38.001"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170816 10:16:38.002" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/10646/obmc-robot/logs/20170816101605057025_TestsTestBasicPoweron/20170816101605057025_PowerOnTest/</msg>
<status starttime="20170816 10:16:38.002" status="PASS" endtime="20170816 10:16:38.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170816 10:16:38.002" status="PASS" endtime="20170816 10:16:38.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170816 10:16:38.003" status="PASS" endtime="20170816 10:16:38.004"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170816 10:16:38.005" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs"&gt;/tmp/fspcibld/10646/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170816 10:16:38.004" status="PASS" endtime="20170816 10:16:38.005"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170816 10:16:38.006" level="INFO" html="yes">File '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170816 10:16:38.006" status="PASS" endtime="20170816 10:16:38.006"></status>
</kw>
<msg timestamp="20170816 10:16:38.006" level="INFO">${exist} = True</msg>
<status starttime="20170816 10:16:38.005" status="PASS" endtime="20170816 10:16:38.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170816 10:16:38.007" status="PASS" endtime="20170816 10:16:38.007"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170816 10:16:38.007" status="PASS" endtime="20170816 10:16:38.007"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 10:16:38.008" level="INFO">${cur_time} = 2017-08-16 10:16:38:008293</msg>
<status starttime="20170816 10:16:38.008" status="PASS" endtime="20170816 10:16:38.008"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 10:16:38.009" level="INFO">${cur_time} = 20170816101638008293</msg>
<status starttime="20170816 10:16:38.009" status="PASS" endtime="20170816 10:16:38.009"></status>
</kw>
<msg timestamp="20170816 10:16:38.009" level="INFO">${cur_time} = 20170816101638008293</msg>
<status starttime="20170816 10:16:38.008" status="PASS" endtime="20170816 10:16:38.009"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170816 10:16:38.010" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10646/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:38.010" status="PASS" endtime="20170816 10:16:38.010"></status>
</kw>
<status starttime="20170816 10:16:37.985" status="PASS" endtime="20170816 10:16:38.010"></status>
</kw>
<status starttime="20170816 10:16:01.609" status="PASS" endtime="20170816 10:16:38.010"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170816 10:16:38.012" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170816 10:16:38.012" status="PASS" endtime="20170816 10:16:38.012"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170816 10:16:38.013" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170816 10:16:38.013" status="PASS" endtime="20170816 10:16:38.013"></status>
</kw>
<msg timestamp="20170816 10:16:38.013" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170816 10:16:38.011" status="PASS" endtime="20170816 10:16:38.013"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:16:38.014" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170816 10:16:38.014" status="PASS" endtime="20170816 10:16:38.014"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170816 10:16:38.014" status="PASS" endtime="20170816 10:16:38.015"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 10:16:38.019" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 10:16:38.022" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 10:16:38.022" level="INFO">${output} = /tmp/fspcibld/10646/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170816 10:16:38.015" status="PASS" endtime="20170816 10:16:38.022"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170816 10:16:38.025" status="PASS" endtime="20170816 10:16:38.026"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170816 10:16:38.026" status="PASS" endtime="20170816 10:16:38.027"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:16:38.027" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170816 10:16:38.027" status="PASS" endtime="20170816 10:16:38.028"></status>
</kw>
<msg timestamp="20170816 10:16:38.028" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170816 10:16:38.013" status="PASS" endtime="20170816 10:16:38.028"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:16:38.029" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170816 10:16:38.028" status="PASS" endtime="20170816 10:16:38.029"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170816 10:16:38.029" status="PASS" endtime="20170816 10:16:38.029"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170816 10:16:38.033" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 10:16:38.050" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 10:16:38.051" level="INFO">${os_con_pid} = </msg>
<status starttime="20170816 10:16:38.030" status="PASS" endtime="20170816 10:16:38.052"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170816 10:16:38.061" status="PASS" endtime="20170816 10:16:38.098"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 10:16:38.099" level="INFO">${cmd_buf} = kill -9 </msg>
<status starttime="20170816 10:16:38.099" status="PASS" endtime="20170816 10:16:38.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170816 10:16:38.100" status="PASS" endtime="20170816 10:16:38.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 10:16:38.101" level="INFO">${rc} = None</msg>
<msg timestamp="20170816 10:16:38.101" level="INFO">${output} = None</msg>
<status starttime="20170816 10:16:38.100" status="PASS" endtime="20170816 10:16:38.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170816 10:16:38.101" status="PASS" endtime="20170816 10:16:38.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170816 10:16:38.105" level="INFO" html="yes">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/10646/obmc-robot/logs/9.41.166.169_os_console"&gt;/tmp/fspcibld/10646/obmc-robot/logs/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status starttime="20170816 10:16:38.103" status="PASS" endtime="20170816 10:16:38.106"></status>
</kw>
<status starttime="20170816 10:16:38.102" status="PASS" endtime="20170816 10:16:38.106"></status>
</kw>
<status starttime="20170816 10:16:38.102" status="PASS" endtime="20170816 10:16:38.106"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170816 10:16:38.106" level="INFO">${output} = </msg>
<status starttime="20170816 10:16:38.106" status="PASS" endtime="20170816 10:16:38.106"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170816 10:16:38.107" level="INFO">${loc_quiet} = 1</msg>
<status starttime="20170816 10:16:38.107" status="PASS" endtime="20170816 10:16:38.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170816 10:16:38.109" status="PASS" endtime="20170816 10:16:38.173"></status>
</kw>
<msg timestamp="20170816 10:16:38.174" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 10:16:38.175" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status starttime="20170816 10:16:38.108" status="PASS" endtime="20170816 10:16:38.175"></status>
</kw>
<msg timestamp="20170816 10:16:38.176" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status starttime="20170816 10:16:38.011" status="PASS" endtime="20170816 10:16:38.176"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170816 10:16:38.178" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.09418|secure|Booting in non-secure mode.
  4.09420|secure|SecureROM valid - enabling functionality
  6.71714|ISTEP  6. 5 - host_init_fsi
  6.83722|ISTEP  6. 6 - host_set_ipl_parms
  6.86239|ISTEP  6. 7 - host_discover_targets
 12.18305|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 12.18307|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 12.23301|ISTEP  6. 8 - host_update_master_tpm
 12.24223|SECURE|Security Access Bit&gt; 0x0000000000000000
 12.24223|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 12.24243|ISTEP  6. 9 - host_gard
 12.28330|ISTEP  6.10 - host_revert_sbe_mcs_setup
 12.29347|ISTEP  6.11 - host_start_occ_xstop_handler
 12.29507|ISTEP  6.12 - host_voltage_config
 12.32984|ISTEP  7. 2 - mss_volt
 12.90476|ISTEP  7. 3 - mss_freq
 13.16870|ISTEP  7. 4 - mss_eff_config
 16.44683|ISTEP  7. 5 - mss_attr_update
 16.45941|ISTEP  8. 1 - host_slave_sbe_config
 16.49585|ISTEP  8. 2 - host_setup_sbe
 16.50223|ISTEP  8. 3 - host_cbs_start
 16.51986|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 26.13648|ISTEP  8. 5 - host_attnlisten_proc
 26.13739|ISTEP  8. 6 - host_p9_fbc_eff_config
 26.14361|ISTEP  8. 7 - host_p9_eff_config_links
 26.15332|ISTEP  8. 8 - proc_attr_update
 26.15512|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 26.20967|ISTEP  8.10 - proc_xbus_scominit
 29.44427|ISTEP  8.11 - proc_xbus_enable_ridi
 29.44922|ISTEP  9. 1 - fabric_erepair
 29.45731|ISTEP  9. 2 - fabric_io_dccal
 30.31731|ISTEP  9. 3 - fabric_pre_trainadv
 30.32376|ISTEP  9. 4 - fabric_io_run_training
 30.53810|ISTEP  9. 5 - fabric_post_trainadv
 30.54248|ISTEP  9. 6 - proc_smp_link_layer
 30.54778|ISTEP  9. 7 - proc_fab_iovalid
 30.57312|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 30.58383|ISTEP 10. 1 - proc_build_smp
 30.93259|ISTEP 10. 2 - host_slave_sbe_update


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.09320|secure|Booting in non-secure mode.
  4.09322|secure|SecureROM valid - enabling functionality
  5.30692|ISTEP  6. 5 - host_init_fsi
  5.39350|ISTEP  6. 6 - host_set_ipl_parms
  5.40887|ISTEP  6. 7 - host_discover_targets
  5.89815|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.89816|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.92580|ISTEP  6. 8 - host_update_master_tpm
  5.93436|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.93437|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.93455|ISTEP  6. 9 - host_gard
  6.06819|ISTEP  6.10 - host_revert_sbe_mcs_setup
  6.08210|ISTEP  6.11 - host_start_occ_xstop_handler
  6.08307|ISTEP  6.12 - host_voltage_config
  6.11841|ISTEP  7. 2 - mss_volt
  6.35130|ISTEP  7. 3 - mss_freq
  6.49719|ISTEP  7. 4 - mss_eff_config
  9.78908|ISTEP  7. 5 - mss_attr_update
  9.80102|ISTEP  8. 1 - host_slave_sbe_config
  9.83879|ISTEP  8. 2 - host_setup_sbe
  9.84493|ISTEP  8. 3 - host_cbs_start
  9.85285|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 19.53299|ISTEP  8. 5 - host_attnlisten_proc
 19.53386|ISTEP  8. 6 - host_p9_fbc_eff_config
 19.54019|ISTEP  8. 7 - host_p9_eff_config_links
 19.54985|ISTEP  8. 8 - proc_attr_update
 19.55653|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 19.60965|ISTEP  8.10 - proc_xbus_scominit
 22.84066|ISTEP  8.11 - proc_xbus_enable_ridi
 22.84515|ISTEP  9. 1 - fabric_erepair
 22.85378|ISTEP  9. 2 - fabric_io_dccal
 23.71013|ISTEP  9. 3 - fabric_pre_trainadv
 23.71672|ISTEP  9. 4 - fabric_io_run_training
 23.93164|ISTEP  9. 5 - fabric_post_trainadv
 23.93598|ISTEP  9. 6 - proc_smp_link_layer
 23.94144|ISTEP  9. 7 - proc_fab_iovalid
 23.96730|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 23.97752|ISTEP 10. 1 - proc_build_smp
 24.15049|ISTEP 10. 2 - host_slave_sbe_update


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.09620|secure|Booting in non-secure mode.
  4.09622|secure|SecureROM valid - enabling functionality
  5.31550|ISTEP  6. 5 - host_init_fsi
  5.42905|ISTEP  6. 6 - host_set_ipl_parms
  5.43898|ISTEP  6. 7 - host_discover_targets
  5.90568|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.90569|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.93282|ISTEP  6. 8 - host_update_master_tpm
  5.94124|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.94125|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.94143|ISTEP  6. 9 - host_gard
  5.99090|ISTEP  6.10 - host_revert_sbe_mcs_setup
  6.00012|ISTEP  6.11 - host_start_occ_xstop_handler
  6.00124|ISTEP  6.12 - host_voltage_config
  6.03855|ISTEP  7. 2 - mss_volt
  6.37297|ISTEP  7. 3 - mss_freq
  6.54463|ISTEP  7. 4 - mss_eff_config
  9.86130|ISTEP  7. 5 - mss_attr_update
  9.87366|ISTEP  8. 1 - host_slave_sbe_config
  9.91152|ISTEP  8. 2 - host_setup_sbe
  9.91862|ISTEP  8. 3 - host_cbs_start
  9.93340|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 19.55036|ISTEP  8. 5 - host_attnlisten_proc
 19.55128|ISTEP  8. 6 - host_p9_fbc_eff_config
 19.55826|ISTEP  8. 7 - host_p9_eff_config_links
 19.56786|ISTEP  8. 8 - proc_attr_update
 19.56983|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 19.62471|ISTEP  8.10 - proc_xbus_scominit
 22.86431|ISTEP  8.11 - proc_xbus_enable_ridi
 22.87104|ISTEP  9. 1 - fabric_erepair
 22.87923|ISTEP  9. 2 - fabric_io_dccal
 23.73681|ISTEP  9. 3 - fabric_pre_trainadv
 23.74274|ISTEP  9. 4 - fabric_io_run_training
 23.95766|ISTEP  9. 5 - fabric_post_trainadv
 23.96241|ISTEP  9. 6 - proc_smp_link_layer
 23.96821|ISTEP  9. 7 - proc_fab_iovalid
 23.99343|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 24.00366|ISTEP 10. 1 - proc_build_smp
 24.32442|ISTEP 10. 2 - host_slave_sbe_update


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.09372|secure|Booting in non-secure mode.
  4.09373|secure|SecureROM valid - enabling functionality
  5.32676|ISTEP  6. 5 - host_init_fsi
  5.41824|ISTEP  6. 6 - host_set_ipl_parms
  5.42821|ISTEP  6. 7 - host_discover_targets
  5.90456|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.90457|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.98016|ISTEP  6. 8 - host_update_master_tpm
  5.98879|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.98880|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.98903|ISTEP  6. 9 - host_gard
  6.03724|ISTEP  6.10 - host_revert_sbe_mcs_setup
  6.04815|ISTEP  6.11 - host_start_occ_xstop_handler
  6.04902|ISTEP  6.12 - host_voltage_config
  6.08434|ISTEP  7. 2 - mss_volt
  6.51641|ISTEP  7. 3 - mss_freq
  6.66249|ISTEP  7. 4 - mss_eff_config
  9.94229|ISTEP  7. 5 - mss_attr_update
  9.95468|ISTEP  8. 1 - host_slave_sbe_config
  9.99332|ISTEP  8. 2 - host_setup_sbe
  9.99997|ISTEP  8. 3 - host_cbs_start
 10.00837|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 19.62284|ISTEP  8. 5 - host_attnlisten_proc
 19.62539|ISTEP  8. 6 - host_p9_fbc_eff_config
 19.63419|ISTEP  8. 7 - host_p9_eff_config_links
 19.64404|ISTEP  8. 8 - proc_attr_update
 19.64603|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 19.69918|ISTEP  8.10 - proc_xbus_scominit
 22.95287|ISTEP  8.11 - proc_xbus_enable_ridi
 22.95816|ISTEP  9. 1 - fabric_erepair
 22.96632|ISTEP  9. 2 - fabric_io_dccal
 23.82636|ISTEP  9. 3 - fabric_pre_trainadv
 23.83235|ISTEP  9. 4 - fabric_io_run_training
 24.04705|ISTEP  9. 5 - fabric_post_trainadv
 24.05243|ISTEP  9. 6 - proc_smp_link_layer
 24.05907|ISTEP  9. 7 - proc_fab_iovalid
 24.08443|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 24.09658|ISTEP 10. 1 - proc_build_smp
 24.26944|ISTEP 10. 2 - host_slave_sbe_update
</msg>
<status starttime="20170816 10:16:38.177" status="PASS" endtime="20170816 10:16:38.179"></status>
</kw>
<status starttime="20170816 10:16:01.609" status="PASS" endtime="20170816 10:16:38.179"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status critical="yes" starttime="20170816 10:05:46.358" status="FAIL" endtime="20170816 10:16:38.179">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170816 10:05:46.323" status="FAIL" endtime="20170816 10:16:38.180"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170816 10:05:40.466" status="FAIL" endtime="20170816 10:16:38.183"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" fail="1" pass="1" name="Tests">Tests</stat>
<stat id="s1-s1" fail="0" pass="1" name="Security">Tests.Security</stat>
<stat id="s1-s1-s1" fail="0" pass="1" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" fail="1" pass="0" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
