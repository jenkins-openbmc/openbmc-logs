<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170921 21:00:38.110" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:00:39.157" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:00:39.158" starttime="20170921 21:00:39.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:00:39.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:00:39.159" starttime="20170921 21:00:39.158"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:00:39.160" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:00:39.160" starttime="20170921 21:00:39.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:00:39.160" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:00:39.160" starttime="20170921 21:00:39.160"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:00:39.358" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:00:39.358" starttime="20170921 21:00:39.161"></status>
</kw>
<msg timestamp="20170921 21:00:39.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:00:39.358" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:00:39.358" starttime="20170921 21:00:39.161"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:00:39.359" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:00:39.359" starttime="20170921 21:00:39.359"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:00:39.360" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:00:39.360" starttime="20170921 21:00:39.360"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:39.360" starttime="20170921 21:00:39.156"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:39.360" starttime="20170921 21:00:39.156"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:39.360" starttime="20170921 21:00:39.155"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:00:39.361" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170921 21:00:39.361" starttime="20170921 21:00:39.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:00:39.362" starttime="20170921 21:00:39.361"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:00:39.422" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170921 21:00:39.422" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170921 21:00:39.422" starttime="20170921 21:00:39.362"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:00:39.423" starttime="20170921 21:00:39.423"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:00:39.423" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:00:39.424" starttime="20170921 21:00:39.423"></status>
</kw>
<msg timestamp="20170921 21:00:39.424" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170921 21:00:39.424" starttime="20170921 21:00:39.154"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170921 21:00:39.424" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170921 21:00:39.425" starttime="20170921 21:00:39.424"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:39.425" starttime="20170921 21:00:39.154"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:39.425" starttime="20170921 21:00:39.153"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20170921 21:00:39.426" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170921 21:00:39.426" starttime="20170921 21:00:39.426"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20170921 21:00:39.448" level="INFO">${image_version} = v1.99.10-21-g3b81ed4</msg>
<status status="PASS" endtime="20170921 21:00:39.448" starttime="20170921 21:00:39.427"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170921 21:00:39.449" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170921 21:00:50.705" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20170921 21:00:50.706" starttime="20170921 21:00:39.448"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:00:50.709" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:00:50.709" starttime="20170921 21:00:50.709"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:00:50.710" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:00:50.710" starttime="20170921 21:00:50.710"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:00:50.711" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:00:50.711" starttime="20170921 21:00:50.710"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:00:50.712" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:00:50.712" starttime="20170921 21:00:50.711"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:00:50.909" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:00:50.910" starttime="20170921 21:00:50.712"></status>
</kw>
<msg timestamp="20170921 21:00:50.910" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:00:50.910" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:00:50.910" starttime="20170921 21:00:50.712"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:00:50.911" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:00:50.911" starttime="20170921 21:00:50.910"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:00:50.911" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:00:50.912" starttime="20170921 21:00:50.911"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:50.912" starttime="20170921 21:00:50.708"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:50.912" starttime="20170921 21:00:50.708"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:50.912" starttime="20170921 21:00:50.707"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:00:50.912" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170921 21:00:50.912" starttime="20170921 21:00:50.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:00:50.913" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170921 21:00:50.913" starttime="20170921 21:00:50.913"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:00:50.914" starttime="20170921 21:00:50.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:00:50.915" starttime="20170921 21:00:50.914"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:00:56.858" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170921 21:00:56.859" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:00:56.859" starttime="20170921 21:00:50.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:00:56.860" starttime="20170921 21:00:56.859"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:00:56.860" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:00:56.860" starttime="20170921 21:00:56.860"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:00:56.861" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:00:56.861" starttime="20170921 21:00:56.861"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:56.861" starttime="20170921 21:00:50.706"></status>
</kw>
<kw name="Verify Image Upload" library="code_update_utils">
<doc>Verify the image was uploaded correctly and that it created</doc>
<arguments>
<arg>${image_version}</arg>
</arguments>
<assign>
<var>${ret}</var>
<var>${version_id}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170921 21:00:56.868" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170921 21:00:56.868" starttime="20170921 21:00:56.867"></status>
</kw>
<msg timestamp="20170921 21:00:56.868" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170921 21:00:56.868" starttime="20170921 21:00:56.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:00:56.869" starttime="20170921 21:00:56.869"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:56.869" starttime="20170921 21:00:56.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170921 21:00:56.870" starttime="20170921 21:00:56.870"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170921 21:00:56.872" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170921 21:00:56.872" starttime="20170921 21:00:56.871"></status>
</kw>
<msg timestamp="20170921 21:00:56.872" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170921 21:00:56.872" starttime="20170921 21:00:56.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:00:56.874" starttime="20170921 21:00:56.873"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:56.874" starttime="20170921 21:00:56.873"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:56.874" starttime="20170921 21:00:56.872"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170921 21:00:56.875" level="INFO">Logging into '9.3.181.15:22' as 'root'.</msg>
<msg timestamp="20170921 21:00:59.085" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170921 21:00:59.085" starttime="20170921 21:00:56.874"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:59.085" starttime="20170921 21:00:56.866"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -d /tmp/images/*/</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170921 21:00:59.093" level="INFO">Executing command 'ls -d /tmp/images/*/'.</msg>
<msg timestamp="20170921 21:00:59.151" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170921 21:00:59.151" level="INFO">${stdout} = /tmp/images/57ce7c1d/</msg>
<msg timestamp="20170921 21:00:59.151" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170921 21:00:59.151" starttime="20170921 21:00:59.093"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170921 21:00:59.152" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170921 21:00:59.152" starttime="20170921 21:00:59.152"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:59.152" starttime="20170921 21:00:59.092"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170921 21:00:59.158" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170921 21:00:59.158" starttime="20170921 21:00:59.157"></status>
</kw>
<msg timestamp="20170921 21:00:59.158" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170921 21:00:59.158" starttime="20170921 21:00:59.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:00:59.159" starttime="20170921 21:00:59.159"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:59.159" starttime="20170921 21:00:59.158"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170921 21:00:59.160" starttime="20170921 21:00:59.159"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170921 21:00:59.161" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170921 21:00:59.161" starttime="20170921 21:00:59.161"></status>
</kw>
<msg timestamp="20170921 21:00:59.161" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170921 21:00:59.161" starttime="20170921 21:00:59.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:00:59.163" starttime="20170921 21:00:59.163"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:59.163" starttime="20170921 21:00:59.162"></status>
</kw>
<status status="PASS" endtime="20170921 21:00:59.163" starttime="20170921 21:00:59.161"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170921 21:00:59.164" level="INFO">Logging into '9.3.181.15:22' as 'root'.</msg>
<msg timestamp="20170921 21:01:00.872" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170921 21:01:00.873" starttime="20170921 21:00:59.163"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:00.873" starttime="20170921 21:00:59.156"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/57ce7c1d/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170921 21:01:00.881" level="INFO">Executing command 'cat /tmp/images/57ce7c1d/MANIFEST | grep "version="'.</msg>
<msg timestamp="20170921 21:01:00.946" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170921 21:01:00.946" level="INFO">${stdout} = version=v1.99.10-21-g3b81ed4</msg>
<msg timestamp="20170921 21:01:00.946" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170921 21:01:00.946" starttime="20170921 21:01:00.881"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170921 21:01:00.947" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170921 21:01:00.947" starttime="20170921 21:01:00.947"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:00.947" starttime="20170921 21:01:00.880"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170921 21:01:00.953" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170921 21:01:00.953" starttime="20170921 21:01:00.952"></status>
</kw>
<msg timestamp="20170921 21:01:00.953" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170921 21:01:00.953" starttime="20170921 21:01:00.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:00.955" starttime="20170921 21:01:00.954"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:00.955" starttime="20170921 21:01:00.953"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:00.956" starttime="20170921 21:01:00.955"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170921 21:01:00.957" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170921 21:01:00.957" starttime="20170921 21:01:00.956"></status>
</kw>
<msg timestamp="20170921 21:01:00.957" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170921 21:01:00.957" starttime="20170921 21:01:00.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:00.959" starttime="20170921 21:01:00.958"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:00.959" starttime="20170921 21:01:00.958"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:00.959" starttime="20170921 21:01:00.957"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170921 21:01:00.959" level="INFO">Logging into '9.3.181.15:22' as 'root'.</msg>
<msg timestamp="20170921 21:01:02.700" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170921 21:01:02.700" starttime="20170921 21:01:00.959"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:02.701" starttime="20170921 21:01:00.951"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170921 21:01:02.706" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170921 21:01:02.706" starttime="20170921 21:01:02.706"></status>
</kw>
<msg timestamp="20170921 21:01:02.706" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170921 21:01:02.707" starttime="20170921 21:01:02.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:02.708" starttime="20170921 21:01:02.707"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:02.708" starttime="20170921 21:01:02.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:02.709" starttime="20170921 21:01:02.708"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170921 21:01:02.710" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170921 21:01:02.710" starttime="20170921 21:01:02.709"></status>
</kw>
<msg timestamp="20170921 21:01:02.710" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170921 21:01:02.710" starttime="20170921 21:01:02.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:02.712" starttime="20170921 21:01:02.711"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:02.712" starttime="20170921 21:01:02.711"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:02.712" starttime="20170921 21:01:02.710"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170921 21:01:02.712" level="INFO">Logging into '9.3.181.15:22' as 'root'.</msg>
<msg timestamp="20170921 21:01:04.394" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170921 21:01:04.394" starttime="20170921 21:01:02.712"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:04.395" starttime="20170921 21:01:02.704"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/57ce7c1d/MANIFEST | grep "purpose="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170921 21:01:04.403" level="INFO">Executing command 'cat /tmp/images/57ce7c1d/MANIFEST | grep "purpose="'.</msg>
<msg timestamp="20170921 21:01:04.479" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170921 21:01:04.480" level="INFO">${stdout} = purpose=xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<msg timestamp="20170921 21:01:04.480" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170921 21:01:04.480" starttime="20170921 21:01:04.402"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170921 21:01:04.480" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170921 21:01:04.481" starttime="20170921 21:01:04.480"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:04.481" starttime="20170921 21:01:04.402"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/57ce7c1d</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:01:04.491" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:01:04.491" starttime="20170921 21:01:04.491"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:01:04.492" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:01:04.492" starttime="20170921 21:01:04.492"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:01:04.493" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:01:04.493" starttime="20170921 21:01:04.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:01:04.493" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:01:04.494" starttime="20170921 21:01:04.493"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:01:04.709" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:01:04.709" starttime="20170921 21:01:04.494"></status>
</kw>
<msg timestamp="20170921 21:01:04.709" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:01:04.710" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:01:04.710" starttime="20170921 21:01:04.494"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:01:04.710" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:04.710" starttime="20170921 21:01:04.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:01:04.711" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:04.711" starttime="20170921 21:01:04.711"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:04.711" starttime="20170921 21:01:04.490"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:04.711" starttime="20170921 21:01:04.489"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:04.712" starttime="20170921 21:01:04.489"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:01:04.712" level="INFO">${base_uri} = /xyz/openbmc_project/software/57ce7c1d/attr/Activation</msg>
<status status="PASS" endtime="20170921 21:01:04.712" starttime="20170921 21:01:04.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:04.713" starttime="20170921 21:01:04.713"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:01:04.828" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/57ce7c1d/attr/Activation, headers=None json=None</msg>
<msg timestamp="20170921 21:01:04.828" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:01:04.828" starttime="20170921 21:01:04.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:04.829" starttime="20170921 21:01:04.828"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:01:04.829" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:01:04.829" starttime="20170921 21:01:04.829"></status>
</kw>
<msg timestamp="20170921 21:01:04.830" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:01:04.830" starttime="20170921 21:01:04.488"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:01:04.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:04.830" starttime="20170921 21:01:04.830"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:01:04.831" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:01:04.831" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:01:04.831" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Ready'}</msg>
<status status="PASS" endtime="20170921 21:01:04.831" starttime="20170921 21:01:04.831"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:04.832" starttime="20170921 21:01:04.487"></status>
</kw>
<msg timestamp="20170921 21:01:04.832" level="INFO">${ret} = True</msg>
<msg timestamp="20170921 21:01:04.832" level="INFO">${version_id} = 57ce7c1d</msg>
<status status="PASS" endtime="20170921 21:01:04.832" starttime="20170921 21:00:56.861"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:04.832" starttime="20170921 21:01:04.832"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:01:04.836" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:01:04.836" starttime="20170921 21:01:04.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:01:04.837" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:01:04.837" starttime="20170921 21:01:04.837"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:01:04.838" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:01:04.838" starttime="20170921 21:01:04.837"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:01:04.838" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:01:04.838" starttime="20170921 21:01:04.838"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:01:05.072" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:01:05.072" starttime="20170921 21:01:04.839"></status>
</kw>
<msg timestamp="20170921 21:01:05.072" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:01:05.072" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:01:05.072" starttime="20170921 21:01:04.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:01:05.073" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:05.073" starttime="20170921 21:01:05.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:01:05.074" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:05.074" starttime="20170921 21:01:05.074"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:05.075" starttime="20170921 21:01:04.835"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:05.075" starttime="20170921 21:01:04.834"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:05.075" starttime="20170921 21:01:04.834"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:01:05.076" level="INFO">${base_uri} = /xyz/openbmc_project/software/57ce7c1d</msg>
<status status="PASS" endtime="20170921 21:01:05.076" starttime="20170921 21:01:05.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:05.077" starttime="20170921 21:01:05.076"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:01:05.192" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/57ce7c1d, headers=None json=None</msg>
<msg timestamp="20170921 21:01:05.193" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:01:05.193" starttime="20170921 21:01:05.077"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:05.193" starttime="20170921 21:01:05.193"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:01:05.194" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:01:05.194" starttime="20170921 21:01:05.194"></status>
</kw>
<msg timestamp="20170921 21:01:05.194" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:01:05.194" starttime="20170921 21:01:04.833"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:01:05.195" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:05.195" starttime="20170921 21:01:05.195"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:01:05.196" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "Path": "/tmp/images/57ce7c1d", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "v1.99.10-21-g3b81ed4", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:01:05.196" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:01:05.196" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170921 21:01:05.196" starttime="20170921 21:01:05.195"></status>
</kw>
<msg timestamp="20170921 21:01:05.196" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready...</msg>
<status status="PASS" endtime="20170921 21:01:05.196" starttime="20170921 21:01:04.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${READY}</arg>
</arguments>
<msg timestamp="20170921 21:01:05.197" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:05.197" starttime="20170921 21:01:05.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${REQUESTED_ACTIVE}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170921 21:01:05.197" level="INFO">${args} = {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}</msg>
<status status="PASS" endtime="20170921 21:01:05.198" starttime="20170921 21:01:05.197"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
<arg>RequestedActivation</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:01:05.199" level="INFO">${base_uri} = /xyz/openbmc_project/software/57ce7c1d</msg>
<status status="PASS" endtime="20170921 21:01:05.199" starttime="20170921 21:01:05.198"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:01:05.204" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:01:05.205" starttime="20170921 21:01:05.204"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:01:05.205" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:01:05.205" starttime="20170921 21:01:05.205"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:01:05.206" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:01:05.206" starttime="20170921 21:01:05.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:01:05.207" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:01:05.207" starttime="20170921 21:01:05.206"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:01:05.394" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:01:05.394" starttime="20170921 21:01:05.207"></status>
</kw>
<msg timestamp="20170921 21:01:05.394" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:01:05.394" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:01:05.394" starttime="20170921 21:01:05.207"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:01:05.395" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:05.395" starttime="20170921 21:01:05.394"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:01:05.396" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:05.396" starttime="20170921 21:01:05.395"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:05.396" starttime="20170921 21:01:05.203"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:05.396" starttime="20170921 21:01:05.203"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:05.396" starttime="20170921 21:01:05.200"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:01:05.397" level="INFO">${base_uri} = /xyz/openbmc_project/software/57ce7c1d/attr/RequestedActivation</msg>
<status status="PASS" endtime="20170921 21:01:05.397" starttime="20170921 21:01:05.396"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:01:05.397" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:01:05.397" starttime="20170921 21:01:05.397"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:05.398" starttime="20170921 21:01:05.398"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170921 21:01:05.399" level="INFO">${msg} = URI:https://9.3.181.15/xyz/openbmc_project/software/57ce7c1d/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'he...</msg>
<status status="PASS" endtime="20170921 21:01:05.399" starttime="20170921 21:01:05.399"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170921 21:01:05.400" level="INFO">URI:https://9.3.181.15/xyz/openbmc_project/software/57ce7c1d/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170921 21:01:05.401" starttime="20170921 21:01:05.400"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:05.401" starttime="20170921 21:01:05.400"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:05.401" starttime="20170921 21:01:05.398"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:01:05.798" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/software/57ce7c1d/attr/RequestedActivation, data={"data": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170921 21:01:05.799" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:01:05.799" starttime="20170921 21:01:05.401"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170921 21:01:05.801" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170921 21:01:05.801" starttime="20170921 21:01:05.800"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170921 21:01:05.802" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170921 21:01:05.802" starttime="20170921 21:01:05.801"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:05.802" starttime="20170921 21:01:05.801"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:05.802" starttime="20170921 21:01:05.799"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:01:05.802" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:01:05.803" starttime="20170921 21:01:05.802"></status>
</kw>
<msg timestamp="20170921 21:01:05.803" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:01:05.803" starttime="20170921 21:01:05.199"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:01:05.803" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:05.803" starttime="20170921 21:01:05.803"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170921 21:01:05.804" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:01:05.804" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:01:05.804" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170921 21:01:05.804" starttime="20170921 21:01:05.804"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:05.804" starttime="20170921 21:01:05.198"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:01:05.808" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:01:05.808" starttime="20170921 21:01:05.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:01:05.809" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:01:05.809" starttime="20170921 21:01:05.808"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:01:05.809" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:01:05.809" starttime="20170921 21:01:05.809"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:01:05.810" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:01:05.810" starttime="20170921 21:01:05.810"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:01:06.707" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:01:06.707" starttime="20170921 21:01:05.811"></status>
</kw>
<msg timestamp="20170921 21:01:06.707" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:01:06.707" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:01:06.707" starttime="20170921 21:01:05.811"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:01:06.708" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:06.708" starttime="20170921 21:01:06.708"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:01:06.709" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:06.709" starttime="20170921 21:01:06.709"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:06.709" starttime="20170921 21:01:05.807"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:06.709" starttime="20170921 21:01:05.806"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:06.709" starttime="20170921 21:01:05.806"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:01:06.710" level="INFO">${base_uri} = /xyz/openbmc_project/software/57ce7c1d</msg>
<status status="PASS" endtime="20170921 21:01:06.710" starttime="20170921 21:01:06.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:06.711" starttime="20170921 21:01:06.710"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:01:07.081" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/57ce7c1d, headers=None json=None</msg>
<msg timestamp="20170921 21:01:07.082" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:01:07.082" starttime="20170921 21:01:06.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:07.083" starttime="20170921 21:01:07.082"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:01:07.084" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:01:07.084" starttime="20170921 21:01:07.083"></status>
</kw>
<msg timestamp="20170921 21:01:07.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:01:07.085" starttime="20170921 21:01:05.805"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:01:07.086" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:07.086" starttime="20170921 21:01:07.085"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:01:07.086" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/57ce7c1d", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-21-g3b81ed4", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:01:07.086" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:01:07.086" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170921 21:01:07.086" starttime="20170921 21:01:07.086"></status>
</kw>
<msg timestamp="20170921 21:01:07.087" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activ...</msg>
<status status="PASS" endtime="20170921 21:01:07.087" starttime="20170921 21:01:05.805"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[RequestedActivation]</arg>
<arg>${REQUESTED_ACTIVE}</arg>
</arguments>
<msg timestamp="20170921 21:01:07.087" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:07.087" starttime="20170921 21:01:07.087"></status>
</kw>
<kw name="Wait For Activation State Change" library="code_update_utils">
<doc>Wait for the current activation state of ${version_id} to</doc>
<arguments>
<arg>${version_id}</arg>
<arg>${ACTIVATING}</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170921 21:01:07.093" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170921 21:01:07.093" starttime="20170921 21:01:07.093"></status>
</kw>
<msg timestamp="20170921 21:01:07.093" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170921 21:01:07.093" starttime="20170921 21:01:07.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:07.095" starttime="20170921 21:01:07.094"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:07.095" starttime="20170921 21:01:07.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:07.095" starttime="20170921 21:01:07.095"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170921 21:01:07.096" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170921 21:01:07.097" starttime="20170921 21:01:07.096"></status>
</kw>
<msg timestamp="20170921 21:01:07.097" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170921 21:01:07.097" starttime="20170921 21:01:07.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:07.098" starttime="20170921 21:01:07.098"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:07.099" starttime="20170921 21:01:07.098"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:07.099" starttime="20170921 21:01:07.097"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170921 21:01:07.099" level="INFO">Logging into '9.3.181.15:22' as 'root'.</msg>
<msg timestamp="20170921 21:01:09.441" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170921 21:01:09.441" starttime="20170921 21:01:07.099"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:09.441" starttime="20170921 21:01:07.092"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/57ce7c1d</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:01:09.452" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:01:09.452" starttime="20170921 21:01:09.451"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:01:09.453" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:01:09.453" starttime="20170921 21:01:09.453"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:01:09.453" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:01:09.454" starttime="20170921 21:01:09.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:01:09.454" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:01:09.454" starttime="20170921 21:01:09.454"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:01:09.908" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:01:09.908" starttime="20170921 21:01:09.455"></status>
</kw>
<msg timestamp="20170921 21:01:09.908" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:01:09.909" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:01:09.909" starttime="20170921 21:01:09.455"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:01:09.909" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:09.909" starttime="20170921 21:01:09.909"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:01:09.910" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:09.910" starttime="20170921 21:01:09.910"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:09.910" starttime="20170921 21:01:09.451"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:09.910" starttime="20170921 21:01:09.450"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:09.911" starttime="20170921 21:01:09.449"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:01:09.911" level="INFO">${base_uri} = /xyz/openbmc_project/software/57ce7c1d</msg>
<status status="PASS" endtime="20170921 21:01:09.911" starttime="20170921 21:01:09.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:09.912" starttime="20170921 21:01:09.912"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:01:10.050" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/57ce7c1d, headers=None json=None</msg>
<msg timestamp="20170921 21:01:10.050" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:01:10.051" starttime="20170921 21:01:09.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:01:10.051" starttime="20170921 21:01:10.051"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:01:10.052" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:01:10.052" starttime="20170921 21:01:10.052"></status>
</kw>
<msg timestamp="20170921 21:01:10.052" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:01:10.052" starttime="20170921 21:01:09.449"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:01:10.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:01:10.053" starttime="20170921 21:01:10.052"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:01:10.053" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/57ce7c1d", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-21-g3b81ed4", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:01:10.054" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:01:10.054" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170921 21:01:10.054" starttime="20170921 21:01:10.053"></status>
</kw>
<status status="PASS" endtime="20170921 21:01:10.054" starttime="20170921 21:01:09.448"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/57ce7c1d</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:02:10.125" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:02:10.126" starttime="20170921 21:02:10.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:02:10.126" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:02:10.126" starttime="20170921 21:02:10.126"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:02:10.127" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:02:10.127" starttime="20170921 21:02:10.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:02:10.128" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:02:10.128" starttime="20170921 21:02:10.127"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:02:11.134" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:02:11.134" starttime="20170921 21:02:10.129"></status>
</kw>
<msg timestamp="20170921 21:02:11.134" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:02:11.134" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:02:11.134" starttime="20170921 21:02:10.128"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:02:11.135" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:02:11.135" starttime="20170921 21:02:11.135"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:02:11.136" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:02:11.136" starttime="20170921 21:02:11.136"></status>
</kw>
<status status="PASS" endtime="20170921 21:02:11.137" starttime="20170921 21:02:10.124"></status>
</kw>
<status status="PASS" endtime="20170921 21:02:11.137" starttime="20170921 21:02:10.124"></status>
</kw>
<status status="PASS" endtime="20170921 21:02:11.137" starttime="20170921 21:02:10.123"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:02:11.138" level="INFO">${base_uri} = /xyz/openbmc_project/software/57ce7c1d</msg>
<status status="PASS" endtime="20170921 21:02:11.138" starttime="20170921 21:02:11.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:02:11.139" starttime="20170921 21:02:11.138"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:02:11.283" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/57ce7c1d, headers=None json=None</msg>
<msg timestamp="20170921 21:02:11.283" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:02:11.283" starttime="20170921 21:02:11.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:02:11.284" starttime="20170921 21:02:11.284"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:02:11.285" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:02:11.285" starttime="20170921 21:02:11.285"></status>
</kw>
<msg timestamp="20170921 21:02:11.285" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:02:11.285" starttime="20170921 21:02:10.122"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:02:11.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:02:11.286" starttime="20170921 21:02:11.285"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:02:11.286" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/57ce7c1d", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-21-g3b81ed4", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:02:11.286" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:02:11.287" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170921 21:02:11.287" starttime="20170921 21:02:11.286"></status>
</kw>
<status status="PASS" endtime="20170921 21:02:11.287" starttime="20170921 21:02:10.121"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/57ce7c1d</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:03:11.307" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:03:11.308" starttime="20170921 21:03:11.307"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:03:11.308" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:03:11.309" starttime="20170921 21:03:11.308"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:03:11.309" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:03:11.309" starttime="20170921 21:03:11.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:03:11.310" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:03:11.310" starttime="20170921 21:03:11.309"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:03:11.499" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:03:11.500" starttime="20170921 21:03:11.311"></status>
</kw>
<msg timestamp="20170921 21:03:11.500" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:03:11.500" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:03:11.500" starttime="20170921 21:03:11.310"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:03:11.501" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:03:11.501" starttime="20170921 21:03:11.500"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:03:11.501" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:03:11.501" starttime="20170921 21:03:11.501"></status>
</kw>
<status status="PASS" endtime="20170921 21:03:11.502" starttime="20170921 21:03:11.306"></status>
</kw>
<status status="PASS" endtime="20170921 21:03:11.502" starttime="20170921 21:03:11.306"></status>
</kw>
<status status="PASS" endtime="20170921 21:03:11.502" starttime="20170921 21:03:11.305"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:03:11.502" level="INFO">${base_uri} = /xyz/openbmc_project/software/57ce7c1d</msg>
<status status="PASS" endtime="20170921 21:03:11.502" starttime="20170921 21:03:11.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:03:11.503" starttime="20170921 21:03:11.503"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:03:11.640" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/57ce7c1d, headers=None json=None</msg>
<msg timestamp="20170921 21:03:11.640" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:03:11.640" starttime="20170921 21:03:11.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:03:11.641" starttime="20170921 21:03:11.641"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:03:11.642" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:03:11.642" starttime="20170921 21:03:11.642"></status>
</kw>
<msg timestamp="20170921 21:03:11.642" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:03:11.643" starttime="20170921 21:03:11.304"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:03:11.644" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:03:11.644" starttime="20170921 21:03:11.643"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:03:11.645" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "Path": "/tmp/images/57ce7c1d", 
    "Progress": 30, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-21-g3b81ed4", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:03:11.645" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:03:11.645" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170921 21:03:11.645" starttime="20170921 21:03:11.644"></status>
</kw>
<status status="PASS" endtime="20170921 21:03:11.645" starttime="20170921 21:03:11.304"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/57ce7c1d</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:04:11.718" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:04:11.718" starttime="20170921 21:04:11.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:04:11.719" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:04:11.719" starttime="20170921 21:04:11.719"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:04:11.720" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:04:11.720" starttime="20170921 21:04:11.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:04:11.721" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:04:11.721" starttime="20170921 21:04:11.721"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:04:11.933" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:04:11.933" starttime="20170921 21:04:11.722"></status>
</kw>
<msg timestamp="20170921 21:04:11.933" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:04:11.933" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:11.933" starttime="20170921 21:04:11.722"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:04:11.934" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:11.934" starttime="20170921 21:04:11.934"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:11.935" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:11.935" starttime="20170921 21:04:11.934"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:11.935" starttime="20170921 21:04:11.716"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:11.935" starttime="20170921 21:04:11.715"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:11.935" starttime="20170921 21:04:11.714"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:04:11.936" level="INFO">${base_uri} = /xyz/openbmc_project/software/57ce7c1d</msg>
<status status="PASS" endtime="20170921 21:04:11.936" starttime="20170921 21:04:11.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:11.937" starttime="20170921 21:04:11.936"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:04:12.076" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/57ce7c1d, headers=None json=None</msg>
<msg timestamp="20170921 21:04:12.076" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:12.076" starttime="20170921 21:04:11.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:12.077" starttime="20170921 21:04:12.077"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:04:12.077" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:04:12.078" starttime="20170921 21:04:12.077"></status>
</kw>
<msg timestamp="20170921 21:04:12.078" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:12.078" starttime="20170921 21:04:11.713"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:12.078" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:12.079" starttime="20170921 21:04:12.078"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:04:12.079" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/57ce7c1d", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-21-g3b81ed4", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:04:12.079" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:04:12.079" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170921 21:04:12.079" starttime="20170921 21:04:12.079"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:12.080" starttime="20170921 21:04:11.712"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:12.080" starttime="20170921 21:01:07.088"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:04:12.083" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:04:12.084" starttime="20170921 21:04:12.083"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:04:12.085" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:04:12.085" starttime="20170921 21:04:12.084"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:04:12.085" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:04:12.085" starttime="20170921 21:04:12.085"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:04:12.086" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:04:12.086" starttime="20170921 21:04:12.086"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:04:12.263" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:04:12.263" starttime="20170921 21:04:12.087"></status>
</kw>
<msg timestamp="20170921 21:04:12.263" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:04:12.263" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:12.263" starttime="20170921 21:04:12.086"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:04:12.264" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:12.264" starttime="20170921 21:04:12.264"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:12.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:12.265" starttime="20170921 21:04:12.265"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:12.265" starttime="20170921 21:04:12.082"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:12.265" starttime="20170921 21:04:12.082"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:12.265" starttime="20170921 21:04:12.081"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:04:12.266" level="INFO">${base_uri} = /xyz/openbmc_project/software/57ce7c1d</msg>
<status status="PASS" endtime="20170921 21:04:12.266" starttime="20170921 21:04:12.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:12.267" starttime="20170921 21:04:12.266"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:04:12.402" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/57ce7c1d, headers=None json=None</msg>
<msg timestamp="20170921 21:04:12.402" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:12.402" starttime="20170921 21:04:12.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:12.403" starttime="20170921 21:04:12.402"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:04:12.404" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:04:12.404" starttime="20170921 21:04:12.403"></status>
</kw>
<msg timestamp="20170921 21:04:12.404" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:12.404" starttime="20170921 21:04:12.081"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:12.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:12.405" starttime="20170921 21:04:12.404"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:04:12.406" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "Path": "/tmp/images/57ce7c1d", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "v1.99.10-21-g3b81ed4", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:04:12.406" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:04:12.406" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.op...</msg>
<status status="PASS" endtime="20170921 21:04:12.406" starttime="20170921 21:04:12.406"></status>
</kw>
<msg timestamp="20170921 21:04:12.407" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activ...</msg>
<status status="PASS" endtime="20170921 21:04:12.407" starttime="20170921 21:04:12.080"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${ACTIVE}</arg>
</arguments>
<msg timestamp="20170921 21:04:12.408" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:12.408" starttime="20170921 21:04:12.407"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:12.408" starttime="20170921 21:00:39.425"></status>
</kw>
<kw name="OBMC Reboot (off)" library="boot_utils">
<doc>Do "OBMC Reboot (off)" boot test.</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=OBMC Reboot (off)</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170921 21:04:12.409" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=OBMC Reboot (off)  loc_stack_mode=normal  loc_quiet=1</msg>
<status status="PASS" endtime="20170921 21:04:12.409" starttime="20170921 21:04:12.409"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=OBMC Reboot (off)</arg>
<arg>loc_stack_mode=normal</arg>
<arg>loc_quiet=1</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:12.415" starttime="20170921 21:04:12.415"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20170921 21:04:12.416" level="INFO">${boot_stack} = OBMC Reboot (off)</msg>
<msg timestamp="20170921 21:04:12.417" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20170921 21:04:12.418" level="INFO">${quiet} = 1</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170921 21:04:12.504" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:04:12.504" level="INFO">Logging into '9.3.181.15:22' as 'root'.</msg>
<msg timestamp="20170921 21:04:13.289" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170921 21:04:13.290" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170921 21:04:13.376" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170921 21:04:13.385" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170921 21:04:13.385" level="INFO">${stderr} = </msg>
<msg timestamp="20170921 21:04:13.385" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170921 21:04:13.385" starttime="20170921 21:04:12.488"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170921 21:04:13.386" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170921 21:04:13.386" starttime="20170921 21:04:13.386"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170921 21:04:13.387" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170921 21:04:13.387" starttime="20170921 21:04:13.386"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:13.387" starttime="20170921 21:04:12.486"></status>
</kw>
<msg timestamp="20170921 21:04:13.387" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170921 21:04:13.597" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:04:13.622" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:04:13.623" starttime="20170921 21:04:13.621"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:04:13.623" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:04:13.623" starttime="20170921 21:04:13.623"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:04:13.624" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:04:13.624" starttime="20170921 21:04:13.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:04:13.625" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:04:13.625" starttime="20170921 21:04:13.624"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:04:13.818" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:04:13.818" starttime="20170921 21:04:13.626"></status>
</kw>
<msg timestamp="20170921 21:04:13.818" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:04:13.818" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:13.818" starttime="20170921 21:04:13.625"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:04:13.819" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:13.819" starttime="20170921 21:04:13.818"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:13.819" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:13.819" starttime="20170921 21:04:13.819"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:13.820" starttime="20170921 21:04:13.620"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:13.820" starttime="20170921 21:04:13.620"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:13.820" starttime="20170921 21:04:13.619"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:04:13.820" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170921 21:04:13.820" starttime="20170921 21:04:13.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:13.821" starttime="20170921 21:04:13.821"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:04:13.883" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20170921 21:04:13.883" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:13.883" starttime="20170921 21:04:13.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:13.884" starttime="20170921 21:04:13.883"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:04:13.884" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:04:13.884" starttime="20170921 21:04:13.884"></status>
</kw>
<msg timestamp="20170921 21:04:13.884" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:13.884" starttime="20170921 21:04:13.618"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:13.885" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:13.885" starttime="20170921 21:04:13.885"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:04:13.886" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:04:13.886" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:04:13.886" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20170921 21:04:13.886" starttime="20170921 21:04:13.886"></status>
</kw>
<msg timestamp="20170921 21:04:13.886" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170921 21:04:13.886" starttime="20170921 21:04:13.618"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:13.887" starttime="20170921 21:04:13.617"></status>
</kw>
<msg timestamp="20170921 21:04:13.887" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20170921 21:04:13.887" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20170921 21:04:13.887" starttime="20170921 21:04:13.611"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:13.888" starttime="20170921 21:04:13.888"></status>
</kw>
<msg timestamp="20170921 21:04:13.888" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170921 21:04:13.888" starttime="20170921 21:04:13.887"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170921 21:04:13.901" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20170921 21:04:13.901" starttime="20170921 21:04:13.900"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:04:13.902" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20170921 21:04:13.902" starttime="20170921 21:04:13.901"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:04:13.905" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:04:13.905" starttime="20170921 21:04:13.904"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:04:13.906" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:04:13.906" starttime="20170921 21:04:13.905"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:04:13.906" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:04:13.906" starttime="20170921 21:04:13.906"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:04:13.907" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:04:13.907" starttime="20170921 21:04:13.907"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:04:14.107" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:04:14.107" starttime="20170921 21:04:13.908"></status>
</kw>
<msg timestamp="20170921 21:04:14.107" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:04:14.107" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:14.107" starttime="20170921 21:04:13.907"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:04:14.108" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:14.108" starttime="20170921 21:04:14.108"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:14.109" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:14.109" starttime="20170921 21:04:14.108"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:14.109" starttime="20170921 21:04:13.904"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:14.109" starttime="20170921 21:04:13.903"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:14.109" starttime="20170921 21:04:13.903"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:04:14.110" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170921 21:04:14.110" starttime="20170921 21:04:14.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:04:14.110" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:04:14.111" starttime="20170921 21:04:14.110"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:14.115" starttime="20170921 21:04:14.111"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170921 21:04:14.118" level="INFO">${msg} = URI:https://9.3.181.15/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20170921 21:04:14.118" starttime="20170921 21:04:14.117"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170921 21:04:14.119" level="INFO">URI:https://9.3.181.15/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170921 21:04:14.120" starttime="20170921 21:04:14.119"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:14.120" starttime="20170921 21:04:14.118"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:14.120" starttime="20170921 21:04:14.116"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:04:14.339" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170921 21:04:14.339" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:14.339" starttime="20170921 21:04:14.121"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170921 21:04:14.340" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170921 21:04:14.340" starttime="20170921 21:04:14.340"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170921 21:04:14.341" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170921 21:04:14.341" starttime="20170921 21:04:14.341"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:14.342" starttime="20170921 21:04:14.340"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:14.342" starttime="20170921 21:04:14.339"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:04:14.343" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:04:14.343" starttime="20170921 21:04:14.342"></status>
</kw>
<msg timestamp="20170921 21:04:14.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:14.343" starttime="20170921 21:04:13.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:14.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:14.344" starttime="20170921 21:04:14.343"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170921 21:04:14.345" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:04:14.345" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:04:14.345" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170921 21:04:14.345" starttime="20170921 21:04:14.344"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:14.345" starttime="20170921 21:04:13.901"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:14.345" starttime="20170921 21:04:13.900"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:14.345" starttime="20170921 21:04:13.889"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20170921 21:04:14.347" starttime="20170921 21:04:14.346"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170921 21:04:14.347" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20170921 21:04:14.347" starttime="20170921 21:04:14.347"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:04:14.352" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:04:14.353" starttime="20170921 21:04:14.351"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:04:14.353" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:04:14.353" starttime="20170921 21:04:14.353"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:04:14.354" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:04:14.354" starttime="20170921 21:04:14.354"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:04:14.355" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:04:14.355" starttime="20170921 21:04:14.354"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:04:14.570" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:04:14.570" starttime="20170921 21:04:14.355"></status>
</kw>
<msg timestamp="20170921 21:04:14.570" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:04:14.570" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:14.571" starttime="20170921 21:04:14.355"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:04:14.571" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:14.571" starttime="20170921 21:04:14.571"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:14.572" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:14.572" starttime="20170921 21:04:14.572"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:14.572" starttime="20170921 21:04:14.350"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:14.572" starttime="20170921 21:04:14.350"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:14.572" starttime="20170921 21:04:14.349"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:04:14.573" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170921 21:04:14.573" starttime="20170921 21:04:14.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:14.574" starttime="20170921 21:04:14.573"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:04:14.637" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20170921 21:04:14.637" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:14.637" starttime="20170921 21:04:14.574"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:14.638" starttime="20170921 21:04:14.637"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:04:14.638" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:04:14.638" starttime="20170921 21:04:14.638"></status>
</kw>
<msg timestamp="20170921 21:04:14.638" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:14.638" starttime="20170921 21:04:14.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:14.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:14.639" starttime="20170921 21:04:14.639"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:04:14.640" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:04:14.640" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:04:14.640" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20170921 21:04:14.640" starttime="20170921 21:04:14.639"></status>
</kw>
<msg timestamp="20170921 21:04:14.640" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170921 21:04:14.640" starttime="20170921 21:04:14.348"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:14.640" starttime="20170921 21:04:14.348"></status>
</kw>
<msg timestamp="20170921 21:04:14.640" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170921 21:04:14.640" starttime="20170921 21:04:14.347"></status>
</kw>
<msg timestamp="20170921 21:04:14.641" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170921 21:04:14.641" starttime="20170921 21:04:14.346"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170921 21:04:14.641" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:14.641" starttime="20170921 21:04:14.641"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:14.641" starttime="20170921 21:04:13.610"></status>
</kw>
<msg timestamp="20170921 21:04:14.704" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170921 21:04:14.744" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170921 21:04:14.750" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170921 21:04:14.750" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:04:14.827" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:04:14.830" starttime="20170921 21:04:14.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:04:14.831" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:04:14.831" starttime="20170921 21:04:14.830"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:04:14.832" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:04:14.832" starttime="20170921 21:04:14.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:04:14.833" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:04:14.833" starttime="20170921 21:04:14.833"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:04:15.029" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:04:15.029" starttime="20170921 21:04:14.834"></status>
</kw>
<msg timestamp="20170921 21:04:15.029" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:04:15.029" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.029" starttime="20170921 21:04:14.834"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:04:15.030" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.030" starttime="20170921 21:04:15.030"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:15.031" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.031" starttime="20170921 21:04:15.031"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:15.032" starttime="20170921 21:04:14.824"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:15.032" starttime="20170921 21:04:14.823"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:15.032" starttime="20170921 21:04:14.820"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:04:15.033" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170921 21:04:15.033" starttime="20170921 21:04:15.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:15.034" starttime="20170921 21:04:15.033"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:04:15.122" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170921 21:04:15.122" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.122" starttime="20170921 21:04:15.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:15.123" starttime="20170921 21:04:15.123"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:04:15.124" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:04:15.124" starttime="20170921 21:04:15.123"></status>
</kw>
<msg timestamp="20170921 21:04:15.124" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.124" starttime="20170921 21:04:14.818"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:15.125" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.125" starttime="20170921 21:04:15.124"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:04:15.125" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:04:15.125" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:04:15.125" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170921 21:04:15.126" starttime="20170921 21:04:15.125"></status>
</kw>
<msg timestamp="20170921 21:04:15.126" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170921 21:04:15.126" starttime="20170921 21:04:14.816"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:15.126" starttime="20170921 21:04:14.807"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:04:15.131" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:04:15.131" starttime="20170921 21:04:15.130"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:04:15.132" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:04:15.132" starttime="20170921 21:04:15.132"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:04:15.133" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:04:15.133" starttime="20170921 21:04:15.133"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:04:15.134" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:04:15.134" starttime="20170921 21:04:15.134"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:04:15.384" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:04:15.384" starttime="20170921 21:04:15.135"></status>
</kw>
<msg timestamp="20170921 21:04:15.384" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:04:15.384" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.384" starttime="20170921 21:04:15.135"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:04:15.385" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.385" starttime="20170921 21:04:15.385"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:15.386" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.386" starttime="20170921 21:04:15.385"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:15.386" starttime="20170921 21:04:15.129"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:15.386" starttime="20170921 21:04:15.129"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:15.386" starttime="20170921 21:04:15.128"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:04:15.387" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170921 21:04:15.387" starttime="20170921 21:04:15.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:15.387" starttime="20170921 21:04:15.387"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:04:15.498" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170921 21:04:15.498" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.498" starttime="20170921 21:04:15.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:15.499" starttime="20170921 21:04:15.499"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:04:15.499" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:04:15.500" starttime="20170921 21:04:15.499"></status>
</kw>
<msg timestamp="20170921 21:04:15.500" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.500" starttime="20170921 21:04:15.128"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:15.500" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.501" starttime="20170921 21:04:15.500"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:04:15.501" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:04:15.501" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:04:15.501" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170921 21:04:15.501" starttime="20170921 21:04:15.501"></status>
</kw>
<msg timestamp="20170921 21:04:15.502" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170921 21:04:15.502" starttime="20170921 21:04:15.127"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:15.502" starttime="20170921 21:04:15.127"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:15.504" starttime="20170921 21:04:15.503"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>New Get Boot Progress</arg>
</arguments>
<assign>
<var>${new_status}</var>
<var>${new_value}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:04:15.508" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:04:15.508" starttime="20170921 21:04:15.508"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:04:15.509" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:04:15.509" starttime="20170921 21:04:15.509"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:04:15.510" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:04:15.510" starttime="20170921 21:04:15.509"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:04:15.511" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:04:15.511" starttime="20170921 21:04:15.510"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:04:15.727" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:04:15.727" starttime="20170921 21:04:15.512"></status>
</kw>
<msg timestamp="20170921 21:04:15.727" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:04:15.727" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.727" starttime="20170921 21:04:15.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:04:15.728" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.728" starttime="20170921 21:04:15.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:15.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.729" starttime="20170921 21:04:15.728"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:15.729" starttime="20170921 21:04:15.507"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:15.729" starttime="20170921 21:04:15.507"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:15.729" starttime="20170921 21:04:15.506"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:04:15.730" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170921 21:04:15.730" starttime="20170921 21:04:15.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:15.730" starttime="20170921 21:04:15.730"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:04:15.820" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170921 21:04:15.820" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.820" starttime="20170921 21:04:15.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:15.821" starttime="20170921 21:04:15.821"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:04:15.821" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:04:15.821" starttime="20170921 21:04:15.821"></status>
</kw>
<msg timestamp="20170921 21:04:15.822" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.822" starttime="20170921 21:04:15.505"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:15.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:15.822" starttime="20170921 21:04:15.822"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:04:15.823" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:04:15.823" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:04:15.823" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status status="PASS" endtime="20170921 21:04:15.823" starttime="20170921 21:04:15.823"></status>
</kw>
<msg timestamp="20170921 21:04:15.823" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20170921 21:04:15.824" starttime="20170921 21:04:15.505"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:15.824" starttime="20170921 21:04:15.504"></status>
</kw>
<msg timestamp="20170921 21:04:15.824" level="INFO">${new_status} = PASS</msg>
<msg timestamp="20170921 21:04:15.824" level="INFO">${new_value} = Unspecified</msg>
<status status="PASS" endtime="20170921 21:04:15.824" starttime="20170921 21:04:15.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${new_status}' == 'PASS'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
</arguments>
<msg timestamp="20170921 21:04:15.826" level="INFO">${boot_prog_method} = New</msg>
<status status="PASS" endtime="20170921 21:04:15.826" starttime="20170921 21:04:15.825"></status>
</kw>
<kw name="Rqpvars" library="gen_robot_print">
<arguments>
<arg>boot_prog_method</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:15.827" starttime="20170921 21:04:15.826"></status>
</kw>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170921 21:04:15.827" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170921 21:04:15.827" starttime="20170921 21:04:15.827"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:15.827" starttime="20170921 21:04:15.825"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:15.827" starttime="20170921 21:04:15.824"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:15.828" starttime="20170921 21:04:15.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:04:15.832" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:04:15.833" starttime="20170921 21:04:15.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:04:15.833" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:04:15.833" starttime="20170921 21:04:15.833"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:04:15.834" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:04:15.834" starttime="20170921 21:04:15.834"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:04:15.835" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:04:15.835" starttime="20170921 21:04:15.834"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:04:16.017" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:04:16.017" starttime="20170921 21:04:15.835"></status>
</kw>
<msg timestamp="20170921 21:04:16.017" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:04:16.017" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:16.017" starttime="20170921 21:04:15.835"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:04:16.018" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:16.018" starttime="20170921 21:04:16.017"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:16.019" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:16.019" starttime="20170921 21:04:16.018"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:16.019" starttime="20170921 21:04:15.831"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:16.019" starttime="20170921 21:04:15.831"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:16.020" starttime="20170921 21:04:15.830"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:04:16.020" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170921 21:04:16.021" starttime="20170921 21:04:16.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:16.021" starttime="20170921 21:04:16.021"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:04:16.118" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170921 21:04:16.118" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:16.118" starttime="20170921 21:04:16.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:16.119" starttime="20170921 21:04:16.119"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:04:16.120" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:04:16.120" starttime="20170921 21:04:16.120"></status>
</kw>
<msg timestamp="20170921 21:04:16.120" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:16.120" starttime="20170921 21:04:15.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:16.121" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:16.121" starttime="20170921 21:04:16.120"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:04:16.122" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:04:16.122" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:04:16.122" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status status="PASS" endtime="20170921 21:04:16.122" starttime="20170921 21:04:16.121"></status>
</kw>
<msg timestamp="20170921 21:04:16.122" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20170921 21:04:16.122" starttime="20170921 21:04:15.829"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:16.123" starttime="20170921 21:04:15.828"></status>
</kw>
<msg timestamp="20170921 21:04:16.123" level="INFO">${state} = Unspecified</msg>
<status status="PASS" endtime="20170921 21:04:16.123" starttime="20170921 21:04:15.828"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:16.123" starttime="20170921 21:04:15.502"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:04:16.129" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:04:16.130" starttime="20170921 21:04:16.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:04:16.131" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:04:16.131" starttime="20170921 21:04:16.130"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:04:16.132" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:04:16.132" starttime="20170921 21:04:16.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:04:16.133" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:04:16.133" starttime="20170921 21:04:16.132"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:04:16.320" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:04:16.320" starttime="20170921 21:04:16.134"></status>
</kw>
<msg timestamp="20170921 21:04:16.320" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:04:16.320" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:16.321" starttime="20170921 21:04:16.133"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:04:16.321" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:16.321" starttime="20170921 21:04:16.321"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:16.322" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:16.322" starttime="20170921 21:04:16.322"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:16.322" starttime="20170921 21:04:16.128"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:16.322" starttime="20170921 21:04:16.127"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:16.323" starttime="20170921 21:04:16.126"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:04:16.323" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170921 21:04:16.323" starttime="20170921 21:04:16.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:16.324" starttime="20170921 21:04:16.323"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:04:16.421" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170921 21:04:16.421" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:16.421" starttime="20170921 21:04:16.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:16.422" starttime="20170921 21:04:16.422"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:04:16.422" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:04:16.422" starttime="20170921 21:04:16.422"></status>
</kw>
<msg timestamp="20170921 21:04:16.423" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:04:16.423" starttime="20170921 21:04:16.125"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:04:16.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:04:16.423" starttime="20170921 21:04:16.423"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:04:16.424" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:04:16.424" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:04:16.424" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170921 21:04:16.424" starttime="20170921 21:04:16.424"></status>
</kw>
<msg timestamp="20170921 21:04:16.424" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170921 21:04:16.424" starttime="20170921 21:04:16.124"></status>
</kw>
<status status="PASS" endtime="20170921 21:04:16.425" starttime="20170921 21:04:16.124"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>OBMC Reboot (off)</arg>
</arguments>
<msg timestamp="20170921 21:04:16.432" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/sbin/reboot</arg>
<arg>fork=${1}</arg>
</arguments>
<msg timestamp="20170921 21:04:16.450" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:04:16.450" level="INFO">Starting command '/sbin/reboot'.</msg>
<status status="PASS" endtime="20170921 21:04:16.457" starttime="20170921 21:04:16.432"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170921 21:04:20.485" level="FAIL">
#(UTC) 2017/09/21 21:04:20.482239 -    4.055616 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170921 21:04:20.486" starttime="20170921 21:04:16.469"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170921 21:04:24.507" level="FAIL">
#(UTC) 2017/09/21 21:04:24.504646 -    4.022407 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170921 21:04:24.508" starttime="20170921 21:04:20.489"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170921 21:04:28.531" level="FAIL">
#(UTC) 2017/09/21 21:04:28.528900 -    4.024254 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170921 21:04:28.531" starttime="20170921 21:04:24.511"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170921 21:04:32.547" level="FAIL">
#(UTC) 2017/09/21 21:04:32.544646 -    4.015746 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170921 21:04:32.548" starttime="20170921 21:04:28.534"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170921 21:04:37.562" level="FAIL">
#(UTC) 2017/09/21 21:04:37.560506 -    5.015860 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             60
</msg>
<status status="FAIL" endtime="20170921 21:04:37.563" starttime="20170921 21:04:32.551"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:04:42.577" starttime="20170921 21:04:37.566"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170921 21:04:47.601" level="FAIL">
#(UTC) 2017/09/21 21:04:47.598646 -   10.038140 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170921 21:04:47.603" starttime="20170921 21:04:42.589"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170921 21:04:52.642" level="FAIL">
#(UTC) 2017/09/21 21:04:52.628645 -    5.029999 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170921 21:04:52.648" starttime="20170921 21:04:47.605"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170921 21:04:57.677" level="FAIL">
#(UTC) 2017/09/21 21:04:57.674399 -    5.045754 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170921 21:04:57.678" starttime="20170921 21:04:52.662"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170921 21:05:02.693" level="FAIL">
#(UTC) 2017/09/21 21:05:02.690368 -    5.015969 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170921 21:05:02.694" starttime="20170921 21:04:57.681"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170921 21:05:07.733" level="FAIL">
#(UTC) 2017/09/21 21:05:07.718951 -    5.028583 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170921 21:05:07.738" starttime="20170921 21:05:02.696"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170921 21:05:12.770" level="FAIL">
#(UTC) 2017/09/21 21:05:12.767272 -    5.048321 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170921 21:05:12.771" starttime="20170921 21:05:07.753"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170921 21:05:17.813" level="FAIL">
#(UTC) 2017/09/21 21:05:17.798832 -    5.031560 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             20
</msg>
<status status="FAIL" endtime="20170921 21:05:17.817" starttime="20170921 21:05:12.774"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:05:21.848" starttime="20170921 21:05:17.832"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/uptime | cut -f 1 -d ' '</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170921 21:05:21.863" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:05:21.864" level="INFO">Executing command 'cat /proc/uptime | cut -f 1 -d ' ''.</msg>
<msg timestamp="20170921 21:05:21.866" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:05:21.866" level="INFO">Logging into '9.3.181.15:22' as 'root'.</msg>
<msg timestamp="20170921 21:05:32.180" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170921 21:05:32.181" level="INFO">Executing command 'cat /proc/uptime | cut -f 1 -d ' ''.</msg>
<msg timestamp="20170921 21:05:32.257" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170921 21:05:32.265" starttime="20170921 21:05:21.853"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:05:32.309" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:05:32.310" starttime="20170921 21:05:32.308"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:05:32.311" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:05:32.311" starttime="20170921 21:05:32.311"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:05:32.312" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:05:32.312" starttime="20170921 21:05:32.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:05:32.312" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:05:32.312" starttime="20170921 21:05:32.312"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:05:42.329" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.181.15', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20170921 21:05:42.330" starttime="20170921 21:05:32.313"></status>
</kw>
<msg timestamp="20170921 21:05:42.330" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170921 21:05:42.330" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.181.15', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20170921 21:05:42.330" starttime="20170921 21:05:32.313"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:05:42.331" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170921 21:05:42.331" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.181.15', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170921 21:05:42.331" starttime="20170921 21:05:42.330"></status>
</kw>
<status status="FAIL" endtime="20170921 21:05:42.331" starttime="20170921 21:05:32.307"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:06:02.333" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:06:02.334" starttime="20170921 21:06:02.333"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:06:02.334" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:06:02.334" starttime="20170921 21:06:02.334"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:06:02.335" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:06:02.335" starttime="20170921 21:06:02.335"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:06:02.336" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:06:02.336" starttime="20170921 21:06:02.335"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:06:12.349" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.181.15', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20170921 21:06:12.349" starttime="20170921 21:06:02.337"></status>
</kw>
<msg timestamp="20170921 21:06:12.349" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170921 21:06:12.350" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.181.15', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20170921 21:06:12.350" starttime="20170921 21:06:02.336"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:06:12.350" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170921 21:06:12.351" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.181.15', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170921 21:06:12.351" starttime="20170921 21:06:12.350"></status>
</kw>
<status status="FAIL" endtime="20170921 21:06:12.351" starttime="20170921 21:06:02.332"></status>
</kw>
<msg timestamp="20170921 21:06:12.351" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.181.15', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170921 21:06:12.351" starttime="20170921 21:05:32.307"></status>
</kw>
<status status="FAIL" endtime="20170921 21:06:12.351" starttime="20170921 21:05:32.306"></status>
</kw>
<status status="FAIL" endtime="20170921 21:06:12.351" starttime="20170921 21:05:32.305"></status>
</kw>
<status status="FAIL" endtime="20170921 21:06:12.352" starttime="20170921 21:05:32.305"></status>
</kw>
<status status="FAIL" endtime="20170921 21:06:12.352" starttime="20170921 21:05:32.304"></status>
</kw>
<msg timestamp="20170921 21:06:12.353" level="FAIL">
#(UTC) 2017/09/21 21:06:12.352148 -   40.087174 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.181.15', port=443): Read timed out. (read timeout=10.0): FAIL != PASS
</msg>
<status status="FAIL" endtime="20170921 21:06:12.353" starttime="20170921 21:05:32.302"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:06:14.359" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:06:14.360" starttime="20170921 21:06:14.359"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:06:14.360" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:06:14.360" starttime="20170921 21:06:14.360"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:06:14.361" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:06:14.361" starttime="20170921 21:06:14.361"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:06:14.362" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:06:14.362" starttime="20170921 21:06:14.361"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:06:24.373" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.181.15', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20170921 21:06:24.373" starttime="20170921 21:06:14.362"></status>
</kw>
<msg timestamp="20170921 21:06:24.373" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170921 21:06:24.374" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.181.15', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20170921 21:06:24.374" starttime="20170921 21:06:14.362"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:06:24.374" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170921 21:06:24.375" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.181.15', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170921 21:06:24.375" starttime="20170921 21:06:24.374"></status>
</kw>
<status status="FAIL" endtime="20170921 21:06:24.375" starttime="20170921 21:06:14.358"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:06:44.377" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:06:44.377" starttime="20170921 21:06:44.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:06:44.378" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:06:44.378" starttime="20170921 21:06:44.378"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:06:44.379" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:06:44.379" starttime="20170921 21:06:44.379"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:06:44.380" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:06:44.380" starttime="20170921 21:06:44.379"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:06:44.594" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:06:44.595" starttime="20170921 21:06:44.381"></status>
</kw>
<msg timestamp="20170921 21:06:44.595" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:06:44.595" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:06:44.595" starttime="20170921 21:06:44.380"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:06:44.596" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:06:44.596" starttime="20170921 21:06:44.595"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:06:44.597" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:06:44.597" starttime="20170921 21:06:44.596"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:44.597" starttime="20170921 21:06:44.375"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:44.597" starttime="20170921 21:06:14.358"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:44.597" starttime="20170921 21:06:14.357"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:06:44.598" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170921 21:06:44.598" starttime="20170921 21:06:44.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:06:44.598" starttime="20170921 21:06:44.598"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:06:46.453" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170921 21:06:46.453" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170921 21:06:46.453" starttime="20170921 21:06:44.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:06:46.454" starttime="20170921 21:06:46.454"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:06:46.454" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:06:46.455" starttime="20170921 21:06:46.454"></status>
</kw>
<msg timestamp="20170921 21:06:46.455" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170921 21:06:46.455" starttime="20170921 21:06:14.356"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:06:46.456" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170921 21:06:46.456" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170921 21:06:46.456" starttime="20170921 21:06:46.455"></status>
</kw>
<status status="FAIL" endtime="20170921 21:06:46.456" starttime="20170921 21:06:14.355"></status>
</kw>
<status status="FAIL" endtime="20170921 21:06:46.456" starttime="20170921 21:06:14.355"></status>
</kw>
<msg timestamp="20170921 21:06:46.457" level="FAIL">
#(UTC) 2017/09/21 21:06:46.456384 -   34.104236 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    404 != 200
</msg>
<status status="FAIL" endtime="20170921 21:06:46.457" starttime="20170921 21:06:14.353"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:06:48.463" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:06:48.463" starttime="20170921 21:06:48.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:06:48.464" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:06:48.464" starttime="20170921 21:06:48.463"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:06:48.464" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:06:48.464" starttime="20170921 21:06:48.464"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:06:48.465" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:06:48.465" starttime="20170921 21:06:48.465"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:06:50.114" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:06:50.114" starttime="20170921 21:06:48.466"></status>
</kw>
<msg timestamp="20170921 21:06:50.114" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:06:50.115" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:06:50.115" starttime="20170921 21:06:48.465"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:06:50.115" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:06:50.115" starttime="20170921 21:06:50.115"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:06:50.117" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:06:50.117" starttime="20170921 21:06:50.116"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:50.117" starttime="20170921 21:06:48.462"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:50.117" starttime="20170921 21:06:48.461"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:50.117" starttime="20170921 21:06:48.461"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:06:50.118" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170921 21:06:50.118" starttime="20170921 21:06:50.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:06:50.118" starttime="20170921 21:06:50.118"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:06:52.012" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170921 21:06:52.012" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170921 21:06:52.013" starttime="20170921 21:06:50.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:06:52.013" starttime="20170921 21:06:52.013"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:06:52.014" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:06:52.014" starttime="20170921 21:06:52.014"></status>
</kw>
<msg timestamp="20170921 21:06:52.014" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170921 21:06:52.014" starttime="20170921 21:06:48.460"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:06:52.015" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170921 21:06:52.015" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170921 21:06:52.015" starttime="20170921 21:06:52.014"></status>
</kw>
<status status="FAIL" endtime="20170921 21:06:52.015" starttime="20170921 21:06:48.459"></status>
</kw>
<status status="FAIL" endtime="20170921 21:06:52.015" starttime="20170921 21:06:48.459"></status>
</kw>
<msg timestamp="20170921 21:06:52.016" level="FAIL">
#(UTC) 2017/09/21 21:06:52.015507 -    5.559123 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    404 != 200
</msg>
<status status="FAIL" endtime="20170921 21:06:52.016" starttime="20170921 21:06:48.457"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:06:54.022" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:06:54.022" starttime="20170921 21:06:54.022"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:06:54.023" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:06:54.023" starttime="20170921 21:06:54.023"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:06:54.024" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:06:54.024" starttime="20170921 21:06:54.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:06:54.024" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:06:54.024" starttime="20170921 21:06:54.024"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:06:54.541" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:06:54.541" starttime="20170921 21:06:54.025"></status>
</kw>
<msg timestamp="20170921 21:06:54.541" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:06:54.541" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:06:54.541" starttime="20170921 21:06:54.025"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:06:54.542" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:06:54.542" starttime="20170921 21:06:54.542"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:06:54.543" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:06:54.543" starttime="20170921 21:06:54.542"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:54.543" starttime="20170921 21:06:54.021"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:54.543" starttime="20170921 21:06:54.021"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:54.543" starttime="20170921 21:06:54.020"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:06:54.544" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170921 21:06:54.544" starttime="20170921 21:06:54.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:06:54.544" starttime="20170921 21:06:54.544"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:06:55.047" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170921 21:06:55.048" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170921 21:06:55.048" starttime="20170921 21:06:54.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:06:55.049" starttime="20170921 21:06:55.048"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:06:55.049" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:06:55.049" starttime="20170921 21:06:55.049"></status>
</kw>
<msg timestamp="20170921 21:06:55.049" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170921 21:06:55.049" starttime="20170921 21:06:54.019"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:06:55.050" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170921 21:06:55.050" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170921 21:06:55.050" starttime="20170921 21:06:55.050"></status>
</kw>
<status status="FAIL" endtime="20170921 21:06:55.051" starttime="20170921 21:06:54.019"></status>
</kw>
<status status="FAIL" endtime="20170921 21:06:55.051" starttime="20170921 21:06:54.018"></status>
</kw>
<msg timestamp="20170921 21:06:55.051" level="FAIL">
#(UTC) 2017/09/21 21:06:55.050832 -    3.035325 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[rest]:                                    404 != 200
</msg>
<status status="FAIL" endtime="20170921 21:06:55.051" starttime="20170921 21:06:54.017"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'rest': '^1$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:06:57.057" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:06:57.057" starttime="20170921 21:06:57.057"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:06:57.058" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:06:57.058" starttime="20170921 21:06:57.058"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:06:57.059" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:06:57.059" starttime="20170921 21:06:57.058"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:06:57.059" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:06:57.060" starttime="20170921 21:06:57.059"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:06:57.758" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:06:57.758" starttime="20170921 21:06:57.060"></status>
</kw>
<msg timestamp="20170921 21:06:57.758" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:06:57.758" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:06:57.758" starttime="20170921 21:06:57.060"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:06:57.759" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:06:57.759" starttime="20170921 21:06:57.759"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:06:57.760" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:06:57.760" starttime="20170921 21:06:57.759"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:57.760" starttime="20170921 21:06:57.056"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:57.760" starttime="20170921 21:06:57.056"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:57.760" starttime="20170921 21:06:57.055"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:06:57.761" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170921 21:06:57.761" starttime="20170921 21:06:57.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:06:57.762" starttime="20170921 21:06:57.761"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:06:59.332" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170921 21:06:59.332" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:06:59.332" starttime="20170921 21:06:57.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:06:59.333" starttime="20170921 21:06:59.333"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:06:59.333" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:06:59.334" starttime="20170921 21:06:59.333"></status>
</kw>
<msg timestamp="20170921 21:06:59.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:06:59.334" starttime="20170921 21:06:57.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:06:59.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:06:59.335" starttime="20170921 21:06:59.334"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:06:59.335" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:06:59.335" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:06:59.335" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170921 21:06:59.335" starttime="20170921 21:06:59.335"></status>
</kw>
<msg timestamp="20170921 21:06:59.336" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170921 21:06:59.336" starttime="20170921 21:06:57.054"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:59.336" starttime="20170921 21:06:57.053"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:59.336" starttime="20170921 21:06:57.052"></status>
</kw>
<msg timestamp="20170921 21:06:59.341" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'host': u'^Off$', u'chassis': u'^Off$', u'rest': u'^1$', u'boot_progress': u'^Off|Unspecified$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:06:59.353" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:06:59.354" starttime="20170921 21:06:59.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:06:59.354" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:06:59.354" starttime="20170921 21:06:59.354"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:06:59.355" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:06:59.355" starttime="20170921 21:06:59.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:06:59.356" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:06:59.356" starttime="20170921 21:06:59.355"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:06:59.776" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:06:59.777" starttime="20170921 21:06:59.356"></status>
</kw>
<msg timestamp="20170921 21:06:59.777" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:06:59.777" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:06:59.777" starttime="20170921 21:06:59.356"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:06:59.778" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:06:59.778" starttime="20170921 21:06:59.777"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:06:59.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:06:59.779" starttime="20170921 21:06:59.778"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:59.779" starttime="20170921 21:06:59.352"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:59.779" starttime="20170921 21:06:59.352"></status>
</kw>
<status status="PASS" endtime="20170921 21:06:59.779" starttime="20170921 21:06:59.351"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:06:59.780" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170921 21:06:59.780" starttime="20170921 21:06:59.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:06:59.780" starttime="20170921 21:06:59.780"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:00.471" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170921 21:07:00.472" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:00.472" starttime="20170921 21:06:59.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:00.473" starttime="20170921 21:07:00.472"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:00.473" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:00.473" starttime="20170921 21:07:00.473"></status>
</kw>
<msg timestamp="20170921 21:07:00.473" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:00.473" starttime="20170921 21:06:59.350"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:00.474" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:00.474" starttime="20170921 21:07:00.474"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:07:00.475" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:07:00.475" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:07:00.475" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170921 21:07:00.475" starttime="20170921 21:07:00.474"></status>
</kw>
<msg timestamp="20170921 21:07:00.475" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170921 21:07:00.475" starttime="20170921 21:06:59.350"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:00.475" starttime="20170921 21:06:59.349"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170921 21:07:00.477" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170921 21:07:00.478" starttime="20170921 21:07:00.477"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:00.478" starttime="20170921 21:07:00.477"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:00.478" starttime="20170921 21:07:00.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:00.482" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:00.483" starttime="20170921 21:07:00.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:00.484" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:00.484" starttime="20170921 21:07:00.484"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:00.485" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:00.485" starttime="20170921 21:07:00.484"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:00.485" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:00.485" starttime="20170921 21:07:00.485"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:00.925" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:00.925" starttime="20170921 21:07:00.486"></status>
</kw>
<msg timestamp="20170921 21:07:00.925" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:00.925" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:00.925" starttime="20170921 21:07:00.486"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:00.926" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:00.926" starttime="20170921 21:07:00.926"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:00.927" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:00.927" starttime="20170921 21:07:00.926"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:00.927" starttime="20170921 21:07:00.482"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:00.927" starttime="20170921 21:07:00.481"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:00.927" starttime="20170921 21:07:00.481"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:00.928" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170921 21:07:00.928" starttime="20170921 21:07:00.927"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:00.928" starttime="20170921 21:07:00.928"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:01.155" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170921 21:07:01.155" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:01.155" starttime="20170921 21:07:00.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:01.156" starttime="20170921 21:07:01.156"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:01.157" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:01.157" starttime="20170921 21:07:01.157"></status>
</kw>
<msg timestamp="20170921 21:07:01.157" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:01.157" starttime="20170921 21:07:00.480"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:01.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170921 21:07:01.158" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170921 21:07:01.158" starttime="20170921 21:07:01.157"></status>
</kw>
<status status="FAIL" endtime="20170921 21:07:01.158" starttime="20170921 21:07:00.479"></status>
</kw>
<status status="FAIL" endtime="20170921 21:07:01.158" starttime="20170921 21:07:00.479"></status>
</kw>
<status status="FAIL" endtime="20170921 21:07:01.158" starttime="20170921 21:07:00.478"></status>
</kw>
<status status="FAIL" endtime="20170921 21:07:01.159" starttime="20170921 21:07:00.476"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:01.162" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:01.163" starttime="20170921 21:07:01.162"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:01.163" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:01.163" starttime="20170921 21:07:01.163"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:01.164" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:01.164" starttime="20170921 21:07:01.164"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:01.165" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:01.165" starttime="20170921 21:07:01.164"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:01.619" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:01.619" starttime="20170921 21:07:01.166"></status>
</kw>
<msg timestamp="20170921 21:07:01.619" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:01.619" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:01.619" starttime="20170921 21:07:01.165"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:01.620" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:01.620" starttime="20170921 21:07:01.619"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:01.621" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:01.621" starttime="20170921 21:07:01.620"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:01.621" starttime="20170921 21:07:01.162"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:01.621" starttime="20170921 21:07:01.161"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:01.621" starttime="20170921 21:07:01.161"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:01.622" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170921 21:07:01.622" starttime="20170921 21:07:01.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:01.622" starttime="20170921 21:07:01.622"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:01.807" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170921 21:07:01.808" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:01.808" starttime="20170921 21:07:01.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:01.808" starttime="20170921 21:07:01.808"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:01.809" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:01.809" starttime="20170921 21:07:01.809"></status>
</kw>
<msg timestamp="20170921 21:07:01.809" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:01.809" starttime="20170921 21:07:01.160"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:01.810" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170921 21:07:01.810" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170921 21:07:01.810" starttime="20170921 21:07:01.809"></status>
</kw>
<status status="FAIL" endtime="20170921 21:07:01.810" starttime="20170921 21:07:01.159"></status>
</kw>
<status status="FAIL" endtime="20170921 21:07:01.810" starttime="20170921 21:07:01.159"></status>
</kw>
<msg timestamp="20170921 21:07:01.811" level="FAIL">
#(UTC) 2017/09/21 21:07:01.810669 -    6.759837 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[host]:                                    
  state[chassis]:                                 Off
  state[rest]:                                    1
  state[boot_progress]:                           
</msg>
<status status="FAIL" endtime="20170921 21:07:01.811" starttime="20170921 21:06:59.348"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{u'host': u'^Off$', u'chassis': u'^Off$', u'rest': u'^1$', u'boot_progress': u'^Off|Unspecified$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:11.817" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:11.818" starttime="20170921 21:07:11.817"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:11.818" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:11.818" starttime="20170921 21:07:11.818"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:11.819" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:11.819" starttime="20170921 21:07:11.819"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:11.820" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:11.820" starttime="20170921 21:07:11.819"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:12.213" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:12.213" starttime="20170921 21:07:11.821"></status>
</kw>
<msg timestamp="20170921 21:07:12.213" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:12.213" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:12.213" starttime="20170921 21:07:11.820"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:12.214" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:12.214" starttime="20170921 21:07:12.214"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:12.215" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:12.215" starttime="20170921 21:07:12.214"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:12.215" starttime="20170921 21:07:11.816"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:12.215" starttime="20170921 21:07:11.816"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:12.215" starttime="20170921 21:07:11.815"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:12.216" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170921 21:07:12.216" starttime="20170921 21:07:12.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:12.216" starttime="20170921 21:07:12.216"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:16.688" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170921 21:07:16.689" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:16.689" starttime="20170921 21:07:12.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:16.690" starttime="20170921 21:07:16.689"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:16.690" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:16.690" starttime="20170921 21:07:16.690"></status>
</kw>
<msg timestamp="20170921 21:07:16.690" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:16.691" starttime="20170921 21:07:11.815"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:16.691" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:16.691" starttime="20170921 21:07:16.691"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:07:16.692" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:07:16.692" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:07:16.692" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170921 21:07:16.692" starttime="20170921 21:07:16.692"></status>
</kw>
<msg timestamp="20170921 21:07:16.692" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170921 21:07:16.692" starttime="20170921 21:07:11.814"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:16.693" starttime="20170921 21:07:11.814"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170921 21:07:16.695" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170921 21:07:16.695" starttime="20170921 21:07:16.695"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:16.695" starttime="20170921 21:07:16.694"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:16.695" starttime="20170921 21:07:16.693"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:16.699" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:16.700" starttime="20170921 21:07:16.699"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:16.701" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:16.701" starttime="20170921 21:07:16.701"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:16.702" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:16.702" starttime="20170921 21:07:16.701"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:16.702" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:16.702" starttime="20170921 21:07:16.702"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:17.338" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:17.338" starttime="20170921 21:07:16.703"></status>
</kw>
<msg timestamp="20170921 21:07:17.338" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:17.338" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:17.338" starttime="20170921 21:07:16.703"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:17.339" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:17.339" starttime="20170921 21:07:17.339"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:17.340" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:17.340" starttime="20170921 21:07:17.340"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:17.340" starttime="20170921 21:07:16.699"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:17.340" starttime="20170921 21:07:16.698"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:17.340" starttime="20170921 21:07:16.697"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:17.341" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170921 21:07:17.341" starttime="20170921 21:07:17.341"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:17.342" starttime="20170921 21:07:17.341"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:20.416" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170921 21:07:20.416" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:20.416" starttime="20170921 21:07:17.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:20.417" starttime="20170921 21:07:20.416"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:20.417" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:20.417" starttime="20170921 21:07:20.417"></status>
</kw>
<msg timestamp="20170921 21:07:20.418" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:20.418" starttime="20170921 21:07:16.697"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:20.418" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:20.419" starttime="20170921 21:07:20.418"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:07:20.419" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:07:20.419" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:07:20.419" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status status="PASS" endtime="20170921 21:07:20.419" starttime="20170921 21:07:20.419"></status>
</kw>
<msg timestamp="20170921 21:07:20.420" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20170921 21:07:20.420" starttime="20170921 21:07:16.696"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:20.420" starttime="20170921 21:07:16.696"></status>
</kw>
<msg timestamp="20170921 21:07:20.420" level="INFO">${state} = Unspecified</msg>
<status status="PASS" endtime="20170921 21:07:20.420" starttime="20170921 21:07:16.695"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:20.420" starttime="20170921 21:07:16.693"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:20.424" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:20.425" starttime="20170921 21:07:20.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:20.426" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:20.426" starttime="20170921 21:07:20.425"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:20.426" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:20.426" starttime="20170921 21:07:20.426"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:20.427" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:20.427" starttime="20170921 21:07:20.427"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:21.058" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:21.059" starttime="20170921 21:07:20.428"></status>
</kw>
<msg timestamp="20170921 21:07:21.059" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:21.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:21.059" starttime="20170921 21:07:20.427"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:21.060" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:21.060" starttime="20170921 21:07:21.059"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:21.060" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:21.060" starttime="20170921 21:07:21.060"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:21.061" starttime="20170921 21:07:20.423"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:21.061" starttime="20170921 21:07:20.423"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:21.061" starttime="20170921 21:07:20.422"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:21.061" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170921 21:07:21.061" starttime="20170921 21:07:21.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:21.062" starttime="20170921 21:07:21.062"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:21.522" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170921 21:07:21.522" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:21.522" starttime="20170921 21:07:21.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:21.523" starttime="20170921 21:07:21.522"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:21.523" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:21.523" starttime="20170921 21:07:21.523"></status>
</kw>
<msg timestamp="20170921 21:07:21.523" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:21.523" starttime="20170921 21:07:20.422"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:21.524" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:21.524" starttime="20170921 21:07:21.524"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:07:21.525" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:07:21.525" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:07:21.525" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170921 21:07:21.525" starttime="20170921 21:07:21.524"></status>
</kw>
<msg timestamp="20170921 21:07:21.525" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170921 21:07:21.525" starttime="20170921 21:07:20.421"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:21.525" starttime="20170921 21:07:20.421"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:21.526" starttime="20170921 21:07:11.812"></status>
</kw>
<msg timestamp="20170921 21:07:21.531" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170921 21:07:21.531" starttime="20170921 21:04:16.426"></status>
</kw>
<msg timestamp="20170921 21:07:21.539" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170921 21:07:21.543" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170921 21:07:21.549" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170921 21:07:21.555" starttime="20170921 21:07:21.554"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:21.557" starttime="20170921 21:04:12.416"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170921 21:07:21.563" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170921 21:07:21.565" level="INFO">${boot_stack} = </msg>
<msg timestamp="20170921 21:07:21.565" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20170921 21:07:21.565" level="INFO">${quiet} = 1</msg>
<status status="PASS" endtime="20170921 21:07:21.565" starttime="20170921 21:07:21.558"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:21.565" starttime="20170921 21:04:12.414"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:21.566" starttime="20170921 21:04:12.410"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:21.566" starttime="20170921 21:04:12.408"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:21.572" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:21.572" starttime="20170921 21:07:21.572"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:21.573" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:21.573" starttime="20170921 21:07:21.573"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:21.574" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:21.574" starttime="20170921 21:07:21.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:21.574" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:21.574" starttime="20170921 21:07:21.574"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:21.930" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:21.930" starttime="20170921 21:07:21.575"></status>
</kw>
<msg timestamp="20170921 21:07:21.930" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:21.930" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:21.930" starttime="20170921 21:07:21.575"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:21.931" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:21.931" starttime="20170921 21:07:21.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:21.932" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:21.932" starttime="20170921 21:07:21.931"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:21.932" starttime="20170921 21:07:21.571"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:21.932" starttime="20170921 21:07:21.570"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:21.932" starttime="20170921 21:07:21.569"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:21.933" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170921 21:07:21.933" starttime="20170921 21:07:21.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:21.933" starttime="20170921 21:07:21.933"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:22.301" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170921 21:07:22.302" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:22.302" starttime="20170921 21:07:21.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:22.302" starttime="20170921 21:07:22.302"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:22.303" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:22.303" starttime="20170921 21:07:22.303"></status>
</kw>
<msg timestamp="20170921 21:07:22.303" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:22.303" starttime="20170921 21:07:21.568"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:22.304" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:22.304" starttime="20170921 21:07:22.303"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:07:22.304" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:07:22.305" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:07:22.305" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170921 21:07:22.305" starttime="20170921 21:07:22.304"></status>
</kw>
<msg timestamp="20170921 21:07:22.305" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170921 21:07:22.305" starttime="20170921 21:07:21.568"></status>
</kw>
<msg timestamp="20170921 21:07:22.305" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170921 21:07:22.305" starttime="20170921 21:07:21.567"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170921 21:07:22.306" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170921 21:07:22.307" starttime="20170921 21:07:22.306"></status>
</kw>
<msg timestamp="20170921 21:07:22.307" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170921 21:07:22.307" starttime="20170921 21:07:22.306"></status>
</kw>
<msg timestamp="20170921 21:07:22.307" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170921 21:07:22.307" starttime="20170921 21:07:21.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:22.308" starttime="20170921 21:07:22.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:22.308" starttime="20170921 21:07:22.308"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170921 21:07:22.309" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170921 21:07:22.309" starttime="20170921 21:07:22.309"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170921 21:07:22.310" level="INFO">${FFDC_DIR_PATH} = ./</msg>
<status status="PASS" endtime="20170921 21:07:22.310" starttime="20170921 21:07:22.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:22.311" starttime="20170921 21:07:22.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:22.311" starttime="20170921 21:07:22.311"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170921 21:07:22.312" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170921 21:07:22.312" starttime="20170921 21:07:22.312"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170921 21:07:22.314" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170921 21:07:22.314" starttime="20170921 21:07:22.313"></status>
</kw>
<msg timestamp="20170921 21:07:22.314" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170921 21:07:22.314" starttime="20170921 21:07:22.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170921 21:07:22.316" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:22.316" starttime="20170921 21:07:22.315"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:22.316" starttime="20170921 21:07:22.315"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:22.316" starttime="20170921 21:07:22.316"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170921 21:07:22.318" level="INFO">${cur_time} = 2017-09-21 21:07:22:317569</msg>
<status status="PASS" endtime="20170921 21:07:22.318" starttime="20170921 21:07:22.317"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170921 21:07:22.318" level="INFO">${cur_time} = 20170921210722317569</msg>
<status status="PASS" endtime="20170921 21:07:22.318" starttime="20170921 21:07:22.318"></status>
</kw>
<msg timestamp="20170921 21:07:22.319" level="INFO">${cur_time} = 20170921210722317569</msg>
<status status="PASS" endtime="20170921 21:07:22.319" starttime="20170921 21:07:22.317"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170921 21:07:22.320" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:22.320" starttime="20170921 21:07:22.319"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:22.320" starttime="20170921 21:07:22.309"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:22.320" starttime="20170921 21:07:21.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<kw name="Check Error And Collect FFDC" library="code_update_utils">
<doc>Collect FFDC if error log exists.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Error Logs Should Not Exist</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Error Logs Should Not Exist" library="openbmc_ffdc_utils">
<doc>Verify that error logs do not exist.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:22.325" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:22.325" starttime="20170921 21:07:22.324"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:22.326" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:22.326" starttime="20170921 21:07:22.325"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:22.326" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:22.326" starttime="20170921 21:07:22.326"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:22.327" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:22.327" starttime="20170921 21:07:22.327"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:22.727" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:22.728" starttime="20170921 21:07:22.328"></status>
</kw>
<msg timestamp="20170921 21:07:22.728" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:22.728" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:22.728" starttime="20170921 21:07:22.327"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:22.729" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:22.729" starttime="20170921 21:07:22.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:22.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:22.729" starttime="20170921 21:07:22.729"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:22.730" starttime="20170921 21:07:22.324"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:22.730" starttime="20170921 21:07:22.323"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:22.730" starttime="20170921 21:07:22.323"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:22.730" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170921 21:07:22.730" starttime="20170921 21:07:22.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:22.731" starttime="20170921 21:07:22.731"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:23.139" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170921 21:07:23.139" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:23.139" starttime="20170921 21:07:22.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:23.140" starttime="20170921 21:07:23.140"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:23.141" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:23.141" starttime="20170921 21:07:23.140"></status>
</kw>
<msg timestamp="20170921 21:07:23.141" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:23.141" starttime="20170921 21:07:22.322"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170921 21:07:23.142" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170921 21:07:23.142" level="FAIL">200 != 404</msg>
<status status="FAIL" endtime="20170921 21:07:23.142" starttime="20170921 21:07:23.141"></status>
</kw>
<status status="FAIL" endtime="20170921 21:07:23.142" starttime="20170921 21:07:22.322"></status>
</kw>
<msg timestamp="20170921 21:07:23.142" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170921 21:07:23.142" starttime="20170921 21:07:22.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'False'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.181.15</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170921 21:07:23.154" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170921 21:07:23.154" starttime="20170921 21:07:23.154"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170921 21:07:23.161" level="INFO">Running command 'ping -c 4 9.3.181.15 2&gt;&amp;1'.</msg>
<msg timestamp="20170921 21:07:26.162" level="INFO">${RC} = 0</msg>
<msg timestamp="20170921 21:07:26.163" level="INFO">${output} = PING 9.3.181.15 (9.3.181.15) 56(84) bytes of data.
64 bytes from 9.3.181.15: icmp_seq=1 ttl=62 time=1.40 ms
64 bytes from 9.3.181.15: icmp_seq=2 ttl=62 time=0.596 ms
64 bytes from 9.3.181.15: icmp_seq...</msg>
<status status="PASS" endtime="20170921 21:07:26.163" starttime="20170921 21:07:23.154"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.167" level="INFO">RC: 0
Output:
PING 9.3.181.15 (9.3.181.15) 56(84) bytes of data.
64 bytes from 9.3.181.15: icmp_seq=1 ttl=62 time=1.40 ms
64 bytes from 9.3.181.15: icmp_seq=2 ttl=62 time=0.596 ms
64 bytes from 9.3.181.15: icmp_seq=3 ttl=62 time=0.615 ms
64 bytes from 9.3.181.15: icmp_seq=4 ttl=62 time=0.598 ms

--- 9.3.181.15 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.596/0.802/1.400/0.345 ms</msg>
<status status="PASS" endtime="20170921 21:07:26.167" starttime="20170921 21:07:26.166"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:26.168" starttime="20170921 21:07:26.168"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.168" starttime="20170921 21:07:23.153"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170921 21:07:26.190" level="INFO">${cur_time} = 2017-09-21 21:07:26:189862</msg>
<status status="PASS" endtime="20170921 21:07:26.190" starttime="20170921 21:07:26.190"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170921 21:07:26.191" level="INFO">${cur_time} = 20170921210726189862</msg>
<status status="PASS" endtime="20170921 21:07:26.191" starttime="20170921 21:07:26.190"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.191" starttime="20170921 21:07:26.188"></status>
</kw>
<msg timestamp="20170921 21:07:26.197" level="INFO">${FFDC_TIME} = 20170921210726189862</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170921 21:07:26.198" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20170921 21:07:26.198" starttime="20170921 21:07:26.198"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170921 21:07:26.199" level="INFO">${suite_name} = 20170921210726189862_BmcCodeUpdate</msg>
<status status="PASS" endtime="20170921 21:07:26.199" starttime="20170921 21:07:26.199"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170921 21:07:26.200" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170921 21:07:26.200" starttime="20170921 21:07:26.199"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170921 21:07:26.200" level="INFO">${test_name} = 20170921210726189862_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170921 21:07:26.200" starttime="20170921 21:07:26.200"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.201" starttime="20170921 21:07:26.197"></status>
</kw>
<msg timestamp="20170921 21:07:26.201" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/</msg>
<msg timestamp="20170921 21:07:26.201" level="INFO">${FFDC_PREFIX} = 20170921210726189862_</msg>
<msg timestamp="20170921 21:07:26.222" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20170921 21:07:26.223" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.224" starttime="20170921 21:07:26.223"></status>
</kw>
<msg timestamp="20170921 21:07:26.229" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.241" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.241" starttime="20170921 21:07:26.240"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.241" starttime="20170921 21:07:26.240"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.242" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.243" starttime="20170921 21:07:26.242"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.243" starttime="20170921 21:07:26.241"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.244" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.244" starttime="20170921 21:07:26.244"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.244" starttime="20170921 21:07:26.243"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.245" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.245" starttime="20170921 21:07:26.245"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.245" starttime="20170921 21:07:26.244"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.247" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.247" starttime="20170921 21:07:26.246"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.247" starttime="20170921 21:07:26.246"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.248" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.248" starttime="20170921 21:07:26.248"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.248" starttime="20170921 21:07:26.247"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.249" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.250" starttime="20170921 21:07:26.249"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.250" starttime="20170921 21:07:26.248"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.251" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.251" starttime="20170921 21:07:26.251"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.251" starttime="20170921 21:07:26.250"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.252" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.252" starttime="20170921 21:07:26.252"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.252" starttime="20170921 21:07:26.251"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.254" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.254" starttime="20170921 21:07:26.254"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.254" starttime="20170921 21:07:26.253"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.255" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.255" starttime="20170921 21:07:26.255"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.255" starttime="20170921 21:07:26.254"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.257" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.257" starttime="20170921 21:07:26.256"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.257" starttime="20170921 21:07:26.256"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.258" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.258" starttime="20170921 21:07:26.258"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.259" starttime="20170921 21:07:26.257"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170921 21:07:26.277" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:26.277" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:26.277" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170921 21:07:26.356" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170921 21:07:26.365" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170921 21:07:26.365" level="INFO">${stderr} = </msg>
<msg timestamp="20170921 21:07:26.365" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170921 21:07:26.365" starttime="20170921 21:07:26.259"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.366" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170921 21:07:26.366" starttime="20170921 21:07:26.366"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.366" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170921 21:07:26.367" starttime="20170921 21:07:26.366"></status>
</kw>
<msg timestamp="20170921 21:07:26.367" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170921 21:07:26.367" starttime="20170921 21:07:26.259"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.368" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.368" starttime="20170921 21:07:26.368"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.368" starttime="20170921 21:07:26.367"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.368" starttime="20170921 21:07:26.253"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.370" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.370" starttime="20170921 21:07:26.369"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.370" starttime="20170921 21:07:26.369"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170921 21:07:26.370" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170921 21:07:26.370" starttime="20170921 21:07:26.370"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.372" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.372" starttime="20170921 21:07:26.372"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.372" starttime="20170921 21:07:26.371"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.373" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.373" starttime="20170921 21:07:26.373"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.373" starttime="20170921 21:07:26.372"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.373" starttime="20170921 21:07:26.371"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.375" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.375" starttime="20170921 21:07:26.374"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.375" starttime="20170921 21:07:26.374"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.376" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.376" starttime="20170921 21:07:26.376"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.376" starttime="20170921 21:07:26.375"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.377" starttime="20170921 21:07:26.374"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.378" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.378" starttime="20170921 21:07:26.378"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.378" starttime="20170921 21:07:26.377"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.379" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.379" starttime="20170921 21:07:26.379"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.379" starttime="20170921 21:07:26.378"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.380" starttime="20170921 21:07:26.377"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.380" starttime="20170921 21:07:26.370"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.381" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.381" starttime="20170921 21:07:26.380"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.381" starttime="20170921 21:07:26.380"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.381" starttime="20170921 21:07:26.239"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170921 21:07:26.387" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170921 21:07:26.387" starttime="20170921 21:07:26.387"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170921 21:07:26.388" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170921 21:07:26.389" starttime="20170921 21:07:26.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:26.390" starttime="20170921 21:07:26.390"></status>
</kw>
<msg timestamp="20170921 21:07:26.390" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170921 21:07:26.390" starttime="20170921 21:07:26.389"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:26.392" starttime="20170921 21:07:26.392"></status>
</kw>
<msg timestamp="20170921 21:07:26.392" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:26.392" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170921 21:07:26.392" starttime="20170921 21:07:26.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:26.393" starttime="20170921 21:07:26.393"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170921 21:07:26.408" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170921 21:07:26.408" starttime="20170921 21:07:26.408"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170921 21:07:26.409" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170921 21:07:26.409" starttime="20170921 21:07:26.409"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.416" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170921 21:07:26.416" starttime="20170921 21:07:26.410"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.419" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.419" starttime="20170921 21:07:26.419"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.419" starttime="20170921 21:07:26.418"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.421" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.421" starttime="20170921 21:07:26.420"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.421" starttime="20170921 21:07:26.420"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.422" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.422" starttime="20170921 21:07:26.422"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.422" starttime="20170921 21:07:26.421"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:26.423" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:26.423" starttime="20170921 21:07:26.423"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.424" starttime="20170921 21:07:26.422"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.424" starttime="20170921 21:07:26.418"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:26.424" starttime="20170921 21:07:26.417"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170921 21:07:26.425" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170921 21:07:26.425" starttime="20170921 21:07:26.424"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170921 21:07:26.468" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:26.468" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:26.469" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170921 21:07:27.915" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170921 21:07:27.916" starttime="20170921 21:07:26.444"></status>
</kw>
<msg timestamp="20170921 21:07:27.916" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:27.916" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170921 21:07:27.916" starttime="20170921 21:07:26.425"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170921 21:07:27.917" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170921 21:07:27.917" starttime="20170921 21:07:27.916"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170921 21:07:27.917" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170921 21:07:27.917" starttime="20170921 21:07:27.917"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:27.926" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:27.926" starttime="20170921 21:07:27.925"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:27.926" starttime="20170921 21:07:27.924"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:27.926" starttime="20170921 21:07:27.918"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:27.926" starttime="20170921 21:07:26.416"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:27.926" starttime="20170921 21:07:26.416"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:27.926" starttime="20170921 21:07:26.416"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:27.926" starttime="20170921 21:07:26.409"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:27.926" starttime="20170921 21:07:26.408"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170921 21:07:27.927" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170921 21:07:27.927" starttime="20170921 21:07:27.927"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170921 21:07:27.928" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170921 21:07:27.928" starttime="20170921 21:07:27.928"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:27.931" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:27.931" starttime="20170921 21:07:27.931"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:27.932" starttime="20170921 21:07:27.930"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:27.933" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:27.933" starttime="20170921 21:07:27.932"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:27.933" starttime="20170921 21:07:27.932"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:27.934" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:27.934" starttime="20170921 21:07:27.934"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:27.934" starttime="20170921 21:07:27.933"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:27.935" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:27.936" starttime="20170921 21:07:27.935"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:27.936" starttime="20170921 21:07:27.935"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:27.936" starttime="20170921 21:07:27.930"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:27.936" starttime="20170921 21:07:27.929"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170921 21:07:27.937" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170921 21:07:27.937" starttime="20170921 21:07:27.936"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170921 21:07:27.980" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:27.980" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:27.981" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170921 21:07:28.058" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170921 21:07:28.058" starttime="20170921 21:07:27.956"></status>
</kw>
<msg timestamp="20170921 21:07:28.058" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:28.058" level="INFO">${ret_values} = (u'20170921205436', u'', 0)</msg>
<status status="PASS" endtime="20170921 21:07:28.058" starttime="20170921 21:07:27.937"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170921 21:07:28.059" level="INFO">${stdout} = 20170921205436</msg>
<status status="PASS" endtime="20170921 21:07:28.059" starttime="20170921 21:07:28.059"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170921 21:07:28.060" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170921 21:07:28.060" starttime="20170921 21:07:28.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.068" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.068" starttime="20170921 21:07:28.067"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.068" starttime="20170921 21:07:28.066"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.068" starttime="20170921 21:07:28.060"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.068" starttime="20170921 21:07:27.929"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.068" starttime="20170921 21:07:27.928"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.071" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.071" starttime="20170921 21:07:28.071"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.071" starttime="20170921 21:07:28.070"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.073" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.073" starttime="20170921 21:07:28.072"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.073" starttime="20170921 21:07:28.072"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.074" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.074" starttime="20170921 21:07:28.074"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.074" starttime="20170921 21:07:28.073"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.075" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.075" starttime="20170921 21:07:28.075"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.075" starttime="20170921 21:07:28.074"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.076" starttime="20170921 21:07:28.070"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.076" starttime="20170921 21:07:28.069"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170921 21:07:28.077" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170921 21:07:28.077" starttime="20170921 21:07:28.076"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170921 21:07:28.119" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:28.119" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:28.119" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170921 21:07:28.178" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170921 21:07:28.178" starttime="20170921 21:07:28.095"></status>
</kw>
<msg timestamp="20170921 21:07:28.178" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:28.179" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-21"\nVERSION_ID="v1.99.10-21-g3b81ed4"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170921 21:07:28.179" starttime="20170921 21:07:28.077"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170921 21:07:28.179" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-21"
VERSION_ID="v1.99.10-21-g3b81ed4"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170921 21:07:28.179" starttime="20170921 21:07:28.179"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170921 21:07:28.180" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170921 21:07:28.180" starttime="20170921 21:07:28.180"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.188" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.188" starttime="20170921 21:07:28.187"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.188" starttime="20170921 21:07:28.187"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.188" starttime="20170921 21:07:28.180"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.188" starttime="20170921 21:07:28.068"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.188" starttime="20170921 21:07:28.068"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.188" starttime="20170921 21:07:27.928"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.188" starttime="20170921 21:07:27.926"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.188" starttime="20170921 21:07:27.926"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170921 21:07:28.190" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170921 21:07:28.190" starttime="20170921 21:07:28.189"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.190" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170921 21:07:28.190" starttime="20170921 21:07:28.190"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.194" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.194" starttime="20170921 21:07:28.194"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.194" starttime="20170921 21:07:28.193"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.195" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.195" starttime="20170921 21:07:28.195"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.196" starttime="20170921 21:07:28.194"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.197" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.197" starttime="20170921 21:07:28.196"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.197" starttime="20170921 21:07:28.196"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.198" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.198" starttime="20170921 21:07:28.198"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.198" starttime="20170921 21:07:28.197"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.198" starttime="20170921 21:07:28.192"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.198" starttime="20170921 21:07:28.192"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170921 21:07:28.199" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170921 21:07:28.199" starttime="20170921 21:07:28.199"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170921 21:07:28.242" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:28.242" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:28.243" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170921 21:07:28.310" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170921 21:07:28.310" starttime="20170921 21:07:28.218"></status>
</kw>
<msg timestamp="20170921 21:07:28.310" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:28.310" level="INFO">${ret_values} = (u' 16:26:22 up 2 min,  load average: 3.68, 2.27, 0.92', u'', 0)</msg>
<status status="PASS" endtime="20170921 21:07:28.310" starttime="20170921 21:07:28.200"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170921 21:07:28.311" level="INFO">${stdout} =  16:26:22 up 2 min,  load average: 3.68, 2.27, 0.92</msg>
<status status="PASS" endtime="20170921 21:07:28.311" starttime="20170921 21:07:28.310"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170921 21:07:28.311" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170921 21:07:28.311" starttime="20170921 21:07:28.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.319" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.319" starttime="20170921 21:07:28.319"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.319" starttime="20170921 21:07:28.318"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.319" starttime="20170921 21:07:28.312"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.320" starttime="20170921 21:07:28.191"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.320" starttime="20170921 21:07:28.191"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.323" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.323" starttime="20170921 21:07:28.323"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.323" starttime="20170921 21:07:28.322"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.324" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.325" starttime="20170921 21:07:28.324"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.325" starttime="20170921 21:07:28.323"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.326" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.326" starttime="20170921 21:07:28.325"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.326" starttime="20170921 21:07:28.325"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.327" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.327" starttime="20170921 21:07:28.327"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.327" starttime="20170921 21:07:28.326"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.327" starttime="20170921 21:07:28.321"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.327" starttime="20170921 21:07:28.321"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170921 21:07:28.328" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170921 21:07:28.328" starttime="20170921 21:07:28.328"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170921 21:07:28.372" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:28.372" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:28.372" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170921 21:07:28.459" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170921 21:07:28.459" starttime="20170921 21:07:28.348"></status>
</kw>
<msg timestamp="20170921 21:07:28.459" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:28.459" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.3M     14.3M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20170921 21:07:28.460" starttime="20170921 21:07:28.329"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170921 21:07:28.460" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.3M     14.3M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20170921 21:07:28.460" starttime="20170921 21:07:28.460"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170921 21:07:28.461" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170921 21:07:28.461" starttime="20170921 21:07:28.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.469" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.469" starttime="20170921 21:07:28.468"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.469" starttime="20170921 21:07:28.467"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.469" starttime="20170921 21:07:28.461"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.469" starttime="20170921 21:07:28.320"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.469" starttime="20170921 21:07:28.320"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.472" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.472" starttime="20170921 21:07:28.472"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.472" starttime="20170921 21:07:28.471"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.474" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.474" starttime="20170921 21:07:28.473"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.474" starttime="20170921 21:07:28.472"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.475" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.475" starttime="20170921 21:07:28.475"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.476" starttime="20170921 21:07:28.474"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.477" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.477" starttime="20170921 21:07:28.476"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.477" starttime="20170921 21:07:28.476"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.477" starttime="20170921 21:07:28.471"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.477" starttime="20170921 21:07:28.470"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170921 21:07:28.478" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170921 21:07:28.478" starttime="20170921 21:07:28.477"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170921 21:07:28.521" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:28.521" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:28.521" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170921 21:07:28.568" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170921 21:07:28.568" starttime="20170921 21:07:28.497"></status>
</kw>
<msg timestamp="20170921 21:07:28.568" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:28.568" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Wed Sep 13 15:42:31 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170921 21:07:28.568" starttime="20170921 21:07:28.478"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170921 21:07:28.569" level="INFO">${stdout} = Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Wed Sep 13 15:42:31 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170921 21:07:28.569" starttime="20170921 21:07:28.568"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170921 21:07:28.569" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170921 21:07:28.569" starttime="20170921 21:07:28.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.577" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:28.577" starttime="20170921 21:07:28.577"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.577" starttime="20170921 21:07:28.576"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.577" starttime="20170921 21:07:28.570"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.578" starttime="20170921 21:07:28.469"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.578" starttime="20170921 21:07:28.469"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.578" starttime="20170921 21:07:28.190"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.578" starttime="20170921 21:07:28.189"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.578" starttime="20170921 21:07:28.188"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.578" starttime="20170921 21:07:26.408"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.578" starttime="20170921 21:07:26.407"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.578" starttime="20170921 21:07:26.393"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.578" starttime="20170921 21:07:26.390"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.578" starttime="20170921 21:07:26.390"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:28.580" starttime="20170921 21:07:28.580"></status>
</kw>
<msg timestamp="20170921 21:07:28.580" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:28.580" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170921 21:07:28.580" starttime="20170921 21:07:28.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:28.581" starttime="20170921 21:07:28.581"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170921 21:07:28.596" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170921 21:07:28.596" starttime="20170921 21:07:28.596"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170921 21:07:28.597" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20170921 21:07:28.597" starttime="20170921 21:07:28.597"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170921 21:07:28.598" level="INFO">${logpath} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170921 21:07:28.598" starttime="20170921 21:07:28.598"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:28.602" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:28.602" starttime="20170921 21:07:28.602"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:28.603" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:28.603" starttime="20170921 21:07:28.603"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:28.604" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:28.604" starttime="20170921 21:07:28.603"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:28.604" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:28.604" starttime="20170921 21:07:28.604"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.812" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:28.813" starttime="20170921 21:07:28.605"></status>
</kw>
<msg timestamp="20170921 21:07:28.813" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:28.813" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:28.813" starttime="20170921 21:07:28.605"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.814" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:28.814" starttime="20170921 21:07:28.813"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:28.814" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:28.814" starttime="20170921 21:07:28.814"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.814" starttime="20170921 21:07:28.601"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.815" starttime="20170921 21:07:28.600"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:28.815" starttime="20170921 21:07:28.599"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:28.815" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170921 21:07:28.815" starttime="20170921 21:07:28.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:28.816" starttime="20170921 21:07:28.816"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:29.374" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170921 21:07:29.374" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:29.374" starttime="20170921 21:07:28.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:29.375" starttime="20170921 21:07:29.374"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:29.375" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:29.375" starttime="20170921 21:07:29.375"></status>
</kw>
<msg timestamp="20170921 21:07:29.376" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:29.376" starttime="20170921 21:07:28.599"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:29.377" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:29.377" starttime="20170921 21:07:29.377"></status>
</kw>
<msg timestamp="20170921 21:07:29.377" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170921 21:07:29.377" starttime="20170921 21:07:29.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:29.378" starttime="20170921 21:07:29.378"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170921 21:07:29.379" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 125
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 28000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 25987
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 203000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 156
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:07:29.379" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170921 21:07:29.379" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170921 21:07:29.380" starttime="20170921 21:07:29.378"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:29.381" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:29.381" starttime="20170921 21:07:29.381"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:29.381" starttime="20170921 21:07:29.380"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:29.381" starttime="20170921 21:07:28.598"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170921 21:07:29.382" level="INFO">${logpath} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_OCC_state.txt</msg>
<status status="PASS" endtime="20170921 21:07:29.382" starttime="20170921 21:07:29.382"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:29.386" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:29.387" starttime="20170921 21:07:29.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:29.387" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:29.387" starttime="20170921 21:07:29.387"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:29.388" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:29.388" starttime="20170921 21:07:29.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:29.389" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:29.389" starttime="20170921 21:07:29.388"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:29.585" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:29.585" starttime="20170921 21:07:29.390"></status>
</kw>
<msg timestamp="20170921 21:07:29.585" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:29.585" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:29.585" starttime="20170921 21:07:29.389"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:29.586" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:29.586" starttime="20170921 21:07:29.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:29.587" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:29.587" starttime="20170921 21:07:29.586"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:29.587" starttime="20170921 21:07:29.385"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:29.587" starttime="20170921 21:07:29.385"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:29.587" starttime="20170921 21:07:29.383"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:29.588" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20170921 21:07:29.588" starttime="20170921 21:07:29.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:29.588" starttime="20170921 21:07:29.588"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:29.739" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170921 21:07:29.739" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:29.739" starttime="20170921 21:07:29.589"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:29.740" starttime="20170921 21:07:29.740"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:29.741" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:29.741" starttime="20170921 21:07:29.741"></status>
</kw>
<msg timestamp="20170921 21:07:29.741" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:29.741" starttime="20170921 21:07:29.382"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:29.742" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:29.742" starttime="20170921 21:07:29.742"></status>
</kw>
<msg timestamp="20170921 21:07:29.743" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170921 21:07:29.743" starttime="20170921 21:07:29.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:29.743" starttime="20170921 21:07:29.743"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170921 21:07:29.744" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:07:29.744" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170921 21:07:29.744" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" endtime="20170921 21:07:29.744" starttime="20170921 21:07:29.744"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:29.746" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_OCC_state.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:29.746" starttime="20170921 21:07:29.745"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:29.746" starttime="20170921 21:07:29.744"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:29.746" starttime="20170921 21:07:29.381"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170921 21:07:29.747" level="INFO">${logpath} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170921 21:07:29.747" starttime="20170921 21:07:29.746"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:29.751" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:29.751" starttime="20170921 21:07:29.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:29.752" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:29.752" starttime="20170921 21:07:29.751"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:29.753" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:29.753" starttime="20170921 21:07:29.752"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:29.753" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:29.753" starttime="20170921 21:07:29.753"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:29.930" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:29.931" starttime="20170921 21:07:29.754"></status>
</kw>
<msg timestamp="20170921 21:07:29.931" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:29.931" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:29.931" starttime="20170921 21:07:29.754"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:29.932" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:29.932" starttime="20170921 21:07:29.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:29.932" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:29.933" starttime="20170921 21:07:29.932"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:29.933" starttime="20170921 21:07:29.749"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:29.933" starttime="20170921 21:07:29.748"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:29.933" starttime="20170921 21:07:29.747"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:29.933" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170921 21:07:29.934" starttime="20170921 21:07:29.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:29.934" starttime="20170921 21:07:29.934"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:30.254" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170921 21:07:30.255" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:30.255" starttime="20170921 21:07:29.935"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:30.256" starttime="20170921 21:07:30.255"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:30.256" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:30.256" starttime="20170921 21:07:30.256"></status>
</kw>
<msg timestamp="20170921 21:07:30.256" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:30.256" starttime="20170921 21:07:29.747"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:30.258" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:30.258" starttime="20170921 21:07:30.257"></status>
</kw>
<msg timestamp="20170921 21:07:30.258" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170921 21:07:30.258" starttime="20170921 21:07:30.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:30.258" starttime="20170921 21:07:30.258"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170921 21:07:30.259" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 0
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:07:30.259" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170921 21:07:30.259" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170921 21:07:30.260" starttime="20170921 21:07:30.259"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:30.261" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:30.261" starttime="20170921 21:07:30.260"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:30.261" starttime="20170921 21:07:30.260"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:30.261" starttime="20170921 21:07:29.746"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170921 21:07:30.262" level="INFO">${logpath} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_led.txt</msg>
<status status="PASS" endtime="20170921 21:07:30.262" starttime="20170921 21:07:30.262"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:30.265" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:30.266" starttime="20170921 21:07:30.265"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:30.266" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:30.266" starttime="20170921 21:07:30.266"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:30.267" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:30.267" starttime="20170921 21:07:30.267"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:30.268" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:30.268" starttime="20170921 21:07:30.267"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:30.475" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:30.476" starttime="20170921 21:07:30.268"></status>
</kw>
<msg timestamp="20170921 21:07:30.476" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:30.476" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:30.476" starttime="20170921 21:07:30.268"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:30.477" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:30.477" starttime="20170921 21:07:30.476"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:30.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:30.477" starttime="20170921 21:07:30.477"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:30.478" starttime="20170921 21:07:30.264"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:30.478" starttime="20170921 21:07:30.263"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:30.478" starttime="20170921 21:07:30.263"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:30.478" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20170921 21:07:30.478" starttime="20170921 21:07:30.478"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:30.479" starttime="20170921 21:07:30.479"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:32.146" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170921 21:07:32.147" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:32.147" starttime="20170921 21:07:30.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:32.148" starttime="20170921 21:07:32.147"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:32.148" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:32.148" starttime="20170921 21:07:32.148"></status>
</kw>
<msg timestamp="20170921 21:07:32.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:32.148" starttime="20170921 21:07:30.262"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:32.150" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:32.150" starttime="20170921 21:07:32.149"></status>
</kw>
<msg timestamp="20170921 21:07:32.150" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170921 21:07:32.150" starttime="20170921 21:07:32.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:32.150" starttime="20170921 21:07:32.150"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170921 21:07:32.153" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:07:32.153" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170921 21:07:32.153" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20170921 21:07:32.153" starttime="20170921 21:07:32.151"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:32.155" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_led.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:32.155" starttime="20170921 21:07:32.154"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:32.155" starttime="20170921 21:07:32.153"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:32.155" starttime="20170921 21:07:30.261"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170921 21:07:32.156" level="INFO">${logpath} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20170921 21:07:32.156" starttime="20170921 21:07:32.155"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:32.159" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:32.160" starttime="20170921 21:07:32.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:32.160" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:32.160" starttime="20170921 21:07:32.160"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:32.161" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:32.161" starttime="20170921 21:07:32.161"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:32.162" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:32.162" starttime="20170921 21:07:32.161"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:32.406" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:32.406" starttime="20170921 21:07:32.163"></status>
</kw>
<msg timestamp="20170921 21:07:32.406" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:32.406" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:32.406" starttime="20170921 21:07:32.162"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:32.407" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:32.407" starttime="20170921 21:07:32.407"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:32.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:32.408" starttime="20170921 21:07:32.407"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:32.408" starttime="20170921 21:07:32.158"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:32.408" starttime="20170921 21:07:32.158"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:32.408" starttime="20170921 21:07:32.157"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:32.409" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170921 21:07:32.409" starttime="20170921 21:07:32.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:32.409" starttime="20170921 21:07:32.409"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:32.701" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170921 21:07:32.701" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:32.701" starttime="20170921 21:07:32.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:32.702" starttime="20170921 21:07:32.701"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:32.702" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:32.702" starttime="20170921 21:07:32.702"></status>
</kw>
<msg timestamp="20170921 21:07:32.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:32.702" starttime="20170921 21:07:32.156"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:32.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:32.704" starttime="20170921 21:07:32.703"></status>
</kw>
<msg timestamp="20170921 21:07:32.704" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170921 21:07:32.704" starttime="20170921 21:07:32.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:32.704" starttime="20170921 21:07:32.704"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170921 21:07:32.705" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/57ce7c1d": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-21-g3b81ed4", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/57ce7c1d/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/57ce7c1d/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/64750942": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.19-48-g4fa75e1,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-72-g3f936bae970e,hostboot-3d6c541,linux-4.13-openpower1-pff35c02,petitboot-v1.5.1-p7e4bcf3,machine-xml-f8aaa73-p25b46e6,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.20", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/64750942/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/64750942/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/9a33a4ed": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-20-g561798c", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/9a33a4ed/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/9a33a4ed/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/9a33a4ed", 
        "/xyz/openbmc_project/software/57ce7c1d", 
        "/xyz/openbmc_project/software/64750942"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:07:32.705" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170921 21:07:32.706" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/57ce7c1d": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status status="PASS" endtime="20170921 21:07:32.706" starttime="20170921 21:07:32.705"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:32.707" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:32.707" starttime="20170921 21:07:32.707"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:32.707" starttime="20170921 21:07:32.706"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:32.707" starttime="20170921 21:07:32.155"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170921 21:07:32.708" level="INFO">${logpath} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_elog.txt</msg>
<status status="PASS" endtime="20170921 21:07:32.708" starttime="20170921 21:07:32.708"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:32.711" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:32.712" starttime="20170921 21:07:32.711"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:32.712" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:32.712" starttime="20170921 21:07:32.712"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:32.713" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:32.713" starttime="20170921 21:07:32.713"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:32.714" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:32.714" starttime="20170921 21:07:32.713"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:32.935" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:32.935" starttime="20170921 21:07:32.714"></status>
</kw>
<msg timestamp="20170921 21:07:32.935" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:32.935" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:32.935" starttime="20170921 21:07:32.714"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:32.936" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:32.936" starttime="20170921 21:07:32.935"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:32.936" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:32.936" starttime="20170921 21:07:32.936"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:32.936" starttime="20170921 21:07:32.710"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:32.937" starttime="20170921 21:07:32.710"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:32.937" starttime="20170921 21:07:32.709"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:32.937" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170921 21:07:32.937" starttime="20170921 21:07:32.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:32.938" starttime="20170921 21:07:32.938"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:33.061" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170921 21:07:33.061" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:33.061" starttime="20170921 21:07:32.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:33.061" starttime="20170921 21:07:33.061"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:33.062" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:33.062" starttime="20170921 21:07:33.062"></status>
</kw>
<msg timestamp="20170921 21:07:33.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:33.062" starttime="20170921 21:07:32.708"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:33.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:33.063" starttime="20170921 21:07:33.063"></status>
</kw>
<msg timestamp="20170921 21:07:33.063" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170921 21:07:33.064" starttime="20170921 21:07:33.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:33.064" starttime="20170921 21:07:33.064"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170921 21:07:33.065" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "_PID=1193"
      ], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Led.Mapper.Error.ObjectNotFoundError", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505492733173, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:07:33.065" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170921 21:07:33.065" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [
                "_PID=1193"
            ],
            "Id": 1,
            "Message": "xyz.openbmc_pr...</msg>
<status status="PASS" endtime="20170921 21:07:33.065" starttime="20170921 21:07:33.064"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:33.067" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_elog.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:33.067" starttime="20170921 21:07:33.066"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:33.067" starttime="20170921 21:07:33.065"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:33.067" starttime="20170921 21:07:32.707"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170921 21:07:33.068" level="INFO">${logpath} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170921 21:07:33.068" starttime="20170921 21:07:33.067"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:33.071" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:33.071" starttime="20170921 21:07:33.071"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:33.072" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:33.072" starttime="20170921 21:07:33.072"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:33.072" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:33.073" starttime="20170921 21:07:33.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:33.073" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:33.073" starttime="20170921 21:07:33.073"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:33.252" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:33.252" starttime="20170921 21:07:33.074"></status>
</kw>
<msg timestamp="20170921 21:07:33.252" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:33.252" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:33.252" starttime="20170921 21:07:33.074"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:33.252" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:33.253" starttime="20170921 21:07:33.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:33.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:33.253" starttime="20170921 21:07:33.253"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:33.253" starttime="20170921 21:07:33.070"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:33.253" starttime="20170921 21:07:33.070"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:33.254" starttime="20170921 21:07:33.069"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:33.254" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170921 21:07:33.254" starttime="20170921 21:07:33.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:33.255" starttime="20170921 21:07:33.255"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:35.470" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170921 21:07:35.470" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:35.470" starttime="20170921 21:07:33.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:35.471" starttime="20170921 21:07:35.471"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:35.472" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:35.472" starttime="20170921 21:07:35.471"></status>
</kw>
<msg timestamp="20170921 21:07:35.472" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:35.472" starttime="20170921 21:07:33.068"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:35.473" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:35.473" starttime="20170921 21:07:35.473"></status>
</kw>
<msg timestamp="20170921 21:07:35.473" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170921 21:07:35.473" starttime="20170921 21:07:35.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:35.474" starttime="20170921 21:07:35.473"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170921 21:07:35.478" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "WITHERSPOON00003", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "SNWITHERSPOON003"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/64750942"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF727037    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/9a33a4ed", 
        "/xyz/openbmc_project/software/57ce7c1d"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:99", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "02AA766", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA1934013104", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "02AA766", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA1934013759", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1585f5fc", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1585f536", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1585f51a", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1585f517", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1585f64b", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1585f5e7", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1585f5ea", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1585f535", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1585f534", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1585f650", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x156d5d30", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x156d5db9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x156d5d2e", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x156d5d2d", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1585f649", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1585f554", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:07:35.478" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170921 21:07:35.478" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20170921 21:07:35.478" starttime="20170921 21:07:35.474"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:35.481" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:35.481" starttime="20170921 21:07:35.480"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:35.481" starttime="20170921 21:07:35.479"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:35.481" starttime="20170921 21:07:33.067"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:35.481" starttime="20170921 21:07:28.598"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:35.481" starttime="20170921 21:07:28.596"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:35.481" starttime="20170921 21:07:28.596"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:35.481" starttime="20170921 21:07:28.596"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:35.481" starttime="20170921 21:07:28.595"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:35.481" starttime="20170921 21:07:28.581"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:35.482" starttime="20170921 21:07:28.578"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:35.482" starttime="20170921 21:07:28.578"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:35.484" starttime="20170921 21:07:35.483"></status>
</kw>
<msg timestamp="20170921 21:07:35.484" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:35.484" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170921 21:07:35.484" starttime="20170921 21:07:35.483"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:35.484" starttime="20170921 21:07:35.484"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:35.502" starttime="20170921 21:07:35.499"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170921 21:07:35.504" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170921 21:07:35.504" starttime="20170921 21:07:35.502"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:35.504" starttime="20170921 21:07:35.499"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:35.504" starttime="20170921 21:07:35.485"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:35.504" starttime="20170921 21:07:35.482"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:35.504" starttime="20170921 21:07:35.482"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:35.506" starttime="20170921 21:07:35.506"></status>
</kw>
<msg timestamp="20170921 21:07:35.506" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:35.506" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170921 21:07:35.506" starttime="20170921 21:07:35.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:35.507" starttime="20170921 21:07:35.507"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170921 21:07:35.541" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:35.542" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:35.542" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170921 21:07:35.609" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170921 21:07:35.619" level="INFO">${core_files} = None</msg>
<msg timestamp="20170921 21:07:35.619" level="INFO">${stderr} = None</msg>
<msg timestamp="20170921 21:07:35.619" level="INFO">${rc} = None</msg>
<msg timestamp="20170921 21:07:35.619" level="FAIL">#(UTC) 2017/09/21 21:07:35.618369 -    9.253487 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170921 21:07:35.619" starttime="20170921 21:07:35.522"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170921 21:07:35.620" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170921 21:07:35.620" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170921 21:07:35.620" starttime="20170921 21:07:35.620"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:35.657" starttime="20170921 21:07:35.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:36.326" starttime="20170921 21:07:35.658"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:36.326" starttime="20170921 21:07:35.657"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:36.326" starttime="20170921 21:07:35.629"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:36.326" starttime="20170921 21:07:35.621"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170921 21:07:36.326" starttime="20170921 21:07:36.326"></status>
</kw>
<status status="FAIL" endtime="20170921 21:07:36.326" starttime="20170921 21:07:35.521"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:36.326" starttime="20170921 21:07:35.507"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:36.327" starttime="20170921 21:07:35.505"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:36.327" starttime="20170921 21:07:35.504"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:36.329" starttime="20170921 21:07:36.328"></status>
</kw>
<msg timestamp="20170921 21:07:36.329" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:36.329" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170921 21:07:36.329" starttime="20170921 21:07:36.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:36.330" starttime="20170921 21:07:36.329"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170921 21:07:36.344" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170921 21:07:36.345" starttime="20170921 21:07:36.344"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170921 21:07:36.346" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20170921 21:07:36.346" starttime="20170921 21:07:36.345"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170921 21:07:36.347" level="INFO">${logpath} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170921 21:07:36.347" starttime="20170921 21:07:36.346"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:36.348" starttime="20170921 21:07:36.348"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170921 21:07:36.349" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170921 21:07:36.349" starttime="20170921 21:07:36.348"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170921 21:07:36.391" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:36.391" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:36.392" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170921 21:07:36.458" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170921 21:07:36.459" starttime="20170921 21:07:36.368"></status>
</kw>
<msg timestamp="20170921 21:07:36.459" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:36.459" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170921 21:07:36.459" starttime="20170921 21:07:36.350"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170921 21:07:36.459" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170921 21:07:36.460" starttime="20170921 21:07:36.459"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170921 21:07:36.460" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170921 21:07:36.460" starttime="20170921 21:07:36.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:36.468" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:36.468" starttime="20170921 21:07:36.467"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:36.468" starttime="20170921 21:07:36.467"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:36.468" starttime="20170921 21:07:36.460"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:36.468" starttime="20170921 21:07:36.347"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:36.468" starttime="20170921 21:07:36.346"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170921 21:07:36.469" level="INFO">${logpath} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170921 21:07:36.469" starttime="20170921 21:07:36.468"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:36.470" starttime="20170921 21:07:36.470"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170921 21:07:36.471" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170921 21:07:36.471" starttime="20170921 21:07:36.471"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170921 21:07:36.514" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:36.514" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:36.514" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170921 21:07:37.066" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170921 21:07:37.066" starttime="20170921 21:07:36.490"></status>
</kw>
<msg timestamp="20170921 21:07:37.066" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:37.067" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 15 16:26 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 15 16:26 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170921 21:07:37.067" starttime="20170921 21:07:36.471"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170921 21:07:37.068" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 15 16:26 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 15 16:26 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170921 21:07:37.068" starttime="20170921 21:07:37.068"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170921 21:07:37.069" level="INFO">${stderr} = ls: /proc/1382/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170921 21:07:37.069" starttime="20170921 21:07:37.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:37.077" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:37.077" starttime="20170921 21:07:37.077"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:37.077" starttime="20170921 21:07:37.075"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:37.077" starttime="20170921 21:07:37.069"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:37.077" starttime="20170921 21:07:36.469"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:37.078" starttime="20170921 21:07:36.468"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170921 21:07:37.078" level="INFO">${logpath} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170921 21:07:37.078" starttime="20170921 21:07:37.078"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:37.080" starttime="20170921 21:07:37.079"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170921 21:07:37.080" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170921 21:07:37.081" starttime="20170921 21:07:37.080"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170921 21:07:37.123" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:37.124" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:37.124" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170921 21:07:38.291" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170921 21:07:38.292" starttime="20170921 21:07:37.100"></status>
</kw>
<msg timestamp="20170921 21:07:38.292" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:38.294" level="INFO">${ret_values} = (u'-- Logs begin at Fri 2017-09-15 16:23:54 UTC, end at Fri 2017-09-15 16:26:30 UTC. --\nSep 15 16:23:54 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 15 16:23:54 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170921 21:07:38.294" starttime="20170921 21:07:37.081"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170921 21:07:38.295" level="INFO">${stdout} = -- Logs begin at Fri 2017-09-15 16:23:54 UTC, end at Fri 2017-09-15 16:26:30 UTC. --
Sep 15 16:23:54 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 15 16:23:54 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170921 21:07:38.295" starttime="20170921 21:07:38.294"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170921 21:07:38.295" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170921 21:07:38.295" starttime="20170921 21:07:38.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:38.307" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:38.307" starttime="20170921 21:07:38.306"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:38.307" starttime="20170921 21:07:38.304"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:38.307" starttime="20170921 21:07:38.296"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:38.307" starttime="20170921 21:07:37.079"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:38.307" starttime="20170921 21:07:37.078"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170921 21:07:38.308" level="INFO">${logpath} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170921 21:07:38.308" starttime="20170921 21:07:38.307"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:38.309" starttime="20170921 21:07:38.309"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170921 21:07:38.310" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170921 21:07:38.310" starttime="20170921 21:07:38.310"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170921 21:07:38.352" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:38.353" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:38.353" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170921 21:07:41.476" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170921 21:07:41.477" starttime="20170921 21:07:38.329"></status>
</kw>
<msg timestamp="20170921 21:07:41.477" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:41.493" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=e8afd00315124a4ab1c848952cf539e7;i=1;b=61770d3827f747acb7a4035844dc3f64;m=ce8c94;t=5593cd1b4144f;x=38c0e97ce5c06251",\n\t"__REALTIME_TIMESTAMP" : "1505492634702927",\n\t"__MONO...</msg>
<status status="PASS" endtime="20170921 21:07:41.493" starttime="20170921 21:07:38.310"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170921 21:07:41.497" level="INFO">${stdout} = {
	"__CURSOR" : "s=e8afd00315124a4ab1c848952cf539e7;i=1;b=61770d3827f747acb7a4035844dc3f64;m=ce8c94;t=5593cd1b4144f;x=38c0e97ce5c06251",
	"__REALTIME_TIMESTAMP" : "1505492634702927",
	"__MONOTONIC_TIM...</msg>
<status status="PASS" endtime="20170921 21:07:41.497" starttime="20170921 21:07:41.494"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170921 21:07:41.498" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170921 21:07:41.498" starttime="20170921 21:07:41.498"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:41.513" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:41.513" starttime="20170921 21:07:41.510"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:41.513" starttime="20170921 21:07:41.505"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:41.513" starttime="20170921 21:07:41.498"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:41.513" starttime="20170921 21:07:38.308"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:41.513" starttime="20170921 21:07:38.307"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170921 21:07:41.514" level="INFO">${logpath} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170921 21:07:41.514" starttime="20170921 21:07:41.514"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:41.516" starttime="20170921 21:07:41.515"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170921 21:07:41.516" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170921 21:07:41.516" starttime="20170921 21:07:41.516"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170921 21:07:41.559" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:41.559" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:41.560" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170921 21:07:41.628" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170921 21:07:41.628" starttime="20170921 21:07:41.535"></status>
</kw>
<msg timestamp="20170921 21:07:41.628" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:41.628" level="INFO">${ret_values} = (u'MemTotal:         432244 kB\nMemFree:          285340 kB\nMemAvailable:     327484 kB\nBuffers:           11728 kB\nCached:            42660 kB\nSwapCached:            0 kB\nActive:            9318...</msg>
<status status="PASS" endtime="20170921 21:07:41.628" starttime="20170921 21:07:41.517"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170921 21:07:41.629" level="INFO">${stdout} = MemTotal:         432244 kB
MemFree:          285340 kB
MemAvailable:     327484 kB
Buffers:           11728 kB
Cached:            42660 kB
SwapCached:            0 kB
Active:            93180 kB
Inac...</msg>
<status status="PASS" endtime="20170921 21:07:41.629" starttime="20170921 21:07:41.628"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170921 21:07:41.629" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170921 21:07:41.629" starttime="20170921 21:07:41.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:41.637" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:41.637" starttime="20170921 21:07:41.636"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:41.637" starttime="20170921 21:07:41.636"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:41.637" starttime="20170921 21:07:41.630"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:41.637" starttime="20170921 21:07:41.514"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:41.637" starttime="20170921 21:07:41.513"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170921 21:07:41.638" level="INFO">${logpath} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170921 21:07:41.638" starttime="20170921 21:07:41.638"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:41.639" starttime="20170921 21:07:41.639"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170921 21:07:41.640" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170921 21:07:41.640" starttime="20170921 21:07:41.640"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170921 21:07:41.682" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:41.683" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:41.683" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170921 21:07:41.991" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170921 21:07:41.991" starttime="20170921 21:07:41.659"></status>
</kw>
<msg timestamp="20170921 21:07:41.991" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:41.992" level="INFO">${ret_values} = (u'Mem: 146904K used, 285340K free, 8856K shrd, 11728K buff, 42664K cached\nCPU:  18% usr   9% sys   0% nic  72% idle   0% io   0% irq   0% sirq\nLoad average: 3.50 2.29 0.94 1/156 1386\n  PID  PPID U...</msg>
<status status="PASS" endtime="20170921 21:07:41.992" starttime="20170921 21:07:41.640"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170921 21:07:41.992" level="INFO">${stdout} = Mem: 146904K used, 285340K free, 8856K shrd, 11728K buff, 42664K cached
CPU:  18% usr   9% sys   0% nic  72% idle   0% io   0% irq   0% sirq
Load average: 3.50 2.29 0.94 1/156 1386
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20170921 21:07:41.992" starttime="20170921 21:07:41.992"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170921 21:07:41.993" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170921 21:07:41.993" starttime="20170921 21:07:41.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:42.001" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:42.001" starttime="20170921 21:07:42.000"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.001" starttime="20170921 21:07:42.000"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.001" starttime="20170921 21:07:41.993"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.001" starttime="20170921 21:07:41.638"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.001" starttime="20170921 21:07:41.637"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170921 21:07:42.002" level="INFO">${logpath} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170921 21:07:42.002" starttime="20170921 21:07:42.002"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:42.003" starttime="20170921 21:07:42.003"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170921 21:07:42.005" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170921 21:07:42.005" starttime="20170921 21:07:42.004"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170921 21:07:42.047" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:42.047" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.181.15
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170921 21:07:42.048" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170921 21:07:42.122" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170921 21:07:42.123" starttime="20170921 21:07:42.024"></status>
</kw>
<msg timestamp="20170921 21:07:42.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:42.123" level="INFO">${ret_values} = (u'[    0.210000] usbcore: registered new interface driver usbfs\n[    0.210000] usbcore: registered new interface driver hub\n[    0.210000] usbcore: registered new device driver usb\n[    0.220000] ...</msg>
<status status="PASS" endtime="20170921 21:07:42.123" starttime="20170921 21:07:42.005"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170921 21:07:42.124" level="INFO">${stdout} = [    0.210000] usbcore: registered new interface driver usbfs
[    0.210000] usbcore: registered new interface driver hub
[    0.210000] usbcore: registered new device driver usb
[    0.220000] clocks...</msg>
<status status="PASS" endtime="20170921 21:07:42.124" starttime="20170921 21:07:42.123"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170921 21:07:42.124" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170921 21:07:42.124" starttime="20170921 21:07:42.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:42.132" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:42.132" starttime="20170921 21:07:42.132"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.132" starttime="20170921 21:07:42.131"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.132" starttime="20170921 21:07:42.125"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.132" starttime="20170921 21:07:42.002"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.132" starttime="20170921 21:07:42.001"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.132" starttime="20170921 21:07:36.346"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.133" starttime="20170921 21:07:36.345"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.133" starttime="20170921 21:07:36.345"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.133" starttime="20170921 21:07:36.345"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.133" starttime="20170921 21:07:36.344"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.133" starttime="20170921 21:07:36.330"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.133" starttime="20170921 21:07:36.327"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.133" starttime="20170921 21:07:36.327"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:42.135" starttime="20170921 21:07:42.135"></status>
</kw>
<msg timestamp="20170921 21:07:42.135" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:42.135" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170921 21:07:42.135" starttime="20170921 21:07:42.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:42.136" starttime="20170921 21:07:42.135"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:42.153" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:42.154" starttime="20170921 21:07:42.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:42.154" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:42.154" starttime="20170921 21:07:42.154"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:42.155" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:42.155" starttime="20170921 21:07:42.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:42.156" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:42.156" starttime="20170921 21:07:42.155"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:42.380" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:42.380" starttime="20170921 21:07:42.156"></status>
</kw>
<msg timestamp="20170921 21:07:42.380" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:42.380" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:42.380" starttime="20170921 21:07:42.156"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:42.381" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:42.381" starttime="20170921 21:07:42.381"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:42.382" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:42.382" starttime="20170921 21:07:42.381"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.382" starttime="20170921 21:07:42.152"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.382" starttime="20170921 21:07:42.152"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.382" starttime="20170921 21:07:42.151"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:42.383" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170921 21:07:42.383" starttime="20170921 21:07:42.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:42.383" starttime="20170921 21:07:42.383"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:42.519" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170921 21:07:42.519" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:42.519" starttime="20170921 21:07:42.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:42.520" starttime="20170921 21:07:42.519"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:42.520" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:42.520" starttime="20170921 21:07:42.520"></status>
</kw>
<msg timestamp="20170921 21:07:42.520" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:42.520" starttime="20170921 21:07:42.151"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:42.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:42.522" starttime="20170921 21:07:42.521"></status>
</kw>
<msg timestamp="20170921 21:07:42.522" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170921 21:07:42.522" starttime="20170921 21:07:42.521"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:42.522" starttime="20170921 21:07:42.522"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:07:42.523" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "_PID=1193"
      ], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Led.Mapper.Error.ObjectNotFoundError", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1505492733173, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:07:42.523" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:07:42.523" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'AdditionalData': [u'_PID=1193'], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level....</msg>
<status status="PASS" endtime="20170921 21:07:42.523" starttime="20170921 21:07:42.523"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170921 21:07:42.524" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170921 21:07:42.524" starttime="20170921 21:07:42.523"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_prefix_path}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170921 21:07:42.524" level="INFO">${logpath} = /home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_esel</msg>
<status status="PASS" endtime="20170921 21:07:42.524" starttime="20170921 21:07:42.524"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170921 21:07:42.525" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_esel"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:42.525" starttime="20170921 21:07:42.525"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:42.526" starttime="20170921 21:07:42.526"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:42.530" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:42.530" starttime="20170921 21:07:42.529"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:42.531" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:42.531" starttime="20170921 21:07:42.530"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:42.531" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:42.531" starttime="20170921 21:07:42.531"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:42.532" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:42.532" starttime="20170921 21:07:42.532"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:42.719" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:42.719" starttime="20170921 21:07:42.533"></status>
</kw>
<msg timestamp="20170921 21:07:42.719" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:42.719" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:42.719" starttime="20170921 21:07:42.532"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:42.720" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:42.720" starttime="20170921 21:07:42.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:42.721" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:42.721" starttime="20170921 21:07:42.720"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.721" starttime="20170921 21:07:42.529"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.721" starttime="20170921 21:07:42.528"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.721" starttime="20170921 21:07:42.528"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:42.722" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170921 21:07:42.722" starttime="20170921 21:07:42.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:42.722" starttime="20170921 21:07:42.722"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:42.828" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170921 21:07:42.828" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:42.828" starttime="20170921 21:07:42.723"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:42.829" starttime="20170921 21:07:42.829"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:42.829" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:42.829" starttime="20170921 21:07:42.829"></status>
</kw>
<msg timestamp="20170921 21:07:42.830" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:42.830" starttime="20170921 21:07:42.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:42.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:42.830" starttime="20170921 21:07:42.830"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:07:42.831" level="INFO">To JSON using : content={
  "data": [
    "_PID=1193"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:07:42.831" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:07:42.831" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'_PID=1193']}</msg>
<status status="PASS" endtime="20170921 21:07:42.831" starttime="20170921 21:07:42.831"></status>
</kw>
<msg timestamp="20170921 21:07:42.831" level="INFO">${esel_data} = [u'_PID=1193']</msg>
<status status="PASS" endtime="20170921 21:07:42.831" starttime="20170921 21:07:42.526"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170921 21:07:42.832" level="INFO">Length is 1</msg>
<msg timestamp="20170921 21:07:42.832" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20170921 21:07:42.832" starttime="20170921 21:07:42.832"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:42.833" starttime="20170921 21:07:42.832"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170921 21:07:42.834" level="INFO">${index} = None</msg>
<msg timestamp="20170921 21:07:42.834" level="FAIL">IndexError: list index out of range</msg>
<status status="FAIL" endtime="20170921 21:07:42.834" starttime="20170921 21:07:42.833"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170921 21:07:42.834" level="FAIL">Resolving variable '${esel_data[None]}' failed: TypeError: list indices must be integers, not NoneType</msg>
<status status="FAIL" endtime="20170921 21:07:42.834" starttime="20170921 21:07:42.834"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170921 21:07:42.836" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_esel"&gt;/home/fspcibld/logs/20170921210726189862_BmcCodeUpdate/20170921210726189862_RESTBMCCodeUpdate/20170921210726189862_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170921 21:07:42.836" starttime="20170921 21:07:42.835"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.836" starttime="20170921 21:07:42.835"></status>
</kw>
<status status="FAIL" endtime="20170921 21:07:42.836" starttime="20170921 21:07:42.525"></status>
</kw>
<status status="FAIL" endtime="20170921 21:07:42.836" starttime="20170921 21:07:42.525"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170921 21:07:42.841" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170921 21:07:42.844" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170921 21:07:42.844" starttime="20170921 21:07:42.836"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170921 21:07:42.849" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170921 21:07:42.849" starttime="20170921 21:07:42.848"></status>
</kw>
<msg timestamp="20170921 21:07:42.849" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170921 21:07:42.849" starttime="20170921 21:07:42.847"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170921 21:07:42.850" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170921 21:07:42.850" starttime="20170921 21:07:42.849"></status>
</kw>
<status status="FAIL" endtime="20170921 21:07:42.850" starttime="20170921 21:07:42.150"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.851" starttime="20170921 21:07:42.136"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.851" starttime="20170921 21:07:42.133"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.851" starttime="20170921 21:07:42.133"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:42.853" starttime="20170921 21:07:42.853"></status>
</kw>
<msg timestamp="20170921 21:07:42.853" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:42.853" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170921 21:07:42.853" starttime="20170921 21:07:42.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:42.854" starttime="20170921 21:07:42.854"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170921 21:07:42.870" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170921 21:07:42.870" starttime="20170921 21:07:42.870"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.870" starttime="20170921 21:07:42.869"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.871" starttime="20170921 21:07:42.854"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.871" starttime="20170921 21:07:42.851"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.871" starttime="20170921 21:07:42.851"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.871" starttime="20170921 21:07:26.390"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.871" starttime="20170921 21:07:26.388"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.871" starttime="20170921 21:07:26.387"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.871" starttime="20170921 21:07:26.387"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170921 21:07:42.878" starttime="20170921 21:07:42.877"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.878" starttime="20170921 21:07:42.871"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.878" starttime="20170921 21:07:26.386"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.878" starttime="20170921 21:07:23.143"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:42.878" starttime="20170921 21:07:23.142"></status>
</kw>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:42.883" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:42.884" starttime="20170921 21:07:42.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:42.885" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:42.885" starttime="20170921 21:07:42.884"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:42.885" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:42.885" starttime="20170921 21:07:42.885"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:42.886" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:42.886" starttime="20170921 21:07:42.886"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:43.082" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:43.082" starttime="20170921 21:07:42.887"></status>
</kw>
<msg timestamp="20170921 21:07:43.082" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:43.082" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.082" starttime="20170921 21:07:42.886"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:43.083" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.083" starttime="20170921 21:07:43.082"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:43.083" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.083" starttime="20170921 21:07:43.083"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.084" starttime="20170921 21:07:42.882"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.084" starttime="20170921 21:07:42.881"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.084" starttime="20170921 21:07:42.880"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:43.084" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170921 21:07:43.084" starttime="20170921 21:07:43.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:43.085" starttime="20170921 21:07:43.085"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:43.138" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170921 21:07:43.138" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.138" starttime="20170921 21:07:43.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:43.139" starttime="20170921 21:07:43.138"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:43.139" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:43.139" starttime="20170921 21:07:43.139"></status>
</kw>
<msg timestamp="20170921 21:07:43.140" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.140" starttime="20170921 21:07:42.879"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:43.140" starttime="20170921 21:07:43.140"></status>
</kw>
<kw name="Get URL List" library="utils">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:43.145" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:43.145" starttime="20170921 21:07:43.144"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:43.146" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:43.146" starttime="20170921 21:07:43.145"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:43.146" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:43.146" starttime="20170921 21:07:43.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:43.147" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:43.147" starttime="20170921 21:07:43.147"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:43.345" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:43.345" starttime="20170921 21:07:43.148"></status>
</kw>
<msg timestamp="20170921 21:07:43.345" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:43.345" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.345" starttime="20170921 21:07:43.147"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:43.346" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.346" starttime="20170921 21:07:43.346"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:43.347" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.347" starttime="20170921 21:07:43.347"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.347" starttime="20170921 21:07:43.143"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.347" starttime="20170921 21:07:43.143"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.347" starttime="20170921 21:07:43.142"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:43.348" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170921 21:07:43.348" starttime="20170921 21:07:43.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:43.349" starttime="20170921 21:07:43.348"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:43.419" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170921 21:07:43.419" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.419" starttime="20170921 21:07:43.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:43.420" starttime="20170921 21:07:43.420"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:43.420" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:43.420" starttime="20170921 21:07:43.420"></status>
</kw>
<msg timestamp="20170921 21:07:43.421" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.421" starttime="20170921 21:07:43.142"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:43.421" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.421" starttime="20170921 21:07:43.421"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170921 21:07:43.422" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170921 21:07:43.422" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170921 21:07:43.422" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'/xyz/openbmc_project/logging/entry/1']}</msg>
<status status="PASS" endtime="20170921 21:07:43.422" starttime="20170921 21:07:43.422"></status>
</kw>
<msg timestamp="20170921 21:07:43.423" level="INFO">${url_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170921 21:07:43.423" starttime="20170921 21:07:43.141"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:43.423" starttime="20170921 21:07:43.423"></status>
</kw>
<msg timestamp="20170921 21:07:43.423" level="INFO">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170921 21:07:43.423" starttime="20170921 21:07:43.141"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/1">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170921 21:07:43.425" starttime="20170921 21:07:43.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:43.426" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170921 21:07:43.426" starttime="20170921 21:07:43.425"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170921 21:07:43.428" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.181.15, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170921 21:07:43.429" starttime="20170921 21:07:43.428"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170921 21:07:43.430" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170921 21:07:43.430" starttime="20170921 21:07:43.429"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170921 21:07:43.430" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170921 21:07:43.430" starttime="20170921 21:07:43.430"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170921 21:07:43.431" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170921 21:07:43.431" starttime="20170921 21:07:43.431"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170921 21:07:43.621" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170921 21:07:43.621" starttime="20170921 21:07:43.432"></status>
</kw>
<msg timestamp="20170921 21:07:43.621" level="INFO">${status} = PASS</msg>
<msg timestamp="20170921 21:07:43.621" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.621" starttime="20170921 21:07:43.432"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170921 21:07:43.622" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.622" starttime="20170921 21:07:43.622"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:43.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.623" starttime="20170921 21:07:43.622"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.623" starttime="20170921 21:07:43.427"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.623" starttime="20170921 21:07:43.427"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.623" starttime="20170921 21:07:43.426"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170921 21:07:43.624" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1</msg>
<status status="PASS" endtime="20170921 21:07:43.624" starttime="20170921 21:07:43.623"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170921 21:07:43.626" level="INFO">${msg} = URI:https://9.3.181.15/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20170921 21:07:43.626" starttime="20170921 21:07:43.625"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170921 21:07:43.627" level="INFO">URI:https://9.3.181.15/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20170921 21:07:43.627" starttime="20170921 21:07:43.626"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.627" starttime="20170921 21:07:43.626"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.627" starttime="20170921 21:07:43.624"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170921 21:07:43.747" level="INFO">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20170921 21:07:43.747" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.747" starttime="20170921 21:07:43.627"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170921 21:07:43.749" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170921 21:07:43.749" starttime="20170921 21:07:43.749"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170921 21:07:43.750" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170921 21:07:43.750" starttime="20170921 21:07:43.750"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.751" starttime="20170921 21:07:43.749"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.751" starttime="20170921 21:07:43.748"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170921 21:07:43.751" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170921 21:07:43.751" starttime="20170921 21:07:43.751"></status>
</kw>
<msg timestamp="20170921 21:07:43.751" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.752" starttime="20170921 21:07:43.426"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170921 21:07:43.752" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170921 21:07:43.752" starttime="20170921 21:07:43.752"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.752" starttime="20170921 21:07:43.424"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.752" starttime="20170921 21:07:43.424"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.752" starttime="20170921 21:07:43.423"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.753" starttime="20170921 21:07:42.878"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.753" starttime="20170921 21:07:22.321"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.753" starttime="20170921 21:07:22.320"></status>
</kw>
<status status="PASS" endtime="20170921 21:07:43.753" starttime="20170921 21:07:21.566"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="PASS" endtime="20170921 21:07:43.753" critical="yes" starttime="20170921 21:00:39.153"></status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="PASS" endtime="20170921 21:07:43.754" starttime="20170921 21:00:38.116"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="1">Critical Tests</stat>
<stat fail="0" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="Bmc Code Update" pass="1">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
