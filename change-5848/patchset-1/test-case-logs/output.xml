<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170808 16:07:54.171">
<suite name="Tests" source="/tmp/fspcibld/10938/obmc-robot/tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:07:54.600">Dictionary does not contain key 'host'.</msg>
<status endtime="20170808 16:07:54.600" status="FAIL" starttime="20170808 16:07:54.599"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:54.600">${has_host} = False</msg>
<status endtime="20170808 16:07:54.600" status="PASS" starttime="20170808 16:07:54.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170808 16:07:54.601" status="PASS" starttime="20170808 16:07:54.601"></status>
</kw>
<status endtime="20170808 16:07:54.601" status="PASS" starttime="20170808 16:07:54.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:54.602">${port_num} = 22</msg>
<status endtime="20170808 16:07:54.602" status="PASS" starttime="20170808 16:07:54.602"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:54.603">${SSH_PORT} = 22</msg>
<status endtime="20170808 16:07:54.603" status="PASS" starttime="20170808 16:07:54.603"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:54.603">${https_num} = 443</msg>
<status endtime="20170808 16:07:54.603" status="PASS" starttime="20170808 16:07:54.603"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:54.604">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170808 16:07:54.604" status="PASS" starttime="20170808 16:07:54.604"></status>
</kw>
<status endtime="20170808 16:07:54.604" status="PASS" starttime="20170808 16:07:54.602"></status>
</kw>
<status endtime="20170808 16:07:54.604" status="PASS" starttime="20170808 16:07:54.601"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:07:54.605">Dictionary does not contain key 'port'.</msg>
<status endtime="20170808 16:07:54.605" status="FAIL" starttime="20170808 16:07:54.605"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:54.605">${has_port} = False</msg>
<status endtime="20170808 16:07:54.605" status="PASS" starttime="20170808 16:07:54.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170808 16:07:54.607" status="PASS" starttime="20170808 16:07:54.607"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170808 16:07:54.608" status="PASS" starttime="20170808 16:07:54.607"></status>
</kw>
<status endtime="20170808 16:07:54.608" status="PASS" starttime="20170808 16:07:54.606"></status>
</kw>
<status endtime="20170808 16:07:54.608" status="PASS" starttime="20170808 16:07:54.606"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:54.608">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170808 16:07:56.324">Read output: root@witherspoon:~#</msg>
<status endtime="20170808 16:07:56.324" status="PASS" starttime="20170808 16:07:54.608"></status>
</kw>
<status endtime="20170808 16:07:56.324" status="PASS" starttime="20170808 16:07:54.598"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:56.326">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170808 16:07:56.402">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170808 16:07:56.403">${output} = VERSION_ID="v1.99.8-199-g87b2879"</msg>
<msg level="INFO" timestamp="20170808 16:07:56.403">${stderr} = </msg>
<status endtime="20170808 16:07:56.403" status="PASS" starttime="20170808 16:07:56.325"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:56.403">Length is 0</msg>
<status endtime="20170808 16:07:56.403" status="PASS" starttime="20170808 16:07:56.403"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:56.404">VERSION_ID="v1.99.8-199-g87b2879"</msg>
<status endtime="20170808 16:07:56.404" status="PASS" starttime="20170808 16:07:56.404"></status>
</kw>
<status endtime="20170808 16:07:56.404" status="PASS" starttime="20170808 16:07:56.325"></status>
</kw>
<status endtime="20170808 16:07:56.404" status="PASS" starttime="20170808 16:07:56.325"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:56.406">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170808 16:07:56.593">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170808 16:07:56.593">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg level="INFO" timestamp="20170808 16:07:56.593">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170808 16:07:56.593" status="PASS" starttime="20170808 16:07:56.405"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:56.593">Length is 81</msg>
<msg level="FAIL" timestamp="20170808 16:07:56.594">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170808 16:07:56.594" status="FAIL" starttime="20170808 16:07:56.593"></status>
</kw>
<status endtime="20170808 16:07:56.594" status="FAIL" starttime="20170808 16:07:56.405"></status>
</kw>
<status endtime="20170808 16:07:56.594" status="FAIL" starttime="20170808 16:07:56.405"></status>
</kw>
<status endtime="20170808 16:07:56.594" status="PASS" starttime="20170808 16:07:56.404"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:56.776">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:07:56.777">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170808 16:07:57.503">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170808 16:07:57.504">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170808 16:07:57.580">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170808 16:07:57.588">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170808 16:07:57.588">${stderr} = </msg>
<msg level="INFO" timestamp="20170808 16:07:57.588">${rc} = 0</msg>
<status endtime="20170808 16:07:57.588" status="PASS" starttime="20170808 16:07:56.595"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:57.589">Length is 0</msg>
<status endtime="20170808 16:07:57.589" status="PASS" starttime="20170808 16:07:57.589"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:57.589">Length is 11</msg>
<status endtime="20170808 16:07:57.590" status="PASS" starttime="20170808 16:07:57.589"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:57.590">${bmc_model} = Witherspoon</msg>
<status endtime="20170808 16:07:57.590" status="PASS" starttime="20170808 16:07:56.595"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:57.590">BMC Model=Witherspoon</msg>
<status endtime="20170808 16:07:57.590" status="PASS" starttime="20170808 16:07:57.590"></status>
</kw>
<status endtime="20170808 16:07:57.590" status="PASS" starttime="20170808 16:07:56.595"></status>
</kw>
<status endtime="20170808 16:07:57.591" status="PASS" starttime="20170808 16:07:56.594"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:07:57.593">Dictionary does not contain key 'host'.</msg>
<status endtime="20170808 16:07:57.593" status="FAIL" starttime="20170808 16:07:57.592"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:57.593">${has_host} = False</msg>
<status endtime="20170808 16:07:57.593" status="PASS" starttime="20170808 16:07:57.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170808 16:07:57.594" status="PASS" starttime="20170808 16:07:57.594"></status>
</kw>
<status endtime="20170808 16:07:57.594" status="PASS" starttime="20170808 16:07:57.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:57.596">${port_num} = 22</msg>
<status endtime="20170808 16:07:57.596" status="PASS" starttime="20170808 16:07:57.596"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:57.597">${SSH_PORT} = 22</msg>
<status endtime="20170808 16:07:57.597" status="PASS" starttime="20170808 16:07:57.596"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:57.597">${https_num} = 443</msg>
<status endtime="20170808 16:07:57.597" status="PASS" starttime="20170808 16:07:57.597"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:57.598">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170808 16:07:57.598" status="PASS" starttime="20170808 16:07:57.598"></status>
</kw>
<status endtime="20170808 16:07:57.598" status="PASS" starttime="20170808 16:07:57.595"></status>
</kw>
<status endtime="20170808 16:07:57.598" status="PASS" starttime="20170808 16:07:57.594"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:07:57.599">Dictionary does not contain key 'port'.</msg>
<status endtime="20170808 16:07:57.599" status="FAIL" starttime="20170808 16:07:57.599"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:57.599">${has_port} = False</msg>
<status endtime="20170808 16:07:57.599" status="PASS" starttime="20170808 16:07:57.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170808 16:07:57.601" status="PASS" starttime="20170808 16:07:57.601"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170808 16:07:57.602" status="PASS" starttime="20170808 16:07:57.601"></status>
</kw>
<status endtime="20170808 16:07:57.602" status="PASS" starttime="20170808 16:07:57.600"></status>
</kw>
<status endtime="20170808 16:07:57.602" status="PASS" starttime="20170808 16:07:57.600"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:57.602">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170808 16:07:59.267">Read output: root@witherspoon:~#</msg>
<status endtime="20170808 16:07:59.267" status="PASS" starttime="20170808 16:07:57.602"></status>
</kw>
<status endtime="20170808 16:07:59.267" status="PASS" starttime="20170808 16:07:57.591"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.269">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170808 16:07:59.345">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170808 16:07:59.345">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170808 16:07:59.345">${stderr} = </msg>
<status endtime="20170808 16:07:59.345" status="PASS" starttime="20170808 16:07:59.268"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:59.346">Length is 0</msg>
<status endtime="20170808 16:07:59.346" status="PASS" starttime="20170808 16:07:59.346"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:59.346">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170808 16:07:59.346" status="PASS" starttime="20170808 16:07:59.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170808 16:07:59.347" status="PASS" starttime="20170808 16:07:59.346"></status>
</kw>
<status endtime="20170808 16:07:59.347" status="PASS" starttime="20170808 16:07:57.591"></status>
</kw>
<status endtime="20170808 16:07:59.347" status="PASS" starttime="20170808 16:07:57.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170808 16:07:59.348" status="PASS" starttime="20170808 16:07:59.347"></status>
</kw>
<status endtime="20170808 16:07:59.348" status="PASS" starttime="20170808 16:07:54.598"></status>
</kw>
<suite name="Security" source="/tmp/fspcibld/10938/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/fspcibld/10938/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:59.428">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:07:59.428" status="PASS" starttime="20170808 16:07:59.427"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.429">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:07:59.429" status="PASS" starttime="20170808 16:07:59.428"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.430">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:07:59.430" status="PASS" starttime="20170808 16:07:59.429"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.430">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:07:59.430" status="PASS" starttime="20170808 16:07:59.430"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:59.624">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:07:59.624" status="PASS" starttime="20170808 16:07:59.431"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:59.624">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:07:59.624">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:07:59.624" status="PASS" starttime="20170808 16:07:59.430"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:59.625">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:07:59.625" status="PASS" starttime="20170808 16:07:59.624"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:59.625">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:07:59.625" status="PASS" starttime="20170808 16:07:59.625"></status>
</kw>
<status endtime="20170808 16:07:59.626" status="PASS" starttime="20170808 16:07:59.427"></status>
</kw>
<status endtime="20170808 16:07:59.626" status="PASS" starttime="20170808 16:07:59.427"></status>
</kw>
<status endtime="20170808 16:07:59.626" status="PASS" starttime="20170808 16:07:59.426"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:59.631">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:07:59.631" status="PASS" starttime="20170808 16:07:59.630"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.632">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:07:59.632" status="PASS" starttime="20170808 16:07:59.631"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.632">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:07:59.632" status="PASS" starttime="20170808 16:07:59.632"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.633">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:07:59.633" status="PASS" starttime="20170808 16:07:59.633"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:59.812">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:07:59.813" status="PASS" starttime="20170808 16:07:59.634"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:59.813">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:07:59.813">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:07:59.813" status="PASS" starttime="20170808 16:07:59.633"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:59.813">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:07:59.814" status="PASS" starttime="20170808 16:07:59.813"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:59.814">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:07:59.814" status="PASS" starttime="20170808 16:07:59.814"></status>
</kw>
<status endtime="20170808 16:07:59.814" status="PASS" starttime="20170808 16:07:59.629"></status>
</kw>
<status endtime="20170808 16:07:59.814" status="PASS" starttime="20170808 16:07:59.629"></status>
</kw>
<status endtime="20170808 16:07:59.815" status="PASS" starttime="20170808 16:07:59.628"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.815">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170808 16:07:59.815" status="PASS" starttime="20170808 16:07:59.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.817">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170808 16:07:59.817" status="PASS" starttime="20170808 16:07:59.817"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:59.818">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170808 16:07:59.818" status="PASS" starttime="20170808 16:07:59.818"></status>
</kw>
<status endtime="20170808 16:07:59.818" status="PASS" starttime="20170808 16:07:59.817"></status>
</kw>
<status endtime="20170808 16:07:59.819" status="PASS" starttime="20170808 16:07:59.816"></status>
</kw>
<status endtime="20170808 16:07:59.819" status="PASS" starttime="20170808 16:07:59.815"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.906">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:07:59.906">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:07:59.906" status="PASS" starttime="20170808 16:07:59.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.908">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:07:59.908" status="PASS" starttime="20170808 16:07:59.907"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:59.909">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:07:59.909" status="PASS" starttime="20170808 16:07:59.909"></status>
</kw>
<status endtime="20170808 16:07:59.909" status="PASS" starttime="20170808 16:07:59.908"></status>
</kw>
<status endtime="20170808 16:07:59.909" status="PASS" starttime="20170808 16:07:59.907"></status>
</kw>
<status endtime="20170808 16:07:59.909" status="PASS" starttime="20170808 16:07:59.906"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:07:59.910">Delete All Sessions</msg>
<status endtime="20170808 16:07:59.910" status="PASS" starttime="20170808 16:07:59.910"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:59.910">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:07:59.910" status="PASS" starttime="20170808 16:07:59.628"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:07:59.911">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:07:59.911" status="PASS" starttime="20170808 16:07:59.910"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.911">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:07:59.912">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:07:59.912">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:07:59.912" status="PASS" starttime="20170808 16:07:59.911"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:59.912">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170808 16:07:59.912" status="PASS" starttime="20170808 16:07:59.627"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:59.912">${host_state} = Off</msg>
<status endtime="20170808 16:07:59.912" status="PASS" starttime="20170808 16:07:59.627"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:07:59.913">Off != Quiesced</msg>
<status endtime="20170808 16:07:59.913" status="FAIL" starttime="20170808 16:07:59.913"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:59.914">${status} = False</msg>
<status endtime="20170808 16:07:59.914" status="PASS" starttime="20170808 16:07:59.913"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:59.914">${status} = False</msg>
<status endtime="20170808 16:07:59.914" status="PASS" starttime="20170808 16:07:59.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170808 16:07:59.914" status="PASS" starttime="20170808 16:07:59.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170808 16:07:59.915" status="PASS" starttime="20170808 16:07:59.915"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.924">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170808 16:07:59.924" status="PASS" starttime="20170808 16:07:59.916"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.933">${FFDC_DIR_PATH} = </msg>
<status endtime="20170808 16:07:59.933" status="PASS" starttime="20170808 16:07:59.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.935">${cur_time} = 2017-08-08 16:07:59:934713</msg>
<status endtime="20170808 16:07:59.935" status="PASS" starttime="20170808 16:07:59.935"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.935">${cur_time} = 20170808160759934713</msg>
<status endtime="20170808 16:07:59.936" status="PASS" starttime="20170808 16:07:59.935"></status>
</kw>
<status endtime="20170808 16:07:59.936" status="PASS" starttime="20170808 16:07:59.934"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:59.940">${FFDC_TIME} = 20170808160759934713</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.941">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170808 16:07:59.941" status="PASS" starttime="20170808 16:07:59.941"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.942">${suite_name} = 20170808160759934713_TestsSecurityTestSsl</msg>
<status endtime="20170808 16:07:59.942" status="PASS" starttime="20170808 16:07:59.941"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.942">${test_name} = TestSSLConnection</msg>
<status endtime="20170808 16:07:59.942" status="PASS" starttime="20170808 16:07:59.942"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.943">${test_name} = 20170808160759934713_TestSSLConnection</msg>
<status endtime="20170808 16:07:59.943" status="PASS" starttime="20170808 16:07:59.942"></status>
</kw>
<status endtime="20170808 16:07:59.943" status="PASS" starttime="20170808 16:07:59.940"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:59.943">${FFDC_DIR_PATH} = /tmp/fspcibld/10938/obmc-robot/logs/20170808160759934713_TestsSecurityTestSsl/20170808160759934713_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170808 16:07:59.950">${FFDC_PREFIX} = 20170808160759934713_</msg>
<status endtime="20170808 16:07:59.951" status="PASS" starttime="20170808 16:07:59.934"></status>
</kw>
<status endtime="20170808 16:07:59.951" status="PASS" starttime="20170808 16:07:59.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170808 16:07:59.952" status="PASS" starttime="20170808 16:07:59.951"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:07:59.953">Created directory '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs"&gt;/tmp/fspcibld/10938/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170808 16:07:59.953" status="PASS" starttime="20170808 16:07:59.952"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:07:59.954">File '/tmp/fspcibld/10938/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170808 16:07:59.954" status="FAIL" starttime="20170808 16:07:59.953"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:59.954">${exist} = False</msg>
<status endtime="20170808 16:07:59.954" status="PASS" starttime="20170808 16:07:59.953"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:07:59.955">Created file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:07:59.955" status="PASS" starttime="20170808 16:07:59.955"></status>
</kw>
<status endtime="20170808 16:07:59.955" status="PASS" starttime="20170808 16:07:59.954"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170808 16:07:59.956" status="PASS" starttime="20170808 16:07:59.956"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.957">${cur_time} = 2017-08-08 16:07:59:956659</msg>
<status endtime="20170808 16:07:59.957" status="PASS" starttime="20170808 16:07:59.956"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.957">${cur_time} = 20170808160759956659</msg>
<status endtime="20170808 16:07:59.957" status="PASS" starttime="20170808 16:07:59.957"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:07:59.958">${cur_time} = 20170808160759956659</msg>
<status endtime="20170808 16:07:59.958" status="PASS" starttime="20170808 16:07:59.956"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:07:59.958">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:07:59.958" status="PASS" starttime="20170808 16:07:59.958"></status>
</kw>
<status endtime="20170808 16:07:59.959" status="PASS" starttime="20170808 16:07:59.915"></status>
</kw>
<status endtime="20170808 16:07:59.959" status="PASS" starttime="20170808 16:07:59.626"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170808 16:07:59.959" status="PASS" critical="yes" starttime="20170808 16:07:59.425"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:07:59.960">Delete All Sessions</msg>
<status endtime="20170808 16:07:59.960" status="PASS" starttime="20170808 16:07:59.959"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170808 16:07:59.960" status="PASS" starttime="20170808 16:07:59.350"></status>
</suite>
<status endtime="20170808 16:07:59.961" status="PASS" starttime="20170808 16:07:59.348"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/fspcibld/10938/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.999">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 16:07:59.999" status="PASS" starttime="20170808 16:07:59.998"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:07:59.999">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 16:07:59.999" status="PASS" starttime="20170808 16:07:59.999"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:00.000">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 16:08:00.000" status="PASS" starttime="20170808 16:07:59.998"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.001">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 16:08:00.001" status="PASS" starttime="20170808 16:08:00.001"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.002">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 16:08:00.002" status="PASS" starttime="20170808 16:08:00.002"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:00.002">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 16:08:00.002" status="PASS" starttime="20170808 16:08:00.000"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.003">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170808 16:08:00.003" status="PASS" starttime="20170808 16:08:00.003"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170808 16:08:00.004" status="PASS" starttime="20170808 16:08:00.003"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.008">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170808 16:08:00.011">${rc} = 0</msg>
<msg level="INFO" timestamp="20170808 16:08:00.011">${output} = /tmp/fspcibld/10938/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170808 16:08:00.012" status="PASS" starttime="20170808 16:08:00.004"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170808 16:08:00.014" status="PASS" starttime="20170808 16:08:00.013"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170808 16:08:00.015" status="PASS" starttime="20170808 16:08:00.015"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.016">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170808 16:08:00.016" status="PASS" starttime="20170808 16:08:00.016"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:00.016">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170808 16:08:00.017" status="PASS" starttime="20170808 16:08:00.002"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.017">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170808 16:08:00.017" status="PASS" starttime="20170808 16:08:00.017"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170808 16:08:00.018" status="PASS" starttime="20170808 16:08:00.017"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.021">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170808 16:08:00.030">${rc} = 0</msg>
<msg level="INFO" timestamp="20170808 16:08:00.030">${os_con_pid} = </msg>
<status endtime="20170808 16:08:00.030" status="PASS" starttime="20170808 16:08:00.018"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170808 16:08:00.032" status="PASS" starttime="20170808 16:08:00.032"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.033">${cmd_buf} = kill -9 </msg>
<status endtime="20170808 16:08:00.033" status="PASS" starttime="20170808 16:08:00.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170808 16:08:00.034" status="PASS" starttime="20170808 16:08:00.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.035">${rc} = None</msg>
<msg level="INFO" timestamp="20170808 16:08:00.035">${output} = None</msg>
<status endtime="20170808 16:08:00.035" status="PASS" starttime="20170808 16:08:00.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170808 16:08:00.036" status="PASS" starttime="20170808 16:08:00.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:08:00.044">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status endtime="20170808 16:08:00.044" status="FAIL" starttime="20170808 16:08:00.037"></status>
</kw>
<status endtime="20170808 16:08:00.044" status="PASS" starttime="20170808 16:08:00.037"></status>
</kw>
<status endtime="20170808 16:08:00.044" status="PASS" starttime="20170808 16:08:00.036"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.045">${output} = </msg>
<status endtime="20170808 16:08:00.045" status="PASS" starttime="20170808 16:08:00.045"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.046">${loc_quiet} = 1</msg>
<status endtime="20170808 16:08:00.046" status="PASS" starttime="20170808 16:08:00.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170808 16:08:00.104" status="PASS" starttime="20170808 16:08:00.047"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:00.105">${rc} = 1</msg>
<msg level="INFO" timestamp="20170808 16:08:00.105">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170808 16:08:00.105" status="PASS" starttime="20170808 16:08:00.046"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:00.105">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170808 16:08:00.106" status="PASS" starttime="20170808 16:08:00.000"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:08:00.108">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170808 16:08:00.108" status="PASS" starttime="20170808 16:08:00.107"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.109">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170808 16:08:00.109" status="PASS" starttime="20170808 16:08:00.109"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170808 16:08:00.109" status="PASS" starttime="20170808 16:08:00.109"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.113">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170808 16:08:00.116">${rc} = 0</msg>
<msg level="INFO" timestamp="20170808 16:08:00.116">${output} = /tmp/fspcibld/10938/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170808 16:08:00.116" status="PASS" starttime="20170808 16:08:00.110"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170808 16:08:00.119" status="PASS" starttime="20170808 16:08:00.118"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170808 16:08:00.120" status="PASS" starttime="20170808 16:08:00.120"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.121">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170808 16:08:00.121" status="PASS" starttime="20170808 16:08:00.120"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:00.121">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170808 16:08:00.121" status="PASS" starttime="20170808 16:08:00.108"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.122">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170808 16:08:00.122" status="PASS" starttime="20170808 16:08:00.122"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170808 16:08:00.123" status="PASS" starttime="20170808 16:08:00.122"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.126">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170808 16:08:00.129">${rc} = 0</msg>
<msg level="INFO" timestamp="20170808 16:08:00.129">${output} = </msg>
<status endtime="20170808 16:08:00.129" status="PASS" starttime="20170808 16:08:00.123"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170808 16:08:00.132" status="PASS" starttime="20170808 16:08:00.132"></status>
</kw>
<status endtime="20170808 16:08:00.133" status="PASS" starttime="20170808 16:07:59.997"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:00.134">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.137">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170808 16:08:00.137" status="PASS" starttime="20170808 16:08:00.136"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.138">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170808 16:08:00.138" status="PASS" starttime="20170808 16:08:00.138"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:00.143">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:08:00.145" status="PASS" starttime="20170808 16:08:00.142"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.146">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:08:00.146" status="PASS" starttime="20170808 16:08:00.146"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.147">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:08:00.147" status="PASS" starttime="20170808 16:08:00.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.147">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:08:00.147" status="PASS" starttime="20170808 16:08:00.147"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:00.718">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:08:00.718" status="PASS" starttime="20170808 16:08:00.148"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:00.718">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:08:00.718">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:00.718" status="PASS" starttime="20170808 16:08:00.147"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:00.719">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:00.719" status="PASS" starttime="20170808 16:08:00.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:00.720">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:00.720" status="PASS" starttime="20170808 16:08:00.719"></status>
</kw>
<status endtime="20170808 16:08:00.720" status="PASS" starttime="20170808 16:08:00.141"></status>
</kw>
<status endtime="20170808 16:08:00.720" status="PASS" starttime="20170808 16:08:00.140"></status>
</kw>
<status endtime="20170808 16:08:00.720" status="PASS" starttime="20170808 16:08:00.139"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.721">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170808 16:08:00.721" status="PASS" starttime="20170808 16:08:00.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.721">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:08:00.721" status="PASS" starttime="20170808 16:08:00.721"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170808 16:08:00.722" status="PASS" starttime="20170808 16:08:00.721"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:00.723">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170808 16:08:00.723" status="PASS" starttime="20170808 16:08:00.723"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:00.724">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170808 16:08:00.724" status="PASS" starttime="20170808 16:08:00.724"></status>
</kw>
<status endtime="20170808 16:08:00.724" status="PASS" starttime="20170808 16:08:00.724"></status>
</kw>
<status endtime="20170808 16:08:00.725" status="PASS" starttime="20170808 16:08:00.722"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:01.313">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170808 16:08:01.313">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:01.313" status="PASS" starttime="20170808 16:08:00.725"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:01.315">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:01.315" status="PASS" starttime="20170808 16:08:01.314"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:01.315">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:01.316" status="PASS" starttime="20170808 16:08:01.315"></status>
</kw>
<status endtime="20170808 16:08:01.316" status="PASS" starttime="20170808 16:08:01.315"></status>
</kw>
<status endtime="20170808 16:08:01.316" status="PASS" starttime="20170808 16:08:01.313"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:08:01.316">Delete All Sessions</msg>
<status endtime="20170808 16:08:01.316" status="PASS" starttime="20170808 16:08:01.316"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:01.317">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:01.317" status="PASS" starttime="20170808 16:08:00.138"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:01.317">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:01.317" status="PASS" starttime="20170808 16:08:01.317"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:01.318">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:08:01.318">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:08:01.318">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status endtime="20170808 16:08:01.318" status="PASS" starttime="20170808 16:08:01.317"></status>
</kw>
<status endtime="20170808 16:08:01.318" status="PASS" starttime="20170808 16:08:00.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170808 16:08:01.319" status="PASS" starttime="20170808 16:08:01.318"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:01.323">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:08:01.324" status="PASS" starttime="20170808 16:08:01.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:01.324">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:08:01.324" status="PASS" starttime="20170808 16:08:01.324"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:01.325">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:08:01.325" status="PASS" starttime="20170808 16:08:01.325"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:01.326">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:08:01.326" status="PASS" starttime="20170808 16:08:01.325"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:02.548">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:08:02.548" status="PASS" starttime="20170808 16:08:01.327"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:02.548">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:08:02.548">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:02.548" status="PASS" starttime="20170808 16:08:01.326"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:02.549">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:02.549" status="PASS" starttime="20170808 16:08:02.549"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:02.550">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:02.550" status="PASS" starttime="20170808 16:08:02.549"></status>
</kw>
<status endtime="20170808 16:08:02.550" status="PASS" starttime="20170808 16:08:01.323"></status>
</kw>
<status endtime="20170808 16:08:02.550" status="PASS" starttime="20170808 16:08:01.322"></status>
</kw>
<status endtime="20170808 16:08:02.550" status="PASS" starttime="20170808 16:08:01.322"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:02.551">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:08:02.551" status="PASS" starttime="20170808 16:08:02.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:02.553">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:08:02.553" status="PASS" starttime="20170808 16:08:02.552"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:02.554">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:08:02.554" status="PASS" starttime="20170808 16:08:02.554"></status>
</kw>
<status endtime="20170808 16:08:02.554" status="PASS" starttime="20170808 16:08:02.553"></status>
</kw>
<status endtime="20170808 16:08:02.554" status="PASS" starttime="20170808 16:08:02.552"></status>
</kw>
<status endtime="20170808 16:08:02.554" status="PASS" starttime="20170808 16:08:02.551"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:06.623">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:08:06.623">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:06.623" status="PASS" starttime="20170808 16:08:02.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:06.625">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:06.625" status="PASS" starttime="20170808 16:08:06.624"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:06.626">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:06.626" status="PASS" starttime="20170808 16:08:06.626"></status>
</kw>
<status endtime="20170808 16:08:06.626" status="PASS" starttime="20170808 16:08:06.625"></status>
</kw>
<status endtime="20170808 16:08:06.626" status="PASS" starttime="20170808 16:08:06.624"></status>
</kw>
<status endtime="20170808 16:08:06.626" status="PASS" starttime="20170808 16:08:06.623"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:08:06.627">Delete All Sessions</msg>
<status endtime="20170808 16:08:06.627" status="PASS" starttime="20170808 16:08:06.627"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:06.627">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:06.627" status="PASS" starttime="20170808 16:08:01.321"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:06.628">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:06.628" status="PASS" starttime="20170808 16:08:06.627"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:06.628">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:08:06.628">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:08:06.629">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:08:06.629" status="PASS" starttime="20170808 16:08:06.628"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:06.629">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:08:06.629" status="PASS" starttime="20170808 16:08:01.320"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:06.629">${power_state} = Off</msg>
<status endtime="20170808 16:08:06.629" status="PASS" starttime="20170808 16:08:01.320"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170808 16:08:06.630" status="PASS" starttime="20170808 16:08:06.629"></status>
</kw>
<status endtime="20170808 16:08:06.630" status="PASS" starttime="20170808 16:08:01.320"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:06.634">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:08:06.634" status="PASS" starttime="20170808 16:08:06.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:06.635">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:08:06.635" status="PASS" starttime="20170808 16:08:06.635"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:06.636">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:08:06.636" status="PASS" starttime="20170808 16:08:06.635"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:06.636">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:08:06.636" status="PASS" starttime="20170808 16:08:06.636"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:07.555">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:08:07.555" status="PASS" starttime="20170808 16:08:06.637"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:07.555">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:08:07.555">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:07.555" status="PASS" starttime="20170808 16:08:06.636"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:07.556">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:07.556" status="PASS" starttime="20170808 16:08:07.555"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:07.556">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:07.557" status="PASS" starttime="20170808 16:08:07.556"></status>
</kw>
<status endtime="20170808 16:08:07.557" status="PASS" starttime="20170808 16:08:06.633"></status>
</kw>
<status endtime="20170808 16:08:07.557" status="PASS" starttime="20170808 16:08:06.632"></status>
</kw>
<status endtime="20170808 16:08:07.557" status="PASS" starttime="20170808 16:08:06.632"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:07.557">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170808 16:08:07.557" status="PASS" starttime="20170808 16:08:07.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:07.559">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170808 16:08:07.560" status="PASS" starttime="20170808 16:08:07.559"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:07.561">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170808 16:08:07.561" status="PASS" starttime="20170808 16:08:07.561"></status>
</kw>
<status endtime="20170808 16:08:07.562" status="PASS" starttime="20170808 16:08:07.560"></status>
</kw>
<status endtime="20170808 16:08:07.562" status="PASS" starttime="20170808 16:08:07.558"></status>
</kw>
<status endtime="20170808 16:08:07.562" status="PASS" starttime="20170808 16:08:07.558"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:07.666">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:08:07.666">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:07.666" status="PASS" starttime="20170808 16:08:07.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:07.668">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:07.668" status="PASS" starttime="20170808 16:08:07.667"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:07.669">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:07.669" status="PASS" starttime="20170808 16:08:07.669"></status>
</kw>
<status endtime="20170808 16:08:07.669" status="PASS" starttime="20170808 16:08:07.668"></status>
</kw>
<status endtime="20170808 16:08:07.669" status="PASS" starttime="20170808 16:08:07.667"></status>
</kw>
<status endtime="20170808 16:08:07.669" status="PASS" starttime="20170808 16:08:07.666"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:08:07.670">Delete All Sessions</msg>
<status endtime="20170808 16:08:07.670" status="PASS" starttime="20170808 16:08:07.670"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:07.670">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:07.670" status="PASS" starttime="20170808 16:08:06.631"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:07.671">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:07.671" status="PASS" starttime="20170808 16:08:07.670"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:07.671">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:08:07.671">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:08:07.671">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:08:07.671" status="PASS" starttime="20170808 16:08:07.671"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:07.672">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170808 16:08:07.672" status="PASS" starttime="20170808 16:08:06.631"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:07.672">${host_state} = Off</msg>
<status endtime="20170808 16:08:07.672" status="PASS" starttime="20170808 16:08:06.630"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170808 16:08:07.673" status="PASS" starttime="20170808 16:08:07.672"></status>
</kw>
<status endtime="20170808 16:08:07.673" status="PASS" starttime="20170808 16:08:01.319"></status>
</kw>
<status endtime="20170808 16:08:07.673" status="PASS" starttime="20170808 16:08:01.319"></status>
</kw>
<status endtime="20170808 16:08:07.673" status="PASS" starttime="20170808 16:08:00.136"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:07.674">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170808 16:08:07.674" status="PASS" starttime="20170808 16:08:07.674"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:07.675">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170808 16:08:07.675" status="PASS" starttime="20170808 16:08:07.675"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:07.678">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:08:07.678" status="PASS" starttime="20170808 16:08:07.677"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:07.679">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:08:07.679" status="PASS" starttime="20170808 16:08:07.678"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:07.679">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:08:07.679" status="PASS" starttime="20170808 16:08:07.679"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:07.680">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:08:07.680" status="PASS" starttime="20170808 16:08:07.680"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:07.998">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:08:07.998" status="PASS" starttime="20170808 16:08:07.681"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:07.998">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:08:07.999">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:07.999" status="PASS" starttime="20170808 16:08:07.680"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:07.999">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:07.999" status="PASS" starttime="20170808 16:08:07.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:08.000">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:08.000" status="PASS" starttime="20170808 16:08:08.000"></status>
</kw>
<status endtime="20170808 16:08:08.000" status="PASS" starttime="20170808 16:08:07.677"></status>
</kw>
<status endtime="20170808 16:08:08.000" status="PASS" starttime="20170808 16:08:07.676"></status>
</kw>
<status endtime="20170808 16:08:08.001" status="PASS" starttime="20170808 16:08:07.676"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:08.001">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170808 16:08:08.001" status="PASS" starttime="20170808 16:08:08.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:08.002">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:08:08.002" status="PASS" starttime="20170808 16:08:08.001"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170808 16:08:08.002" status="PASS" starttime="20170808 16:08:08.002"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:08.004">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170808 16:08:08.004" status="PASS" starttime="20170808 16:08:08.004"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:08.005">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170808 16:08:08.005" status="PASS" starttime="20170808 16:08:08.005"></status>
</kw>
<status endtime="20170808 16:08:08.005" status="PASS" starttime="20170808 16:08:08.004"></status>
</kw>
<status endtime="20170808 16:08:08.006" status="PASS" starttime="20170808 16:08:08.003"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:08.412">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170808 16:08:08.413">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:08.413" status="PASS" starttime="20170808 16:08:08.006"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:08.414">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:08.414" status="PASS" starttime="20170808 16:08:08.413"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:08.415">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:08.415" status="PASS" starttime="20170808 16:08:08.415"></status>
</kw>
<status endtime="20170808 16:08:08.415" status="PASS" starttime="20170808 16:08:08.414"></status>
</kw>
<status endtime="20170808 16:08:08.415" status="PASS" starttime="20170808 16:08:08.413"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:08:08.416">Delete All Sessions</msg>
<status endtime="20170808 16:08:08.416" status="PASS" starttime="20170808 16:08:08.415"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:08.416">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:08.416" status="PASS" starttime="20170808 16:08:07.675"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:08.417">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:08.417" status="PASS" starttime="20170808 16:08:08.416"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:08.417">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:08:08.417">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:08:08.417">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status endtime="20170808 16:08:08.417" status="PASS" starttime="20170808 16:08:08.417"></status>
</kw>
<status endtime="20170808 16:08:08.418" status="PASS" starttime="20170808 16:08:07.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170808 16:08:08.418" status="PASS" starttime="20170808 16:08:08.418"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:08.423">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:08:08.424" status="PASS" starttime="20170808 16:08:08.422"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:08.424">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:08:08.424" status="PASS" starttime="20170808 16:08:08.424"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:08.425">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:08:08.425" status="PASS" starttime="20170808 16:08:08.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:08.425">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:08:08.425" status="PASS" starttime="20170808 16:08:08.425"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:10.621">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:08:10.621" status="PASS" starttime="20170808 16:08:08.426"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:10.621">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:08:10.621">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:10.622" status="PASS" starttime="20170808 16:08:08.426"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:10.622">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:10.622" status="PASS" starttime="20170808 16:08:10.622"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:10.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:10.623" status="PASS" starttime="20170808 16:08:10.623"></status>
</kw>
<status endtime="20170808 16:08:10.623" status="PASS" starttime="20170808 16:08:08.422"></status>
</kw>
<status endtime="20170808 16:08:10.623" status="PASS" starttime="20170808 16:08:08.422"></status>
</kw>
<status endtime="20170808 16:08:10.623" status="PASS" starttime="20170808 16:08:08.421"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:10.624">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:08:10.624" status="PASS" starttime="20170808 16:08:10.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:10.626">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:08:10.626" status="PASS" starttime="20170808 16:08:10.625"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:10.627">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:08:10.627" status="PASS" starttime="20170808 16:08:10.627"></status>
</kw>
<status endtime="20170808 16:08:10.627" status="PASS" starttime="20170808 16:08:10.626"></status>
</kw>
<status endtime="20170808 16:08:10.627" status="PASS" starttime="20170808 16:08:10.625"></status>
</kw>
<status endtime="20170808 16:08:10.627" status="PASS" starttime="20170808 16:08:10.624"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:13.847">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:08:13.848">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:13.848" status="PASS" starttime="20170808 16:08:10.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:13.850">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:13.850" status="PASS" starttime="20170808 16:08:13.849"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:13.851">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:13.851" status="PASS" starttime="20170808 16:08:13.850"></status>
</kw>
<status endtime="20170808 16:08:13.851" status="PASS" starttime="20170808 16:08:13.850"></status>
</kw>
<status endtime="20170808 16:08:13.851" status="PASS" starttime="20170808 16:08:13.849"></status>
</kw>
<status endtime="20170808 16:08:13.851" status="PASS" starttime="20170808 16:08:13.848"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:08:13.851">Delete All Sessions</msg>
<status endtime="20170808 16:08:13.852" status="PASS" starttime="20170808 16:08:13.851"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:13.852">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:13.852" status="PASS" starttime="20170808 16:08:08.420"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:13.852">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:13.853" status="PASS" starttime="20170808 16:08:13.852"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:13.853">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:08:13.853">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:08:13.853">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:08:13.853" status="PASS" starttime="20170808 16:08:13.853"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:13.854">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:08:13.854" status="PASS" starttime="20170808 16:08:08.420"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:13.854">${power_state} = Off</msg>
<status endtime="20170808 16:08:13.854" status="PASS" starttime="20170808 16:08:08.419"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:08:13.854">On != Off</msg>
<status endtime="20170808 16:08:13.855" status="FAIL" starttime="20170808 16:08:13.854"></status>
</kw>
<status endtime="20170808 16:08:13.855" status="FAIL" starttime="20170808 16:08:08.419"></status>
</kw>
<status endtime="20170808 16:08:13.855" status="FAIL" starttime="20170808 16:08:08.419"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:23.861">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:08:23.861" status="PASS" starttime="20170808 16:08:23.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:23.862">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:08:23.862" status="PASS" starttime="20170808 16:08:23.861"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:23.862">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:08:23.862" status="PASS" starttime="20170808 16:08:23.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:23.863">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:08:23.863" status="PASS" starttime="20170808 16:08:23.863"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:24.049">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:08:24.049" status="PASS" starttime="20170808 16:08:23.864"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:24.049">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:08:24.049">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:24.049" status="PASS" starttime="20170808 16:08:23.863"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:24.050">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:24.050" status="PASS" starttime="20170808 16:08:24.050"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:24.051">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:24.051" status="PASS" starttime="20170808 16:08:24.050"></status>
</kw>
<status endtime="20170808 16:08:24.051" status="PASS" starttime="20170808 16:08:23.860"></status>
</kw>
<status endtime="20170808 16:08:24.051" status="PASS" starttime="20170808 16:08:23.859"></status>
</kw>
<status endtime="20170808 16:08:24.051" status="PASS" starttime="20170808 16:08:23.859"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:24.052">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:08:24.052" status="PASS" starttime="20170808 16:08:24.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:24.054">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:08:24.054" status="PASS" starttime="20170808 16:08:24.053"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:24.055">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:08:24.055" status="PASS" starttime="20170808 16:08:24.055"></status>
</kw>
<status endtime="20170808 16:08:24.055" status="PASS" starttime="20170808 16:08:24.054"></status>
</kw>
<status endtime="20170808 16:08:24.056" status="PASS" starttime="20170808 16:08:24.053"></status>
</kw>
<status endtime="20170808 16:08:24.056" status="PASS" starttime="20170808 16:08:24.052"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:24.144">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:08:24.145">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:24.145" status="PASS" starttime="20170808 16:08:24.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:24.146">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:24.147" status="PASS" starttime="20170808 16:08:24.146"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:24.147">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:24.148" status="PASS" starttime="20170808 16:08:24.147"></status>
</kw>
<status endtime="20170808 16:08:24.148" status="PASS" starttime="20170808 16:08:24.147"></status>
</kw>
<status endtime="20170808 16:08:24.148" status="PASS" starttime="20170808 16:08:24.145"></status>
</kw>
<status endtime="20170808 16:08:24.148" status="PASS" starttime="20170808 16:08:24.145"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:08:24.148">Delete All Sessions</msg>
<status endtime="20170808 16:08:24.148" status="PASS" starttime="20170808 16:08:24.148"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:24.149">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:24.149" status="PASS" starttime="20170808 16:08:23.858"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:24.149">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:24.149" status="PASS" starttime="20170808 16:08:24.149"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:24.150">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:08:24.150">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:08:24.150">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:08:24.150" status="PASS" starttime="20170808 16:08:24.149"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:24.150">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:08:24.150" status="PASS" starttime="20170808 16:08:23.857"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:24.151">${power_state} = Off</msg>
<status endtime="20170808 16:08:24.151" status="PASS" starttime="20170808 16:08:23.857"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:08:24.151">On != Off</msg>
<status endtime="20170808 16:08:24.151" status="FAIL" starttime="20170808 16:08:24.151"></status>
</kw>
<status endtime="20170808 16:08:24.152" status="FAIL" starttime="20170808 16:08:23.856"></status>
</kw>
<status endtime="20170808 16:08:24.152" status="FAIL" starttime="20170808 16:08:23.855"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:34.157">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:08:34.157" status="PASS" starttime="20170808 16:08:34.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:34.158">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:08:34.158" status="PASS" starttime="20170808 16:08:34.158"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:34.159">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:08:34.159" status="PASS" starttime="20170808 16:08:34.158"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:34.160">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:08:34.160" status="PASS" starttime="20170808 16:08:34.159"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:34.337">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:08:34.337" status="PASS" starttime="20170808 16:08:34.160"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:34.337">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:08:34.337">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:34.338" status="PASS" starttime="20170808 16:08:34.160"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:34.338">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:34.338" status="PASS" starttime="20170808 16:08:34.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:34.339">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:34.339" status="PASS" starttime="20170808 16:08:34.338"></status>
</kw>
<status endtime="20170808 16:08:34.339" status="PASS" starttime="20170808 16:08:34.156"></status>
</kw>
<status endtime="20170808 16:08:34.339" status="PASS" starttime="20170808 16:08:34.156"></status>
</kw>
<status endtime="20170808 16:08:34.339" status="PASS" starttime="20170808 16:08:34.155"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:34.340">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:08:34.340" status="PASS" starttime="20170808 16:08:34.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:34.343">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:08:34.343" status="PASS" starttime="20170808 16:08:34.342"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:34.344">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:08:34.344" status="PASS" starttime="20170808 16:08:34.344"></status>
</kw>
<status endtime="20170808 16:08:34.344" status="PASS" starttime="20170808 16:08:34.343"></status>
</kw>
<status endtime="20170808 16:08:34.344" status="PASS" starttime="20170808 16:08:34.341"></status>
</kw>
<status endtime="20170808 16:08:34.344" status="PASS" starttime="20170808 16:08:34.340"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:34.407">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:08:34.407">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:34.407" status="PASS" starttime="20170808 16:08:34.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:34.409">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:34.409" status="PASS" starttime="20170808 16:08:34.409"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:34.410">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:34.410" status="PASS" starttime="20170808 16:08:34.410"></status>
</kw>
<status endtime="20170808 16:08:34.410" status="PASS" starttime="20170808 16:08:34.409"></status>
</kw>
<status endtime="20170808 16:08:34.410" status="PASS" starttime="20170808 16:08:34.408"></status>
</kw>
<status endtime="20170808 16:08:34.410" status="PASS" starttime="20170808 16:08:34.408"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:08:34.411">Delete All Sessions</msg>
<status endtime="20170808 16:08:34.411" status="PASS" starttime="20170808 16:08:34.411"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:34.411">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:34.411" status="PASS" starttime="20170808 16:08:34.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:34.412">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:34.412" status="PASS" starttime="20170808 16:08:34.411"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:34.412">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:08:34.412">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:08:34.413">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:08:34.413" status="PASS" starttime="20170808 16:08:34.412"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:34.413">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:08:34.413" status="PASS" starttime="20170808 16:08:34.154"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:34.413">${power_state} = Off</msg>
<status endtime="20170808 16:08:34.413" status="PASS" starttime="20170808 16:08:34.153"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:08:34.414">On != Off</msg>
<status endtime="20170808 16:08:34.414" status="FAIL" starttime="20170808 16:08:34.413"></status>
</kw>
<status endtime="20170808 16:08:34.414" status="FAIL" starttime="20170808 16:08:34.153"></status>
</kw>
<status endtime="20170808 16:08:34.414" status="FAIL" starttime="20170808 16:08:34.152"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:44.420">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:08:44.420" status="PASS" starttime="20170808 16:08:44.420"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:44.421">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:08:44.421" status="PASS" starttime="20170808 16:08:44.420"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:44.421">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:08:44.421" status="PASS" starttime="20170808 16:08:44.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:44.422">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:08:44.422" status="PASS" starttime="20170808 16:08:44.422"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:44.598">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:08:44.598" status="PASS" starttime="20170808 16:08:44.423"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:44.598">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:08:44.598">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:44.598" status="PASS" starttime="20170808 16:08:44.422"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:44.599">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:44.599" status="PASS" starttime="20170808 16:08:44.599"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:44.600">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:44.600" status="PASS" starttime="20170808 16:08:44.599"></status>
</kw>
<status endtime="20170808 16:08:44.600" status="PASS" starttime="20170808 16:08:44.419"></status>
</kw>
<status endtime="20170808 16:08:44.600" status="PASS" starttime="20170808 16:08:44.419"></status>
</kw>
<status endtime="20170808 16:08:44.600" status="PASS" starttime="20170808 16:08:44.418"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:44.601">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:08:44.601" status="PASS" starttime="20170808 16:08:44.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:44.603">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:08:44.603" status="PASS" starttime="20170808 16:08:44.602"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:44.604">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:08:44.604" status="PASS" starttime="20170808 16:08:44.604"></status>
</kw>
<status endtime="20170808 16:08:44.604" status="PASS" starttime="20170808 16:08:44.603"></status>
</kw>
<status endtime="20170808 16:08:44.604" status="PASS" starttime="20170808 16:08:44.602"></status>
</kw>
<status endtime="20170808 16:08:44.604" status="PASS" starttime="20170808 16:08:44.601"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:44.968">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:08:44.968">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:44.968" status="PASS" starttime="20170808 16:08:44.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:44.973">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:44.973" status="PASS" starttime="20170808 16:08:44.972"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:44.974">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:44.974" status="PASS" starttime="20170808 16:08:44.973"></status>
</kw>
<status endtime="20170808 16:08:44.974" status="PASS" starttime="20170808 16:08:44.973"></status>
</kw>
<status endtime="20170808 16:08:44.974" status="PASS" starttime="20170808 16:08:44.971"></status>
</kw>
<status endtime="20170808 16:08:44.974" status="PASS" starttime="20170808 16:08:44.968"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:08:44.974">Delete All Sessions</msg>
<status endtime="20170808 16:08:44.975" status="PASS" starttime="20170808 16:08:44.974"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:44.975">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:44.975" status="PASS" starttime="20170808 16:08:44.417"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:44.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:44.975" status="PASS" starttime="20170808 16:08:44.975"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:44.976">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:08:44.976">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:08:44.976">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:08:44.976" status="PASS" starttime="20170808 16:08:44.976"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:44.977">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:08:44.977" status="PASS" starttime="20170808 16:08:44.416"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:44.977">${power_state} = Off</msg>
<status endtime="20170808 16:08:44.977" status="PASS" starttime="20170808 16:08:44.416"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:08:44.978">On != Off</msg>
<status endtime="20170808 16:08:44.978" status="FAIL" starttime="20170808 16:08:44.977"></status>
</kw>
<status endtime="20170808 16:08:44.978" status="FAIL" starttime="20170808 16:08:44.415"></status>
</kw>
<status endtime="20170808 16:08:44.978" status="FAIL" starttime="20170808 16:08:44.415"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:54.986">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:08:54.986" status="PASS" starttime="20170808 16:08:54.985"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:54.987">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:08:54.987" status="PASS" starttime="20170808 16:08:54.986"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:54.987">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:08:54.987" status="PASS" starttime="20170808 16:08:54.987"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:54.988">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:08:54.988" status="PASS" starttime="20170808 16:08:54.988"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:55.252">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:08:55.253" status="PASS" starttime="20170808 16:08:54.989"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:55.253">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:08:55.253">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:55.253" status="PASS" starttime="20170808 16:08:54.988"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:55.254">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:55.254" status="PASS" starttime="20170808 16:08:55.253"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:55.254">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:55.254" status="PASS" starttime="20170808 16:08:55.254"></status>
</kw>
<status endtime="20170808 16:08:55.255" status="PASS" starttime="20170808 16:08:54.985"></status>
</kw>
<status endtime="20170808 16:08:55.255" status="PASS" starttime="20170808 16:08:54.984"></status>
</kw>
<status endtime="20170808 16:08:55.255" status="PASS" starttime="20170808 16:08:54.984"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:55.255">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:08:55.255" status="PASS" starttime="20170808 16:08:55.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:55.257">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:08:55.257" status="PASS" starttime="20170808 16:08:55.257"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:55.258">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:08:55.258" status="PASS" starttime="20170808 16:08:55.258"></status>
</kw>
<status endtime="20170808 16:08:55.259" status="PASS" starttime="20170808 16:08:55.258"></status>
</kw>
<status endtime="20170808 16:08:55.259" status="PASS" starttime="20170808 16:08:55.256"></status>
</kw>
<status endtime="20170808 16:08:55.259" status="PASS" starttime="20170808 16:08:55.256"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:55.329">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:08:55.329">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:55.329" status="PASS" starttime="20170808 16:08:55.259"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:55.331">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:55.331" status="PASS" starttime="20170808 16:08:55.331"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:55.332">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:08:55.332" status="PASS" starttime="20170808 16:08:55.332"></status>
</kw>
<status endtime="20170808 16:08:55.333" status="PASS" starttime="20170808 16:08:55.331"></status>
</kw>
<status endtime="20170808 16:08:55.333" status="PASS" starttime="20170808 16:08:55.330"></status>
</kw>
<status endtime="20170808 16:08:55.333" status="PASS" starttime="20170808 16:08:55.330"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:08:55.333">Delete All Sessions</msg>
<status endtime="20170808 16:08:55.333" status="PASS" starttime="20170808 16:08:55.333"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:55.333">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:08:55.333" status="PASS" starttime="20170808 16:08:54.983"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:08:55.334">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:08:55.334" status="PASS" starttime="20170808 16:08:55.334"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:08:55.335">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:08:55.335">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:08:55.335">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:08:55.335" status="PASS" starttime="20170808 16:08:55.334"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:55.335">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:08:55.335" status="PASS" starttime="20170808 16:08:54.981"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:08:55.335">${power_state} = Off</msg>
<status endtime="20170808 16:08:55.335" status="PASS" starttime="20170808 16:08:54.980"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:08:55.336">On != Off</msg>
<status endtime="20170808 16:08:55.336" status="FAIL" starttime="20170808 16:08:55.336"></status>
</kw>
<status endtime="20170808 16:08:55.336" status="FAIL" starttime="20170808 16:08:54.980"></status>
</kw>
<status endtime="20170808 16:08:55.337" status="FAIL" starttime="20170808 16:08:54.979"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:05.342">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:09:05.342" status="PASS" starttime="20170808 16:09:05.342"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:05.343">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:09:05.343" status="PASS" starttime="20170808 16:09:05.343"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:05.344">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:09:05.344" status="PASS" starttime="20170808 16:09:05.343"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:05.344">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:09:05.344" status="PASS" starttime="20170808 16:09:05.344"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:05.554">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:09:05.554" status="PASS" starttime="20170808 16:09:05.345"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:05.554">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:09:05.554">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:05.554" status="PASS" starttime="20170808 16:09:05.345"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:05.555">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:05.555" status="PASS" starttime="20170808 16:09:05.554"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:05.555">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:05.555" status="PASS" starttime="20170808 16:09:05.555"></status>
</kw>
<status endtime="20170808 16:09:05.555" status="PASS" starttime="20170808 16:09:05.341"></status>
</kw>
<status endtime="20170808 16:09:05.556" status="PASS" starttime="20170808 16:09:05.340"></status>
</kw>
<status endtime="20170808 16:09:05.556" status="PASS" starttime="20170808 16:09:05.340"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:05.556">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:09:05.556" status="PASS" starttime="20170808 16:09:05.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:05.558">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:09:05.558" status="PASS" starttime="20170808 16:09:05.558"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:05.559">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:09:05.559" status="PASS" starttime="20170808 16:09:05.559"></status>
</kw>
<status endtime="20170808 16:09:05.560" status="PASS" starttime="20170808 16:09:05.558"></status>
</kw>
<status endtime="20170808 16:09:05.560" status="PASS" starttime="20170808 16:09:05.557"></status>
</kw>
<status endtime="20170808 16:09:05.560" status="PASS" starttime="20170808 16:09:05.557"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:05.622">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:09:05.622">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:05.622" status="PASS" starttime="20170808 16:09:05.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:05.624">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:09:05.624" status="PASS" starttime="20170808 16:09:05.623"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:05.625">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:09:05.625" status="PASS" starttime="20170808 16:09:05.625"></status>
</kw>
<status endtime="20170808 16:09:05.625" status="PASS" starttime="20170808 16:09:05.624"></status>
</kw>
<status endtime="20170808 16:09:05.625" status="PASS" starttime="20170808 16:09:05.623"></status>
</kw>
<status endtime="20170808 16:09:05.626" status="PASS" starttime="20170808 16:09:05.622"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:09:05.626">Delete All Sessions</msg>
<status endtime="20170808 16:09:05.626" status="PASS" starttime="20170808 16:09:05.626"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:05.626">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:05.626" status="PASS" starttime="20170808 16:09:05.339"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:05.627">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:05.627" status="PASS" starttime="20170808 16:09:05.626"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:05.627">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:09:05.627">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:09:05.628">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:09:05.628" status="PASS" starttime="20170808 16:09:05.627"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:05.628">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:09:05.628" status="PASS" starttime="20170808 16:09:05.338"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:05.628">${power_state} = Off</msg>
<status endtime="20170808 16:09:05.628" status="PASS" starttime="20170808 16:09:05.338"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:09:05.629">On != Off</msg>
<status endtime="20170808 16:09:05.629" status="FAIL" starttime="20170808 16:09:05.628"></status>
</kw>
<status endtime="20170808 16:09:05.629" status="FAIL" starttime="20170808 16:09:05.338"></status>
</kw>
<status endtime="20170808 16:09:05.629" status="FAIL" starttime="20170808 16:09:05.337"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:15.634">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:09:15.634" status="PASS" starttime="20170808 16:09:15.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:15.635">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:09:15.635" status="PASS" starttime="20170808 16:09:15.635"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:15.636">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:09:15.636" status="PASS" starttime="20170808 16:09:15.635"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:15.636">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:09:15.636" status="PASS" starttime="20170808 16:09:15.636"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:15.813">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:09:15.814" status="PASS" starttime="20170808 16:09:15.637"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:15.814">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:09:15.814">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:15.814" status="PASS" starttime="20170808 16:09:15.637"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:15.814">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:15.814" status="PASS" starttime="20170808 16:09:15.814"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:15.815">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:15.815" status="PASS" starttime="20170808 16:09:15.815"></status>
</kw>
<status endtime="20170808 16:09:15.815" status="PASS" starttime="20170808 16:09:15.633"></status>
</kw>
<status endtime="20170808 16:09:15.815" status="PASS" starttime="20170808 16:09:15.633"></status>
</kw>
<status endtime="20170808 16:09:15.815" status="PASS" starttime="20170808 16:09:15.632"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:15.816">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:09:15.816" status="PASS" starttime="20170808 16:09:15.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:15.818">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:09:15.818" status="PASS" starttime="20170808 16:09:15.817"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:15.819">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:09:15.819" status="PASS" starttime="20170808 16:09:15.819"></status>
</kw>
<status endtime="20170808 16:09:15.819" status="PASS" starttime="20170808 16:09:15.818"></status>
</kw>
<status endtime="20170808 16:09:15.819" status="PASS" starttime="20170808 16:09:15.817"></status>
</kw>
<status endtime="20170808 16:09:15.819" status="PASS" starttime="20170808 16:09:15.816"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:15.897">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:09:15.897">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:15.897" status="PASS" starttime="20170808 16:09:15.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:15.900">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:09:15.900" status="PASS" starttime="20170808 16:09:15.899"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:15.901">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:09:15.901" status="PASS" starttime="20170808 16:09:15.901"></status>
</kw>
<status endtime="20170808 16:09:15.901" status="PASS" starttime="20170808 16:09:15.900"></status>
</kw>
<status endtime="20170808 16:09:15.901" status="PASS" starttime="20170808 16:09:15.898"></status>
</kw>
<status endtime="20170808 16:09:15.901" status="PASS" starttime="20170808 16:09:15.897"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:09:15.902">Delete All Sessions</msg>
<status endtime="20170808 16:09:15.902" status="PASS" starttime="20170808 16:09:15.902"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:15.902">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:15.902" status="PASS" starttime="20170808 16:09:15.631"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:15.903">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:15.903" status="PASS" starttime="20170808 16:09:15.903"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:15.903">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:09:15.904">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:09:15.904">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:09:15.904" status="PASS" starttime="20170808 16:09:15.903"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:15.904">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:09:15.904" status="PASS" starttime="20170808 16:09:15.631"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:15.904">${power_state} = Off</msg>
<status endtime="20170808 16:09:15.904" status="PASS" starttime="20170808 16:09:15.630"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:09:15.905">On != Off</msg>
<status endtime="20170808 16:09:15.905" status="FAIL" starttime="20170808 16:09:15.905"></status>
</kw>
<status endtime="20170808 16:09:15.905" status="FAIL" starttime="20170808 16:09:15.630"></status>
</kw>
<status endtime="20170808 16:09:15.905" status="FAIL" starttime="20170808 16:09:15.630"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:25.910">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:09:25.911" status="PASS" starttime="20170808 16:09:25.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:25.911">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:09:25.911" status="PASS" starttime="20170808 16:09:25.911"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:25.912">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:09:25.912" status="PASS" starttime="20170808 16:09:25.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:25.913">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:09:25.913" status="PASS" starttime="20170808 16:09:25.912"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:26.106">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:09:26.106" status="PASS" starttime="20170808 16:09:25.913"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:26.106">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:09:26.106">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:26.106" status="PASS" starttime="20170808 16:09:25.913"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:26.107">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:26.107" status="PASS" starttime="20170808 16:09:26.107"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:26.108">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:26.108" status="PASS" starttime="20170808 16:09:26.107"></status>
</kw>
<status endtime="20170808 16:09:26.108" status="PASS" starttime="20170808 16:09:25.909"></status>
</kw>
<status endtime="20170808 16:09:26.108" status="PASS" starttime="20170808 16:09:25.909"></status>
</kw>
<status endtime="20170808 16:09:26.108" status="PASS" starttime="20170808 16:09:25.908"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:26.109">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:09:26.109" status="PASS" starttime="20170808 16:09:26.108"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:26.111">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:09:26.111" status="PASS" starttime="20170808 16:09:26.110"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:26.112">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:09:26.112" status="PASS" starttime="20170808 16:09:26.112"></status>
</kw>
<status endtime="20170808 16:09:26.112" status="PASS" starttime="20170808 16:09:26.111"></status>
</kw>
<status endtime="20170808 16:09:26.113" status="PASS" starttime="20170808 16:09:26.110"></status>
</kw>
<status endtime="20170808 16:09:26.113" status="PASS" starttime="20170808 16:09:26.109"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:26.175">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:09:26.175">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:26.175" status="PASS" starttime="20170808 16:09:26.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:26.177">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:09:26.177" status="PASS" starttime="20170808 16:09:26.176"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:26.178">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:09:26.178" status="PASS" starttime="20170808 16:09:26.177"></status>
</kw>
<status endtime="20170808 16:09:26.178" status="PASS" starttime="20170808 16:09:26.177"></status>
</kw>
<status endtime="20170808 16:09:26.178" status="PASS" starttime="20170808 16:09:26.176"></status>
</kw>
<status endtime="20170808 16:09:26.178" status="PASS" starttime="20170808 16:09:26.175"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:09:26.179">Delete All Sessions</msg>
<status endtime="20170808 16:09:26.179" status="PASS" starttime="20170808 16:09:26.179"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:26.179">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:26.179" status="PASS" starttime="20170808 16:09:25.908"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:26.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:26.180" status="PASS" starttime="20170808 16:09:26.179"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:26.180">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:09:26.180">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:09:26.180">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:09:26.180" status="PASS" starttime="20170808 16:09:26.180"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:26.181">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:09:26.181" status="PASS" starttime="20170808 16:09:25.907"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:26.181">${power_state} = Off</msg>
<status endtime="20170808 16:09:26.181" status="PASS" starttime="20170808 16:09:25.907"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:09:26.182">On != Off</msg>
<status endtime="20170808 16:09:26.182" status="FAIL" starttime="20170808 16:09:26.181"></status>
</kw>
<status endtime="20170808 16:09:26.182" status="FAIL" starttime="20170808 16:09:25.906"></status>
</kw>
<status endtime="20170808 16:09:26.182" status="FAIL" starttime="20170808 16:09:25.906"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:36.188">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:09:36.188" status="PASS" starttime="20170808 16:09:36.188"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:36.189">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:09:36.189" status="PASS" starttime="20170808 16:09:36.189"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:36.190">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:09:36.190" status="PASS" starttime="20170808 16:09:36.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:36.190">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:09:36.190" status="PASS" starttime="20170808 16:09:36.190"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:36.374">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:09:36.374" status="PASS" starttime="20170808 16:09:36.191"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:36.374">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:09:36.374">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:36.374" status="PASS" starttime="20170808 16:09:36.190"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:36.375">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:36.375" status="PASS" starttime="20170808 16:09:36.374"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:36.375">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:36.375" status="PASS" starttime="20170808 16:09:36.375"></status>
</kw>
<status endtime="20170808 16:09:36.376" status="PASS" starttime="20170808 16:09:36.187"></status>
</kw>
<status endtime="20170808 16:09:36.376" status="PASS" starttime="20170808 16:09:36.187"></status>
</kw>
<status endtime="20170808 16:09:36.376" status="PASS" starttime="20170808 16:09:36.186"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:36.376">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:09:36.376" status="PASS" starttime="20170808 16:09:36.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:36.378">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:09:36.378" status="PASS" starttime="20170808 16:09:36.378"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:36.379">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:09:36.379" status="PASS" starttime="20170808 16:09:36.379"></status>
</kw>
<status endtime="20170808 16:09:36.380" status="PASS" starttime="20170808 16:09:36.379"></status>
</kw>
<status endtime="20170808 16:09:36.380" status="PASS" starttime="20170808 16:09:36.377"></status>
</kw>
<status endtime="20170808 16:09:36.380" status="PASS" starttime="20170808 16:09:36.377"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:36.442">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:09:36.442">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:36.442" status="PASS" starttime="20170808 16:09:36.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:36.444">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:09:36.444" status="PASS" starttime="20170808 16:09:36.443"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:36.445">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:09:36.445" status="PASS" starttime="20170808 16:09:36.445"></status>
</kw>
<status endtime="20170808 16:09:36.445" status="PASS" starttime="20170808 16:09:36.444"></status>
</kw>
<status endtime="20170808 16:09:36.445" status="PASS" starttime="20170808 16:09:36.443"></status>
</kw>
<status endtime="20170808 16:09:36.445" status="PASS" starttime="20170808 16:09:36.442"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:09:36.446">Delete All Sessions</msg>
<status endtime="20170808 16:09:36.446" status="PASS" starttime="20170808 16:09:36.445"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:36.446">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:36.446" status="PASS" starttime="20170808 16:09:36.185"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:36.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:36.447" status="PASS" starttime="20170808 16:09:36.446"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:36.447">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:09:36.447">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:09:36.447">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:09:36.447" status="PASS" starttime="20170808 16:09:36.447"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:36.448">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:09:36.448" status="PASS" starttime="20170808 16:09:36.184"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:36.448">${power_state} = Off</msg>
<status endtime="20170808 16:09:36.448" status="PASS" starttime="20170808 16:09:36.184"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:09:36.449">On != Off</msg>
<status endtime="20170808 16:09:36.449" status="FAIL" starttime="20170808 16:09:36.448"></status>
</kw>
<status endtime="20170808 16:09:36.449" status="FAIL" starttime="20170808 16:09:36.183"></status>
</kw>
<status endtime="20170808 16:09:36.449" status="FAIL" starttime="20170808 16:09:36.183"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:46.454">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:09:46.455" status="PASS" starttime="20170808 16:09:46.454"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:46.455">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:09:46.455" status="PASS" starttime="20170808 16:09:46.455"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:46.456">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:09:46.456" status="PASS" starttime="20170808 16:09:46.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:46.456">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:09:46.456" status="PASS" starttime="20170808 16:09:46.456"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:46.647">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:09:46.647" status="PASS" starttime="20170808 16:09:46.457"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:46.647">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:09:46.647">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:46.647" status="PASS" starttime="20170808 16:09:46.457"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:46.648">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:46.648" status="PASS" starttime="20170808 16:09:46.647"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:46.648">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:46.648" status="PASS" starttime="20170808 16:09:46.648"></status>
</kw>
<status endtime="20170808 16:09:46.649" status="PASS" starttime="20170808 16:09:46.453"></status>
</kw>
<status endtime="20170808 16:09:46.649" status="PASS" starttime="20170808 16:09:46.452"></status>
</kw>
<status endtime="20170808 16:09:46.649" status="PASS" starttime="20170808 16:09:46.452"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:46.649">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:09:46.649" status="PASS" starttime="20170808 16:09:46.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:46.651">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:09:46.651" status="PASS" starttime="20170808 16:09:46.651"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:46.652">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:09:46.652" status="PASS" starttime="20170808 16:09:46.652"></status>
</kw>
<status endtime="20170808 16:09:46.653" status="PASS" starttime="20170808 16:09:46.652"></status>
</kw>
<status endtime="20170808 16:09:46.653" status="PASS" starttime="20170808 16:09:46.650"></status>
</kw>
<status endtime="20170808 16:09:46.653" status="PASS" starttime="20170808 16:09:46.650"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:46.741">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:09:46.741">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:46.741" status="PASS" starttime="20170808 16:09:46.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:46.743">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:09:46.743" status="PASS" starttime="20170808 16:09:46.742"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:46.744">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:09:46.744" status="PASS" starttime="20170808 16:09:46.744"></status>
</kw>
<status endtime="20170808 16:09:46.744" status="PASS" starttime="20170808 16:09:46.743"></status>
</kw>
<status endtime="20170808 16:09:46.745" status="PASS" starttime="20170808 16:09:46.742"></status>
</kw>
<status endtime="20170808 16:09:46.745" status="PASS" starttime="20170808 16:09:46.741"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:09:46.745">Delete All Sessions</msg>
<status endtime="20170808 16:09:46.745" status="PASS" starttime="20170808 16:09:46.745"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:46.745">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:46.745" status="PASS" starttime="20170808 16:09:46.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:46.746">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:46.746" status="PASS" starttime="20170808 16:09:46.745"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:46.746">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:09:46.746">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:09:46.747">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:09:46.747" status="PASS" starttime="20170808 16:09:46.746"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:46.747">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:09:46.747" status="PASS" starttime="20170808 16:09:46.451"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:46.747">${power_state} = Off</msg>
<status endtime="20170808 16:09:46.747" status="PASS" starttime="20170808 16:09:46.450"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:09:46.748">On != Off</msg>
<status endtime="20170808 16:09:46.748" status="FAIL" starttime="20170808 16:09:46.748"></status>
</kw>
<status endtime="20170808 16:09:46.748" status="FAIL" starttime="20170808 16:09:46.450"></status>
</kw>
<status endtime="20170808 16:09:46.748" status="FAIL" starttime="20170808 16:09:46.449"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:56.754">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:09:56.755" status="PASS" starttime="20170808 16:09:56.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:56.755">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:09:56.756" status="PASS" starttime="20170808 16:09:56.755"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:56.756">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:09:56.756" status="PASS" starttime="20170808 16:09:56.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:56.757">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:09:56.757" status="PASS" starttime="20170808 16:09:56.757"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:56.935">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:09:56.935" status="PASS" starttime="20170808 16:09:56.758"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:56.936">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:09:56.936">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:56.936" status="PASS" starttime="20170808 16:09:56.758"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:56.936">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:56.936" status="PASS" starttime="20170808 16:09:56.936"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:56.937">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:56.937" status="PASS" starttime="20170808 16:09:56.937"></status>
</kw>
<status endtime="20170808 16:09:56.937" status="PASS" starttime="20170808 16:09:56.753"></status>
</kw>
<status endtime="20170808 16:09:56.937" status="PASS" starttime="20170808 16:09:56.752"></status>
</kw>
<status endtime="20170808 16:09:56.937" status="PASS" starttime="20170808 16:09:56.751"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:56.938">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:09:56.938" status="PASS" starttime="20170808 16:09:56.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:56.940">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:09:56.940" status="PASS" starttime="20170808 16:09:56.939"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:56.941">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:09:56.941" status="PASS" starttime="20170808 16:09:56.941"></status>
</kw>
<status endtime="20170808 16:09:56.941" status="PASS" starttime="20170808 16:09:56.940"></status>
</kw>
<status endtime="20170808 16:09:56.941" status="PASS" starttime="20170808 16:09:56.939"></status>
</kw>
<status endtime="20170808 16:09:56.941" status="PASS" starttime="20170808 16:09:56.938"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:57.020">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:09:57.021">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:57.021" status="PASS" starttime="20170808 16:09:56.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:57.022">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:09:57.022" status="PASS" starttime="20170808 16:09:57.022"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:57.023">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:09:57.023" status="PASS" starttime="20170808 16:09:57.023"></status>
</kw>
<status endtime="20170808 16:09:57.024" status="PASS" starttime="20170808 16:09:57.023"></status>
</kw>
<status endtime="20170808 16:09:57.024" status="PASS" starttime="20170808 16:09:57.021"></status>
</kw>
<status endtime="20170808 16:09:57.024" status="PASS" starttime="20170808 16:09:57.021"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:09:57.024">Delete All Sessions</msg>
<status endtime="20170808 16:09:57.024" status="PASS" starttime="20170808 16:09:57.024"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:57.024">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:09:57.024" status="PASS" starttime="20170808 16:09:56.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:09:57.025">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:09:57.025" status="PASS" starttime="20170808 16:09:57.025"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:09:57.026">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:09:57.026">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:09:57.026">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:09:57.026" status="PASS" starttime="20170808 16:09:57.025"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:57.026">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:09:57.026" status="PASS" starttime="20170808 16:09:56.750"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:09:57.026">${power_state} = Off</msg>
<status endtime="20170808 16:09:57.026" status="PASS" starttime="20170808 16:09:56.750"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:09:57.027">On != Off</msg>
<status endtime="20170808 16:09:57.027" status="FAIL" starttime="20170808 16:09:57.027"></status>
</kw>
<status endtime="20170808 16:09:57.027" status="FAIL" starttime="20170808 16:09:56.749"></status>
</kw>
<status endtime="20170808 16:09:57.027" status="FAIL" starttime="20170808 16:09:56.749"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:07.033">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:10:07.033" status="PASS" starttime="20170808 16:10:07.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:07.034">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:10:07.034" status="PASS" starttime="20170808 16:10:07.034"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:07.034">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:10:07.034" status="PASS" starttime="20170808 16:10:07.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:07.035">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:10:07.035" status="PASS" starttime="20170808 16:10:07.035"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:07.228">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:10:07.228" status="PASS" starttime="20170808 16:10:07.036"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:07.229">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:10:07.229">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:07.229" status="PASS" starttime="20170808 16:10:07.035"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:07.229">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:07.229" status="PASS" starttime="20170808 16:10:07.229"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:07.230">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:07.230" status="PASS" starttime="20170808 16:10:07.230"></status>
</kw>
<status endtime="20170808 16:10:07.230" status="PASS" starttime="20170808 16:10:07.032"></status>
</kw>
<status endtime="20170808 16:10:07.230" status="PASS" starttime="20170808 16:10:07.031"></status>
</kw>
<status endtime="20170808 16:10:07.230" status="PASS" starttime="20170808 16:10:07.031"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:07.231">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:10:07.231" status="PASS" starttime="20170808 16:10:07.231"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:07.233">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:10:07.233" status="PASS" starttime="20170808 16:10:07.232"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:07.234">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:10:07.234" status="PASS" starttime="20170808 16:10:07.234"></status>
</kw>
<status endtime="20170808 16:10:07.234" status="PASS" starttime="20170808 16:10:07.233"></status>
</kw>
<status endtime="20170808 16:10:07.234" status="PASS" starttime="20170808 16:10:07.232"></status>
</kw>
<status endtime="20170808 16:10:07.234" status="PASS" starttime="20170808 16:10:07.231"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:07.306">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:10:07.306">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:07.307" status="PASS" starttime="20170808 16:10:07.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:07.308">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:10:07.308" status="PASS" starttime="20170808 16:10:07.308"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:07.312">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:10:07.313" status="PASS" starttime="20170808 16:10:07.309"></status>
</kw>
<status endtime="20170808 16:10:07.313" status="PASS" starttime="20170808 16:10:07.308"></status>
</kw>
<status endtime="20170808 16:10:07.313" status="PASS" starttime="20170808 16:10:07.307"></status>
</kw>
<status endtime="20170808 16:10:07.313" status="PASS" starttime="20170808 16:10:07.307"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:10:07.313">Delete All Sessions</msg>
<status endtime="20170808 16:10:07.314" status="PASS" starttime="20170808 16:10:07.313"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:07.314">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:07.314" status="PASS" starttime="20170808 16:10:07.030"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:07.315">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:07.315" status="PASS" starttime="20170808 16:10:07.314"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:07.315">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:10:07.315">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:10:07.315">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:10:07.316" status="PASS" starttime="20170808 16:10:07.315"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:07.316">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:10:07.316" status="PASS" starttime="20170808 16:10:07.029"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:07.316">${power_state} = Off</msg>
<status endtime="20170808 16:10:07.316" status="PASS" starttime="20170808 16:10:07.029"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:10:07.317">On != Off</msg>
<status endtime="20170808 16:10:07.317" status="FAIL" starttime="20170808 16:10:07.316"></status>
</kw>
<status endtime="20170808 16:10:07.317" status="FAIL" starttime="20170808 16:10:07.028"></status>
</kw>
<status endtime="20170808 16:10:07.317" status="FAIL" starttime="20170808 16:10:07.028"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:17.322">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:10:17.322" status="PASS" starttime="20170808 16:10:17.322"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:17.323">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:10:17.323" status="PASS" starttime="20170808 16:10:17.323"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:17.324">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:10:17.324" status="PASS" starttime="20170808 16:10:17.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:17.324">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:10:17.324" status="PASS" starttime="20170808 16:10:17.324"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:17.533">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:10:17.533" status="PASS" starttime="20170808 16:10:17.325"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:17.534">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:10:17.534">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:17.534" status="PASS" starttime="20170808 16:10:17.325"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:17.534">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:17.535" status="PASS" starttime="20170808 16:10:17.534"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:17.535">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:17.535" status="PASS" starttime="20170808 16:10:17.535"></status>
</kw>
<status endtime="20170808 16:10:17.535" status="PASS" starttime="20170808 16:10:17.321"></status>
</kw>
<status endtime="20170808 16:10:17.535" status="PASS" starttime="20170808 16:10:17.321"></status>
</kw>
<status endtime="20170808 16:10:17.536" status="PASS" starttime="20170808 16:10:17.320"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:17.536">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:10:17.536" status="PASS" starttime="20170808 16:10:17.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:17.539">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:10:17.539" status="PASS" starttime="20170808 16:10:17.538"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:17.540">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:10:17.540" status="PASS" starttime="20170808 16:10:17.540"></status>
</kw>
<status endtime="20170808 16:10:17.541" status="PASS" starttime="20170808 16:10:17.539"></status>
</kw>
<status endtime="20170808 16:10:17.541" status="PASS" starttime="20170808 16:10:17.537"></status>
</kw>
<status endtime="20170808 16:10:17.541" status="PASS" starttime="20170808 16:10:17.536"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:17.603">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:10:17.604">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:17.604" status="PASS" starttime="20170808 16:10:17.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:17.605">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:10:17.605" status="PASS" starttime="20170808 16:10:17.605"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:17.606">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:10:17.606" status="PASS" starttime="20170808 16:10:17.606"></status>
</kw>
<status endtime="20170808 16:10:17.606" status="PASS" starttime="20170808 16:10:17.605"></status>
</kw>
<status endtime="20170808 16:10:17.606" status="PASS" starttime="20170808 16:10:17.604"></status>
</kw>
<status endtime="20170808 16:10:17.607" status="PASS" starttime="20170808 16:10:17.604"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:10:17.607">Delete All Sessions</msg>
<status endtime="20170808 16:10:17.607" status="PASS" starttime="20170808 16:10:17.607"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:17.607">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:17.607" status="PASS" starttime="20170808 16:10:17.319"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:17.608">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:17.608" status="PASS" starttime="20170808 16:10:17.607"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:17.608">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:10:17.608">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:10:17.609">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:10:17.609" status="PASS" starttime="20170808 16:10:17.608"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:17.609">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:10:17.609" status="PASS" starttime="20170808 16:10:17.319"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:17.609">${power_state} = Off</msg>
<status endtime="20170808 16:10:17.609" status="PASS" starttime="20170808 16:10:17.319"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:10:17.610">On != Off</msg>
<status endtime="20170808 16:10:17.610" status="FAIL" starttime="20170808 16:10:17.609"></status>
</kw>
<status endtime="20170808 16:10:17.610" status="FAIL" starttime="20170808 16:10:17.318"></status>
</kw>
<status endtime="20170808 16:10:17.610" status="FAIL" starttime="20170808 16:10:17.318"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:27.616">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:10:27.616" status="PASS" starttime="20170808 16:10:27.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:27.617">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:10:27.617" status="PASS" starttime="20170808 16:10:27.617"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:27.618">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:10:27.618" status="PASS" starttime="20170808 16:10:27.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:27.618">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:10:27.618" status="PASS" starttime="20170808 16:10:27.618"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:27.797">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:10:27.797" status="PASS" starttime="20170808 16:10:27.619"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:27.797">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:10:27.797">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:27.797" status="PASS" starttime="20170808 16:10:27.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:27.798">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:27.798" status="PASS" starttime="20170808 16:10:27.797"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:27.799">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:27.799" status="PASS" starttime="20170808 16:10:27.798"></status>
</kw>
<status endtime="20170808 16:10:27.799" status="PASS" starttime="20170808 16:10:27.615"></status>
</kw>
<status endtime="20170808 16:10:27.799" status="PASS" starttime="20170808 16:10:27.614"></status>
</kw>
<status endtime="20170808 16:10:27.799" status="PASS" starttime="20170808 16:10:27.613"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:27.800">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:10:27.800" status="PASS" starttime="20170808 16:10:27.800"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:27.803">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:10:27.803" status="PASS" starttime="20170808 16:10:27.802"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:27.805">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:10:27.805" status="PASS" starttime="20170808 16:10:27.804"></status>
</kw>
<status endtime="20170808 16:10:27.805" status="PASS" starttime="20170808 16:10:27.804"></status>
</kw>
<status endtime="20170808 16:10:27.805" status="PASS" starttime="20170808 16:10:27.801"></status>
</kw>
<status endtime="20170808 16:10:27.805" status="PASS" starttime="20170808 16:10:27.801"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:27.867">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:10:27.868">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:27.868" status="PASS" starttime="20170808 16:10:27.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:27.870">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:10:27.870" status="PASS" starttime="20170808 16:10:27.869"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:27.871">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:10:27.871" status="PASS" starttime="20170808 16:10:27.870"></status>
</kw>
<status endtime="20170808 16:10:27.871" status="PASS" starttime="20170808 16:10:27.870"></status>
</kw>
<status endtime="20170808 16:10:27.871" status="PASS" starttime="20170808 16:10:27.868"></status>
</kw>
<status endtime="20170808 16:10:27.871" status="PASS" starttime="20170808 16:10:27.868"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:10:27.871">Delete All Sessions</msg>
<status endtime="20170808 16:10:27.871" status="PASS" starttime="20170808 16:10:27.871"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:27.872">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:27.872" status="PASS" starttime="20170808 16:10:27.613"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:27.872">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:27.872" status="PASS" starttime="20170808 16:10:27.872"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:27.873">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:10:27.873">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:10:27.873">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:10:27.873" status="PASS" starttime="20170808 16:10:27.873"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:27.874">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:10:27.874" status="PASS" starttime="20170808 16:10:27.612"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:27.874">${power_state} = Off</msg>
<status endtime="20170808 16:10:27.874" status="PASS" starttime="20170808 16:10:27.612"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:10:27.875">On != Off</msg>
<status endtime="20170808 16:10:27.875" status="FAIL" starttime="20170808 16:10:27.874"></status>
</kw>
<status endtime="20170808 16:10:27.875" status="FAIL" starttime="20170808 16:10:27.611"></status>
</kw>
<status endtime="20170808 16:10:27.875" status="FAIL" starttime="20170808 16:10:27.611"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:37.880">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:10:37.880" status="PASS" starttime="20170808 16:10:37.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:37.881">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:10:37.881" status="PASS" starttime="20170808 16:10:37.881"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:37.882">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:10:37.882" status="PASS" starttime="20170808 16:10:37.881"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:37.883">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:10:37.883" status="PASS" starttime="20170808 16:10:37.882"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:38.110">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:10:38.110" status="PASS" starttime="20170808 16:10:37.884"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:38.110">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:10:38.110">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:38.110" status="PASS" starttime="20170808 16:10:37.883"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:38.111">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:38.111" status="PASS" starttime="20170808 16:10:38.110"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:38.111">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:38.111" status="PASS" starttime="20170808 16:10:38.111"></status>
</kw>
<status endtime="20170808 16:10:38.112" status="PASS" starttime="20170808 16:10:37.878"></status>
</kw>
<status endtime="20170808 16:10:38.112" status="PASS" starttime="20170808 16:10:37.878"></status>
</kw>
<status endtime="20170808 16:10:38.112" status="PASS" starttime="20170808 16:10:37.878"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:38.112">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:10:38.112" status="PASS" starttime="20170808 16:10:38.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:38.114">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:10:38.114" status="PASS" starttime="20170808 16:10:38.114"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:38.115">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:10:38.115" status="PASS" starttime="20170808 16:10:38.115"></status>
</kw>
<status endtime="20170808 16:10:38.115" status="PASS" starttime="20170808 16:10:38.115"></status>
</kw>
<status endtime="20170808 16:10:38.116" status="PASS" starttime="20170808 16:10:38.113"></status>
</kw>
<status endtime="20170808 16:10:38.116" status="PASS" starttime="20170808 16:10:38.113"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:38.177">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:10:38.178">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:38.178" status="PASS" starttime="20170808 16:10:38.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:38.179">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:10:38.179" status="PASS" starttime="20170808 16:10:38.179"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:38.180">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:10:38.180" status="PASS" starttime="20170808 16:10:38.180"></status>
</kw>
<status endtime="20170808 16:10:38.180" status="PASS" starttime="20170808 16:10:38.179"></status>
</kw>
<status endtime="20170808 16:10:38.180" status="PASS" starttime="20170808 16:10:38.178"></status>
</kw>
<status endtime="20170808 16:10:38.180" status="PASS" starttime="20170808 16:10:38.178"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:10:38.181">Delete All Sessions</msg>
<status endtime="20170808 16:10:38.181" status="PASS" starttime="20170808 16:10:38.181"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:38.181">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:38.181" status="PASS" starttime="20170808 16:10:37.877"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:38.182">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:38.182" status="PASS" starttime="20170808 16:10:38.181"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:38.182">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:10:38.182">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:10:38.182">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:10:38.183" status="PASS" starttime="20170808 16:10:38.182"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:38.183">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:10:38.183" status="PASS" starttime="20170808 16:10:37.876"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:38.183">${power_state} = Off</msg>
<status endtime="20170808 16:10:38.183" status="PASS" starttime="20170808 16:10:37.876"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:10:38.184">On != Off</msg>
<status endtime="20170808 16:10:38.184" status="FAIL" starttime="20170808 16:10:38.183"></status>
</kw>
<status endtime="20170808 16:10:38.184" status="FAIL" starttime="20170808 16:10:37.876"></status>
</kw>
<status endtime="20170808 16:10:38.184" status="FAIL" starttime="20170808 16:10:37.875"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:48.189">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:10:48.189" status="PASS" starttime="20170808 16:10:48.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:48.190">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:10:48.190" status="PASS" starttime="20170808 16:10:48.190"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:48.190">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:10:48.191" status="PASS" starttime="20170808 16:10:48.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:48.191">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:10:48.191" status="PASS" starttime="20170808 16:10:48.191"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:48.377">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:10:48.377" status="PASS" starttime="20170808 16:10:48.192"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:48.377">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:10:48.377">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:48.377" status="PASS" starttime="20170808 16:10:48.191"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:48.378">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:48.378" status="PASS" starttime="20170808 16:10:48.377"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:48.378">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:48.378" status="PASS" starttime="20170808 16:10:48.378"></status>
</kw>
<status endtime="20170808 16:10:48.378" status="PASS" starttime="20170808 16:10:48.188"></status>
</kw>
<status endtime="20170808 16:10:48.378" status="PASS" starttime="20170808 16:10:48.187"></status>
</kw>
<status endtime="20170808 16:10:48.379" status="PASS" starttime="20170808 16:10:48.187"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:48.379">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:10:48.379" status="PASS" starttime="20170808 16:10:48.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:48.382">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:10:48.382" status="PASS" starttime="20170808 16:10:48.381"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:48.384">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:10:48.384" status="PASS" starttime="20170808 16:10:48.383"></status>
</kw>
<status endtime="20170808 16:10:48.384" status="PASS" starttime="20170808 16:10:48.382"></status>
</kw>
<status endtime="20170808 16:10:48.384" status="PASS" starttime="20170808 16:10:48.380"></status>
</kw>
<status endtime="20170808 16:10:48.384" status="PASS" starttime="20170808 16:10:48.380"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:48.450">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:10:48.450">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:48.450" status="PASS" starttime="20170808 16:10:48.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:48.452">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:10:48.452" status="PASS" starttime="20170808 16:10:48.451"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:48.453">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:10:48.453" status="PASS" starttime="20170808 16:10:48.452"></status>
</kw>
<status endtime="20170808 16:10:48.453" status="PASS" starttime="20170808 16:10:48.452"></status>
</kw>
<status endtime="20170808 16:10:48.453" status="PASS" starttime="20170808 16:10:48.451"></status>
</kw>
<status endtime="20170808 16:10:48.453" status="PASS" starttime="20170808 16:10:48.450"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:10:48.454">Delete All Sessions</msg>
<status endtime="20170808 16:10:48.454" status="PASS" starttime="20170808 16:10:48.453"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:48.454">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:48.454" status="PASS" starttime="20170808 16:10:48.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:48.455">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:48.455" status="PASS" starttime="20170808 16:10:48.454"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:48.455">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:10:48.455">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:10:48.455">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:10:48.455" status="PASS" starttime="20170808 16:10:48.455"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:48.456">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:10:48.456" status="PASS" starttime="20170808 16:10:48.186"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:48.456">${power_state} = Off</msg>
<status endtime="20170808 16:10:48.456" status="PASS" starttime="20170808 16:10:48.185"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:10:48.457">On != Off</msg>
<status endtime="20170808 16:10:48.457" status="FAIL" starttime="20170808 16:10:48.456"></status>
</kw>
<status endtime="20170808 16:10:48.457" status="FAIL" starttime="20170808 16:10:48.185"></status>
</kw>
<status endtime="20170808 16:10:48.457" status="FAIL" starttime="20170808 16:10:48.184"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:58.462">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:10:58.462" status="PASS" starttime="20170808 16:10:58.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:58.463">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:10:58.463" status="PASS" starttime="20170808 16:10:58.462"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:58.463">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:10:58.463" status="PASS" starttime="20170808 16:10:58.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:58.464">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:10:58.464" status="PASS" starttime="20170808 16:10:58.463"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:58.655">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:10:58.655" status="PASS" starttime="20170808 16:10:58.465"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:58.655">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:10:58.655">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:58.655" status="PASS" starttime="20170808 16:10:58.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:58.656">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:58.656" status="PASS" starttime="20170808 16:10:58.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:58.656">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:58.656" status="PASS" starttime="20170808 16:10:58.656"></status>
</kw>
<status endtime="20170808 16:10:58.657" status="PASS" starttime="20170808 16:10:58.461"></status>
</kw>
<status endtime="20170808 16:10:58.657" status="PASS" starttime="20170808 16:10:58.460"></status>
</kw>
<status endtime="20170808 16:10:58.657" status="PASS" starttime="20170808 16:10:58.460"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:58.657">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:10:58.657" status="PASS" starttime="20170808 16:10:58.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:58.659">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:10:58.659" status="PASS" starttime="20170808 16:10:58.659"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:58.660">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:10:58.660" status="PASS" starttime="20170808 16:10:58.660"></status>
</kw>
<status endtime="20170808 16:10:58.660" status="PASS" starttime="20170808 16:10:58.659"></status>
</kw>
<status endtime="20170808 16:10:58.661" status="PASS" starttime="20170808 16:10:58.658"></status>
</kw>
<status endtime="20170808 16:10:58.661" status="PASS" starttime="20170808 16:10:58.658"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:58.722">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:10:58.722">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:58.722" status="PASS" starttime="20170808 16:10:58.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:58.724">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:10:58.724" status="PASS" starttime="20170808 16:10:58.724"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:58.725">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:10:58.725" status="PASS" starttime="20170808 16:10:58.725"></status>
</kw>
<status endtime="20170808 16:10:58.725" status="PASS" starttime="20170808 16:10:58.724"></status>
</kw>
<status endtime="20170808 16:10:58.725" status="PASS" starttime="20170808 16:10:58.723"></status>
</kw>
<status endtime="20170808 16:10:58.725" status="PASS" starttime="20170808 16:10:58.723"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:10:58.726">Delete All Sessions</msg>
<status endtime="20170808 16:10:58.726" status="PASS" starttime="20170808 16:10:58.726"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:58.726">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:10:58.726" status="PASS" starttime="20170808 16:10:58.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:10:58.727">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:10:58.727" status="PASS" starttime="20170808 16:10:58.726"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:10:58.727">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:10:58.727">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:10:58.728">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:10:58.728" status="PASS" starttime="20170808 16:10:58.727"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:58.728">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:10:58.728" status="PASS" starttime="20170808 16:10:58.459"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:10:58.728">${power_state} = Off</msg>
<status endtime="20170808 16:10:58.728" status="PASS" starttime="20170808 16:10:58.458"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:10:58.729">On != Off</msg>
<status endtime="20170808 16:10:58.729" status="FAIL" starttime="20170808 16:10:58.728"></status>
</kw>
<status endtime="20170808 16:10:58.729" status="FAIL" starttime="20170808 16:10:58.458"></status>
</kw>
<status endtime="20170808 16:10:58.729" status="FAIL" starttime="20170808 16:10:58.457"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:08.734">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:11:08.734" status="PASS" starttime="20170808 16:11:08.734"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:08.735">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:11:08.735" status="PASS" starttime="20170808 16:11:08.735"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:08.736">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:11:08.736" status="PASS" starttime="20170808 16:11:08.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:08.736">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:11:08.736" status="PASS" starttime="20170808 16:11:08.736"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:08.913">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:11:08.913" status="PASS" starttime="20170808 16:11:08.737"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:08.913">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:11:08.914">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:11:08.914" status="PASS" starttime="20170808 16:11:08.736"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:08.914">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:11:08.914" status="PASS" starttime="20170808 16:11:08.914"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:08.915">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:11:08.915" status="PASS" starttime="20170808 16:11:08.915"></status>
</kw>
<status endtime="20170808 16:11:08.915" status="PASS" starttime="20170808 16:11:08.733"></status>
</kw>
<status endtime="20170808 16:11:08.915" status="PASS" starttime="20170808 16:11:08.732"></status>
</kw>
<status endtime="20170808 16:11:08.915" status="PASS" starttime="20170808 16:11:08.732"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:08.916">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:11:08.916" status="PASS" starttime="20170808 16:11:08.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:08.919">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:11:08.919" status="PASS" starttime="20170808 16:11:08.919"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:08.920">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:11:08.921" status="PASS" starttime="20170808 16:11:08.920"></status>
</kw>
<status endtime="20170808 16:11:08.921" status="PASS" starttime="20170808 16:11:08.920"></status>
</kw>
<status endtime="20170808 16:11:08.921" status="PASS" starttime="20170808 16:11:08.918"></status>
</kw>
<status endtime="20170808 16:11:08.921" status="PASS" starttime="20170808 16:11:08.917"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:08.983">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:11:08.983">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:11:08.983" status="PASS" starttime="20170808 16:11:08.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:08.985">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:11:08.985" status="PASS" starttime="20170808 16:11:08.984"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:08.986">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:11:08.986" status="PASS" starttime="20170808 16:11:08.986"></status>
</kw>
<status endtime="20170808 16:11:08.986" status="PASS" starttime="20170808 16:11:08.985"></status>
</kw>
<status endtime="20170808 16:11:08.986" status="PASS" starttime="20170808 16:11:08.984"></status>
</kw>
<status endtime="20170808 16:11:08.986" status="PASS" starttime="20170808 16:11:08.983"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:11:08.987">Delete All Sessions</msg>
<status endtime="20170808 16:11:08.987" status="PASS" starttime="20170808 16:11:08.987"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:08.987">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:11:08.987" status="PASS" starttime="20170808 16:11:08.731"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:08.988">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:11:08.988" status="PASS" starttime="20170808 16:11:08.987"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:08.988">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:11:08.988">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:11:08.988">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:11:08.988" status="PASS" starttime="20170808 16:11:08.988"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:08.989">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:11:08.989" status="PASS" starttime="20170808 16:11:08.731"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:08.989">${power_state} = Off</msg>
<status endtime="20170808 16:11:08.989" status="PASS" starttime="20170808 16:11:08.730"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:11:08.990">On != Off</msg>
<status endtime="20170808 16:11:08.990" status="FAIL" starttime="20170808 16:11:08.989"></status>
</kw>
<status endtime="20170808 16:11:08.990" status="FAIL" starttime="20170808 16:11:08.730"></status>
</kw>
<status endtime="20170808 16:11:08.990" status="FAIL" starttime="20170808 16:11:08.729"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:18.995">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:11:18.995" status="PASS" starttime="20170808 16:11:18.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:18.996">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:11:18.996" status="PASS" starttime="20170808 16:11:18.995"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:18.996">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:11:18.996" status="PASS" starttime="20170808 16:11:18.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:18.997">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:11:18.997" status="PASS" starttime="20170808 16:11:18.997"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:19.177">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:11:19.177" status="PASS" starttime="20170808 16:11:18.998"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:19.177">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:11:19.177">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:11:19.177" status="PASS" starttime="20170808 16:11:18.997"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:19.178">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:11:19.178" status="PASS" starttime="20170808 16:11:19.178"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:19.179">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:11:19.179" status="PASS" starttime="20170808 16:11:19.178"></status>
</kw>
<status endtime="20170808 16:11:19.179" status="PASS" starttime="20170808 16:11:18.994"></status>
</kw>
<status endtime="20170808 16:11:19.179" status="PASS" starttime="20170808 16:11:18.993"></status>
</kw>
<status endtime="20170808 16:11:19.179" status="PASS" starttime="20170808 16:11:18.993"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:19.180">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:11:19.180" status="PASS" starttime="20170808 16:11:19.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:19.182">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:11:19.182" status="PASS" starttime="20170808 16:11:19.181"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:19.183">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:11:19.183" status="PASS" starttime="20170808 16:11:19.182"></status>
</kw>
<status endtime="20170808 16:11:19.183" status="PASS" starttime="20170808 16:11:19.182"></status>
</kw>
<status endtime="20170808 16:11:19.183" status="PASS" starttime="20170808 16:11:19.180"></status>
</kw>
<status endtime="20170808 16:11:19.183" status="PASS" starttime="20170808 16:11:19.180"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:19.245">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:11:19.245">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:11:19.245" status="PASS" starttime="20170808 16:11:19.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:19.247">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:11:19.247" status="PASS" starttime="20170808 16:11:19.247"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:19.248">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:11:19.248" status="PASS" starttime="20170808 16:11:19.248"></status>
</kw>
<status endtime="20170808 16:11:19.248" status="PASS" starttime="20170808 16:11:19.247"></status>
</kw>
<status endtime="20170808 16:11:19.249" status="PASS" starttime="20170808 16:11:19.246"></status>
</kw>
<status endtime="20170808 16:11:19.249" status="PASS" starttime="20170808 16:11:19.246"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:11:19.249">Delete All Sessions</msg>
<status endtime="20170808 16:11:19.249" status="PASS" starttime="20170808 16:11:19.249"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:19.249">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:11:19.249" status="PASS" starttime="20170808 16:11:18.992"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:19.250">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:11:19.250" status="PASS" starttime="20170808 16:11:19.250"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:19.250">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:11:19.251">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:11:19.251">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:11:19.251" status="PASS" starttime="20170808 16:11:19.250"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:19.251">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:11:19.251" status="PASS" starttime="20170808 16:11:18.992"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:19.251">${power_state} = Off</msg>
<status endtime="20170808 16:11:19.251" status="PASS" starttime="20170808 16:11:18.991"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:11:19.252">On != Off</msg>
<status endtime="20170808 16:11:19.252" status="FAIL" starttime="20170808 16:11:19.252"></status>
</kw>
<status endtime="20170808 16:11:19.252" status="FAIL" starttime="20170808 16:11:18.991"></status>
</kw>
<status endtime="20170808 16:11:19.252" status="FAIL" starttime="20170808 16:11:18.990"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:29.257">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:11:29.258" status="PASS" starttime="20170808 16:11:29.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:29.258">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:11:29.258" status="PASS" starttime="20170808 16:11:29.258"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:29.259">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:11:29.259" status="PASS" starttime="20170808 16:11:29.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:29.260">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:11:29.260" status="PASS" starttime="20170808 16:11:29.259"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:29.454">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:11:29.454" status="PASS" starttime="20170808 16:11:29.260"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:29.455">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:11:29.455">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:11:29.455" status="PASS" starttime="20170808 16:11:29.260"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:29.455">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:11:29.455" status="PASS" starttime="20170808 16:11:29.455"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:29.456">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:11:29.456" status="PASS" starttime="20170808 16:11:29.456"></status>
</kw>
<status endtime="20170808 16:11:29.456" status="PASS" starttime="20170808 16:11:29.256"></status>
</kw>
<status endtime="20170808 16:11:29.456" status="PASS" starttime="20170808 16:11:29.256"></status>
</kw>
<status endtime="20170808 16:11:29.457" status="PASS" starttime="20170808 16:11:29.255"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:29.457">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:11:29.457" status="PASS" starttime="20170808 16:11:29.457"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:29.459">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:11:29.459" status="PASS" starttime="20170808 16:11:29.458"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:29.460">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:11:29.460" status="PASS" starttime="20170808 16:11:29.460"></status>
</kw>
<status endtime="20170808 16:11:29.460" status="PASS" starttime="20170808 16:11:29.459"></status>
</kw>
<status endtime="20170808 16:11:29.460" status="PASS" starttime="20170808 16:11:29.458"></status>
</kw>
<status endtime="20170808 16:11:29.460" status="PASS" starttime="20170808 16:11:29.457"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:29.525">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:11:29.525">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:11:29.525" status="PASS" starttime="20170808 16:11:29.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:29.526">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:11:29.526" status="PASS" starttime="20170808 16:11:29.526"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:29.528">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:11:29.528" status="PASS" starttime="20170808 16:11:29.527"></status>
</kw>
<status endtime="20170808 16:11:29.528" status="PASS" starttime="20170808 16:11:29.527"></status>
</kw>
<status endtime="20170808 16:11:29.528" status="PASS" starttime="20170808 16:11:29.525"></status>
</kw>
<status endtime="20170808 16:11:29.528" status="PASS" starttime="20170808 16:11:29.525"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:11:29.528">Delete All Sessions</msg>
<status endtime="20170808 16:11:29.529" status="PASS" starttime="20170808 16:11:29.528"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:29.529">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:11:29.529" status="PASS" starttime="20170808 16:11:29.254"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:29.529">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:11:29.529" status="PASS" starttime="20170808 16:11:29.529"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:29.530">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:11:29.530">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:11:29.530">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:11:29.530" status="PASS" starttime="20170808 16:11:29.530"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:29.530">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:11:29.530" status="PASS" starttime="20170808 16:11:29.254"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:29.531">${power_state} = Off</msg>
<status endtime="20170808 16:11:29.531" status="PASS" starttime="20170808 16:11:29.254"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:11:29.531">On != Off</msg>
<status endtime="20170808 16:11:29.531" status="FAIL" starttime="20170808 16:11:29.531"></status>
</kw>
<status endtime="20170808 16:11:29.532" status="FAIL" starttime="20170808 16:11:29.253"></status>
</kw>
<status endtime="20170808 16:11:29.532" status="FAIL" starttime="20170808 16:11:29.253"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:39.537">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:11:39.537" status="PASS" starttime="20170808 16:11:39.536"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:39.538">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:11:39.538" status="PASS" starttime="20170808 16:11:39.537"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:39.538">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:11:39.538" status="PASS" starttime="20170808 16:11:39.538"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:39.539">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:11:39.539" status="PASS" starttime="20170808 16:11:39.539"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:39.755">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:11:39.755" status="PASS" starttime="20170808 16:11:39.540"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:39.755">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:11:39.755">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:11:39.755" status="PASS" starttime="20170808 16:11:39.539"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:39.756">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:11:39.756" status="PASS" starttime="20170808 16:11:39.756"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:39.757">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:11:39.757" status="PASS" starttime="20170808 16:11:39.756"></status>
</kw>
<status endtime="20170808 16:11:39.757" status="PASS" starttime="20170808 16:11:39.536"></status>
</kw>
<status endtime="20170808 16:11:39.757" status="PASS" starttime="20170808 16:11:39.535"></status>
</kw>
<status endtime="20170808 16:11:39.757" status="PASS" starttime="20170808 16:11:39.535"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:39.758">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:11:39.758" status="PASS" starttime="20170808 16:11:39.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:39.760">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:11:39.760" status="PASS" starttime="20170808 16:11:39.759"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:39.761">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:11:39.762" status="PASS" starttime="20170808 16:11:39.761"></status>
</kw>
<status endtime="20170808 16:11:39.762" status="PASS" starttime="20170808 16:11:39.760"></status>
</kw>
<status endtime="20170808 16:11:39.762" status="PASS" starttime="20170808 16:11:39.758"></status>
</kw>
<status endtime="20170808 16:11:39.762" status="PASS" starttime="20170808 16:11:39.758"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:39.859">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:11:39.860">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:11:39.860" status="PASS" starttime="20170808 16:11:39.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:39.862">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:11:39.862" status="PASS" starttime="20170808 16:11:39.861"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:39.863">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:11:39.863" status="PASS" starttime="20170808 16:11:39.863"></status>
</kw>
<status endtime="20170808 16:11:39.863" status="PASS" starttime="20170808 16:11:39.862"></status>
</kw>
<status endtime="20170808 16:11:39.863" status="PASS" starttime="20170808 16:11:39.861"></status>
</kw>
<status endtime="20170808 16:11:39.863" status="PASS" starttime="20170808 16:11:39.860"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:11:39.864">Delete All Sessions</msg>
<status endtime="20170808 16:11:39.864" status="PASS" starttime="20170808 16:11:39.864"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:39.865">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:11:39.865" status="PASS" starttime="20170808 16:11:39.534"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:39.866">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:11:39.866" status="PASS" starttime="20170808 16:11:39.865"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:39.866">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:11:39.867">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:11:39.867">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:11:39.867" status="PASS" starttime="20170808 16:11:39.866"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:39.867">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:11:39.867" status="PASS" starttime="20170808 16:11:39.533"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:39.868">${power_state} = Off</msg>
<status endtime="20170808 16:11:39.868" status="PASS" starttime="20170808 16:11:39.533"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:11:39.869">On != Off</msg>
<status endtime="20170808 16:11:39.869" status="FAIL" starttime="20170808 16:11:39.868"></status>
</kw>
<status endtime="20170808 16:11:39.869" status="FAIL" starttime="20170808 16:11:39.533"></status>
</kw>
<status endtime="20170808 16:11:39.869" status="FAIL" starttime="20170808 16:11:39.532"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:49.874">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:11:49.875" status="PASS" starttime="20170808 16:11:49.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:49.875">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:11:49.875" status="PASS" starttime="20170808 16:11:49.875"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:49.876">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:11:49.876" status="PASS" starttime="20170808 16:11:49.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:49.877">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:11:49.877" status="PASS" starttime="20170808 16:11:49.877"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:50.100">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:11:50.100" status="PASS" starttime="20170808 16:11:49.878"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:50.101">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:11:50.101">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:11:50.101" status="PASS" starttime="20170808 16:11:49.878"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:50.101">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:11:50.101" status="PASS" starttime="20170808 16:11:50.101"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:50.102">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:11:50.102" status="PASS" starttime="20170808 16:11:50.102"></status>
</kw>
<status endtime="20170808 16:11:50.102" status="PASS" starttime="20170808 16:11:49.873"></status>
</kw>
<status endtime="20170808 16:11:50.102" status="PASS" starttime="20170808 16:11:49.873"></status>
</kw>
<status endtime="20170808 16:11:50.102" status="PASS" starttime="20170808 16:11:49.872"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:50.103">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:11:50.103" status="PASS" starttime="20170808 16:11:50.103"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:50.105">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:11:50.105" status="PASS" starttime="20170808 16:11:50.104"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:50.106">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:11:50.106" status="PASS" starttime="20170808 16:11:50.106"></status>
</kw>
<status endtime="20170808 16:11:50.106" status="PASS" starttime="20170808 16:11:50.105"></status>
</kw>
<status endtime="20170808 16:11:50.106" status="PASS" starttime="20170808 16:11:50.104"></status>
</kw>
<status endtime="20170808 16:11:50.106" status="PASS" starttime="20170808 16:11:50.103"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:50.195">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:11:50.195">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:11:50.195" status="PASS" starttime="20170808 16:11:50.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:50.197">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:11:50.197" status="PASS" starttime="20170808 16:11:50.196"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:50.198">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:11:50.198" status="PASS" starttime="20170808 16:11:50.198"></status>
</kw>
<status endtime="20170808 16:11:50.198" status="PASS" starttime="20170808 16:11:50.197"></status>
</kw>
<status endtime="20170808 16:11:50.198" status="PASS" starttime="20170808 16:11:50.196"></status>
</kw>
<status endtime="20170808 16:11:50.199" status="PASS" starttime="20170808 16:11:50.195"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:11:50.199">Delete All Sessions</msg>
<status endtime="20170808 16:11:50.199" status="PASS" starttime="20170808 16:11:50.199"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:50.199">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:11:50.199" status="PASS" starttime="20170808 16:11:49.871"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:11:50.200">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:11:50.200" status="PASS" starttime="20170808 16:11:50.200"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:11:50.200">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:11:50.200">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:11:50.201">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:11:50.201" status="PASS" starttime="20170808 16:11:50.200"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:50.201">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:11:50.201" status="PASS" starttime="20170808 16:11:49.871"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:11:50.201">${power_state} = Off</msg>
<status endtime="20170808 16:11:50.201" status="PASS" starttime="20170808 16:11:49.870"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:11:50.202">On != Off</msg>
<status endtime="20170808 16:11:50.202" status="FAIL" starttime="20170808 16:11:50.202"></status>
</kw>
<status endtime="20170808 16:11:50.202" status="FAIL" starttime="20170808 16:11:49.870"></status>
</kw>
<status endtime="20170808 16:11:50.202" status="FAIL" starttime="20170808 16:11:49.870"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:00.207">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:12:00.208" status="PASS" starttime="20170808 16:12:00.207"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:00.208">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:12:00.208" status="PASS" starttime="20170808 16:12:00.208"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:00.209">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:12:00.209" status="PASS" starttime="20170808 16:12:00.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:00.209">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:12:00.209" status="PASS" starttime="20170808 16:12:00.209"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:00.419">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:12:00.419" status="PASS" starttime="20170808 16:12:00.210"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:00.419">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:12:00.419">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:00.419" status="PASS" starttime="20170808 16:12:00.210"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:00.420">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:00.420" status="PASS" starttime="20170808 16:12:00.420"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:00.421">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:00.421" status="PASS" starttime="20170808 16:12:00.421"></status>
</kw>
<status endtime="20170808 16:12:00.421" status="PASS" starttime="20170808 16:12:00.206"></status>
</kw>
<status endtime="20170808 16:12:00.421" status="PASS" starttime="20170808 16:12:00.206"></status>
</kw>
<status endtime="20170808 16:12:00.422" status="PASS" starttime="20170808 16:12:00.205"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:00.422">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:12:00.423" status="PASS" starttime="20170808 16:12:00.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:00.426">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:12:00.426" status="PASS" starttime="20170808 16:12:00.425"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:00.427">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:12:00.427" status="PASS" starttime="20170808 16:12:00.426"></status>
</kw>
<status endtime="20170808 16:12:00.427" status="PASS" starttime="20170808 16:12:00.426"></status>
</kw>
<status endtime="20170808 16:12:00.427" status="PASS" starttime="20170808 16:12:00.424"></status>
</kw>
<status endtime="20170808 16:12:00.427" status="PASS" starttime="20170808 16:12:00.423"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:00.489">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:12:00.490">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:00.490" status="PASS" starttime="20170808 16:12:00.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:00.491">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:12:00.491" status="PASS" starttime="20170808 16:12:00.491"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:00.492">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:12:00.493" status="PASS" starttime="20170808 16:12:00.492"></status>
</kw>
<status endtime="20170808 16:12:00.493" status="PASS" starttime="20170808 16:12:00.492"></status>
</kw>
<status endtime="20170808 16:12:00.493" status="PASS" starttime="20170808 16:12:00.490"></status>
</kw>
<status endtime="20170808 16:12:00.493" status="PASS" starttime="20170808 16:12:00.490"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:12:00.493">Delete All Sessions</msg>
<status endtime="20170808 16:12:00.493" status="PASS" starttime="20170808 16:12:00.493"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:00.493">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:00.494" status="PASS" starttime="20170808 16:12:00.205"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:00.494">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:00.494" status="PASS" starttime="20170808 16:12:00.494"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:00.495">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:12:00.495">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:12:00.495">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:12:00.495" status="PASS" starttime="20170808 16:12:00.494"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:00.495">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:12:00.495" status="PASS" starttime="20170808 16:12:00.204"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:00.495">${power_state} = Off</msg>
<status endtime="20170808 16:12:00.496" status="PASS" starttime="20170808 16:12:00.204"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:12:00.496">On != Off</msg>
<status endtime="20170808 16:12:00.496" status="FAIL" starttime="20170808 16:12:00.496"></status>
</kw>
<status endtime="20170808 16:12:00.496" status="FAIL" starttime="20170808 16:12:00.203"></status>
</kw>
<status endtime="20170808 16:12:00.497" status="FAIL" starttime="20170808 16:12:00.203"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:10.502">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:12:10.502" status="PASS" starttime="20170808 16:12:10.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:10.503">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:12:10.503" status="PASS" starttime="20170808 16:12:10.502"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:10.503">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:12:10.503" status="PASS" starttime="20170808 16:12:10.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:10.504">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:12:10.504" status="PASS" starttime="20170808 16:12:10.504"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:10.710">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:12:10.710" status="PASS" starttime="20170808 16:12:10.505"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:10.710">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:12:10.710">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:10.710" status="PASS" starttime="20170808 16:12:10.504"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:10.711">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:10.711" status="PASS" starttime="20170808 16:12:10.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:10.711">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:10.712" status="PASS" starttime="20170808 16:12:10.711"></status>
</kw>
<status endtime="20170808 16:12:10.712" status="PASS" starttime="20170808 16:12:10.500"></status>
</kw>
<status endtime="20170808 16:12:10.712" status="PASS" starttime="20170808 16:12:10.500"></status>
</kw>
<status endtime="20170808 16:12:10.712" status="PASS" starttime="20170808 16:12:10.499"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:10.713">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:12:10.713" status="PASS" starttime="20170808 16:12:10.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:10.715">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:12:10.715" status="PASS" starttime="20170808 16:12:10.714"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:10.716">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:12:10.716" status="PASS" starttime="20170808 16:12:10.716"></status>
</kw>
<status endtime="20170808 16:12:10.716" status="PASS" starttime="20170808 16:12:10.715"></status>
</kw>
<status endtime="20170808 16:12:10.716" status="PASS" starttime="20170808 16:12:10.714"></status>
</kw>
<status endtime="20170808 16:12:10.716" status="PASS" starttime="20170808 16:12:10.713"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:10.778">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:12:10.778">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:10.778" status="PASS" starttime="20170808 16:12:10.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:10.780">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:12:10.780" status="PASS" starttime="20170808 16:12:10.780"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:10.781">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:12:10.781" status="PASS" starttime="20170808 16:12:10.781"></status>
</kw>
<status endtime="20170808 16:12:10.782" status="PASS" starttime="20170808 16:12:10.780"></status>
</kw>
<status endtime="20170808 16:12:10.782" status="PASS" starttime="20170808 16:12:10.779"></status>
</kw>
<status endtime="20170808 16:12:10.782" status="PASS" starttime="20170808 16:12:10.779"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:12:10.782">Delete All Sessions</msg>
<status endtime="20170808 16:12:10.782" status="PASS" starttime="20170808 16:12:10.782"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:10.782">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:10.783" status="PASS" starttime="20170808 16:12:10.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:10.783">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:10.783" status="PASS" starttime="20170808 16:12:10.783"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:10.784">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:12:10.784">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:12:10.784">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:12:10.784" status="PASS" starttime="20170808 16:12:10.783"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:10.784">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:12:10.784" status="PASS" starttime="20170808 16:12:10.498"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:10.784">${power_state} = Off</msg>
<status endtime="20170808 16:12:10.785" status="PASS" starttime="20170808 16:12:10.498"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:12:10.785">On != Off</msg>
<status endtime="20170808 16:12:10.785" status="FAIL" starttime="20170808 16:12:10.785"></status>
</kw>
<status endtime="20170808 16:12:10.785" status="FAIL" starttime="20170808 16:12:10.497"></status>
</kw>
<status endtime="20170808 16:12:10.786" status="FAIL" starttime="20170808 16:12:10.497"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:20.790">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:12:20.791" status="PASS" starttime="20170808 16:12:20.790"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:20.791">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:12:20.791" status="PASS" starttime="20170808 16:12:20.791"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:20.792">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:12:20.792" status="PASS" starttime="20170808 16:12:20.792"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:20.793">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:12:20.793" status="PASS" starttime="20170808 16:12:20.792"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:20.977">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:12:20.977" status="PASS" starttime="20170808 16:12:20.793"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:20.977">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:12:20.977">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:20.977" status="PASS" starttime="20170808 16:12:20.793"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:20.978">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:20.978" status="PASS" starttime="20170808 16:12:20.978"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:20.979">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:20.979" status="PASS" starttime="20170808 16:12:20.978"></status>
</kw>
<status endtime="20170808 16:12:20.979" status="PASS" starttime="20170808 16:12:20.789"></status>
</kw>
<status endtime="20170808 16:12:20.979" status="PASS" starttime="20170808 16:12:20.789"></status>
</kw>
<status endtime="20170808 16:12:20.979" status="PASS" starttime="20170808 16:12:20.788"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:20.980">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:12:20.980" status="PASS" starttime="20170808 16:12:20.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:20.982">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:12:20.982" status="PASS" starttime="20170808 16:12:20.981"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:20.983">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:12:20.983" status="PASS" starttime="20170808 16:12:20.983"></status>
</kw>
<status endtime="20170808 16:12:20.983" status="PASS" starttime="20170808 16:12:20.982"></status>
</kw>
<status endtime="20170808 16:12:20.983" status="PASS" starttime="20170808 16:12:20.981"></status>
</kw>
<status endtime="20170808 16:12:20.983" status="PASS" starttime="20170808 16:12:20.980"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:21.058">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:12:21.058">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:21.058" status="PASS" starttime="20170808 16:12:20.983"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:21.060">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:12:21.060" status="PASS" starttime="20170808 16:12:21.059"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:21.061">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:12:21.061" status="PASS" starttime="20170808 16:12:21.061"></status>
</kw>
<status endtime="20170808 16:12:21.061" status="PASS" starttime="20170808 16:12:21.060"></status>
</kw>
<status endtime="20170808 16:12:21.061" status="PASS" starttime="20170808 16:12:21.059"></status>
</kw>
<status endtime="20170808 16:12:21.061" status="PASS" starttime="20170808 16:12:21.058"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:12:21.062">Delete All Sessions</msg>
<status endtime="20170808 16:12:21.062" status="PASS" starttime="20170808 16:12:21.061"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:21.062">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:21.062" status="PASS" starttime="20170808 16:12:20.788"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:21.062">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:21.063" status="PASS" starttime="20170808 16:12:21.062"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:21.063">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:12:21.063">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:12:21.063">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:12:21.063" status="PASS" starttime="20170808 16:12:21.063"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:21.063">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:12:21.064" status="PASS" starttime="20170808 16:12:20.787"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:21.064">${power_state} = Off</msg>
<status endtime="20170808 16:12:21.064" status="PASS" starttime="20170808 16:12:20.787"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:12:21.064">On != Off</msg>
<status endtime="20170808 16:12:21.065" status="FAIL" starttime="20170808 16:12:21.064"></status>
</kw>
<status endtime="20170808 16:12:21.065" status="FAIL" starttime="20170808 16:12:20.787"></status>
</kw>
<status endtime="20170808 16:12:21.065" status="FAIL" starttime="20170808 16:12:20.786"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:31.071">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:12:31.072" status="PASS" starttime="20170808 16:12:31.071"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:31.073">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:12:31.073" status="PASS" starttime="20170808 16:12:31.072"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:31.073">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:12:31.073" status="PASS" starttime="20170808 16:12:31.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:31.074">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:12:31.074" status="PASS" starttime="20170808 16:12:31.073"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:31.325">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:12:31.325" status="PASS" starttime="20170808 16:12:31.075"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:31.325">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:12:31.325">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:31.325" status="PASS" starttime="20170808 16:12:31.074"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:31.325">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:31.326" status="PASS" starttime="20170808 16:12:31.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:31.326">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:31.326" status="PASS" starttime="20170808 16:12:31.326"></status>
</kw>
<status endtime="20170808 16:12:31.326" status="PASS" starttime="20170808 16:12:31.070"></status>
</kw>
<status endtime="20170808 16:12:31.327" status="PASS" starttime="20170808 16:12:31.069"></status>
</kw>
<status endtime="20170808 16:12:31.327" status="PASS" starttime="20170808 16:12:31.069"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:31.327">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:12:31.327" status="PASS" starttime="20170808 16:12:31.327"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:31.329">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:12:31.329" status="PASS" starttime="20170808 16:12:31.329"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:31.330">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:12:31.330" status="PASS" starttime="20170808 16:12:31.330"></status>
</kw>
<status endtime="20170808 16:12:31.330" status="PASS" starttime="20170808 16:12:31.330"></status>
</kw>
<status endtime="20170808 16:12:31.331" status="PASS" starttime="20170808 16:12:31.328"></status>
</kw>
<status endtime="20170808 16:12:31.331" status="PASS" starttime="20170808 16:12:31.327"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:31.393">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:12:31.393">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:31.393" status="PASS" starttime="20170808 16:12:31.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:31.395">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:12:31.395" status="PASS" starttime="20170808 16:12:31.394"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:31.396">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:12:31.396" status="PASS" starttime="20170808 16:12:31.395"></status>
</kw>
<status endtime="20170808 16:12:31.396" status="PASS" starttime="20170808 16:12:31.395"></status>
</kw>
<status endtime="20170808 16:12:31.396" status="PASS" starttime="20170808 16:12:31.394"></status>
</kw>
<status endtime="20170808 16:12:31.396" status="PASS" starttime="20170808 16:12:31.393"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:12:31.397">Delete All Sessions</msg>
<status endtime="20170808 16:12:31.397" status="PASS" starttime="20170808 16:12:31.397"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:31.397">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:31.397" status="PASS" starttime="20170808 16:12:31.068"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:31.398">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:31.398" status="PASS" starttime="20170808 16:12:31.397"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:31.398">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:12:31.398">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:12:31.398">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:12:31.398" status="PASS" starttime="20170808 16:12:31.398"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:31.399">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:12:31.399" status="PASS" starttime="20170808 16:12:31.067"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:31.399">${power_state} = Off</msg>
<status endtime="20170808 16:12:31.399" status="PASS" starttime="20170808 16:12:31.067"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:12:31.400">On != Off</msg>
<status endtime="20170808 16:12:31.400" status="FAIL" starttime="20170808 16:12:31.399"></status>
</kw>
<status endtime="20170808 16:12:31.400" status="FAIL" starttime="20170808 16:12:31.067"></status>
</kw>
<status endtime="20170808 16:12:31.400" status="FAIL" starttime="20170808 16:12:31.065"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:41.405">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:12:41.405" status="PASS" starttime="20170808 16:12:41.405"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:41.406">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:12:41.406" status="PASS" starttime="20170808 16:12:41.406"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:41.407">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:12:41.407" status="PASS" starttime="20170808 16:12:41.406"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:41.407">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:12:41.407" status="PASS" starttime="20170808 16:12:41.407"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:41.631">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:12:41.631" status="PASS" starttime="20170808 16:12:41.408"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:41.631">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:12:41.631">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:41.631" status="PASS" starttime="20170808 16:12:41.407"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:41.632">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:41.632" status="PASS" starttime="20170808 16:12:41.631"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:41.632">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:41.632" status="PASS" starttime="20170808 16:12:41.632"></status>
</kw>
<status endtime="20170808 16:12:41.633" status="PASS" starttime="20170808 16:12:41.404"></status>
</kw>
<status endtime="20170808 16:12:41.633" status="PASS" starttime="20170808 16:12:41.404"></status>
</kw>
<status endtime="20170808 16:12:41.633" status="PASS" starttime="20170808 16:12:41.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:41.633">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:12:41.633" status="PASS" starttime="20170808 16:12:41.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:41.635">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:12:41.635" status="PASS" starttime="20170808 16:12:41.635"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:41.636">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:12:41.636" status="PASS" starttime="20170808 16:12:41.636"></status>
</kw>
<status endtime="20170808 16:12:41.637" status="PASS" starttime="20170808 16:12:41.636"></status>
</kw>
<status endtime="20170808 16:12:41.637" status="PASS" starttime="20170808 16:12:41.634"></status>
</kw>
<status endtime="20170808 16:12:41.637" status="PASS" starttime="20170808 16:12:41.634"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:41.700">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:12:41.700">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:41.700" status="PASS" starttime="20170808 16:12:41.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:41.702">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:12:41.702" status="PASS" starttime="20170808 16:12:41.702"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:41.703">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:12:41.703" status="PASS" starttime="20170808 16:12:41.703"></status>
</kw>
<status endtime="20170808 16:12:41.703" status="PASS" starttime="20170808 16:12:41.702"></status>
</kw>
<status endtime="20170808 16:12:41.703" status="PASS" starttime="20170808 16:12:41.701"></status>
</kw>
<status endtime="20170808 16:12:41.703" status="PASS" starttime="20170808 16:12:41.701"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:12:41.704">Delete All Sessions</msg>
<status endtime="20170808 16:12:41.704" status="PASS" starttime="20170808 16:12:41.704"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:41.704">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:41.704" status="PASS" starttime="20170808 16:12:41.402"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:41.705">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:41.705" status="PASS" starttime="20170808 16:12:41.704"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:41.705">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:12:41.705">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:12:41.705">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:12:41.705" status="PASS" starttime="20170808 16:12:41.705"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:41.706">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:12:41.706" status="PASS" starttime="20170808 16:12:41.402"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:41.706">${power_state} = Off</msg>
<status endtime="20170808 16:12:41.706" status="PASS" starttime="20170808 16:12:41.401"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:12:41.707">On != Off</msg>
<status endtime="20170808 16:12:41.707" status="FAIL" starttime="20170808 16:12:41.706"></status>
</kw>
<status endtime="20170808 16:12:41.707" status="FAIL" starttime="20170808 16:12:41.401"></status>
</kw>
<status endtime="20170808 16:12:41.707" status="FAIL" starttime="20170808 16:12:41.400"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:51.715">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:12:51.715" status="PASS" starttime="20170808 16:12:51.714"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:51.716">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:12:51.716" status="PASS" starttime="20170808 16:12:51.715"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:51.717">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:12:51.717" status="PASS" starttime="20170808 16:12:51.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:51.718">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:12:51.718" status="PASS" starttime="20170808 16:12:51.717"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:51.902">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:12:51.903" status="PASS" starttime="20170808 16:12:51.719"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:51.903">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:12:51.903">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:51.903" status="PASS" starttime="20170808 16:12:51.718"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:51.903">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:51.904" status="PASS" starttime="20170808 16:12:51.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:51.904">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:51.904" status="PASS" starttime="20170808 16:12:51.904"></status>
</kw>
<status endtime="20170808 16:12:51.904" status="PASS" starttime="20170808 16:12:51.713"></status>
</kw>
<status endtime="20170808 16:12:51.904" status="PASS" starttime="20170808 16:12:51.712"></status>
</kw>
<status endtime="20170808 16:12:51.905" status="PASS" starttime="20170808 16:12:51.711"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:51.905">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:12:51.905" status="PASS" starttime="20170808 16:12:51.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:51.907">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:12:51.907" status="PASS" starttime="20170808 16:12:51.907"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:51.908">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:12:51.908" status="PASS" starttime="20170808 16:12:51.908"></status>
</kw>
<status endtime="20170808 16:12:51.908" status="PASS" starttime="20170808 16:12:51.907"></status>
</kw>
<status endtime="20170808 16:12:51.909" status="PASS" starttime="20170808 16:12:51.906"></status>
</kw>
<status endtime="20170808 16:12:51.909" status="PASS" starttime="20170808 16:12:51.905"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:51.988">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:12:51.988">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:51.988" status="PASS" starttime="20170808 16:12:51.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:51.990">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:12:51.990" status="PASS" starttime="20170808 16:12:51.989"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:51.991">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:12:51.991" status="PASS" starttime="20170808 16:12:51.991"></status>
</kw>
<status endtime="20170808 16:12:51.991" status="PASS" starttime="20170808 16:12:51.990"></status>
</kw>
<status endtime="20170808 16:12:51.991" status="PASS" starttime="20170808 16:12:51.989"></status>
</kw>
<status endtime="20170808 16:12:51.991" status="PASS" starttime="20170808 16:12:51.988"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:12:51.992">Delete All Sessions</msg>
<status endtime="20170808 16:12:51.992" status="PASS" starttime="20170808 16:12:51.992"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:51.992">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:12:51.992" status="PASS" starttime="20170808 16:12:51.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:12:51.993">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:12:51.993" status="PASS" starttime="20170808 16:12:51.992"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:12:51.993">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:12:51.993">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:12:51.993">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:12:51.993" status="PASS" starttime="20170808 16:12:51.993"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:51.994">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:12:51.994" status="PASS" starttime="20170808 16:12:51.710"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:12:51.994">${power_state} = Off</msg>
<status endtime="20170808 16:12:51.994" status="PASS" starttime="20170808 16:12:51.709"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:12:51.995">On != Off</msg>
<status endtime="20170808 16:12:51.995" status="FAIL" starttime="20170808 16:12:51.994"></status>
</kw>
<status endtime="20170808 16:12:51.995" status="FAIL" starttime="20170808 16:12:51.708"></status>
</kw>
<status endtime="20170808 16:12:51.995" status="FAIL" starttime="20170808 16:12:51.708"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:02.001">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:13:02.001" status="PASS" starttime="20170808 16:13:02.000"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:02.002">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:13:02.002" status="PASS" starttime="20170808 16:13:02.002"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:02.003">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:13:02.003" status="PASS" starttime="20170808 16:13:02.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:02.004">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:13:02.004" status="PASS" starttime="20170808 16:13:02.003"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:02.187">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:13:02.187" status="PASS" starttime="20170808 16:13:02.005"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:02.187">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:13:02.187">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:02.187" status="PASS" starttime="20170808 16:13:02.004"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:02.188">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:02.188" status="PASS" starttime="20170808 16:13:02.188"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:02.189">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:02.189" status="PASS" starttime="20170808 16:13:02.188"></status>
</kw>
<status endtime="20170808 16:13:02.189" status="PASS" starttime="20170808 16:13:01.999"></status>
</kw>
<status endtime="20170808 16:13:02.189" status="PASS" starttime="20170808 16:13:01.999"></status>
</kw>
<status endtime="20170808 16:13:02.189" status="PASS" starttime="20170808 16:13:01.998"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:02.190">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:13:02.190" status="PASS" starttime="20170808 16:13:02.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:02.192">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:13:02.192" status="PASS" starttime="20170808 16:13:02.191"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:02.193">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:13:02.193" status="PASS" starttime="20170808 16:13:02.192"></status>
</kw>
<status endtime="20170808 16:13:02.193" status="PASS" starttime="20170808 16:13:02.192"></status>
</kw>
<status endtime="20170808 16:13:02.193" status="PASS" starttime="20170808 16:13:02.190"></status>
</kw>
<status endtime="20170808 16:13:02.193" status="PASS" starttime="20170808 16:13:02.190"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:02.270">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:13:02.271">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:02.271" status="PASS" starttime="20170808 16:13:02.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:02.273">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:13:02.273" status="PASS" starttime="20170808 16:13:02.273"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:02.275">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:13:02.275" status="PASS" starttime="20170808 16:13:02.274"></status>
</kw>
<status endtime="20170808 16:13:02.275" status="PASS" starttime="20170808 16:13:02.274"></status>
</kw>
<status endtime="20170808 16:13:02.275" status="PASS" starttime="20170808 16:13:02.272"></status>
</kw>
<status endtime="20170808 16:13:02.275" status="PASS" starttime="20170808 16:13:02.271"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:13:02.276">Delete All Sessions</msg>
<status endtime="20170808 16:13:02.276" status="PASS" starttime="20170808 16:13:02.275"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:02.276">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:02.276" status="PASS" starttime="20170808 16:13:01.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:02.277">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:02.277" status="PASS" starttime="20170808 16:13:02.276"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:02.277">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:13:02.277">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:13:02.277">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:13:02.277" status="PASS" starttime="20170808 16:13:02.277"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:02.278">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:13:02.278" status="PASS" starttime="20170808 16:13:01.997"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:02.278">${power_state} = Off</msg>
<status endtime="20170808 16:13:02.278" status="PASS" starttime="20170808 16:13:01.997"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:13:02.279">On != Off</msg>
<status endtime="20170808 16:13:02.279" status="FAIL" starttime="20170808 16:13:02.278"></status>
</kw>
<status endtime="20170808 16:13:02.279" status="FAIL" starttime="20170808 16:13:01.996"></status>
</kw>
<status endtime="20170808 16:13:02.279" status="FAIL" starttime="20170808 16:13:01.996"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:12.285">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:13:12.285" status="PASS" starttime="20170808 16:13:12.284"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:12.286">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:13:12.286" status="PASS" starttime="20170808 16:13:12.285"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:12.286">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:13:12.286" status="PASS" starttime="20170808 16:13:12.286"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:12.287">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:13:12.287" status="PASS" starttime="20170808 16:13:12.287"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:12.468">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:13:12.468" status="PASS" starttime="20170808 16:13:12.288"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:12.468">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:13:12.468">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:12.468" status="PASS" starttime="20170808 16:13:12.287"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:12.469">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:12.469" status="PASS" starttime="20170808 16:13:12.469"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:12.470">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:12.470" status="PASS" starttime="20170808 16:13:12.469"></status>
</kw>
<status endtime="20170808 16:13:12.470" status="PASS" starttime="20170808 16:13:12.283"></status>
</kw>
<status endtime="20170808 16:13:12.470" status="PASS" starttime="20170808 16:13:12.283"></status>
</kw>
<status endtime="20170808 16:13:12.470" status="PASS" starttime="20170808 16:13:12.282"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:12.471">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:13:12.471" status="PASS" starttime="20170808 16:13:12.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:12.473">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:13:12.473" status="PASS" starttime="20170808 16:13:12.472"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:12.474">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:13:12.474" status="PASS" starttime="20170808 16:13:12.474"></status>
</kw>
<status endtime="20170808 16:13:12.474" status="PASS" starttime="20170808 16:13:12.473"></status>
</kw>
<status endtime="20170808 16:13:12.474" status="PASS" starttime="20170808 16:13:12.472"></status>
</kw>
<status endtime="20170808 16:13:12.474" status="PASS" starttime="20170808 16:13:12.471"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:12.537">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:13:12.537">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:12.537" status="PASS" starttime="20170808 16:13:12.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:12.539">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:13:12.539" status="PASS" starttime="20170808 16:13:12.538"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:12.540">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:13:12.540" status="PASS" starttime="20170808 16:13:12.540"></status>
</kw>
<status endtime="20170808 16:13:12.540" status="PASS" starttime="20170808 16:13:12.539"></status>
</kw>
<status endtime="20170808 16:13:12.541" status="PASS" starttime="20170808 16:13:12.538"></status>
</kw>
<status endtime="20170808 16:13:12.541" status="PASS" starttime="20170808 16:13:12.538"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:13:12.541">Delete All Sessions</msg>
<status endtime="20170808 16:13:12.541" status="PASS" starttime="20170808 16:13:12.541"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:12.541">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:12.541" status="PASS" starttime="20170808 16:13:12.282"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:12.542">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:12.542" status="PASS" starttime="20170808 16:13:12.542"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:12.543">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:13:12.543">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:13:12.543">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:13:12.543" status="PASS" starttime="20170808 16:13:12.542"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:12.543">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:13:12.543" status="PASS" starttime="20170808 16:13:12.281"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:12.543">${power_state} = Off</msg>
<status endtime="20170808 16:13:12.543" status="PASS" starttime="20170808 16:13:12.281"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:13:12.544">On != Off</msg>
<status endtime="20170808 16:13:12.544" status="FAIL" starttime="20170808 16:13:12.544"></status>
</kw>
<status endtime="20170808 16:13:12.544" status="FAIL" starttime="20170808 16:13:12.280"></status>
</kw>
<status endtime="20170808 16:13:12.544" status="FAIL" starttime="20170808 16:13:12.280"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:22.549">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:13:22.550" status="PASS" starttime="20170808 16:13:22.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:22.550">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:13:22.550" status="PASS" starttime="20170808 16:13:22.550"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:22.551">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:13:22.551" status="PASS" starttime="20170808 16:13:22.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:22.552">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:13:22.552" status="PASS" starttime="20170808 16:13:22.551"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:22.744">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:13:22.744" status="PASS" starttime="20170808 16:13:22.552"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:22.745">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:13:22.745">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:22.745" status="PASS" starttime="20170808 16:13:22.552"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:22.746">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:22.746" status="PASS" starttime="20170808 16:13:22.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:22.747">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:22.747" status="PASS" starttime="20170808 16:13:22.746"></status>
</kw>
<status endtime="20170808 16:13:22.747" status="PASS" starttime="20170808 16:13:22.548"></status>
</kw>
<status endtime="20170808 16:13:22.748" status="PASS" starttime="20170808 16:13:22.548"></status>
</kw>
<status endtime="20170808 16:13:22.748" status="PASS" starttime="20170808 16:13:22.547"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:22.749">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:13:22.749" status="PASS" starttime="20170808 16:13:22.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:22.752">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:13:22.752" status="PASS" starttime="20170808 16:13:22.751"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:22.753">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:13:22.753" status="PASS" starttime="20170808 16:13:22.753"></status>
</kw>
<status endtime="20170808 16:13:22.754" status="PASS" starttime="20170808 16:13:22.752"></status>
</kw>
<status endtime="20170808 16:13:22.754" status="PASS" starttime="20170808 16:13:22.750"></status>
</kw>
<status endtime="20170808 16:13:22.754" status="PASS" starttime="20170808 16:13:22.749"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:22.818">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:13:22.818">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:22.818" status="PASS" starttime="20170808 16:13:22.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:22.821">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:13:22.821" status="PASS" starttime="20170808 16:13:22.820"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:22.823">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:13:22.823" status="PASS" starttime="20170808 16:13:22.823"></status>
</kw>
<status endtime="20170808 16:13:22.823" status="PASS" starttime="20170808 16:13:22.822"></status>
</kw>
<status endtime="20170808 16:13:22.823" status="PASS" starttime="20170808 16:13:22.819"></status>
</kw>
<status endtime="20170808 16:13:22.824" status="PASS" starttime="20170808 16:13:22.819"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:13:22.824">Delete All Sessions</msg>
<status endtime="20170808 16:13:22.824" status="PASS" starttime="20170808 16:13:22.824"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:22.825">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:22.825" status="PASS" starttime="20170808 16:13:22.547"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:22.826">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:22.826" status="PASS" starttime="20170808 16:13:22.825"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:22.827">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:13:22.827">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:13:22.827">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:13:22.827" status="PASS" starttime="20170808 16:13:22.826"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:22.827">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:13:22.827" status="PASS" starttime="20170808 16:13:22.546"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:22.828">${power_state} = Off</msg>
<status endtime="20170808 16:13:22.828" status="PASS" starttime="20170808 16:13:22.546"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:13:22.829">On != Off</msg>
<status endtime="20170808 16:13:22.829" status="FAIL" starttime="20170808 16:13:22.828"></status>
</kw>
<status endtime="20170808 16:13:22.829" status="FAIL" starttime="20170808 16:13:22.545"></status>
</kw>
<status endtime="20170808 16:13:22.829" status="FAIL" starttime="20170808 16:13:22.545"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:32.838">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:13:32.839" status="PASS" starttime="20170808 16:13:32.837"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:32.840">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:13:32.840" status="PASS" starttime="20170808 16:13:32.839"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:32.842">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:13:32.842" status="PASS" starttime="20170808 16:13:32.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:32.843">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:13:32.843" status="PASS" starttime="20170808 16:13:32.842"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:33.055">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:13:33.055" status="PASS" starttime="20170808 16:13:32.845"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:33.055">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:13:33.055">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:33.055" status="PASS" starttime="20170808 16:13:32.844"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:33.056">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:33.056" status="PASS" starttime="20170808 16:13:33.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:33.057">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:33.057" status="PASS" starttime="20170808 16:13:33.056"></status>
</kw>
<status endtime="20170808 16:13:33.057" status="PASS" starttime="20170808 16:13:32.836"></status>
</kw>
<status endtime="20170808 16:13:33.057" status="PASS" starttime="20170808 16:13:32.835"></status>
</kw>
<status endtime="20170808 16:13:33.057" status="PASS" starttime="20170808 16:13:32.834"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:33.058">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:13:33.058" status="PASS" starttime="20170808 16:13:33.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:33.061">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:13:33.061" status="PASS" starttime="20170808 16:13:33.060"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:33.062">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:13:33.062" status="PASS" starttime="20170808 16:13:33.062"></status>
</kw>
<status endtime="20170808 16:13:33.063" status="PASS" starttime="20170808 16:13:33.061"></status>
</kw>
<status endtime="20170808 16:13:33.063" status="PASS" starttime="20170808 16:13:33.059"></status>
</kw>
<status endtime="20170808 16:13:33.063" status="PASS" starttime="20170808 16:13:33.058"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:33.126">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:13:33.126">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:33.126" status="PASS" starttime="20170808 16:13:33.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:33.129">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:13:33.129" status="PASS" starttime="20170808 16:13:33.128"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:33.131">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:13:33.131" status="PASS" starttime="20170808 16:13:33.130"></status>
</kw>
<status endtime="20170808 16:13:33.131" status="PASS" starttime="20170808 16:13:33.129"></status>
</kw>
<status endtime="20170808 16:13:33.132" status="PASS" starttime="20170808 16:13:33.127"></status>
</kw>
<status endtime="20170808 16:13:33.132" status="PASS" starttime="20170808 16:13:33.126"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:13:33.132">Delete All Sessions</msg>
<status endtime="20170808 16:13:33.132" status="PASS" starttime="20170808 16:13:33.132"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:33.133">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:33.133" status="PASS" starttime="20170808 16:13:32.833"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:33.134">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:33.134" status="PASS" starttime="20170808 16:13:33.133"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:33.135">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:13:33.135">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:13:33.135">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:13:33.135" status="PASS" starttime="20170808 16:13:33.134"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:33.135">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:13:33.135" status="PASS" starttime="20170808 16:13:32.832"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:33.136">${power_state} = Off</msg>
<status endtime="20170808 16:13:33.136" status="PASS" starttime="20170808 16:13:32.832"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:13:33.137">On != Off</msg>
<status endtime="20170808 16:13:33.137" status="FAIL" starttime="20170808 16:13:33.136"></status>
</kw>
<status endtime="20170808 16:13:33.138" status="FAIL" starttime="20170808 16:13:32.831"></status>
</kw>
<status endtime="20170808 16:13:33.138" status="FAIL" starttime="20170808 16:13:32.830"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:43.145">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:13:43.146" status="PASS" starttime="20170808 16:13:43.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:43.147">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:13:43.147" status="PASS" starttime="20170808 16:13:43.146"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:43.148">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:13:43.148" status="PASS" starttime="20170808 16:13:43.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:43.149">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:13:43.149" status="PASS" starttime="20170808 16:13:43.148"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:43.450">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:13:43.450" status="PASS" starttime="20170808 16:13:43.150"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:43.450">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:13:43.450">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:43.451" status="PASS" starttime="20170808 16:13:43.149"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:43.451">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:43.452" status="PASS" starttime="20170808 16:13:43.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:43.452">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:43.453" status="PASS" starttime="20170808 16:13:43.452"></status>
</kw>
<status endtime="20170808 16:13:43.453" status="PASS" starttime="20170808 16:13:43.144"></status>
</kw>
<status endtime="20170808 16:13:43.453" status="PASS" starttime="20170808 16:13:43.143"></status>
</kw>
<status endtime="20170808 16:13:43.453" status="PASS" starttime="20170808 16:13:43.142"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:43.454">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:13:43.454" status="PASS" starttime="20170808 16:13:43.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:43.457">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:13:43.457" status="PASS" starttime="20170808 16:13:43.456"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:43.458">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:13:43.458" status="PASS" starttime="20170808 16:13:43.458"></status>
</kw>
<status endtime="20170808 16:13:43.458" status="PASS" starttime="20170808 16:13:43.457"></status>
</kw>
<status endtime="20170808 16:13:43.459" status="PASS" starttime="20170808 16:13:43.455"></status>
</kw>
<status endtime="20170808 16:13:43.459" status="PASS" starttime="20170808 16:13:43.454"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:43.523">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:13:43.523">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:43.524" status="PASS" starttime="20170808 16:13:43.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:43.527">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:13:43.527" status="PASS" starttime="20170808 16:13:43.526"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:43.528">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:13:43.528" status="PASS" starttime="20170808 16:13:43.528"></status>
</kw>
<status endtime="20170808 16:13:43.528" status="PASS" starttime="20170808 16:13:43.527"></status>
</kw>
<status endtime="20170808 16:13:43.529" status="PASS" starttime="20170808 16:13:43.525"></status>
</kw>
<status endtime="20170808 16:13:43.529" status="PASS" starttime="20170808 16:13:43.524"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:13:43.529">Delete All Sessions</msg>
<status endtime="20170808 16:13:43.529" status="PASS" starttime="20170808 16:13:43.529"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:43.530">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:43.530" status="PASS" starttime="20170808 16:13:43.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:43.531">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:43.531" status="PASS" starttime="20170808 16:13:43.530"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:43.531">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:13:43.531">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:13:43.532">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:13:43.532" status="PASS" starttime="20170808 16:13:43.531"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:43.532">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:13:43.532" status="PASS" starttime="20170808 16:13:43.141"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:43.532">${power_state} = Off</msg>
<status endtime="20170808 16:13:43.533" status="PASS" starttime="20170808 16:13:43.140"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:13:43.533">On != Off</msg>
<status endtime="20170808 16:13:43.534" status="FAIL" starttime="20170808 16:13:43.533"></status>
</kw>
<status endtime="20170808 16:13:43.534" status="FAIL" starttime="20170808 16:13:43.139"></status>
</kw>
<status endtime="20170808 16:13:43.534" status="FAIL" starttime="20170808 16:13:43.139"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:53.539">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:13:53.540" status="PASS" starttime="20170808 16:13:53.539"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:53.540">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:13:53.540" status="PASS" starttime="20170808 16:13:53.540"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:53.541">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:13:53.541" status="PASS" starttime="20170808 16:13:53.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:53.542">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:13:53.542" status="PASS" starttime="20170808 16:13:53.541"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:53.729">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:13:53.729" status="PASS" starttime="20170808 16:13:53.542"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:53.729">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:13:53.729">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:53.729" status="PASS" starttime="20170808 16:13:53.542"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:53.730">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:53.730" status="PASS" starttime="20170808 16:13:53.729"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:53.730">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:53.730" status="PASS" starttime="20170808 16:13:53.730"></status>
</kw>
<status endtime="20170808 16:13:53.731" status="PASS" starttime="20170808 16:13:53.538"></status>
</kw>
<status endtime="20170808 16:13:53.731" status="PASS" starttime="20170808 16:13:53.538"></status>
</kw>
<status endtime="20170808 16:13:53.731" status="PASS" starttime="20170808 16:13:53.537"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:53.731">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:13:53.731" status="PASS" starttime="20170808 16:13:53.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:53.733">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:13:53.733" status="PASS" starttime="20170808 16:13:53.733"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:53.734">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:13:53.734" status="PASS" starttime="20170808 16:13:53.734"></status>
</kw>
<status endtime="20170808 16:13:53.734" status="PASS" starttime="20170808 16:13:53.734"></status>
</kw>
<status endtime="20170808 16:13:53.735" status="PASS" starttime="20170808 16:13:53.732"></status>
</kw>
<status endtime="20170808 16:13:53.735" status="PASS" starttime="20170808 16:13:53.732"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:53.813">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:13:53.813">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:53.813" status="PASS" starttime="20170808 16:13:53.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:53.814">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:13:53.815" status="PASS" starttime="20170808 16:13:53.814"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:53.816">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:13:53.816" status="PASS" starttime="20170808 16:13:53.815"></status>
</kw>
<status endtime="20170808 16:13:53.816" status="PASS" starttime="20170808 16:13:53.815"></status>
</kw>
<status endtime="20170808 16:13:53.816" status="PASS" starttime="20170808 16:13:53.814"></status>
</kw>
<status endtime="20170808 16:13:53.816" status="PASS" starttime="20170808 16:13:53.813"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:13:53.817">Delete All Sessions</msg>
<status endtime="20170808 16:13:53.817" status="PASS" starttime="20170808 16:13:53.817"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:53.817">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:13:53.817" status="PASS" starttime="20170808 16:13:53.536"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:13:53.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:13:53.818" status="PASS" starttime="20170808 16:13:53.817"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:13:53.818">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:13:53.818">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:13:53.819">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:13:53.819" status="PASS" starttime="20170808 16:13:53.818"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:53.819">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:13:53.819" status="PASS" starttime="20170808 16:13:53.536"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:13:53.819">${power_state} = Off</msg>
<status endtime="20170808 16:13:53.819" status="PASS" starttime="20170808 16:13:53.535"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:13:53.820">On != Off</msg>
<status endtime="20170808 16:13:53.820" status="FAIL" starttime="20170808 16:13:53.819"></status>
</kw>
<status endtime="20170808 16:13:53.820" status="FAIL" starttime="20170808 16:13:53.535"></status>
</kw>
<status endtime="20170808 16:13:53.820" status="FAIL" starttime="20170808 16:13:53.534"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:03.825">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:14:03.826" status="PASS" starttime="20170808 16:14:03.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:03.826">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:14:03.826" status="PASS" starttime="20170808 16:14:03.826"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:03.827">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:14:03.827" status="PASS" starttime="20170808 16:14:03.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:03.828">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:14:03.828" status="PASS" starttime="20170808 16:14:03.827"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:04.004">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:14:04.004" status="PASS" starttime="20170808 16:14:03.829"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:04.004">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:14:04.004">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:04.004" status="PASS" starttime="20170808 16:14:03.828"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:04.005">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:04.005" status="PASS" starttime="20170808 16:14:04.005"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:04.006">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:04.006" status="PASS" starttime="20170808 16:14:04.005"></status>
</kw>
<status endtime="20170808 16:14:04.006" status="PASS" starttime="20170808 16:14:03.825"></status>
</kw>
<status endtime="20170808 16:14:04.006" status="PASS" starttime="20170808 16:14:03.824"></status>
</kw>
<status endtime="20170808 16:14:04.006" status="PASS" starttime="20170808 16:14:03.823"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:04.007">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:14:04.007" status="PASS" starttime="20170808 16:14:04.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:04.009">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:14:04.009" status="PASS" starttime="20170808 16:14:04.008"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:04.010">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:14:04.010" status="PASS" starttime="20170808 16:14:04.009"></status>
</kw>
<status endtime="20170808 16:14:04.010" status="PASS" starttime="20170808 16:14:04.009"></status>
</kw>
<status endtime="20170808 16:14:04.010" status="PASS" starttime="20170808 16:14:04.007"></status>
</kw>
<status endtime="20170808 16:14:04.010" status="PASS" starttime="20170808 16:14:04.007"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:04.095">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:14:04.095">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:04.095" status="PASS" starttime="20170808 16:14:04.010"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:04.097">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:14:04.097" status="PASS" starttime="20170808 16:14:04.096"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:04.098">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:14:04.098" status="PASS" starttime="20170808 16:14:04.098"></status>
</kw>
<status endtime="20170808 16:14:04.098" status="PASS" starttime="20170808 16:14:04.097"></status>
</kw>
<status endtime="20170808 16:14:04.098" status="PASS" starttime="20170808 16:14:04.096"></status>
</kw>
<status endtime="20170808 16:14:04.098" status="PASS" starttime="20170808 16:14:04.095"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:14:04.099">Delete All Sessions</msg>
<status endtime="20170808 16:14:04.099" status="PASS" starttime="20170808 16:14:04.098"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:04.099">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:04.099" status="PASS" starttime="20170808 16:14:03.823"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:04.100">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:04.100" status="PASS" starttime="20170808 16:14:04.099"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:04.101">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:14:04.101">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:14:04.101">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:14:04.101" status="PASS" starttime="20170808 16:14:04.100"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:04.101">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:14:04.101" status="PASS" starttime="20170808 16:14:03.822"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:04.102">${power_state} = Off</msg>
<status endtime="20170808 16:14:04.102" status="PASS" starttime="20170808 16:14:03.822"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:14:04.103">On != Off</msg>
<status endtime="20170808 16:14:04.103" status="FAIL" starttime="20170808 16:14:04.102"></status>
</kw>
<status endtime="20170808 16:14:04.103" status="FAIL" starttime="20170808 16:14:03.821"></status>
</kw>
<status endtime="20170808 16:14:04.103" status="FAIL" starttime="20170808 16:14:03.821"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:14.109">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:14:14.109" status="PASS" starttime="20170808 16:14:14.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:14.110">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:14:14.110" status="PASS" starttime="20170808 16:14:14.110"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:14.111">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:14:14.111" status="PASS" starttime="20170808 16:14:14.110"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:14.111">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:14:14.111" status="PASS" starttime="20170808 16:14:14.111"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:14.294">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:14:14.294" status="PASS" starttime="20170808 16:14:14.112"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:14.295">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:14:14.295">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:14.295" status="PASS" starttime="20170808 16:14:14.112"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:14.296">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:14.296" status="PASS" starttime="20170808 16:14:14.295"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:14.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:14.298" status="PASS" starttime="20170808 16:14:14.297"></status>
</kw>
<status endtime="20170808 16:14:14.299" status="PASS" starttime="20170808 16:14:14.108"></status>
</kw>
<status endtime="20170808 16:14:14.299" status="PASS" starttime="20170808 16:14:14.107"></status>
</kw>
<status endtime="20170808 16:14:14.299" status="PASS" starttime="20170808 16:14:14.106"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:14.301">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:14:14.301" status="PASS" starttime="20170808 16:14:14.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:14.305">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:14:14.305" status="PASS" starttime="20170808 16:14:14.304"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:14.306">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:14:14.307" status="PASS" starttime="20170808 16:14:14.306"></status>
</kw>
<status endtime="20170808 16:14:14.307" status="PASS" starttime="20170808 16:14:14.305"></status>
</kw>
<status endtime="20170808 16:14:14.307" status="PASS" starttime="20170808 16:14:14.302"></status>
</kw>
<status endtime="20170808 16:14:14.307" status="PASS" starttime="20170808 16:14:14.301"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:14.372">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:14:14.372">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:14.372" status="PASS" starttime="20170808 16:14:14.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:14.374">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:14:14.374" status="PASS" starttime="20170808 16:14:14.374"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:14.376">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:14:14.376" status="PASS" starttime="20170808 16:14:14.375"></status>
</kw>
<status endtime="20170808 16:14:14.376" status="PASS" starttime="20170808 16:14:14.374"></status>
</kw>
<status endtime="20170808 16:14:14.377" status="PASS" starttime="20170808 16:14:14.373"></status>
</kw>
<status endtime="20170808 16:14:14.377" status="PASS" starttime="20170808 16:14:14.373"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:14:14.377">Delete All Sessions</msg>
<status endtime="20170808 16:14:14.378" status="PASS" starttime="20170808 16:14:14.377"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:14.378">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:14.378" status="PASS" starttime="20170808 16:14:14.106"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:14.379">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:14.379" status="PASS" starttime="20170808 16:14:14.378"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:14.380">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:14:14.380">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:14:14.380">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:14:14.380" status="PASS" starttime="20170808 16:14:14.379"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:14.381">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:14:14.381" status="PASS" starttime="20170808 16:14:14.105"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:14.381">${power_state} = Off</msg>
<status endtime="20170808 16:14:14.381" status="PASS" starttime="20170808 16:14:14.105"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:14:14.382">On != Off</msg>
<status endtime="20170808 16:14:14.382" status="FAIL" starttime="20170808 16:14:14.381"></status>
</kw>
<status endtime="20170808 16:14:14.382" status="FAIL" starttime="20170808 16:14:14.104"></status>
</kw>
<status endtime="20170808 16:14:14.382" status="FAIL" starttime="20170808 16:14:14.104"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:24.388">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:14:24.388" status="PASS" starttime="20170808 16:14:24.387"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:24.389">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:14:24.389" status="PASS" starttime="20170808 16:14:24.388"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:24.389">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:14:24.389" status="PASS" starttime="20170808 16:14:24.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:24.390">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:14:24.390" status="PASS" starttime="20170808 16:14:24.390"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:24.590">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:14:24.590" status="PASS" starttime="20170808 16:14:24.391"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:24.591">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:14:24.591">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:24.591" status="PASS" starttime="20170808 16:14:24.390"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:24.591">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:24.591" status="PASS" starttime="20170808 16:14:24.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:24.592">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:24.592" status="PASS" starttime="20170808 16:14:24.592"></status>
</kw>
<status endtime="20170808 16:14:24.592" status="PASS" starttime="20170808 16:14:24.387"></status>
</kw>
<status endtime="20170808 16:14:24.592" status="PASS" starttime="20170808 16:14:24.386"></status>
</kw>
<status endtime="20170808 16:14:24.593" status="PASS" starttime="20170808 16:14:24.386"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:24.593">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:14:24.593" status="PASS" starttime="20170808 16:14:24.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:24.595">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:14:24.595" status="PASS" starttime="20170808 16:14:24.594"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:24.596">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:14:24.596" status="PASS" starttime="20170808 16:14:24.596"></status>
</kw>
<status endtime="20170808 16:14:24.596" status="PASS" starttime="20170808 16:14:24.595"></status>
</kw>
<status endtime="20170808 16:14:24.596" status="PASS" starttime="20170808 16:14:24.594"></status>
</kw>
<status endtime="20170808 16:14:24.596" status="PASS" starttime="20170808 16:14:24.593"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:24.674">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:14:24.675">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:24.675" status="PASS" starttime="20170808 16:14:24.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:24.676">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:14:24.677" status="PASS" starttime="20170808 16:14:24.676"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:24.678">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:14:24.678" status="PASS" starttime="20170808 16:14:24.677"></status>
</kw>
<status endtime="20170808 16:14:24.678" status="PASS" starttime="20170808 16:14:24.677"></status>
</kw>
<status endtime="20170808 16:14:24.678" status="PASS" starttime="20170808 16:14:24.675"></status>
</kw>
<status endtime="20170808 16:14:24.679" status="PASS" starttime="20170808 16:14:24.675"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:14:24.679">Delete All Sessions</msg>
<status endtime="20170808 16:14:24.679" status="PASS" starttime="20170808 16:14:24.679"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:24.680">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:24.680" status="PASS" starttime="20170808 16:14:24.385"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:24.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:24.681" status="PASS" starttime="20170808 16:14:24.680"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:24.682">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:14:24.682">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:14:24.682">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:14:24.682" status="PASS" starttime="20170808 16:14:24.681"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:24.682">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:14:24.683" status="PASS" starttime="20170808 16:14:24.384"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:24.683">${power_state} = Off</msg>
<status endtime="20170808 16:14:24.683" status="PASS" starttime="20170808 16:14:24.384"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:14:24.684">On != Off</msg>
<status endtime="20170808 16:14:24.684" status="FAIL" starttime="20170808 16:14:24.684"></status>
</kw>
<status endtime="20170808 16:14:24.685" status="FAIL" starttime="20170808 16:14:24.383"></status>
</kw>
<status endtime="20170808 16:14:24.685" status="FAIL" starttime="20170808 16:14:24.383"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:34.690">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:14:34.691" status="PASS" starttime="20170808 16:14:34.690"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:34.691">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:14:34.691" status="PASS" starttime="20170808 16:14:34.691"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:34.692">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:14:34.692" status="PASS" starttime="20170808 16:14:34.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:34.692">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:14:34.692" status="PASS" starttime="20170808 16:14:34.692"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:34.876">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:14:34.876" status="PASS" starttime="20170808 16:14:34.693"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:34.876">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:14:34.877">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:34.877" status="PASS" starttime="20170808 16:14:34.693"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:34.877">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:34.877" status="PASS" starttime="20170808 16:14:34.877"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:34.878">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:34.878" status="PASS" starttime="20170808 16:14:34.877"></status>
</kw>
<status endtime="20170808 16:14:34.878" status="PASS" starttime="20170808 16:14:34.689"></status>
</kw>
<status endtime="20170808 16:14:34.878" status="PASS" starttime="20170808 16:14:34.688"></status>
</kw>
<status endtime="20170808 16:14:34.878" status="PASS" starttime="20170808 16:14:34.688"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:34.879">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:14:34.879" status="PASS" starttime="20170808 16:14:34.879"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:34.881">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:14:34.881" status="PASS" starttime="20170808 16:14:34.880"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:34.882">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:14:34.882" status="PASS" starttime="20170808 16:14:34.882"></status>
</kw>
<status endtime="20170808 16:14:34.882" status="PASS" starttime="20170808 16:14:34.881"></status>
</kw>
<status endtime="20170808 16:14:34.882" status="PASS" starttime="20170808 16:14:34.880"></status>
</kw>
<status endtime="20170808 16:14:34.882" status="PASS" starttime="20170808 16:14:34.879"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:34.963">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:14:34.963">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:34.963" status="PASS" starttime="20170808 16:14:34.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:34.965">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:14:34.965" status="PASS" starttime="20170808 16:14:34.965"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:34.966">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:14:34.966" status="PASS" starttime="20170808 16:14:34.966"></status>
</kw>
<status endtime="20170808 16:14:34.967" status="PASS" starttime="20170808 16:14:34.965"></status>
</kw>
<status endtime="20170808 16:14:34.967" status="PASS" starttime="20170808 16:14:34.964"></status>
</kw>
<status endtime="20170808 16:14:34.967" status="PASS" starttime="20170808 16:14:34.963"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:14:34.967">Delete All Sessions</msg>
<status endtime="20170808 16:14:34.967" status="PASS" starttime="20170808 16:14:34.967"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:34.967">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:34.967" status="PASS" starttime="20170808 16:14:34.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:34.968">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:34.968" status="PASS" starttime="20170808 16:14:34.968"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:34.969">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:14:34.969">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:14:34.969">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:14:34.969" status="PASS" starttime="20170808 16:14:34.968"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:34.969">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:14:34.969" status="PASS" starttime="20170808 16:14:34.686"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:34.969">${power_state} = Off</msg>
<status endtime="20170808 16:14:34.970" status="PASS" starttime="20170808 16:14:34.686"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:14:34.970">On != Off</msg>
<status endtime="20170808 16:14:34.970" status="FAIL" starttime="20170808 16:14:34.970"></status>
</kw>
<status endtime="20170808 16:14:34.970" status="FAIL" starttime="20170808 16:14:34.686"></status>
</kw>
<status endtime="20170808 16:14:34.970" status="FAIL" starttime="20170808 16:14:34.685"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:44.975">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:14:44.976" status="PASS" starttime="20170808 16:14:44.975"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:44.976">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:14:44.976" status="PASS" starttime="20170808 16:14:44.976"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:44.977">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:14:44.977" status="PASS" starttime="20170808 16:14:44.977"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:44.978">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:14:44.978" status="PASS" starttime="20170808 16:14:44.977"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:45.154">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:14:45.154" status="PASS" starttime="20170808 16:14:44.978"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:45.155">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:14:45.155">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:45.155" status="PASS" starttime="20170808 16:14:44.978"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:45.155">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:45.155" status="PASS" starttime="20170808 16:14:45.155"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:45.156">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:45.156" status="PASS" starttime="20170808 16:14:45.156"></status>
</kw>
<status endtime="20170808 16:14:45.156" status="PASS" starttime="20170808 16:14:44.974"></status>
</kw>
<status endtime="20170808 16:14:45.156" status="PASS" starttime="20170808 16:14:44.974"></status>
</kw>
<status endtime="20170808 16:14:45.157" status="PASS" starttime="20170808 16:14:44.973"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:45.157">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:14:45.157" status="PASS" starttime="20170808 16:14:45.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:45.159">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:14:45.159" status="PASS" starttime="20170808 16:14:45.159"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:45.160">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:14:45.160" status="PASS" starttime="20170808 16:14:45.160"></status>
</kw>
<status endtime="20170808 16:14:45.160" status="PASS" starttime="20170808 16:14:45.159"></status>
</kw>
<status endtime="20170808 16:14:45.161" status="PASS" starttime="20170808 16:14:45.158"></status>
</kw>
<status endtime="20170808 16:14:45.161" status="PASS" starttime="20170808 16:14:45.157"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:45.223">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:14:45.223">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:45.223" status="PASS" starttime="20170808 16:14:45.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:45.225">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:14:45.225" status="PASS" starttime="20170808 16:14:45.224"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:45.226">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:14:45.226" status="PASS" starttime="20170808 16:14:45.226"></status>
</kw>
<status endtime="20170808 16:14:45.226" status="PASS" starttime="20170808 16:14:45.225"></status>
</kw>
<status endtime="20170808 16:14:45.226" status="PASS" starttime="20170808 16:14:45.224"></status>
</kw>
<status endtime="20170808 16:14:45.226" status="PASS" starttime="20170808 16:14:45.223"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:14:45.227">Delete All Sessions</msg>
<status endtime="20170808 16:14:45.227" status="PASS" starttime="20170808 16:14:45.226"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:45.227">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:45.227" status="PASS" starttime="20170808 16:14:44.973"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:45.227">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:45.228" status="PASS" starttime="20170808 16:14:45.227"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:45.228">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:14:45.228">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:14:45.228">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:14:45.228" status="PASS" starttime="20170808 16:14:45.228"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:45.229">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:14:45.229" status="PASS" starttime="20170808 16:14:44.972"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:45.229">${power_state} = Off</msg>
<status endtime="20170808 16:14:45.229" status="PASS" starttime="20170808 16:14:44.972"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:14:45.230">On != Off</msg>
<status endtime="20170808 16:14:45.230" status="FAIL" starttime="20170808 16:14:45.229"></status>
</kw>
<status endtime="20170808 16:14:45.230" status="FAIL" starttime="20170808 16:14:44.971"></status>
</kw>
<status endtime="20170808 16:14:45.230" status="FAIL" starttime="20170808 16:14:44.971"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:55.235">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:14:55.236" status="PASS" starttime="20170808 16:14:55.235"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:55.236">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:14:55.236" status="PASS" starttime="20170808 16:14:55.236"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:55.237">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:14:55.237" status="PASS" starttime="20170808 16:14:55.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:55.238">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:14:55.238" status="PASS" starttime="20170808 16:14:55.237"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:55.413">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:14:55.413" status="PASS" starttime="20170808 16:14:55.238"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:55.414">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:14:55.414">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:55.414" status="PASS" starttime="20170808 16:14:55.238"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:55.414">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:55.414" status="PASS" starttime="20170808 16:14:55.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:55.415">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:55.415" status="PASS" starttime="20170808 16:14:55.415"></status>
</kw>
<status endtime="20170808 16:14:55.415" status="PASS" starttime="20170808 16:14:55.234"></status>
</kw>
<status endtime="20170808 16:14:55.415" status="PASS" starttime="20170808 16:14:55.234"></status>
</kw>
<status endtime="20170808 16:14:55.415" status="PASS" starttime="20170808 16:14:55.233"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:55.416">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:14:55.416" status="PASS" starttime="20170808 16:14:55.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:55.418">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:14:55.418" status="PASS" starttime="20170808 16:14:55.417"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:55.419">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:14:55.419" status="PASS" starttime="20170808 16:14:55.419"></status>
</kw>
<status endtime="20170808 16:14:55.419" status="PASS" starttime="20170808 16:14:55.418"></status>
</kw>
<status endtime="20170808 16:14:55.420" status="PASS" starttime="20170808 16:14:55.417"></status>
</kw>
<status endtime="20170808 16:14:55.420" status="PASS" starttime="20170808 16:14:55.416"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:55.481">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:14:55.481">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:55.481" status="PASS" starttime="20170808 16:14:55.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:55.483">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:14:55.483" status="PASS" starttime="20170808 16:14:55.483"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:55.484">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:14:55.484" status="PASS" starttime="20170808 16:14:55.484"></status>
</kw>
<status endtime="20170808 16:14:55.485" status="PASS" starttime="20170808 16:14:55.483"></status>
</kw>
<status endtime="20170808 16:14:55.485" status="PASS" starttime="20170808 16:14:55.482"></status>
</kw>
<status endtime="20170808 16:14:55.485" status="PASS" starttime="20170808 16:14:55.482"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:14:55.485">Delete All Sessions</msg>
<status endtime="20170808 16:14:55.485" status="PASS" starttime="20170808 16:14:55.485"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:55.485">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:14:55.485" status="PASS" starttime="20170808 16:14:55.232"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:14:55.486">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:14:55.486" status="PASS" starttime="20170808 16:14:55.486"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:14:55.487">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:14:55.487">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:14:55.487">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:14:55.487" status="PASS" starttime="20170808 16:14:55.486"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:55.487">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:14:55.487" status="PASS" starttime="20170808 16:14:55.232"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:14:55.487">${power_state} = Off</msg>
<status endtime="20170808 16:14:55.487" status="PASS" starttime="20170808 16:14:55.231"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:14:55.488">On != Off</msg>
<status endtime="20170808 16:14:55.488" status="FAIL" starttime="20170808 16:14:55.488"></status>
</kw>
<status endtime="20170808 16:14:55.488" status="FAIL" starttime="20170808 16:14:55.231"></status>
</kw>
<status endtime="20170808 16:14:55.488" status="FAIL" starttime="20170808 16:14:55.230"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:05.494">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:15:05.494" status="PASS" starttime="20170808 16:15:05.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:05.495">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:15:05.495" status="PASS" starttime="20170808 16:15:05.494"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:05.495">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:15:05.495" status="PASS" starttime="20170808 16:15:05.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:05.496">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:15:05.496" status="PASS" starttime="20170808 16:15:05.495"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:05.699">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:15:05.699" status="PASS" starttime="20170808 16:15:05.497"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:05.699">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:15:05.699">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:05.699" status="PASS" starttime="20170808 16:15:05.496"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:05.700">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:05.700" status="PASS" starttime="20170808 16:15:05.700"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:05.701">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:05.701" status="PASS" starttime="20170808 16:15:05.700"></status>
</kw>
<status endtime="20170808 16:15:05.701" status="PASS" starttime="20170808 16:15:05.493"></status>
</kw>
<status endtime="20170808 16:15:05.701" status="PASS" starttime="20170808 16:15:05.492"></status>
</kw>
<status endtime="20170808 16:15:05.701" status="PASS" starttime="20170808 16:15:05.492"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:05.702">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:15:05.702" status="PASS" starttime="20170808 16:15:05.701"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:05.704">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:15:05.704" status="PASS" starttime="20170808 16:15:05.703"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:05.705">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:15:05.705" status="PASS" starttime="20170808 16:15:05.705"></status>
</kw>
<status endtime="20170808 16:15:05.705" status="PASS" starttime="20170808 16:15:05.704"></status>
</kw>
<status endtime="20170808 16:15:05.705" status="PASS" starttime="20170808 16:15:05.702"></status>
</kw>
<status endtime="20170808 16:15:05.706" status="PASS" starttime="20170808 16:15:05.702"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:05.768">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:15:05.768">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:05.768" status="PASS" starttime="20170808 16:15:05.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:05.770">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:15:05.770" status="PASS" starttime="20170808 16:15:05.769"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:05.770">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:15:05.771" status="PASS" starttime="20170808 16:15:05.770"></status>
</kw>
<status endtime="20170808 16:15:05.771" status="PASS" starttime="20170808 16:15:05.770"></status>
</kw>
<status endtime="20170808 16:15:05.771" status="PASS" starttime="20170808 16:15:05.769"></status>
</kw>
<status endtime="20170808 16:15:05.771" status="PASS" starttime="20170808 16:15:05.768"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:15:05.771">Delete All Sessions</msg>
<status endtime="20170808 16:15:05.771" status="PASS" starttime="20170808 16:15:05.771"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:05.772">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:05.772" status="PASS" starttime="20170808 16:15:05.491"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:05.772">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:05.772" status="PASS" starttime="20170808 16:15:05.772"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:05.773">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:15:05.773">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:15:05.773">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:15:05.773" status="PASS" starttime="20170808 16:15:05.773"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:05.773">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:15:05.773" status="PASS" starttime="20170808 16:15:05.490"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:05.774">${power_state} = Off</msg>
<status endtime="20170808 16:15:05.774" status="PASS" starttime="20170808 16:15:05.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:15:05.774">On != Off</msg>
<status endtime="20170808 16:15:05.774" status="FAIL" starttime="20170808 16:15:05.774"></status>
</kw>
<status endtime="20170808 16:15:05.775" status="FAIL" starttime="20170808 16:15:05.490"></status>
</kw>
<status endtime="20170808 16:15:05.775" status="FAIL" starttime="20170808 16:15:05.489"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:15.782">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:15:15.782" status="PASS" starttime="20170808 16:15:15.781"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:15.783">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:15:15.783" status="PASS" starttime="20170808 16:15:15.783"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:15.784">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:15:15.784" status="PASS" starttime="20170808 16:15:15.783"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:15.785">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:15:15.785" status="PASS" starttime="20170808 16:15:15.785"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:15.963">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:15:15.963" status="PASS" starttime="20170808 16:15:15.786"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:15.963">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:15:15.963">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:15.963" status="PASS" starttime="20170808 16:15:15.786"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:15.964">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:15.964" status="PASS" starttime="20170808 16:15:15.963"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:15.964">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:15.964" status="PASS" starttime="20170808 16:15:15.964"></status>
</kw>
<status endtime="20170808 16:15:15.964" status="PASS" starttime="20170808 16:15:15.780"></status>
</kw>
<status endtime="20170808 16:15:15.965" status="PASS" starttime="20170808 16:15:15.779"></status>
</kw>
<status endtime="20170808 16:15:15.965" status="PASS" starttime="20170808 16:15:15.779"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:15.965">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:15:15.965" status="PASS" starttime="20170808 16:15:15.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:15.967">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:15:15.967" status="PASS" starttime="20170808 16:15:15.967"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:15.968">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:15:15.968" status="PASS" starttime="20170808 16:15:15.968"></status>
</kw>
<status endtime="20170808 16:15:15.969" status="PASS" starttime="20170808 16:15:15.968"></status>
</kw>
<status endtime="20170808 16:15:15.969" status="PASS" starttime="20170808 16:15:15.966"></status>
</kw>
<status endtime="20170808 16:15:15.969" status="PASS" starttime="20170808 16:15:15.966"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:16.061">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:15:16.061">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:16.061" status="PASS" starttime="20170808 16:15:15.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:16.063">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:15:16.063" status="PASS" starttime="20170808 16:15:16.062"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:16.064">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:15:16.064" status="PASS" starttime="20170808 16:15:16.064"></status>
</kw>
<status endtime="20170808 16:15:16.064" status="PASS" starttime="20170808 16:15:16.063"></status>
</kw>
<status endtime="20170808 16:15:16.064" status="PASS" starttime="20170808 16:15:16.062"></status>
</kw>
<status endtime="20170808 16:15:16.064" status="PASS" starttime="20170808 16:15:16.061"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:15:16.065">Delete All Sessions</msg>
<status endtime="20170808 16:15:16.065" status="PASS" starttime="20170808 16:15:16.065"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:16.065">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:16.065" status="PASS" starttime="20170808 16:15:15.778"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:16.066">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:16.066" status="PASS" starttime="20170808 16:15:16.065"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:16.066">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:15:16.066">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:15:16.067">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:15:16.067" status="PASS" starttime="20170808 16:15:16.066"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:16.067">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:15:16.067" status="PASS" starttime="20170808 16:15:15.777"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:16.067">${power_state} = Off</msg>
<status endtime="20170808 16:15:16.067" status="PASS" starttime="20170808 16:15:15.776"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:15:16.068">On != Off</msg>
<status endtime="20170808 16:15:16.068" status="FAIL" starttime="20170808 16:15:16.067"></status>
</kw>
<status endtime="20170808 16:15:16.068" status="FAIL" starttime="20170808 16:15:15.776"></status>
</kw>
<status endtime="20170808 16:15:16.068" status="FAIL" starttime="20170808 16:15:15.775"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:26.073">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:15:26.073" status="PASS" starttime="20170808 16:15:26.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:26.074">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:15:26.074" status="PASS" starttime="20170808 16:15:26.074"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:26.075">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:15:26.075" status="PASS" starttime="20170808 16:15:26.074"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:26.075">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:15:26.075" status="PASS" starttime="20170808 16:15:26.075"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:26.269">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:15:26.269" status="PASS" starttime="20170808 16:15:26.076"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:26.269">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:15:26.269">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:26.269" status="PASS" starttime="20170808 16:15:26.076"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:26.270">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:26.270" status="PASS" starttime="20170808 16:15:26.270"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:26.271">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:26.271" status="PASS" starttime="20170808 16:15:26.270"></status>
</kw>
<status endtime="20170808 16:15:26.271" status="PASS" starttime="20170808 16:15:26.072"></status>
</kw>
<status endtime="20170808 16:15:26.271" status="PASS" starttime="20170808 16:15:26.072"></status>
</kw>
<status endtime="20170808 16:15:26.271" status="PASS" starttime="20170808 16:15:26.071"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:26.272">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:15:26.272" status="PASS" starttime="20170808 16:15:26.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:26.274">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:15:26.274" status="PASS" starttime="20170808 16:15:26.273"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:26.275">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:15:26.275" status="PASS" starttime="20170808 16:15:26.274"></status>
</kw>
<status endtime="20170808 16:15:26.275" status="PASS" starttime="20170808 16:15:26.274"></status>
</kw>
<status endtime="20170808 16:15:26.275" status="PASS" starttime="20170808 16:15:26.272"></status>
</kw>
<status endtime="20170808 16:15:26.275" status="PASS" starttime="20170808 16:15:26.272"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:26.361">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:15:26.361">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:26.361" status="PASS" starttime="20170808 16:15:26.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:26.363">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:15:26.363" status="PASS" starttime="20170808 16:15:26.363"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:26.364">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:15:26.364" status="PASS" starttime="20170808 16:15:26.364"></status>
</kw>
<status endtime="20170808 16:15:26.364" status="PASS" starttime="20170808 16:15:26.363"></status>
</kw>
<status endtime="20170808 16:15:26.365" status="PASS" starttime="20170808 16:15:26.362"></status>
</kw>
<status endtime="20170808 16:15:26.365" status="PASS" starttime="20170808 16:15:26.362"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:15:26.365">Delete All Sessions</msg>
<status endtime="20170808 16:15:26.365" status="PASS" starttime="20170808 16:15:26.365"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:26.365">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:26.365" status="PASS" starttime="20170808 16:15:26.070"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:26.366">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:26.366" status="PASS" starttime="20170808 16:15:26.366"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:26.366">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:15:26.367">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:15:26.367">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:15:26.367" status="PASS" starttime="20170808 16:15:26.366"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:26.367">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:15:26.367" status="PASS" starttime="20170808 16:15:26.070"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:26.367">${power_state} = Off</msg>
<status endtime="20170808 16:15:26.367" status="PASS" starttime="20170808 16:15:26.070"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:15:26.368">On != Off</msg>
<status endtime="20170808 16:15:26.368" status="FAIL" starttime="20170808 16:15:26.368"></status>
</kw>
<status endtime="20170808 16:15:26.368" status="FAIL" starttime="20170808 16:15:26.069"></status>
</kw>
<status endtime="20170808 16:15:26.368" status="FAIL" starttime="20170808 16:15:26.069"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:36.373">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:15:36.374" status="PASS" starttime="20170808 16:15:36.373"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:36.374">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:15:36.374" status="PASS" starttime="20170808 16:15:36.374"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:36.375">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:15:36.375" status="PASS" starttime="20170808 16:15:36.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:36.376">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:15:36.376" status="PASS" starttime="20170808 16:15:36.375"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:36.555">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:15:36.555" status="PASS" starttime="20170808 16:15:36.376"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:36.555">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:15:36.555">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:36.556" status="PASS" starttime="20170808 16:15:36.376"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:36.556">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:36.556" status="PASS" starttime="20170808 16:15:36.556"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:36.557">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:36.557" status="PASS" starttime="20170808 16:15:36.557"></status>
</kw>
<status endtime="20170808 16:15:36.557" status="PASS" starttime="20170808 16:15:36.372"></status>
</kw>
<status endtime="20170808 16:15:36.557" status="PASS" starttime="20170808 16:15:36.372"></status>
</kw>
<status endtime="20170808 16:15:36.557" status="PASS" starttime="20170808 16:15:36.371"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:36.558">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:15:36.558" status="PASS" starttime="20170808 16:15:36.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:36.560">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:15:36.560" status="PASS" starttime="20170808 16:15:36.559"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:36.561">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:15:36.561" status="PASS" starttime="20170808 16:15:36.561"></status>
</kw>
<status endtime="20170808 16:15:36.561" status="PASS" starttime="20170808 16:15:36.560"></status>
</kw>
<status endtime="20170808 16:15:36.561" status="PASS" starttime="20170808 16:15:36.559"></status>
</kw>
<status endtime="20170808 16:15:36.561" status="PASS" starttime="20170808 16:15:36.558"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:36.624">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:15:36.624">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:36.624" status="PASS" starttime="20170808 16:15:36.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:36.626">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:15:36.626" status="PASS" starttime="20170808 16:15:36.625"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:36.627">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:15:36.627" status="PASS" starttime="20170808 16:15:36.626"></status>
</kw>
<status endtime="20170808 16:15:36.627" status="PASS" starttime="20170808 16:15:36.626"></status>
</kw>
<status endtime="20170808 16:15:36.627" status="PASS" starttime="20170808 16:15:36.625"></status>
</kw>
<status endtime="20170808 16:15:36.627" status="PASS" starttime="20170808 16:15:36.624"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:15:36.628">Delete All Sessions</msg>
<status endtime="20170808 16:15:36.628" status="PASS" starttime="20170808 16:15:36.627"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:36.628">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:36.628" status="PASS" starttime="20170808 16:15:36.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:36.628">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:36.629" status="PASS" starttime="20170808 16:15:36.628"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:36.629">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:15:36.629">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:15:36.629">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:15:36.629" status="PASS" starttime="20170808 16:15:36.629"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:36.630">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:15:36.630" status="PASS" starttime="20170808 16:15:36.370"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:36.630">${power_state} = Off</msg>
<status endtime="20170808 16:15:36.630" status="PASS" starttime="20170808 16:15:36.370"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:15:36.631">On != Off</msg>
<status endtime="20170808 16:15:36.631" status="FAIL" starttime="20170808 16:15:36.630"></status>
</kw>
<status endtime="20170808 16:15:36.631" status="FAIL" starttime="20170808 16:15:36.369"></status>
</kw>
<status endtime="20170808 16:15:36.631" status="FAIL" starttime="20170808 16:15:36.369"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:46.636">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:15:46.636" status="PASS" starttime="20170808 16:15:46.636"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:46.637">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:15:46.637" status="PASS" starttime="20170808 16:15:46.637"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:46.637">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:15:46.637" status="PASS" starttime="20170808 16:15:46.637"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:46.638">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:15:46.638" status="PASS" starttime="20170808 16:15:46.638"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:46.819">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:15:46.819" status="PASS" starttime="20170808 16:15:46.639"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:46.819">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:15:46.820">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:46.820" status="PASS" starttime="20170808 16:15:46.638"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:46.820">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:46.820" status="PASS" starttime="20170808 16:15:46.820"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:46.821">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:46.821" status="PASS" starttime="20170808 16:15:46.821"></status>
</kw>
<status endtime="20170808 16:15:46.821" status="PASS" starttime="20170808 16:15:46.635"></status>
</kw>
<status endtime="20170808 16:15:46.821" status="PASS" starttime="20170808 16:15:46.635"></status>
</kw>
<status endtime="20170808 16:15:46.821" status="PASS" starttime="20170808 16:15:46.634"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:46.822">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:15:46.822" status="PASS" starttime="20170808 16:15:46.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:46.824">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:15:46.824" status="PASS" starttime="20170808 16:15:46.823"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:46.825">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:15:46.825" status="PASS" starttime="20170808 16:15:46.825"></status>
</kw>
<status endtime="20170808 16:15:46.825" status="PASS" starttime="20170808 16:15:46.824"></status>
</kw>
<status endtime="20170808 16:15:46.825" status="PASS" starttime="20170808 16:15:46.823"></status>
</kw>
<status endtime="20170808 16:15:46.825" status="PASS" starttime="20170808 16:15:46.822"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:46.903">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:15:46.904">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:46.904" status="PASS" starttime="20170808 16:15:46.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:46.905">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:15:46.905" status="PASS" starttime="20170808 16:15:46.905"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:46.906">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:15:46.906" status="PASS" starttime="20170808 16:15:46.906"></status>
</kw>
<status endtime="20170808 16:15:46.906" status="PASS" starttime="20170808 16:15:46.906"></status>
</kw>
<status endtime="20170808 16:15:46.907" status="PASS" starttime="20170808 16:15:46.904"></status>
</kw>
<status endtime="20170808 16:15:46.907" status="PASS" starttime="20170808 16:15:46.904"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:15:46.907">Delete All Sessions</msg>
<status endtime="20170808 16:15:46.907" status="PASS" starttime="20170808 16:15:46.907"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:46.907">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:46.907" status="PASS" starttime="20170808 16:15:46.633"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:46.908">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:46.908" status="PASS" starttime="20170808 16:15:46.908"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:46.908">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:15:46.909">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:15:46.909">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:15:46.909" status="PASS" starttime="20170808 16:15:46.908"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:46.909">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:15:46.909" status="PASS" starttime="20170808 16:15:46.633"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:46.909">${power_state} = Off</msg>
<status endtime="20170808 16:15:46.909" status="PASS" starttime="20170808 16:15:46.632"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:15:46.910">On != Off</msg>
<status endtime="20170808 16:15:46.910" status="FAIL" starttime="20170808 16:15:46.910"></status>
</kw>
<status endtime="20170808 16:15:46.910" status="FAIL" starttime="20170808 16:15:46.632"></status>
</kw>
<status endtime="20170808 16:15:46.910" status="FAIL" starttime="20170808 16:15:46.631"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:56.915">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:15:56.916" status="PASS" starttime="20170808 16:15:56.915"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:56.916">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:15:56.916" status="PASS" starttime="20170808 16:15:56.916"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:56.917">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:15:56.917" status="PASS" starttime="20170808 16:15:56.917"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:56.918">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:15:56.918" status="PASS" starttime="20170808 16:15:56.917"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:57.099">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:15:57.099" status="PASS" starttime="20170808 16:15:56.918"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:57.099">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:15:57.100">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:57.100" status="PASS" starttime="20170808 16:15:56.918"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:57.100">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:57.100" status="PASS" starttime="20170808 16:15:57.100"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:57.101">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:57.101" status="PASS" starttime="20170808 16:15:57.101"></status>
</kw>
<status endtime="20170808 16:15:57.101" status="PASS" starttime="20170808 16:15:56.914"></status>
</kw>
<status endtime="20170808 16:15:57.101" status="PASS" starttime="20170808 16:15:56.914"></status>
</kw>
<status endtime="20170808 16:15:57.101" status="PASS" starttime="20170808 16:15:56.913"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:57.102">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:15:57.102" status="PASS" starttime="20170808 16:15:57.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:57.104">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:15:57.104" status="PASS" starttime="20170808 16:15:57.103"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:57.105">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:15:57.105" status="PASS" starttime="20170808 16:15:57.105"></status>
</kw>
<status endtime="20170808 16:15:57.105" status="PASS" starttime="20170808 16:15:57.104"></status>
</kw>
<status endtime="20170808 16:15:57.105" status="PASS" starttime="20170808 16:15:57.103"></status>
</kw>
<status endtime="20170808 16:15:57.105" status="PASS" starttime="20170808 16:15:57.102"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:57.168">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:15:57.168">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:57.168" status="PASS" starttime="20170808 16:15:57.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:57.169">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:15:57.170" status="PASS" starttime="20170808 16:15:57.169"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:57.171">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:15:57.171" status="PASS" starttime="20170808 16:15:57.170"></status>
</kw>
<status endtime="20170808 16:15:57.171" status="PASS" starttime="20170808 16:15:57.170"></status>
</kw>
<status endtime="20170808 16:15:57.171" status="PASS" starttime="20170808 16:15:57.168"></status>
</kw>
<status endtime="20170808 16:15:57.171" status="PASS" starttime="20170808 16:15:57.168"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:15:57.172">Delete All Sessions</msg>
<status endtime="20170808 16:15:57.172" status="PASS" starttime="20170808 16:15:57.172"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:57.172">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:15:57.172" status="PASS" starttime="20170808 16:15:56.912"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:15:57.173">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:15:57.173" status="PASS" starttime="20170808 16:15:57.172"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:15:57.173">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:15:57.173">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:15:57.173">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:15:57.174" status="PASS" starttime="20170808 16:15:57.173"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:57.174">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:15:57.174" status="PASS" starttime="20170808 16:15:56.912"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:15:57.174">${power_state} = Off</msg>
<status endtime="20170808 16:15:57.174" status="PASS" starttime="20170808 16:15:56.912"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:15:57.175">On != Off</msg>
<status endtime="20170808 16:15:57.175" status="FAIL" starttime="20170808 16:15:57.174"></status>
</kw>
<status endtime="20170808 16:15:57.175" status="FAIL" starttime="20170808 16:15:56.911"></status>
</kw>
<status endtime="20170808 16:15:57.175" status="FAIL" starttime="20170808 16:15:56.911"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:07.180">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:16:07.181" status="PASS" starttime="20170808 16:16:07.180"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:07.181">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:16:07.181" status="PASS" starttime="20170808 16:16:07.181"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:07.182">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:16:07.182" status="PASS" starttime="20170808 16:16:07.181"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:07.182">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:16:07.183" status="PASS" starttime="20170808 16:16:07.182"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:07.380">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:16:07.380" status="PASS" starttime="20170808 16:16:07.183"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:07.380">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:16:07.380">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:07.380" status="PASS" starttime="20170808 16:16:07.183"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:07.381">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:07.381" status="PASS" starttime="20170808 16:16:07.381"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:07.382">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:07.382" status="PASS" starttime="20170808 16:16:07.381"></status>
</kw>
<status endtime="20170808 16:16:07.382" status="PASS" starttime="20170808 16:16:07.179"></status>
</kw>
<status endtime="20170808 16:16:07.382" status="PASS" starttime="20170808 16:16:07.179"></status>
</kw>
<status endtime="20170808 16:16:07.382" status="PASS" starttime="20170808 16:16:07.178"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:07.383">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:16:07.383" status="PASS" starttime="20170808 16:16:07.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:07.385">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:16:07.385" status="PASS" starttime="20170808 16:16:07.384"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:07.387">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:16:07.387" status="PASS" starttime="20170808 16:16:07.386"></status>
</kw>
<status endtime="20170808 16:16:07.387" status="PASS" starttime="20170808 16:16:07.386"></status>
</kw>
<status endtime="20170808 16:16:07.387" status="PASS" starttime="20170808 16:16:07.384"></status>
</kw>
<status endtime="20170808 16:16:07.387" status="PASS" starttime="20170808 16:16:07.383"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:07.450">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:16:07.450">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:07.451" status="PASS" starttime="20170808 16:16:07.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:07.452">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:16:07.452" status="PASS" starttime="20170808 16:16:07.452"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:07.454">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:16:07.454" status="PASS" starttime="20170808 16:16:07.453"></status>
</kw>
<status endtime="20170808 16:16:07.454" status="PASS" starttime="20170808 16:16:07.453"></status>
</kw>
<status endtime="20170808 16:16:07.454" status="PASS" starttime="20170808 16:16:07.451"></status>
</kw>
<status endtime="20170808 16:16:07.454" status="PASS" starttime="20170808 16:16:07.451"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:16:07.454">Delete All Sessions</msg>
<status endtime="20170808 16:16:07.455" status="PASS" starttime="20170808 16:16:07.454"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:07.455">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:07.455" status="PASS" starttime="20170808 16:16:07.178"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:07.455">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:07.455" status="PASS" starttime="20170808 16:16:07.455"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:07.456">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:16:07.456">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:16:07.456">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:16:07.456" status="PASS" starttime="20170808 16:16:07.456"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:07.456">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:16:07.456" status="PASS" starttime="20170808 16:16:07.177"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:07.457">${power_state} = Off</msg>
<status endtime="20170808 16:16:07.457" status="PASS" starttime="20170808 16:16:07.177"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:16:07.457">On != Off</msg>
<status endtime="20170808 16:16:07.457" status="FAIL" starttime="20170808 16:16:07.457"></status>
</kw>
<status endtime="20170808 16:16:07.458" status="FAIL" starttime="20170808 16:16:07.176"></status>
</kw>
<status endtime="20170808 16:16:07.458" status="FAIL" starttime="20170808 16:16:07.176"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:17.464">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:16:17.464" status="PASS" starttime="20170808 16:16:17.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:17.465">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:16:17.465" status="PASS" starttime="20170808 16:16:17.464"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:17.465">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:16:17.465" status="PASS" starttime="20170808 16:16:17.465"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:17.466">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:16:17.466" status="PASS" starttime="20170808 16:16:17.465"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:17.689">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:16:17.689" status="PASS" starttime="20170808 16:16:17.467"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:17.690">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:16:17.690">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:17.690" status="PASS" starttime="20170808 16:16:17.466"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:17.690">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:17.690" status="PASS" starttime="20170808 16:16:17.690"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:17.691">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:17.691" status="PASS" starttime="20170808 16:16:17.691"></status>
</kw>
<status endtime="20170808 16:16:17.691" status="PASS" starttime="20170808 16:16:17.462"></status>
</kw>
<status endtime="20170808 16:16:17.691" status="PASS" starttime="20170808 16:16:17.461"></status>
</kw>
<status endtime="20170808 16:16:17.691" status="PASS" starttime="20170808 16:16:17.461"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:17.692">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:16:17.692" status="PASS" starttime="20170808 16:16:17.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:17.694">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:16:17.694" status="PASS" starttime="20170808 16:16:17.693"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:17.695">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:16:17.695" status="PASS" starttime="20170808 16:16:17.695"></status>
</kw>
<status endtime="20170808 16:16:17.695" status="PASS" starttime="20170808 16:16:17.694"></status>
</kw>
<status endtime="20170808 16:16:17.695" status="PASS" starttime="20170808 16:16:17.693"></status>
</kw>
<status endtime="20170808 16:16:17.695" status="PASS" starttime="20170808 16:16:17.692"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:17.764">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:16:17.764">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:17.764" status="PASS" starttime="20170808 16:16:17.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:17.766">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:16:17.766" status="PASS" starttime="20170808 16:16:17.765"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:17.767">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:16:17.767" status="PASS" starttime="20170808 16:16:17.766"></status>
</kw>
<status endtime="20170808 16:16:17.767" status="PASS" starttime="20170808 16:16:17.766"></status>
</kw>
<status endtime="20170808 16:16:17.767" status="PASS" starttime="20170808 16:16:17.765"></status>
</kw>
<status endtime="20170808 16:16:17.767" status="PASS" starttime="20170808 16:16:17.764"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:16:17.768">Delete All Sessions</msg>
<status endtime="20170808 16:16:17.768" status="PASS" starttime="20170808 16:16:17.768"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:17.768">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:17.768" status="PASS" starttime="20170808 16:16:17.460"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:17.769">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:17.769" status="PASS" starttime="20170808 16:16:17.768"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:17.769">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:16:17.769">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:16:17.769">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:16:17.769" status="PASS" starttime="20170808 16:16:17.769"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:17.770">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:16:17.770" status="PASS" starttime="20170808 16:16:17.459"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:17.770">${power_state} = Off</msg>
<status endtime="20170808 16:16:17.770" status="PASS" starttime="20170808 16:16:17.459"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:16:17.771">On != Off</msg>
<status endtime="20170808 16:16:17.771" status="FAIL" starttime="20170808 16:16:17.770"></status>
</kw>
<status endtime="20170808 16:16:17.771" status="FAIL" starttime="20170808 16:16:17.459"></status>
</kw>
<status endtime="20170808 16:16:17.771" status="FAIL" starttime="20170808 16:16:17.458"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:27.777">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:16:27.778" status="PASS" starttime="20170808 16:16:27.777"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:27.778">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:16:27.778" status="PASS" starttime="20170808 16:16:27.778"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:27.779">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:16:27.779" status="PASS" starttime="20170808 16:16:27.779"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:27.780">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:16:27.780" status="PASS" starttime="20170808 16:16:27.779"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:27.996">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:16:27.996" status="PASS" starttime="20170808 16:16:27.780"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:27.996">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:16:27.996">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:27.996" status="PASS" starttime="20170808 16:16:27.780"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:27.997">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:27.997" status="PASS" starttime="20170808 16:16:27.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:27.998">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:27.998" status="PASS" starttime="20170808 16:16:27.997"></status>
</kw>
<status endtime="20170808 16:16:27.998" status="PASS" starttime="20170808 16:16:27.776"></status>
</kw>
<status endtime="20170808 16:16:27.998" status="PASS" starttime="20170808 16:16:27.776"></status>
</kw>
<status endtime="20170808 16:16:27.998" status="PASS" starttime="20170808 16:16:27.775"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:27.999">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:16:27.999" status="PASS" starttime="20170808 16:16:27.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:28.001">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:16:28.001" status="PASS" starttime="20170808 16:16:28.000"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:28.002">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:16:28.002" status="PASS" starttime="20170808 16:16:28.002"></status>
</kw>
<status endtime="20170808 16:16:28.002" status="PASS" starttime="20170808 16:16:28.001"></status>
</kw>
<status endtime="20170808 16:16:28.002" status="PASS" starttime="20170808 16:16:27.999"></status>
</kw>
<status endtime="20170808 16:16:28.002" status="PASS" starttime="20170808 16:16:27.999"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:28.079">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:16:28.079">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:28.079" status="PASS" starttime="20170808 16:16:28.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:28.081">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:16:28.081" status="PASS" starttime="20170808 16:16:28.081"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:28.083">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:16:28.083" status="PASS" starttime="20170808 16:16:28.082"></status>
</kw>
<status endtime="20170808 16:16:28.083" status="PASS" starttime="20170808 16:16:28.081"></status>
</kw>
<status endtime="20170808 16:16:28.083" status="PASS" starttime="20170808 16:16:28.080"></status>
</kw>
<status endtime="20170808 16:16:28.083" status="PASS" starttime="20170808 16:16:28.080"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:16:28.083">Delete All Sessions</msg>
<status endtime="20170808 16:16:28.084" status="PASS" starttime="20170808 16:16:28.083"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:28.084">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:28.084" status="PASS" starttime="20170808 16:16:27.775"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:28.084">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:28.084" status="PASS" starttime="20170808 16:16:28.084"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:28.085">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:16:28.085">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:16:28.085">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:16:28.085" status="PASS" starttime="20170808 16:16:28.085"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:28.085">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:16:28.086" status="PASS" starttime="20170808 16:16:27.774"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:28.086">${power_state} = Off</msg>
<status endtime="20170808 16:16:28.086" status="PASS" starttime="20170808 16:16:27.774"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:16:28.086">On != Off</msg>
<status endtime="20170808 16:16:28.087" status="FAIL" starttime="20170808 16:16:28.086"></status>
</kw>
<status endtime="20170808 16:16:28.087" status="FAIL" starttime="20170808 16:16:27.773"></status>
</kw>
<status endtime="20170808 16:16:28.087" status="FAIL" starttime="20170808 16:16:27.773"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:38.093">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:16:38.093" status="PASS" starttime="20170808 16:16:38.092"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:38.094">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:16:38.094" status="PASS" starttime="20170808 16:16:38.094"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:38.095">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:16:38.095" status="PASS" starttime="20170808 16:16:38.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:38.095">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:16:38.095" status="PASS" starttime="20170808 16:16:38.095"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:38.312">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:16:38.312" status="PASS" starttime="20170808 16:16:38.096"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:38.312">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:16:38.312">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:38.312" status="PASS" starttime="20170808 16:16:38.095"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:38.313">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:38.313" status="PASS" starttime="20170808 16:16:38.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:38.314">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:38.314" status="PASS" starttime="20170808 16:16:38.313"></status>
</kw>
<status endtime="20170808 16:16:38.314" status="PASS" starttime="20170808 16:16:38.091"></status>
</kw>
<status endtime="20170808 16:16:38.314" status="PASS" starttime="20170808 16:16:38.091"></status>
</kw>
<status endtime="20170808 16:16:38.314" status="PASS" starttime="20170808 16:16:38.090"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:38.315">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:16:38.315" status="PASS" starttime="20170808 16:16:38.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:38.317">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:16:38.317" status="PASS" starttime="20170808 16:16:38.316"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:38.318">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:16:38.318" status="PASS" starttime="20170808 16:16:38.317"></status>
</kw>
<status endtime="20170808 16:16:38.318" status="PASS" starttime="20170808 16:16:38.317"></status>
</kw>
<status endtime="20170808 16:16:38.318" status="PASS" starttime="20170808 16:16:38.315"></status>
</kw>
<status endtime="20170808 16:16:38.318" status="PASS" starttime="20170808 16:16:38.315"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:38.381">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:16:38.381">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:38.381" status="PASS" starttime="20170808 16:16:38.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:38.383">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:16:38.383" status="PASS" starttime="20170808 16:16:38.382"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:38.384">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:16:38.384" status="PASS" starttime="20170808 16:16:38.383"></status>
</kw>
<status endtime="20170808 16:16:38.384" status="PASS" starttime="20170808 16:16:38.383"></status>
</kw>
<status endtime="20170808 16:16:38.384" status="PASS" starttime="20170808 16:16:38.382"></status>
</kw>
<status endtime="20170808 16:16:38.384" status="PASS" starttime="20170808 16:16:38.381"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:16:38.385">Delete All Sessions</msg>
<status endtime="20170808 16:16:38.385" status="PASS" starttime="20170808 16:16:38.385"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:38.385">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:38.385" status="PASS" starttime="20170808 16:16:38.090"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:38.386">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:38.386" status="PASS" starttime="20170808 16:16:38.385"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:38.386">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:16:38.386">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:16:38.387">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:16:38.387" status="PASS" starttime="20170808 16:16:38.386"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:38.387">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:16:38.387" status="PASS" starttime="20170808 16:16:38.089"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:38.387">${power_state} = Off</msg>
<status endtime="20170808 16:16:38.387" status="PASS" starttime="20170808 16:16:38.089"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:16:38.388">On != Off</msg>
<status endtime="20170808 16:16:38.388" status="FAIL" starttime="20170808 16:16:38.387"></status>
</kw>
<status endtime="20170808 16:16:38.388" status="FAIL" starttime="20170808 16:16:38.088"></status>
</kw>
<status endtime="20170808 16:16:38.388" status="FAIL" starttime="20170808 16:16:38.088"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:48.394">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:16:48.394" status="PASS" starttime="20170808 16:16:48.393"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:48.395">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:16:48.395" status="PASS" starttime="20170808 16:16:48.394"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:48.395">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:16:48.395" status="PASS" starttime="20170808 16:16:48.395"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:48.396">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:16:48.396" status="PASS" starttime="20170808 16:16:48.396"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:48.576">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:16:48.577" status="PASS" starttime="20170808 16:16:48.397"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:48.577">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:16:48.577">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:48.577" status="PASS" starttime="20170808 16:16:48.396"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:48.578">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:48.578" status="PASS" starttime="20170808 16:16:48.577"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:48.578">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:48.578" status="PASS" starttime="20170808 16:16:48.578"></status>
</kw>
<status endtime="20170808 16:16:48.578" status="PASS" starttime="20170808 16:16:48.393"></status>
</kw>
<status endtime="20170808 16:16:48.579" status="PASS" starttime="20170808 16:16:48.392"></status>
</kw>
<status endtime="20170808 16:16:48.579" status="PASS" starttime="20170808 16:16:48.391"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:48.579">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:16:48.579" status="PASS" starttime="20170808 16:16:48.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:48.581">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:16:48.581" status="PASS" starttime="20170808 16:16:48.581"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:48.582">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:16:48.582" status="PASS" starttime="20170808 16:16:48.582"></status>
</kw>
<status endtime="20170808 16:16:48.582" status="PASS" starttime="20170808 16:16:48.582"></status>
</kw>
<status endtime="20170808 16:16:48.583" status="PASS" starttime="20170808 16:16:48.580"></status>
</kw>
<status endtime="20170808 16:16:48.583" status="PASS" starttime="20170808 16:16:48.580"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:48.650">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:16:48.650">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:48.650" status="PASS" starttime="20170808 16:16:48.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:48.652">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:16:48.652" status="PASS" starttime="20170808 16:16:48.652"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:48.653">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:16:48.653" status="PASS" starttime="20170808 16:16:48.653"></status>
</kw>
<status endtime="20170808 16:16:48.653" status="PASS" starttime="20170808 16:16:48.652"></status>
</kw>
<status endtime="20170808 16:16:48.653" status="PASS" starttime="20170808 16:16:48.651"></status>
</kw>
<status endtime="20170808 16:16:48.653" status="PASS" starttime="20170808 16:16:48.651"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:16:48.654">Delete All Sessions</msg>
<status endtime="20170808 16:16:48.654" status="PASS" starttime="20170808 16:16:48.654"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:48.654">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:48.654" status="PASS" starttime="20170808 16:16:48.391"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:48.655">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:48.655" status="PASS" starttime="20170808 16:16:48.654"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:48.655">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:16:48.656">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:16:48.656">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:16:48.656" status="PASS" starttime="20170808 16:16:48.655"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:48.656">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:16:48.656" status="PASS" starttime="20170808 16:16:48.390"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:48.656">${power_state} = Off</msg>
<status endtime="20170808 16:16:48.656" status="PASS" starttime="20170808 16:16:48.390"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:16:48.657">On != Off</msg>
<status endtime="20170808 16:16:48.657" status="FAIL" starttime="20170808 16:16:48.657"></status>
</kw>
<status endtime="20170808 16:16:48.657" status="FAIL" starttime="20170808 16:16:48.389"></status>
</kw>
<status endtime="20170808 16:16:48.657" status="FAIL" starttime="20170808 16:16:48.389"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:58.663">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:16:58.663" status="PASS" starttime="20170808 16:16:58.662"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:58.664">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:16:58.664" status="PASS" starttime="20170808 16:16:58.663"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:58.665">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:16:58.665" status="PASS" starttime="20170808 16:16:58.664"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:58.665">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:16:58.665" status="PASS" starttime="20170808 16:16:58.665"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:58.850">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:16:58.850" status="PASS" starttime="20170808 16:16:58.666"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:58.850">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:16:58.850">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:58.850" status="PASS" starttime="20170808 16:16:58.666"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:58.851">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:58.851" status="PASS" starttime="20170808 16:16:58.851"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:58.852">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:58.852" status="PASS" starttime="20170808 16:16:58.851"></status>
</kw>
<status endtime="20170808 16:16:58.852" status="PASS" starttime="20170808 16:16:58.661"></status>
</kw>
<status endtime="20170808 16:16:58.852" status="PASS" starttime="20170808 16:16:58.661"></status>
</kw>
<status endtime="20170808 16:16:58.852" status="PASS" starttime="20170808 16:16:58.660"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:58.853">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:16:58.853" status="PASS" starttime="20170808 16:16:58.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:58.855">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:16:58.855" status="PASS" starttime="20170808 16:16:58.854"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:58.856">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:16:58.856" status="PASS" starttime="20170808 16:16:58.856"></status>
</kw>
<status endtime="20170808 16:16:58.856" status="PASS" starttime="20170808 16:16:58.855"></status>
</kw>
<status endtime="20170808 16:16:58.856" status="PASS" starttime="20170808 16:16:58.853"></status>
</kw>
<status endtime="20170808 16:16:58.857" status="PASS" starttime="20170808 16:16:58.853"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:58.920">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:16:58.920">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:58.920" status="PASS" starttime="20170808 16:16:58.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:58.922">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:16:58.922" status="PASS" starttime="20170808 16:16:58.921"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:58.923">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:16:58.923" status="PASS" starttime="20170808 16:16:58.922"></status>
</kw>
<status endtime="20170808 16:16:58.923" status="PASS" starttime="20170808 16:16:58.922"></status>
</kw>
<status endtime="20170808 16:16:58.923" status="PASS" starttime="20170808 16:16:58.921"></status>
</kw>
<status endtime="20170808 16:16:58.923" status="PASS" starttime="20170808 16:16:58.920"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:16:58.924">Delete All Sessions</msg>
<status endtime="20170808 16:16:58.924" status="PASS" starttime="20170808 16:16:58.924"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:58.924">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:16:58.924" status="PASS" starttime="20170808 16:16:58.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:16:58.925">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:16:58.925" status="PASS" starttime="20170808 16:16:58.925"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:16:58.926">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:16:58.926">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:16:58.926">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:16:58.926" status="PASS" starttime="20170808 16:16:58.925"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:58.926">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:16:58.926" status="PASS" starttime="20170808 16:16:58.659"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:16:58.927">${power_state} = Off</msg>
<status endtime="20170808 16:16:58.927" status="PASS" starttime="20170808 16:16:58.659"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:16:58.928">On != Off</msg>
<status endtime="20170808 16:16:58.928" status="FAIL" starttime="20170808 16:16:58.927"></status>
</kw>
<status endtime="20170808 16:16:58.928" status="FAIL" starttime="20170808 16:16:58.658"></status>
</kw>
<status endtime="20170808 16:16:58.928" status="FAIL" starttime="20170808 16:16:58.658"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:08.934">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:17:08.934" status="PASS" starttime="20170808 16:17:08.933"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:08.935">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:17:08.935" status="PASS" starttime="20170808 16:17:08.935"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:08.936">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:17:08.936" status="PASS" starttime="20170808 16:17:08.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:08.936">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:17:08.936" status="PASS" starttime="20170808 16:17:08.936"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:09.147">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:17:09.147" status="PASS" starttime="20170808 16:17:08.937"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:09.147">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:17:09.147">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:17:09.147" status="PASS" starttime="20170808 16:17:08.937"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:09.148">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:17:09.148" status="PASS" starttime="20170808 16:17:09.147"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:09.149">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:17:09.149" status="PASS" starttime="20170808 16:17:09.148"></status>
</kw>
<status endtime="20170808 16:17:09.149" status="PASS" starttime="20170808 16:17:08.933"></status>
</kw>
<status endtime="20170808 16:17:09.149" status="PASS" starttime="20170808 16:17:08.932"></status>
</kw>
<status endtime="20170808 16:17:09.149" status="PASS" starttime="20170808 16:17:08.932"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:09.150">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:17:09.150" status="PASS" starttime="20170808 16:17:09.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:09.152">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:17:09.152" status="PASS" starttime="20170808 16:17:09.151"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:09.153">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:17:09.153" status="PASS" starttime="20170808 16:17:09.152"></status>
</kw>
<status endtime="20170808 16:17:09.153" status="PASS" starttime="20170808 16:17:09.152"></status>
</kw>
<status endtime="20170808 16:17:09.153" status="PASS" starttime="20170808 16:17:09.150"></status>
</kw>
<status endtime="20170808 16:17:09.153" status="PASS" starttime="20170808 16:17:09.150"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:09.340">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:17:09.340">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:17:09.340" status="PASS" starttime="20170808 16:17:09.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:09.342">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:17:09.342" status="PASS" starttime="20170808 16:17:09.342"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:09.343">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:17:09.344" status="PASS" starttime="20170808 16:17:09.343"></status>
</kw>
<status endtime="20170808 16:17:09.344" status="PASS" starttime="20170808 16:17:09.342"></status>
</kw>
<status endtime="20170808 16:17:09.344" status="PASS" starttime="20170808 16:17:09.341"></status>
</kw>
<status endtime="20170808 16:17:09.344" status="PASS" starttime="20170808 16:17:09.341"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:17:09.344">Delete All Sessions</msg>
<status endtime="20170808 16:17:09.345" status="PASS" starttime="20170808 16:17:09.344"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:09.345">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:17:09.345" status="PASS" starttime="20170808 16:17:08.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:09.345">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:17:09.345" status="PASS" starttime="20170808 16:17:09.345"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:09.346">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:17:09.346">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:17:09.346">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:17:09.346" status="PASS" starttime="20170808 16:17:09.346"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:09.346">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:17:09.346" status="PASS" starttime="20170808 16:17:08.930"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:09.347">${power_state} = Off</msg>
<status endtime="20170808 16:17:09.347" status="PASS" starttime="20170808 16:17:08.930"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:17:09.347">On != Off</msg>
<status endtime="20170808 16:17:09.347" status="FAIL" starttime="20170808 16:17:09.347"></status>
</kw>
<status endtime="20170808 16:17:09.348" status="FAIL" starttime="20170808 16:17:08.930"></status>
</kw>
<status endtime="20170808 16:17:09.348" status="FAIL" starttime="20170808 16:17:08.929"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:19.354">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:17:19.354" status="PASS" starttime="20170808 16:17:19.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:19.355">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:17:19.355" status="PASS" starttime="20170808 16:17:19.354"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:19.355">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:17:19.355" status="PASS" starttime="20170808 16:17:19.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:19.356">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:17:19.356" status="PASS" starttime="20170808 16:17:19.356"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:19.541">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:17:19.541" status="PASS" starttime="20170808 16:17:19.357"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:19.541">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:17:19.541">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:17:19.541" status="PASS" starttime="20170808 16:17:19.356"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:19.542">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:17:19.542" status="PASS" starttime="20170808 16:17:19.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:19.542">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:17:19.543" status="PASS" starttime="20170808 16:17:19.542"></status>
</kw>
<status endtime="20170808 16:17:19.543" status="PASS" starttime="20170808 16:17:19.352"></status>
</kw>
<status endtime="20170808 16:17:19.543" status="PASS" starttime="20170808 16:17:19.352"></status>
</kw>
<status endtime="20170808 16:17:19.543" status="PASS" starttime="20170808 16:17:19.351"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:19.544">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:17:19.544" status="PASS" starttime="20170808 16:17:19.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:19.546">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:17:19.546" status="PASS" starttime="20170808 16:17:19.545"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:19.547">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:17:19.547" status="PASS" starttime="20170808 16:17:19.546"></status>
</kw>
<status endtime="20170808 16:17:19.547" status="PASS" starttime="20170808 16:17:19.546"></status>
</kw>
<status endtime="20170808 16:17:19.547" status="PASS" starttime="20170808 16:17:19.544"></status>
</kw>
<status endtime="20170808 16:17:19.547" status="PASS" starttime="20170808 16:17:19.544"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:19.636">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:17:19.636">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:17:19.636" status="PASS" starttime="20170808 16:17:19.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:19.638">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:17:19.638" status="PASS" starttime="20170808 16:17:19.638"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:19.639">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:17:19.639" status="PASS" starttime="20170808 16:17:19.639"></status>
</kw>
<status endtime="20170808 16:17:19.640" status="PASS" starttime="20170808 16:17:19.638"></status>
</kw>
<status endtime="20170808 16:17:19.640" status="PASS" starttime="20170808 16:17:19.637"></status>
</kw>
<status endtime="20170808 16:17:19.640" status="PASS" starttime="20170808 16:17:19.637"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:17:19.640">Delete All Sessions</msg>
<status endtime="20170808 16:17:19.640" status="PASS" starttime="20170808 16:17:19.640"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:19.640">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:17:19.640" status="PASS" starttime="20170808 16:17:19.350"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:19.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:17:19.641" status="PASS" starttime="20170808 16:17:19.641"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:19.642">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:17:19.642">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:17:19.642">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:17:19.642" status="PASS" starttime="20170808 16:17:19.641"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:19.642">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:17:19.642" status="PASS" starttime="20170808 16:17:19.350"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:19.642">${power_state} = Off</msg>
<status endtime="20170808 16:17:19.642" status="PASS" starttime="20170808 16:17:19.349"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:17:19.643">On != Off</msg>
<status endtime="20170808 16:17:19.643" status="FAIL" starttime="20170808 16:17:19.643"></status>
</kw>
<status endtime="20170808 16:17:19.643" status="FAIL" starttime="20170808 16:17:19.349"></status>
</kw>
<status endtime="20170808 16:17:19.643" status="FAIL" starttime="20170808 16:17:19.348"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:29.649">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:17:29.649" status="PASS" starttime="20170808 16:17:29.649"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:29.650">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:17:29.650" status="PASS" starttime="20170808 16:17:29.650"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:29.650">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:17:29.651" status="PASS" starttime="20170808 16:17:29.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:29.651">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:17:29.651" status="PASS" starttime="20170808 16:17:29.651"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:29.827">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:17:29.827" status="PASS" starttime="20170808 16:17:29.652"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:29.827">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:17:29.827">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:17:29.827" status="PASS" starttime="20170808 16:17:29.651"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:29.828">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:17:29.828" status="PASS" starttime="20170808 16:17:29.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:29.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:17:29.829" status="PASS" starttime="20170808 16:17:29.828"></status>
</kw>
<status endtime="20170808 16:17:29.829" status="PASS" starttime="20170808 16:17:29.648"></status>
</kw>
<status endtime="20170808 16:17:29.829" status="PASS" starttime="20170808 16:17:29.648"></status>
</kw>
<status endtime="20170808 16:17:29.829" status="PASS" starttime="20170808 16:17:29.647"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:29.829">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:17:29.829" status="PASS" starttime="20170808 16:17:29.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:29.832">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:17:29.832" status="PASS" starttime="20170808 16:17:29.831"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:29.832">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:17:29.833" status="PASS" starttime="20170808 16:17:29.832"></status>
</kw>
<status endtime="20170808 16:17:29.833" status="PASS" starttime="20170808 16:17:29.832"></status>
</kw>
<status endtime="20170808 16:17:29.833" status="PASS" starttime="20170808 16:17:29.830"></status>
</kw>
<status endtime="20170808 16:17:29.833" status="PASS" starttime="20170808 16:17:29.830"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:29.897">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:17:29.897">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:17:29.897" status="PASS" starttime="20170808 16:17:29.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:29.899">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:17:29.899" status="PASS" starttime="20170808 16:17:29.899"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:29.901">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:17:29.901" status="PASS" starttime="20170808 16:17:29.900"></status>
</kw>
<status endtime="20170808 16:17:29.901" status="PASS" starttime="20170808 16:17:29.900"></status>
</kw>
<status endtime="20170808 16:17:29.901" status="PASS" starttime="20170808 16:17:29.898"></status>
</kw>
<status endtime="20170808 16:17:29.901" status="PASS" starttime="20170808 16:17:29.898"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:17:29.902">Delete All Sessions</msg>
<status endtime="20170808 16:17:29.902" status="PASS" starttime="20170808 16:17:29.901"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:29.902">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:17:29.902" status="PASS" starttime="20170808 16:17:29.646"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:29.902">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:17:29.903" status="PASS" starttime="20170808 16:17:29.902"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:29.903">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:17:29.903">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:17:29.903">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:17:29.903" status="PASS" starttime="20170808 16:17:29.903"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:29.904">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:17:29.904" status="PASS" starttime="20170808 16:17:29.645"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:29.904">${power_state} = Off</msg>
<status endtime="20170808 16:17:29.904" status="PASS" starttime="20170808 16:17:29.645"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:17:29.905">On != Off</msg>
<status endtime="20170808 16:17:29.905" status="FAIL" starttime="20170808 16:17:29.904"></status>
</kw>
<status endtime="20170808 16:17:29.905" status="FAIL" starttime="20170808 16:17:29.645"></status>
</kw>
<status endtime="20170808 16:17:29.905" status="FAIL" starttime="20170808 16:17:29.644"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:39.911">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:17:39.911" status="PASS" starttime="20170808 16:17:39.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:39.912">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:17:39.912" status="PASS" starttime="20170808 16:17:39.911"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:39.912">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:17:39.912" status="PASS" starttime="20170808 16:17:39.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:39.913">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:17:39.913" status="PASS" starttime="20170808 16:17:39.913"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:40.090">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:17:40.090" status="PASS" starttime="20170808 16:17:39.914"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:40.090">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:17:40.090">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:17:40.090" status="PASS" starttime="20170808 16:17:39.913"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:40.091">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:17:40.091" status="PASS" starttime="20170808 16:17:40.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:40.092">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:17:40.092" status="PASS" starttime="20170808 16:17:40.091"></status>
</kw>
<status endtime="20170808 16:17:40.092" status="PASS" starttime="20170808 16:17:39.909"></status>
</kw>
<status endtime="20170808 16:17:40.092" status="PASS" starttime="20170808 16:17:39.909"></status>
</kw>
<status endtime="20170808 16:17:40.092" status="PASS" starttime="20170808 16:17:39.908"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:40.093">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:17:40.093" status="PASS" starttime="20170808 16:17:40.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:40.095">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:17:40.095" status="PASS" starttime="20170808 16:17:40.094"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:40.096">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:17:40.096" status="PASS" starttime="20170808 16:17:40.096"></status>
</kw>
<status endtime="20170808 16:17:40.096" status="PASS" starttime="20170808 16:17:40.095"></status>
</kw>
<status endtime="20170808 16:17:40.096" status="PASS" starttime="20170808 16:17:40.094"></status>
</kw>
<status endtime="20170808 16:17:40.097" status="PASS" starttime="20170808 16:17:40.093"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:40.160">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:17:40.160">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:17:40.160" status="PASS" starttime="20170808 16:17:40.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:40.162">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:17:40.162" status="PASS" starttime="20170808 16:17:40.161"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:40.163">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:17:40.163" status="PASS" starttime="20170808 16:17:40.163"></status>
</kw>
<status endtime="20170808 16:17:40.164" status="PASS" starttime="20170808 16:17:40.162"></status>
</kw>
<status endtime="20170808 16:17:40.164" status="PASS" starttime="20170808 16:17:40.161"></status>
</kw>
<status endtime="20170808 16:17:40.164" status="PASS" starttime="20170808 16:17:40.160"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:17:40.164">Delete All Sessions</msg>
<status endtime="20170808 16:17:40.164" status="PASS" starttime="20170808 16:17:40.164"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:40.165">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:17:40.165" status="PASS" starttime="20170808 16:17:39.907"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:40.166">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:17:40.166" status="PASS" starttime="20170808 16:17:40.165"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:40.167">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:17:40.167">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:17:40.167">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:17:40.168" status="PASS" starttime="20170808 16:17:40.167"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:40.168">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:17:40.168" status="PASS" starttime="20170808 16:17:39.907"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:40.168">${power_state} = Off</msg>
<status endtime="20170808 16:17:40.168" status="PASS" starttime="20170808 16:17:39.907"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:17:40.169">On != Off</msg>
<status endtime="20170808 16:17:40.169" status="FAIL" starttime="20170808 16:17:40.168"></status>
</kw>
<status endtime="20170808 16:17:40.169" status="FAIL" starttime="20170808 16:17:39.906"></status>
</kw>
<status endtime="20170808 16:17:40.169" status="FAIL" starttime="20170808 16:17:39.905"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:50.174">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:17:50.175" status="PASS" starttime="20170808 16:17:50.174"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:50.175">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:17:50.175" status="PASS" starttime="20170808 16:17:50.175"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:50.176">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:17:50.176" status="PASS" starttime="20170808 16:17:50.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:50.177">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:17:50.177" status="PASS" starttime="20170808 16:17:50.176"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:50.367">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:17:50.367" status="PASS" starttime="20170808 16:17:50.178"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:50.368">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:17:50.368">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:17:50.368" status="PASS" starttime="20170808 16:17:50.177"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:50.368">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:17:50.368" status="PASS" starttime="20170808 16:17:50.368"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:50.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:17:50.369" status="PASS" starttime="20170808 16:17:50.369"></status>
</kw>
<status endtime="20170808 16:17:50.369" status="PASS" starttime="20170808 16:17:50.174"></status>
</kw>
<status endtime="20170808 16:17:50.369" status="PASS" starttime="20170808 16:17:50.173"></status>
</kw>
<status endtime="20170808 16:17:50.369" status="PASS" starttime="20170808 16:17:50.173"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:50.370">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:17:50.370" status="PASS" starttime="20170808 16:17:50.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:50.372">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:17:50.372" status="PASS" starttime="20170808 16:17:50.371"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:50.373">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:17:50.373" status="PASS" starttime="20170808 16:17:50.373"></status>
</kw>
<status endtime="20170808 16:17:50.373" status="PASS" starttime="20170808 16:17:50.372"></status>
</kw>
<status endtime="20170808 16:17:50.373" status="PASS" starttime="20170808 16:17:50.371"></status>
</kw>
<status endtime="20170808 16:17:50.374" status="PASS" starttime="20170808 16:17:50.370"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:50.437">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:17:50.437">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:17:50.437" status="PASS" starttime="20170808 16:17:50.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:50.439">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:17:50.439" status="PASS" starttime="20170808 16:17:50.438"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:50.440">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:17:50.440" status="PASS" starttime="20170808 16:17:50.439"></status>
</kw>
<status endtime="20170808 16:17:50.440" status="PASS" starttime="20170808 16:17:50.439"></status>
</kw>
<status endtime="20170808 16:17:50.440" status="PASS" starttime="20170808 16:17:50.438"></status>
</kw>
<status endtime="20170808 16:17:50.440" status="PASS" starttime="20170808 16:17:50.437"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:17:50.440">Delete All Sessions</msg>
<status endtime="20170808 16:17:50.440" status="PASS" starttime="20170808 16:17:50.440"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:50.441">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:17:50.441" status="PASS" starttime="20170808 16:17:50.172"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:17:50.441">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:17:50.441" status="PASS" starttime="20170808 16:17:50.441"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:17:50.442">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:17:50.442">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:17:50.442">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:17:50.442" status="PASS" starttime="20170808 16:17:50.442"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:50.442">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:17:50.442" status="PASS" starttime="20170808 16:17:50.171"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:17:50.443">${power_state} = Off</msg>
<status endtime="20170808 16:17:50.443" status="PASS" starttime="20170808 16:17:50.171"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:17:50.443">On != Off</msg>
<status endtime="20170808 16:17:50.443" status="FAIL" starttime="20170808 16:17:50.443"></status>
</kw>
<status endtime="20170808 16:17:50.444" status="FAIL" starttime="20170808 16:17:50.170"></status>
</kw>
<status endtime="20170808 16:17:50.444" status="FAIL" starttime="20170808 16:17:50.170"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:00.450">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:18:00.450" status="PASS" starttime="20170808 16:18:00.449"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:00.450">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:18:00.451" status="PASS" starttime="20170808 16:18:00.450"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:00.451">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:18:00.451" status="PASS" starttime="20170808 16:18:00.451"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:00.452">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:18:00.452" status="PASS" starttime="20170808 16:18:00.451"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:00.667">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:18:00.668" status="PASS" starttime="20170808 16:18:00.453"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:00.668">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:00.668">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:00.668" status="PASS" starttime="20170808 16:18:00.452"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:00.668">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:00.669" status="PASS" starttime="20170808 16:18:00.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:00.669">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:00.669" status="PASS" starttime="20170808 16:18:00.669"></status>
</kw>
<status endtime="20170808 16:18:00.669" status="PASS" starttime="20170808 16:18:00.448"></status>
</kw>
<status endtime="20170808 16:18:00.669" status="PASS" starttime="20170808 16:18:00.448"></status>
</kw>
<status endtime="20170808 16:18:00.670" status="PASS" starttime="20170808 16:18:00.447"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:00.670">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:18:00.670" status="PASS" starttime="20170808 16:18:00.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:00.672">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:18:00.672" status="PASS" starttime="20170808 16:18:00.672"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:00.673">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:18:00.673" status="PASS" starttime="20170808 16:18:00.673"></status>
</kw>
<status endtime="20170808 16:18:00.674" status="PASS" starttime="20170808 16:18:00.673"></status>
</kw>
<status endtime="20170808 16:18:00.674" status="PASS" starttime="20170808 16:18:00.671"></status>
</kw>
<status endtime="20170808 16:18:00.674" status="PASS" starttime="20170808 16:18:00.670"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:00.737">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:18:00.737">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:00.737" status="PASS" starttime="20170808 16:18:00.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:00.739">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:18:00.739" status="PASS" starttime="20170808 16:18:00.738"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:00.740">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:18:00.740" status="PASS" starttime="20170808 16:18:00.740"></status>
</kw>
<status endtime="20170808 16:18:00.740" status="PASS" starttime="20170808 16:18:00.739"></status>
</kw>
<status endtime="20170808 16:18:00.741" status="PASS" starttime="20170808 16:18:00.738"></status>
</kw>
<status endtime="20170808 16:18:00.741" status="PASS" starttime="20170808 16:18:00.737"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:18:00.741">Delete All Sessions</msg>
<status endtime="20170808 16:18:00.741" status="PASS" starttime="20170808 16:18:00.741"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:00.741">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:00.741" status="PASS" starttime="20170808 16:18:00.446"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:00.742">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:00.742" status="PASS" starttime="20170808 16:18:00.742"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:00.743">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:18:00.743">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:18:00.743">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:18:00.743" status="PASS" starttime="20170808 16:18:00.742"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:00.743">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:18:00.743" status="PASS" starttime="20170808 16:18:00.446"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:00.743">${power_state} = Off</msg>
<status endtime="20170808 16:18:00.743" status="PASS" starttime="20170808 16:18:00.445"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:18:00.744">On != Off</msg>
<status endtime="20170808 16:18:00.744" status="FAIL" starttime="20170808 16:18:00.744"></status>
</kw>
<status endtime="20170808 16:18:00.744" status="FAIL" starttime="20170808 16:18:00.445"></status>
</kw>
<status endtime="20170808 16:18:00.744" status="FAIL" starttime="20170808 16:18:00.444"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:10.750">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:18:10.750" status="PASS" starttime="20170808 16:18:10.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:10.751">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:18:10.751" status="PASS" starttime="20170808 16:18:10.750"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:10.751">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:18:10.751" status="PASS" starttime="20170808 16:18:10.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:10.752">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:18:10.752" status="PASS" starttime="20170808 16:18:10.752"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:10.934">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:18:10.934" status="PASS" starttime="20170808 16:18:10.753"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:10.935">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:10.935">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:10.935" status="PASS" starttime="20170808 16:18:10.752"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:10.935">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:10.935" status="PASS" starttime="20170808 16:18:10.935"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:10.936">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:10.936" status="PASS" starttime="20170808 16:18:10.936"></status>
</kw>
<status endtime="20170808 16:18:10.936" status="PASS" starttime="20170808 16:18:10.749"></status>
</kw>
<status endtime="20170808 16:18:10.936" status="PASS" starttime="20170808 16:18:10.748"></status>
</kw>
<status endtime="20170808 16:18:10.937" status="PASS" starttime="20170808 16:18:10.748"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:10.937">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 16:18:10.937" status="PASS" starttime="20170808 16:18:10.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:10.939">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:18:10.939" status="PASS" starttime="20170808 16:18:10.939"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:10.940">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 16:18:10.940" status="PASS" starttime="20170808 16:18:10.940"></status>
</kw>
<status endtime="20170808 16:18:10.940" status="PASS" starttime="20170808 16:18:10.940"></status>
</kw>
<status endtime="20170808 16:18:10.941" status="PASS" starttime="20170808 16:18:10.938"></status>
</kw>
<status endtime="20170808 16:18:10.941" status="PASS" starttime="20170808 16:18:10.938"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:11.003">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:18:11.003">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:11.003" status="PASS" starttime="20170808 16:18:10.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:11.005">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:18:11.005" status="PASS" starttime="20170808 16:18:11.004"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:11.006">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:18:11.006" status="PASS" starttime="20170808 16:18:11.006"></status>
</kw>
<status endtime="20170808 16:18:11.006" status="PASS" starttime="20170808 16:18:11.005"></status>
</kw>
<status endtime="20170808 16:18:11.006" status="PASS" starttime="20170808 16:18:11.004"></status>
</kw>
<status endtime="20170808 16:18:11.006" status="PASS" starttime="20170808 16:18:11.003"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:18:11.007">Delete All Sessions</msg>
<status endtime="20170808 16:18:11.007" status="PASS" starttime="20170808 16:18:11.006"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:11.007">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:11.007" status="PASS" starttime="20170808 16:18:10.747"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:11.008">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:11.008" status="PASS" starttime="20170808 16:18:11.007"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:11.008">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:18:11.008">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:18:11.008">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:18:11.008" status="PASS" starttime="20170808 16:18:11.008"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:11.009">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 16:18:11.009" status="PASS" starttime="20170808 16:18:10.746"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:11.009">${power_state} = Off</msg>
<status endtime="20170808 16:18:11.009" status="PASS" starttime="20170808 16:18:10.746"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:18:11.010">On != Off</msg>
<status endtime="20170808 16:18:11.010" status="FAIL" starttime="20170808 16:18:11.009"></status>
</kw>
<status endtime="20170808 16:18:11.010" status="FAIL" starttime="20170808 16:18:10.746"></status>
</kw>
<status endtime="20170808 16:18:11.010" status="FAIL" starttime="20170808 16:18:10.745"></status>
</kw>
<msg level="FAIL" timestamp="20170808 16:18:11.010">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</msg>
<status endtime="20170808 16:18:11.010" status="FAIL" starttime="20170808 16:08:08.418"></status>
</kw>
<status endtime="20170808 16:18:11.010" status="FAIL" starttime="20170808 16:08:07.673"></status>
</kw>
<status endtime="20170808 16:18:11.011" status="FAIL" starttime="20170808 16:08:00.135"></status>
</kw>
<status endtime="20170808 16:18:11.011" status="FAIL" starttime="20170808 16:08:00.133"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:11.016">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:18:11.017" status="PASS" starttime="20170808 16:18:11.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:11.017">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:18:11.017" status="PASS" starttime="20170808 16:18:11.017"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:11.018">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:18:11.018" status="PASS" starttime="20170808 16:18:11.018"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:11.019">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:18:11.019" status="PASS" starttime="20170808 16:18:11.018"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:11.263">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:18:11.263" status="PASS" starttime="20170808 16:18:11.019"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:11.263">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:11.264">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:11.264" status="PASS" starttime="20170808 16:18:11.019"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:11.264">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:11.264" status="PASS" starttime="20170808 16:18:11.264"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:11.265">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:11.265" status="PASS" starttime="20170808 16:18:11.265"></status>
</kw>
<status endtime="20170808 16:18:11.265" status="PASS" starttime="20170808 16:18:11.015"></status>
</kw>
<status endtime="20170808 16:18:11.265" status="PASS" starttime="20170808 16:18:11.015"></status>
</kw>
<status endtime="20170808 16:18:11.265" status="PASS" starttime="20170808 16:18:11.014"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:11.266">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170808 16:18:11.266" status="PASS" starttime="20170808 16:18:11.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:11.268">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170808 16:18:11.268" status="PASS" starttime="20170808 16:18:11.267"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:11.269">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170808 16:18:11.269" status="PASS" starttime="20170808 16:18:11.269"></status>
</kw>
<status endtime="20170808 16:18:11.269" status="PASS" starttime="20170808 16:18:11.268"></status>
</kw>
<status endtime="20170808 16:18:11.269" status="PASS" starttime="20170808 16:18:11.267"></status>
</kw>
<status endtime="20170808 16:18:11.269" status="PASS" starttime="20170808 16:18:11.266"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:11.358">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:18:11.358">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:11.358" status="PASS" starttime="20170808 16:18:11.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:11.361">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:18:11.361" status="PASS" starttime="20170808 16:18:11.360"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:11.362">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 16:18:11.362" status="PASS" starttime="20170808 16:18:11.362"></status>
</kw>
<status endtime="20170808 16:18:11.362" status="PASS" starttime="20170808 16:18:11.361"></status>
</kw>
<status endtime="20170808 16:18:11.363" status="PASS" starttime="20170808 16:18:11.359"></status>
</kw>
<status endtime="20170808 16:18:11.363" status="PASS" starttime="20170808 16:18:11.359"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:18:11.363">Delete All Sessions</msg>
<status endtime="20170808 16:18:11.363" status="PASS" starttime="20170808 16:18:11.363"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:11.363">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:11.363" status="PASS" starttime="20170808 16:18:11.013"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:11.364">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:11.364" status="PASS" starttime="20170808 16:18:11.364"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:11.365">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:18:11.365">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:18:11.365">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170808 16:18:11.365" status="PASS" starttime="20170808 16:18:11.364"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:11.365">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170808 16:18:11.365" status="PASS" starttime="20170808 16:18:11.013"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:11.365">${host_state} = Off</msg>
<status endtime="20170808 16:18:11.365" status="PASS" starttime="20170808 16:18:11.012"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:18:11.366">Off != Quiesced</msg>
<status endtime="20170808 16:18:11.367" status="FAIL" starttime="20170808 16:18:11.366"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:11.367">${status} = False</msg>
<status endtime="20170808 16:18:11.367" status="PASS" starttime="20170808 16:18:11.366"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:11.367">${status} = False</msg>
<status endtime="20170808 16:18:11.367" status="PASS" starttime="20170808 16:18:11.012"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:11.395">Length is 10</msg>
<status endtime="20170808 16:18:11.395" status="PASS" starttime="20170808 16:18:11.395"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:11.401">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170808 16:18:14.403">${RC} = 0</msg>
<msg level="INFO" timestamp="20170808 16:18:14.403">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.662 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.633 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status endtime="20170808 16:18:14.403" status="PASS" starttime="20170808 16:18:11.395"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:14.406">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.662 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.633 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.584 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.581 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.581/0.615/0.662/0.034 ms</msg>
<status endtime="20170808 16:18:14.406" status="PASS" starttime="20170808 16:18:14.405"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170808 16:18:14.407" status="PASS" starttime="20170808 16:18:14.407"></status>
</kw>
<status endtime="20170808 16:18:14.408" status="PASS" starttime="20170808 16:18:11.394"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.422">${cur_time} = 2017-08-08 16:18:14:421976</msg>
<status endtime="20170808 16:18:14.422" status="PASS" starttime="20170808 16:18:14.422"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.423">${cur_time} = 20170808161814421976</msg>
<status endtime="20170808 16:18:14.423" status="PASS" starttime="20170808 16:18:14.423"></status>
</kw>
<status endtime="20170808 16:18:14.423" status="PASS" starttime="20170808 16:18:14.421"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:14.424">${FFDC_TIME} = 20170808161814421976</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.436">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170808 16:18:14.437" status="PASS" starttime="20170808 16:18:14.436"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.437">${suite_name} = 20170808161814421976_TestsTestBasicPoweron</msg>
<status endtime="20170808 16:18:14.437" status="PASS" starttime="20170808 16:18:14.437"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.438">${test_name} = PowerOnTest</msg>
<status endtime="20170808 16:18:14.438" status="PASS" starttime="20170808 16:18:14.437"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.438">${test_name} = 20170808161814421976_PowerOnTest</msg>
<status endtime="20170808 16:18:14.438" status="PASS" starttime="20170808 16:18:14.438"></status>
</kw>
<status endtime="20170808 16:18:14.439" status="PASS" starttime="20170808 16:18:14.436"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:14.439">${FFDC_DIR_PATH} = /tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170808 16:18:14.439">${FFDC_PREFIX} = 20170808161814421976_</msg>
<msg level="INFO" timestamp="20170808 16:18:14.459">${LOG_PREFIX} = /tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.460">Created directory '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.460" status="PASS" starttime="20170808 16:18:14.460"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:14.465">${FFDC_FILE_PATH} = /tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.485">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.485" status="PASS" starttime="20170808 16:18:14.485"></status>
</kw>
<status endtime="20170808 16:18:14.486" status="PASS" starttime="20170808 16:18:14.484"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.487">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.487" status="PASS" starttime="20170808 16:18:14.486"></status>
</kw>
<status endtime="20170808 16:18:14.487" status="PASS" starttime="20170808 16:18:14.486"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.488">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.488" status="PASS" starttime="20170808 16:18:14.488"></status>
</kw>
<status endtime="20170808 16:18:14.488" status="PASS" starttime="20170808 16:18:14.487"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.489">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.489" status="PASS" starttime="20170808 16:18:14.489"></status>
</kw>
<status endtime="20170808 16:18:14.490" status="PASS" starttime="20170808 16:18:14.488"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.491">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.491" status="PASS" starttime="20170808 16:18:14.490"></status>
</kw>
<status endtime="20170808 16:18:14.491" status="PASS" starttime="20170808 16:18:14.490"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.492">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.492" status="PASS" starttime="20170808 16:18:14.492"></status>
</kw>
<status endtime="20170808 16:18:14.492" status="PASS" starttime="20170808 16:18:14.491"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.493">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.494" status="PASS" starttime="20170808 16:18:14.493"></status>
</kw>
<status endtime="20170808 16:18:14.494" status="PASS" starttime="20170808 16:18:14.492"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.495">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.495" status="PASS" starttime="20170808 16:18:14.495"></status>
</kw>
<status endtime="20170808 16:18:14.495" status="PASS" starttime="20170808 16:18:14.494"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.496">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.496" status="PASS" starttime="20170808 16:18:14.496"></status>
</kw>
<status endtime="20170808 16:18:14.497" status="PASS" starttime="20170808 16:18:14.495"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.498">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.498" status="PASS" starttime="20170808 16:18:14.498"></status>
</kw>
<status endtime="20170808 16:18:14.499" status="PASS" starttime="20170808 16:18:14.497"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.500">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.500" status="PASS" starttime="20170808 16:18:14.499"></status>
</kw>
<status endtime="20170808 16:18:14.500" status="PASS" starttime="20170808 16:18:14.499"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.501">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.501" status="PASS" starttime="20170808 16:18:14.501"></status>
</kw>
<status endtime="20170808 16:18:14.501" status="PASS" starttime="20170808 16:18:14.500"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.502">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.502" status="PASS" starttime="20170808 16:18:14.502"></status>
</kw>
<status endtime="20170808 16:18:14.502" status="PASS" starttime="20170808 16:18:14.501"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.530">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:18:14.531">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170808 16:18:14.640">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170808 16:18:14.649">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170808 16:18:14.649">${stderr} = </msg>
<msg level="INFO" timestamp="20170808 16:18:14.649">${rc} = 0</msg>
<status endtime="20170808 16:18:14.649" status="PASS" starttime="20170808 16:18:14.503"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:14.650">Length is 0</msg>
<status endtime="20170808 16:18:14.650" status="PASS" starttime="20170808 16:18:14.650"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:14.650">Length is 11</msg>
<status endtime="20170808 16:18:14.650" status="PASS" starttime="20170808 16:18:14.650"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:14.651">${model_name} = Witherspoon</msg>
<status endtime="20170808 16:18:14.651" status="PASS" starttime="20170808 16:18:14.503"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.652">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.652" status="PASS" starttime="20170808 16:18:14.651"></status>
</kw>
<status endtime="20170808 16:18:14.652" status="PASS" starttime="20170808 16:18:14.651"></status>
</kw>
<status endtime="20170808 16:18:14.652" status="PASS" starttime="20170808 16:18:14.497"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.653">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.653" status="PASS" starttime="20170808 16:18:14.653"></status>
</kw>
<status endtime="20170808 16:18:14.654" status="PASS" starttime="20170808 16:18:14.652"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.654">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170808 16:18:14.654" status="PASS" starttime="20170808 16:18:14.654"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.655">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.656" status="PASS" starttime="20170808 16:18:14.655"></status>
</kw>
<status endtime="20170808 16:18:14.656" status="PASS" starttime="20170808 16:18:14.654"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.657">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.657" status="PASS" starttime="20170808 16:18:14.656"></status>
</kw>
<status endtime="20170808 16:18:14.657" status="PASS" starttime="20170808 16:18:14.656"></status>
</kw>
<status endtime="20170808 16:18:14.657" status="PASS" starttime="20170808 16:18:14.654"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.659">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.659" status="PASS" starttime="20170808 16:18:14.658"></status>
</kw>
<status endtime="20170808 16:18:14.659" status="PASS" starttime="20170808 16:18:14.657"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.660">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.660" status="PASS" starttime="20170808 16:18:14.660"></status>
</kw>
<status endtime="20170808 16:18:14.660" status="PASS" starttime="20170808 16:18:14.659"></status>
</kw>
<status endtime="20170808 16:18:14.660" status="PASS" starttime="20170808 16:18:14.657"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.662">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.662" status="PASS" starttime="20170808 16:18:14.661"></status>
</kw>
<status endtime="20170808 16:18:14.662" status="PASS" starttime="20170808 16:18:14.661"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.663">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.663" status="PASS" starttime="20170808 16:18:14.663"></status>
</kw>
<status endtime="20170808 16:18:14.663" status="PASS" starttime="20170808 16:18:14.662"></status>
</kw>
<status endtime="20170808 16:18:14.663" status="PASS" starttime="20170808 16:18:14.660"></status>
</kw>
<status endtime="20170808 16:18:14.663" status="PASS" starttime="20170808 16:18:14.654"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.664">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.664" status="PASS" starttime="20170808 16:18:14.664"></status>
</kw>
<status endtime="20170808 16:18:14.664" status="PASS" starttime="20170808 16:18:14.663"></status>
</kw>
<status endtime="20170808 16:18:14.665" status="PASS" starttime="20170808 16:18:14.484"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.671">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170808 16:18:14.671" status="PASS" starttime="20170808 16:18:14.671"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.672">@{method_list} = [ ('BMC Specific Files', 'BMC FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('SEL Log', 'Collect eSEL Log') | ('Ge...</msg>
<status endtime="20170808 16:18:14.672" status="PASS" starttime="20170808 16:18:14.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170808 16:18:14.673" status="PASS" starttime="20170808 16:18:14.673"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:14.674">@{ffdc_function_list} = [ BMC Specific Files | FFDC Generic Report | OS FFDC | Core Files | SEL Log | Get Request FFDC ]</msg>
<status endtime="20170808 16:18:14.674" status="PASS" starttime="20170808 16:18:14.672"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170808 16:18:14.675" status="PASS" starttime="20170808 16:18:14.675"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:14.676">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:14.676">${ret_values} = None</msg>
<status endtime="20170808 16:18:14.676" status="PASS" starttime="20170808 16:18:14.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170808 16:18:14.676" status="PASS" starttime="20170808 16:18:14.676"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.703">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170808 16:18:14.703" status="PASS" starttime="20170808 16:18:14.702"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.704">@{cmd_list} = [ ('BMC_dmesg', 'dmesg') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_proc_list', 'top -n 1 -b') | ...</msg>
<status endtime="20170808 16:18:14.704" status="PASS" starttime="20170808 16:18:14.703"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.705">${logpath} = /tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_dmesg.txt</msg>
<status endtime="20170808 16:18:14.705" status="PASS" starttime="20170808 16:18:14.704"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170808 16:18:14.706" status="PASS" starttime="20170808 16:18:14.706"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.707">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170808 16:18:14.707" status="PASS" starttime="20170808 16:18:14.706"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:14.775">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:18:14.776">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170808 16:18:14.833">Command exited with return code 0.</msg>
<status endtime="20170808 16:18:14.833" status="PASS" starttime="20170808 16:18:14.739"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:14.833">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:14.833">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 8 15...</msg>
<status endtime="20170808 16:18:14.834" status="PASS" starttime="20170808 16:18:14.707"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.834">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 8 15:37:...</msg>
<status endtime="20170808 16:18:14.834" status="PASS" starttime="20170808 16:18:14.834"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.835">${stderr} = </msg>
<status endtime="20170808 16:18:14.835" status="PASS" starttime="20170808 16:18:14.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:14.843">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_dmesg.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:14.843" status="PASS" starttime="20170808 16:18:14.842"></status>
</kw>
<status endtime="20170808 16:18:14.843" status="PASS" starttime="20170808 16:18:14.841"></status>
</kw>
<status endtime="20170808 16:18:14.843" status="PASS" starttime="20170808 16:18:14.835"></status>
</kw>
<status endtime="20170808 16:18:14.843" status="PASS" starttime="20170808 16:18:14.705"></status>
</kw>
<status endtime="20170808 16:18:14.843" status="PASS" starttime="20170808 16:18:14.704"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.844">${logpath} = /tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_journalctl.txt</msg>
<status endtime="20170808 16:18:14.844" status="PASS" starttime="20170808 16:18:14.844"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170808 16:18:14.846" status="PASS" starttime="20170808 16:18:14.845"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:14.846">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170808 16:18:14.846" status="PASS" starttime="20170808 16:18:14.846"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:14.919">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:18:14.920">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170808 16:18:16.765">Command exited with return code 0.</msg>
<status endtime="20170808 16:18:16.766" status="PASS" starttime="20170808 16:18:14.884"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:16.766">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:16.768">${ret_values} = (u'-- Logs begin at Tue 2017-08-08 16:02:12 UTC, end at Tue 2017-08-08 16:18:16 UTC. --\nAug 08 16:02:12 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 08 16:02:12 witherspoon kernel: Linu...</msg>
<status endtime="20170808 16:18:16.768" status="PASS" starttime="20170808 16:18:14.847"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:16.770">${stdout} = -- Logs begin at Tue 2017-08-08 16:02:12 UTC, end at Tue 2017-08-08 16:18:16 UTC. --
Aug 08 16:02:12 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 08 16:02:12 witherspoon kernel: Linux ver...</msg>
<status endtime="20170808 16:18:16.770" status="PASS" starttime="20170808 16:18:16.769"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:16.770">${stderr} = </msg>
<status endtime="20170808 16:18:16.770" status="PASS" starttime="20170808 16:18:16.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:16.778">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_journalctl.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:16.778" status="PASS" starttime="20170808 16:18:16.777"></status>
</kw>
<status endtime="20170808 16:18:16.778" status="PASS" starttime="20170808 16:18:16.776"></status>
</kw>
<status endtime="20170808 16:18:16.778" status="PASS" starttime="20170808 16:18:16.771"></status>
</kw>
<status endtime="20170808 16:18:16.778" status="PASS" starttime="20170808 16:18:14.845"></status>
</kw>
<status endtime="20170808 16:18:16.778" status="PASS" starttime="20170808 16:18:14.844"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:16.779">${logpath} = /tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_procinfo.txt</msg>
<status endtime="20170808 16:18:16.779" status="PASS" starttime="20170808 16:18:16.779"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170808 16:18:16.781" status="PASS" starttime="20170808 16:18:16.780"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:16.781">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170808 16:18:16.781" status="PASS" starttime="20170808 16:18:16.781"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:16.850">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:18:16.851">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170808 16:18:17.005">Command exited with return code 0.</msg>
<status endtime="20170808 16:18:17.005" status="PASS" starttime="20170808 16:18:16.812"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:17.005">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:17.005">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170808 16:18:17.005" status="PASS" starttime="20170808 16:18:16.782"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:17.006">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170808 16:18:17.006" status="PASS" starttime="20170808 16:18:17.005"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:17.006">${stderr} = </msg>
<status endtime="20170808 16:18:17.006" status="PASS" starttime="20170808 16:18:17.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:17.013">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_procinfo.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:17.013" status="PASS" starttime="20170808 16:18:17.012"></status>
</kw>
<status endtime="20170808 16:18:17.013" status="PASS" starttime="20170808 16:18:17.012"></status>
</kw>
<status endtime="20170808 16:18:17.013" status="PASS" starttime="20170808 16:18:17.007"></status>
</kw>
<status endtime="20170808 16:18:17.013" status="PASS" starttime="20170808 16:18:16.779"></status>
</kw>
<status endtime="20170808 16:18:17.013" status="PASS" starttime="20170808 16:18:16.778"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:17.014">${logpath} = /tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170808 16:18:17.014" status="PASS" starttime="20170808 16:18:17.014"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170808 16:18:17.015" status="PASS" starttime="20170808 16:18:17.015"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:17.016">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170808 16:18:17.016" status="PASS" starttime="20170808 16:18:17.016"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:17.083">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:18:17.083">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170808 16:18:17.664">Command exited with return code 0.</msg>
<status endtime="20170808 16:18:17.665" status="PASS" starttime="20170808 16:18:17.047"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:17.665">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:17.666">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  8 16:18 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  8 16:18 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170808 16:18:17.666" status="PASS" starttime="20170808 16:18:17.016"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:17.667">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  8 16:18 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  8 16:18 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170808 16:18:17.667" status="PASS" starttime="20170808 16:18:17.666"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:17.668">${stderr} = ls: /proc/1487/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170808 16:18:17.668" status="PASS" starttime="20170808 16:18:17.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:17.675">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:17.675" status="PASS" starttime="20170808 16:18:17.674"></status>
</kw>
<status endtime="20170808 16:18:17.675" status="PASS" starttime="20170808 16:18:17.673"></status>
</kw>
<status endtime="20170808 16:18:17.675" status="PASS" starttime="20170808 16:18:17.668"></status>
</kw>
<status endtime="20170808 16:18:17.675" status="PASS" starttime="20170808 16:18:17.014"></status>
</kw>
<status endtime="20170808 16:18:17.675" status="PASS" starttime="20170808 16:18:17.014"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:17.676">${logpath} = /tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_proc_list.txt</msg>
<status endtime="20170808 16:18:17.676" status="PASS" starttime="20170808 16:18:17.676"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170808 16:18:17.677" status="PASS" starttime="20170808 16:18:17.677"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:17.678">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170808 16:18:17.678" status="PASS" starttime="20170808 16:18:17.678"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:17.745">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:18:17.746">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170808 16:18:18.074">Command exited with return code 0.</msg>
<status endtime="20170808 16:18:18.075" status="PASS" starttime="20170808 16:18:17.709"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:18.075">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:18.075">${ret_values} = (u'Mem: 158392K used, 273876K free, 15408K shrd, 11580K buff, 54044K cached\nCPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 0.46 0.45 0.48 1/153 1488\n  PID  PPID ...</msg>
<status endtime="20170808 16:18:18.075" status="PASS" starttime="20170808 16:18:17.678"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:18.076">${stdout} = Mem: 158392K used, 273876K free, 15408K shrd, 11580K buff, 54044K cached
CPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.46 0.45 0.48 1/153 1488
  PID  PPID USER  ...</msg>
<status endtime="20170808 16:18:18.076" status="PASS" starttime="20170808 16:18:18.075"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:18.076">${stderr} = </msg>
<status endtime="20170808 16:18:18.077" status="PASS" starttime="20170808 16:18:18.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:18.083">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_proc_list.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:18.083" status="PASS" starttime="20170808 16:18:18.083"></status>
</kw>
<status endtime="20170808 16:18:18.084" status="PASS" starttime="20170808 16:18:18.082"></status>
</kw>
<status endtime="20170808 16:18:18.084" status="PASS" starttime="20170808 16:18:18.077"></status>
</kw>
<status endtime="20170808 16:18:18.084" status="PASS" starttime="20170808 16:18:17.676"></status>
</kw>
<status endtime="20170808 16:18:18.084" status="PASS" starttime="20170808 16:18:17.675"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:18.085">${logpath} = /tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_meminfo.txt</msg>
<status endtime="20170808 16:18:18.085" status="PASS" starttime="20170808 16:18:18.084"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170808 16:18:18.086" status="PASS" starttime="20170808 16:18:18.086"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:18.087">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170808 16:18:18.087" status="PASS" starttime="20170808 16:18:18.086"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:18.154">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:18:18.155">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170808 16:18:18.211">Command exited with return code 0.</msg>
<status endtime="20170808 16:18:18.212" status="PASS" starttime="20170808 16:18:18.117"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:18.212">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:18.212">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          273876 kB\nMemAvailable:     321988 kB\nBuffers:           11580 kB\nCached:            54044 kB\nSwapCached:            0 kB\nActive:            9884...</msg>
<status endtime="20170808 16:18:18.212" status="PASS" starttime="20170808 16:18:18.087"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:18.213">${stdout} = MemTotal:         432268 kB
MemFree:          273876 kB
MemAvailable:     321988 kB
Buffers:           11580 kB
Cached:            54044 kB
SwapCached:            0 kB
Active:            98848 kB
Inac...</msg>
<status endtime="20170808 16:18:18.213" status="PASS" starttime="20170808 16:18:18.212"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:18.213">${stderr} = </msg>
<status endtime="20170808 16:18:18.213" status="PASS" starttime="20170808 16:18:18.213"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:18.220">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_meminfo.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:18.220" status="PASS" starttime="20170808 16:18:18.219"></status>
</kw>
<status endtime="20170808 16:18:18.220" status="PASS" starttime="20170808 16:18:18.219"></status>
</kw>
<status endtime="20170808 16:18:18.220" status="PASS" starttime="20170808 16:18:18.214"></status>
</kw>
<status endtime="20170808 16:18:18.220" status="PASS" starttime="20170808 16:18:18.085"></status>
</kw>
<status endtime="20170808 16:18:18.220" status="PASS" starttime="20170808 16:18:18.084"></status>
</kw>
<status endtime="20170808 16:18:18.221" status="PASS" starttime="20170808 16:18:14.704"></status>
</kw>
<status endtime="20170808 16:18:18.221" status="PASS" starttime="20170808 16:18:14.703"></status>
</kw>
<status endtime="20170808 16:18:18.221" status="PASS" starttime="20170808 16:18:14.703"></status>
</kw>
<status endtime="20170808 16:18:18.221" status="PASS" starttime="20170808 16:18:14.703"></status>
</kw>
<status endtime="20170808 16:18:18.221" status="PASS" starttime="20170808 16:18:14.702"></status>
</kw>
<status endtime="20170808 16:18:18.221" status="PASS" starttime="20170808 16:18:14.677"></status>
</kw>
<status endtime="20170808 16:18:18.221" status="PASS" starttime="20170808 16:18:14.674"></status>
</kw>
<status endtime="20170808 16:18:18.221" status="PASS" starttime="20170808 16:18:14.674"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170808 16:18:18.223" status="PASS" starttime="20170808 16:18:18.223"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:18.223">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:18.223">${ret_values} = None</msg>
<status endtime="20170808 16:18:18.223" status="PASS" starttime="20170808 16:18:18.222"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170808 16:18:18.224" status="PASS" starttime="20170808 16:18:18.223"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:18.255">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170808 16:18:18.255" status="PASS" starttime="20170808 16:18:18.255"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:18.258">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170808 16:18:18.258" status="PASS" starttime="20170808 16:18:18.257"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:18.263">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170808 16:18:18.263" status="PASS" starttime="20170808 16:18:18.258"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:18.266">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:18.266" status="PASS" starttime="20170808 16:18:18.266"></status>
</kw>
<status endtime="20170808 16:18:18.266" status="PASS" starttime="20170808 16:18:18.265"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:18.268">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:18.268" status="PASS" starttime="20170808 16:18:18.267"></status>
</kw>
<status endtime="20170808 16:18:18.268" status="PASS" starttime="20170808 16:18:18.267"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:18.269">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:18.269" status="PASS" starttime="20170808 16:18:18.269"></status>
</kw>
<status endtime="20170808 16:18:18.269" status="PASS" starttime="20170808 16:18:18.268"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:18.270">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:18.270" status="PASS" starttime="20170808 16:18:18.270"></status>
</kw>
<status endtime="20170808 16:18:18.270" status="PASS" starttime="20170808 16:18:18.269"></status>
</kw>
<status endtime="20170808 16:18:18.271" status="PASS" starttime="20170808 16:18:18.265"></status>
</kw>
<status endtime="20170808 16:18:18.271" status="PASS" starttime="20170808 16:18:18.264"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:18.271">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170808 16:18:18.271" status="PASS" starttime="20170808 16:18:18.271"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:18.338">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:18:18.339">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170808 16:18:18.406">Command exited with return code 0.</msg>
<status endtime="20170808 16:18:18.406" status="PASS" starttime="20170808 16:18:18.302"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:18.406">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:18.406">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-199"\nVERSION_ID="v1.99.8-199-g87b2879"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status endtime="20170808 16:18:18.406" status="PASS" starttime="20170808 16:18:18.272"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:18.407">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-199"
VERSION_ID="v1.99.8-199-g87b2879"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status endtime="20170808 16:18:18.407" status="PASS" starttime="20170808 16:18:18.407"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:18.408">${stderr} = </msg>
<status endtime="20170808 16:18:18.408" status="PASS" starttime="20170808 16:18:18.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:18.414">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:18.414" status="PASS" starttime="20170808 16:18:18.414"></status>
</kw>
<status endtime="20170808 16:18:18.414" status="PASS" starttime="20170808 16:18:18.413"></status>
</kw>
<status endtime="20170808 16:18:18.414" status="PASS" starttime="20170808 16:18:18.408"></status>
</kw>
<status endtime="20170808 16:18:18.415" status="PASS" starttime="20170808 16:18:18.263"></status>
</kw>
<status endtime="20170808 16:18:18.415" status="PASS" starttime="20170808 16:18:18.263"></status>
</kw>
<status endtime="20170808 16:18:18.415" status="PASS" starttime="20170808 16:18:18.263"></status>
</kw>
<status endtime="20170808 16:18:18.415" status="PASS" starttime="20170808 16:18:18.256"></status>
</kw>
<status endtime="20170808 16:18:18.415" status="PASS" starttime="20170808 16:18:18.256"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:18.416">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170808 16:18:18.416" status="PASS" starttime="20170808 16:18:18.416"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:18.417">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170808 16:18:18.417" status="PASS" starttime="20170808 16:18:18.416"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:18.420">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:18.420" status="PASS" starttime="20170808 16:18:18.419"></status>
</kw>
<status endtime="20170808 16:18:18.420" status="PASS" starttime="20170808 16:18:18.419"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:18.421">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:18.421" status="PASS" starttime="20170808 16:18:18.421"></status>
</kw>
<status endtime="20170808 16:18:18.421" status="PASS" starttime="20170808 16:18:18.420"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:18.422">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:18.423" status="PASS" starttime="20170808 16:18:18.422"></status>
</kw>
<status endtime="20170808 16:18:18.423" status="PASS" starttime="20170808 16:18:18.422"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:18.424">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:18.424" status="PASS" starttime="20170808 16:18:18.423"></status>
</kw>
<status endtime="20170808 16:18:18.424" status="PASS" starttime="20170808 16:18:18.423"></status>
</kw>
<status endtime="20170808 16:18:18.424" status="PASS" starttime="20170808 16:18:18.418"></status>
</kw>
<status endtime="20170808 16:18:18.424" status="PASS" starttime="20170808 16:18:18.418"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:18.425">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170808 16:18:18.425" status="PASS" starttime="20170808 16:18:18.424"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:18.494">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:18:18.495">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170808 16:18:19.881">Command exited with return code 0.</msg>
<status endtime="20170808 16:18:19.881" status="PASS" starttime="20170808 16:18:18.456"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:19.881">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:19.882">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status endtime="20170808 16:18:19.882" status="PASS" starttime="20170808 16:18:18.425"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:19.882">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170808 16:18:19.882" status="PASS" starttime="20170808 16:18:19.882"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:19.883">${stderr} = </msg>
<status endtime="20170808 16:18:19.883" status="PASS" starttime="20170808 16:18:19.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:19.889">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:19.890" status="PASS" starttime="20170808 16:18:19.889"></status>
</kw>
<status endtime="20170808 16:18:19.890" status="PASS" starttime="20170808 16:18:19.888"></status>
</kw>
<status endtime="20170808 16:18:19.890" status="PASS" starttime="20170808 16:18:19.883"></status>
</kw>
<status endtime="20170808 16:18:19.890" status="PASS" starttime="20170808 16:18:18.417"></status>
</kw>
<status endtime="20170808 16:18:19.890" status="PASS" starttime="20170808 16:18:18.417"></status>
</kw>
<status endtime="20170808 16:18:19.890" status="PASS" starttime="20170808 16:18:18.417"></status>
</kw>
<status endtime="20170808 16:18:19.890" status="PASS" starttime="20170808 16:18:18.415"></status>
</kw>
<status endtime="20170808 16:18:19.890" status="PASS" starttime="20170808 16:18:18.415"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:19.891">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status endtime="20170808 16:18:19.891" status="PASS" starttime="20170808 16:18:19.891"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:19.892">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170808 16:18:19.892" status="PASS" starttime="20170808 16:18:19.891"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:19.895">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:19.895" status="PASS" starttime="20170808 16:18:19.895"></status>
</kw>
<status endtime="20170808 16:18:19.895" status="PASS" starttime="20170808 16:18:19.894"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:19.897">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:19.897" status="PASS" starttime="20170808 16:18:19.896"></status>
</kw>
<status endtime="20170808 16:18:19.897" status="PASS" starttime="20170808 16:18:19.895"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:19.898">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:19.898" status="PASS" starttime="20170808 16:18:19.898"></status>
</kw>
<status endtime="20170808 16:18:19.898" status="PASS" starttime="20170808 16:18:19.897"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:19.899">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:19.899" status="PASS" starttime="20170808 16:18:19.899"></status>
</kw>
<status endtime="20170808 16:18:19.899" status="PASS" starttime="20170808 16:18:19.898"></status>
</kw>
<status endtime="20170808 16:18:19.900" status="PASS" starttime="20170808 16:18:19.894"></status>
</kw>
<status endtime="20170808 16:18:19.900" status="PASS" starttime="20170808 16:18:19.893"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:19.900">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170808 16:18:19.900" status="PASS" starttime="20170808 16:18:19.900"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:19.969">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:18:19.970">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170808 16:18:20.016">Command exited with return code 0.</msg>
<status endtime="20170808 16:18:20.016" status="PASS" starttime="20170808 16:18:19.931"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:20.017">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:20.017">${ret_values} = (u' 16:18:24 up 16 min,  load average: 0.46, 0.44, 0.47', u'', 0)</msg>
<status endtime="20170808 16:18:20.017" status="PASS" starttime="20170808 16:18:19.901"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:20.017">${stdout} =  16:18:24 up 16 min,  load average: 0.46, 0.44, 0.47</msg>
<status endtime="20170808 16:18:20.018" status="PASS" starttime="20170808 16:18:20.017"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:20.018">${stderr} = </msg>
<status endtime="20170808 16:18:20.018" status="PASS" starttime="20170808 16:18:20.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:20.024">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:20.025" status="PASS" starttime="20170808 16:18:20.024"></status>
</kw>
<status endtime="20170808 16:18:20.025" status="PASS" starttime="20170808 16:18:20.023"></status>
</kw>
<status endtime="20170808 16:18:20.025" status="PASS" starttime="20170808 16:18:20.018"></status>
</kw>
<status endtime="20170808 16:18:20.025" status="PASS" starttime="20170808 16:18:19.892"></status>
</kw>
<status endtime="20170808 16:18:20.025" status="PASS" starttime="20170808 16:18:19.892"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:20.028">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:20.028" status="PASS" starttime="20170808 16:18:20.027"></status>
</kw>
<status endtime="20170808 16:18:20.028" status="PASS" starttime="20170808 16:18:20.027"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:20.029">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:20.029" status="PASS" starttime="20170808 16:18:20.029"></status>
</kw>
<status endtime="20170808 16:18:20.029" status="PASS" starttime="20170808 16:18:20.028"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:20.031">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:20.031" status="PASS" starttime="20170808 16:18:20.030"></status>
</kw>
<status endtime="20170808 16:18:20.031" status="PASS" starttime="20170808 16:18:20.030"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:20.032">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:20.032" status="PASS" starttime="20170808 16:18:20.031"></status>
</kw>
<status endtime="20170808 16:18:20.032" status="PASS" starttime="20170808 16:18:20.031"></status>
</kw>
<status endtime="20170808 16:18:20.032" status="PASS" starttime="20170808 16:18:20.026"></status>
</kw>
<status endtime="20170808 16:18:20.032" status="PASS" starttime="20170808 16:18:20.026"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:20.033">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170808 16:18:20.033" status="PASS" starttime="20170808 16:18:20.032"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:20.103">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:18:20.104">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170808 16:18:20.160">Command exited with return code 0.</msg>
<status endtime="20170808 16:18:20.160" status="PASS" starttime="20170808 16:18:20.065"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:20.161">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:20.161">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170808 16:18:20.161" status="PASS" starttime="20170808 16:18:20.033"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:20.161">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status endtime="20170808 16:18:20.161" status="PASS" starttime="20170808 16:18:20.161"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:20.162">${stderr} = </msg>
<status endtime="20170808 16:18:20.162" status="PASS" starttime="20170808 16:18:20.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:20.170">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:20.170" status="PASS" starttime="20170808 16:18:20.170"></status>
</kw>
<status endtime="20170808 16:18:20.171" status="PASS" starttime="20170808 16:18:20.169"></status>
</kw>
<status endtime="20170808 16:18:20.171" status="PASS" starttime="20170808 16:18:20.162"></status>
</kw>
<status endtime="20170808 16:18:20.171" status="PASS" starttime="20170808 16:18:20.025"></status>
</kw>
<status endtime="20170808 16:18:20.171" status="PASS" starttime="20170808 16:18:20.025"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:20.174">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:20.174" status="PASS" starttime="20170808 16:18:20.173"></status>
</kw>
<status endtime="20170808 16:18:20.174" status="PASS" starttime="20170808 16:18:20.173"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:20.175">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:20.175" status="PASS" starttime="20170808 16:18:20.175"></status>
</kw>
<status endtime="20170808 16:18:20.175" status="PASS" starttime="20170808 16:18:20.174"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:20.177">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:20.177" status="PASS" starttime="20170808 16:18:20.176"></status>
</kw>
<status endtime="20170808 16:18:20.177" status="PASS" starttime="20170808 16:18:20.176"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:20.178">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:20.178" status="PASS" starttime="20170808 16:18:20.178"></status>
</kw>
<status endtime="20170808 16:18:20.178" status="PASS" starttime="20170808 16:18:20.177"></status>
</kw>
<status endtime="20170808 16:18:20.178" status="PASS" starttime="20170808 16:18:20.172"></status>
</kw>
<status endtime="20170808 16:18:20.178" status="PASS" starttime="20170808 16:18:20.172"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:20.179">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170808 16:18:20.179" status="PASS" starttime="20170808 16:18:20.179"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:20.250">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:18:20.250">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170808 16:18:20.307">Command exited with return code 0.</msg>
<status endtime="20170808 16:18:20.307" status="PASS" starttime="20170808 16:18:20.214"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:20.307">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:20.307">${ret_values} = (u'Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Tue Aug 8 15:37:57 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170808 16:18:20.307" status="PASS" starttime="20170808 16:18:20.179"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:20.308">${stdout} = Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Tue Aug 8 15:37:57 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170808 16:18:20.308" status="PASS" starttime="20170808 16:18:20.308"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:20.308">${stderr} = </msg>
<status endtime="20170808 16:18:20.308" status="PASS" starttime="20170808 16:18:20.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:20.316">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:20.316" status="PASS" starttime="20170808 16:18:20.316"></status>
</kw>
<status endtime="20170808 16:18:20.316" status="PASS" starttime="20170808 16:18:20.315"></status>
</kw>
<status endtime="20170808 16:18:20.316" status="PASS" starttime="20170808 16:18:20.309"></status>
</kw>
<status endtime="20170808 16:18:20.316" status="PASS" starttime="20170808 16:18:20.171"></status>
</kw>
<status endtime="20170808 16:18:20.316" status="PASS" starttime="20170808 16:18:20.171"></status>
</kw>
<status endtime="20170808 16:18:20.316" status="PASS" starttime="20170808 16:18:19.892"></status>
</kw>
<status endtime="20170808 16:18:20.317" status="PASS" starttime="20170808 16:18:19.890"></status>
</kw>
<status endtime="20170808 16:18:20.317" status="PASS" starttime="20170808 16:18:19.890"></status>
</kw>
<status endtime="20170808 16:18:20.317" status="PASS" starttime="20170808 16:18:18.255"></status>
</kw>
<status endtime="20170808 16:18:20.317" status="PASS" starttime="20170808 16:18:18.254"></status>
</kw>
<status endtime="20170808 16:18:20.317" status="PASS" starttime="20170808 16:18:18.224"></status>
</kw>
<status endtime="20170808 16:18:20.317" status="PASS" starttime="20170808 16:18:18.221"></status>
</kw>
<status endtime="20170808 16:18:20.317" status="PASS" starttime="20170808 16:18:18.221"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170808 16:18:20.319" status="PASS" starttime="20170808 16:18:20.319"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:20.319">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:20.319">${ret_values} = None</msg>
<status endtime="20170808 16:18:20.319" status="PASS" starttime="20170808 16:18:20.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170808 16:18:20.320" status="PASS" starttime="20170808 16:18:20.319"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:20.346">Returning from the enclosing user keyword.</msg>
<status endtime="20170808 16:18:20.346" status="PASS" starttime="20170808 16:18:20.346"></status>
</kw>
<status endtime="20170808 16:18:20.346" status="PASS" starttime="20170808 16:18:20.345"></status>
</kw>
<status endtime="20170808 16:18:20.346" status="PASS" starttime="20170808 16:18:20.320"></status>
</kw>
<status endtime="20170808 16:18:20.346" status="PASS" starttime="20170808 16:18:20.317"></status>
</kw>
<status endtime="20170808 16:18:20.346" status="PASS" starttime="20170808 16:18:20.317"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170808 16:18:20.348" status="PASS" starttime="20170808 16:18:20.348"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:20.348">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:20.348">${ret_values} = None</msg>
<status endtime="20170808 16:18:20.348" status="PASS" starttime="20170808 16:18:20.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170808 16:18:20.349" status="PASS" starttime="20170808 16:18:20.349"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:20.408">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:18:20.409">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170808 16:18:20.456">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170808 16:18:20.468">${core_files} = /tmp/core_phosphor-fan-co.1409
/tmp/core_phosphor-fan-co.1413
/tmp/core_phosphor-fan-co.1419</msg>
<msg level="INFO" timestamp="20170808 16:18:20.468">${stderr} = </msg>
<msg level="INFO" timestamp="20170808 16:18:20.468">${rc} = 0</msg>
<status endtime="20170808 16:18:20.468" status="PASS" starttime="20170808 16:18:20.377"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:20.469">@{core_list} = [ /tmp/core_phosphor-fan-co.1409 | /tmp/core_phosphor-fan-co.1413 | /tmp/core_phosphor-fan-co.1419 ]</msg>
<status endtime="20170808 16:18:20.469" status="PASS" starttime="20170808 16:18:20.468"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170808 16:18:20.485" status="PASS" starttime="20170808 16:18:20.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170808 16:18:21.154" status="PASS" starttime="20170808 16:18:20.487"></status>
</kw>
<status endtime="20170808 16:18:21.154" status="PASS" starttime="20170808 16:18:20.486"></status>
</kw>
<status endtime="20170808 16:18:21.154" status="PASS" starttime="20170808 16:18:20.486"></status>
</kw>
<status endtime="20170808 16:18:21.154" status="PASS" starttime="20170808 16:18:20.478"></status>
</kw>
<status endtime="20170808 16:18:21.154" status="PASS" starttime="20170808 16:18:20.469"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_phosphor-fan-co.1409" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170808 16:18:21.466" status="PASS" starttime="20170808 16:18:21.155"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:21.500">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:18:21.501">Executing command 'rm /tmp/core_phosphor-fan-co.1409'.</msg>
<msg level="INFO" timestamp="20170808 16:18:21.548">Command exited with return code 0.</msg>
<status endtime="20170808 16:18:21.560" status="PASS" starttime="20170808 16:18:21.467"></status>
</kw>
<status endtime="20170808 16:18:21.560" status="PASS" starttime="20170808 16:18:21.155"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-co.1413" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170808 16:18:21.804" status="PASS" starttime="20170808 16:18:21.560"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:21.837">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:18:21.837">Executing command 'rm /tmp/core_phosphor-fan-co.1413'.</msg>
<msg level="INFO" timestamp="20170808 16:18:21.884">Command exited with return code 0.</msg>
<status endtime="20170808 16:18:21.896" status="PASS" starttime="20170808 16:18:21.804"></status>
</kw>
<status endtime="20170808 16:18:21.896" status="PASS" starttime="20170808 16:18:21.560"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-co.1419" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170808 16:18:22.159" status="PASS" starttime="20170808 16:18:21.896"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:22.199">encoding=UTF-8
port=22
timeout=25 seconds
alias=bmc_connection
index=1
height=24
width=80
host=9.3.86.161
newline=

prompt=# 
path_separator=/
term_type=vt100</msg>
<msg level="INFO" timestamp="20170808 16:18:22.200">Executing command 'rm /tmp/core_phosphor-fan-co.1419'.</msg>
<msg level="INFO" timestamp="20170808 16:18:22.266">Command exited with return code 0.</msg>
<status endtime="20170808 16:18:22.278" status="PASS" starttime="20170808 16:18:22.159"></status>
</kw>
<status endtime="20170808 16:18:22.278" status="PASS" starttime="20170808 16:18:21.896"></status>
</kw>
<status endtime="20170808 16:18:22.278" status="PASS" starttime="20170808 16:18:21.154"></status>
</kw>
<status endtime="20170808 16:18:22.278" status="PASS" starttime="20170808 16:18:20.376"></status>
</kw>
<status endtime="20170808 16:18:22.278" status="PASS" starttime="20170808 16:18:20.349"></status>
</kw>
<status endtime="20170808 16:18:22.279" status="PASS" starttime="20170808 16:18:20.347"></status>
</kw>
<status endtime="20170808 16:18:22.279" status="PASS" starttime="20170808 16:18:20.347"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170808 16:18:22.281" status="PASS" starttime="20170808 16:18:22.280"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:22.281">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:22.281">${ret_values} = None</msg>
<status endtime="20170808 16:18:22.281" status="PASS" starttime="20170808 16:18:22.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170808 16:18:22.281" status="PASS" starttime="20170808 16:18:22.281"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:22.315">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:18:22.315" status="PASS" starttime="20170808 16:18:22.314"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.316">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:18:22.316" status="PASS" starttime="20170808 16:18:22.315"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.316">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:18:22.316" status="PASS" starttime="20170808 16:18:22.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.317">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:18:22.317" status="PASS" starttime="20170808 16:18:22.317"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:22.501">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:18:22.501" status="PASS" starttime="20170808 16:18:22.318"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:22.501">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:22.501">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:22.501" status="PASS" starttime="20170808 16:18:22.317"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:22.502">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:22.502" status="PASS" starttime="20170808 16:18:22.502"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:22.503">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:22.503" status="PASS" starttime="20170808 16:18:22.502"></status>
</kw>
<status endtime="20170808 16:18:22.503" status="PASS" starttime="20170808 16:18:22.314"></status>
</kw>
<status endtime="20170808 16:18:22.503" status="PASS" starttime="20170808 16:18:22.313"></status>
</kw>
<status endtime="20170808 16:18:22.503" status="PASS" starttime="20170808 16:18:22.313"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.504">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170808 16:18:22.504" status="PASS" starttime="20170808 16:18:22.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 16:18:22.504" status="PASS" starttime="20170808 16:18:22.504"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.645">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:18:22.645">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:22.645" status="PASS" starttime="20170808 16:18:22.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 16:18:22.646" status="PASS" starttime="20170808 16:18:22.645"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:18:22.646">Delete All Sessions</msg>
<status endtime="20170808 16:18:22.646" status="PASS" starttime="20170808 16:18:22.646"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:22.646">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:22.646" status="PASS" starttime="20170808 16:18:22.312"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:22.647">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:22.647" status="PASS" starttime="20170808 16:18:22.647"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:22.648">${status} = True</msg>
<status endtime="20170808 16:18:22.648" status="PASS" starttime="20170808 16:18:22.647"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170808 16:18:22.648" status="PASS" starttime="20170808 16:18:22.648"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.649">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502207558623, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502208197094, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:18:22.649">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:18:22.649">${content} = {u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/2': {u'associations': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Id': 2, u'Message': u'xyz.openbmc_project.S...</msg>
<status endtime="20170808 16:18:22.649" status="PASS" starttime="20170808 16:18:22.649"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.650">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3']</msg>
<status endtime="20170808 16:18:22.650" status="PASS" starttime="20170808 16:18:22.649"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.650">${logpath} = /tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_esel</msg>
<status endtime="20170808 16:18:22.650" status="PASS" starttime="20170808 16:18:22.650"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:22.651">Created file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_esel"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_esel&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:22.651" status="PASS" starttime="20170808 16:18:22.651"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170808 16:18:22.652" status="PASS" starttime="20170808 16:18:22.652"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:22.655">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:18:22.656" status="PASS" starttime="20170808 16:18:22.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.656">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:18:22.656" status="PASS" starttime="20170808 16:18:22.656"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.657">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:18:22.657" status="PASS" starttime="20170808 16:18:22.657"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.658">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:18:22.658" status="PASS" starttime="20170808 16:18:22.657"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:22.851">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:18:22.851" status="PASS" starttime="20170808 16:18:22.659"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:22.851">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:22.851">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:22.851" status="PASS" starttime="20170808 16:18:22.658"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:22.852">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:22.852" status="PASS" starttime="20170808 16:18:22.851"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:22.852">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:22.853" status="PASS" starttime="20170808 16:18:22.852"></status>
</kw>
<status endtime="20170808 16:18:22.853" status="PASS" starttime="20170808 16:18:22.655"></status>
</kw>
<status endtime="20170808 16:18:22.853" status="PASS" starttime="20170808 16:18:22.654"></status>
</kw>
<status endtime="20170808 16:18:22.853" status="PASS" starttime="20170808 16:18:22.654"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.853">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170808 16:18:22.853" status="PASS" starttime="20170808 16:18:22.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 16:18:22.854" status="PASS" starttime="20170808 16:18:22.854"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.937">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:18:22.937">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:22.938" status="PASS" starttime="20170808 16:18:22.854"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 16:18:22.938" status="PASS" starttime="20170808 16:18:22.938"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:18:22.939">Delete All Sessions</msg>
<status endtime="20170808 16:18:22.939" status="PASS" starttime="20170808 16:18:22.939"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:22.939">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:22.939" status="PASS" starttime="20170808 16:18:22.653"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:22.940">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:22.940" status="PASS" starttime="20170808 16:18:22.939"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.940">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:18:22.940">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:18:22.940">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status endtime="20170808 16:18:22.940" status="PASS" starttime="20170808 16:18:22.940"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:22.941">${esel_data} = []</msg>
<status endtime="20170808 16:18:22.941" status="PASS" starttime="20170808 16:18:22.652"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.941">Length is 0</msg>
<msg level="INFO" timestamp="20170808 16:18:22.941">${length} = 0</msg>
<status endtime="20170808 16:18:22.941" status="PASS" starttime="20170808 16:18:22.941"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:22.942">Continuing for loop from the next iteration.</msg>
<status endtime="20170808 16:18:22.942" status="PASS" starttime="20170808 16:18:22.942"></status>
</kw>
<status endtime="20170808 16:18:22.942" status="PASS" starttime="20170808 16:18:22.651"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170808 16:18:22.943" status="PASS" starttime="20170808 16:18:22.942"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:22.946">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:18:22.947" status="PASS" starttime="20170808 16:18:22.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.947">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:18:22.947" status="PASS" starttime="20170808 16:18:22.947"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.948">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:18:22.948" status="PASS" starttime="20170808 16:18:22.948"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:22.949">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:18:22.949" status="PASS" starttime="20170808 16:18:22.948"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:23.143">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:18:23.143" status="PASS" starttime="20170808 16:18:22.950"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:23.143">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:23.144">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:23.144" status="PASS" starttime="20170808 16:18:22.949"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:23.144">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:23.144" status="PASS" starttime="20170808 16:18:23.144"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:23.145">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:23.145" status="PASS" starttime="20170808 16:18:23.145"></status>
</kw>
<status endtime="20170808 16:18:23.145" status="PASS" starttime="20170808 16:18:22.945"></status>
</kw>
<status endtime="20170808 16:18:23.145" status="PASS" starttime="20170808 16:18:22.945"></status>
</kw>
<status endtime="20170808 16:18:23.145" status="PASS" starttime="20170808 16:18:22.944"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.146">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170808 16:18:23.146" status="PASS" starttime="20170808 16:18:23.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 16:18:23.147" status="PASS" starttime="20170808 16:18:23.146"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.263">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:18:23.263">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:23.263" status="PASS" starttime="20170808 16:18:23.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 16:18:23.264" status="PASS" starttime="20170808 16:18:23.263"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:18:23.264">Delete All Sessions</msg>
<status endtime="20170808 16:18:23.264" status="PASS" starttime="20170808 16:18:23.264"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:23.265">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:23.265" status="PASS" starttime="20170808 16:18:22.944"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:23.266">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:23.266" status="PASS" starttime="20170808 16:18:23.265"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.267">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:18:23.267">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170808 16:18:23.267">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status endtime="20170808 16:18:23.267" status="PASS" starttime="20170808 16:18:23.266"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:23.267">${esel_data} = []</msg>
<status endtime="20170808 16:18:23.267" status="PASS" starttime="20170808 16:18:22.943"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.268">Length is 0</msg>
<msg level="INFO" timestamp="20170808 16:18:23.268">${length} = 0</msg>
<status endtime="20170808 16:18:23.268" status="PASS" starttime="20170808 16:18:23.268"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:23.269">Continuing for loop from the next iteration.</msg>
<status endtime="20170808 16:18:23.269" status="PASS" starttime="20170808 16:18:23.269"></status>
</kw>
<status endtime="20170808 16:18:23.269" status="PASS" starttime="20170808 16:18:22.942"></status>
</kw>
<status endtime="20170808 16:18:23.269" status="PASS" starttime="20170808 16:18:22.651"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.276">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170808 16:18:23.280">${out} = </msg>
<status endtime="20170808 16:18:23.280" status="PASS" starttime="20170808 16:18:23.270"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170808 16:18:23.284">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170808 16:18:23.284" status="FAIL" starttime="20170808 16:18:23.283"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:23.285">${status} = False</msg>
<status endtime="20170808 16:18:23.285" status="PASS" starttime="20170808 16:18:23.282"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:23.285">Returning from the enclosing user keyword.</msg>
<status endtime="20170808 16:18:23.286" status="PASS" starttime="20170808 16:18:23.285"></status>
</kw>
<status endtime="20170808 16:18:23.286" status="PASS" starttime="20170808 16:18:22.312"></status>
</kw>
<status endtime="20170808 16:18:23.286" status="PASS" starttime="20170808 16:18:22.282"></status>
</kw>
<status endtime="20170808 16:18:23.286" status="PASS" starttime="20170808 16:18:22.279"></status>
</kw>
<status endtime="20170808 16:18:23.287" status="PASS" starttime="20170808 16:18:22.279"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170808 16:18:23.289" status="PASS" starttime="20170808 16:18:23.289"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:23.289">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:23.289">${ret_values} = None</msg>
<status endtime="20170808 16:18:23.289" status="PASS" starttime="20170808 16:18:23.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170808 16:18:23.290" status="PASS" starttime="20170808 16:18:23.290"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.320">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170808 16:18:23.320" status="PASS" starttime="20170808 16:18:23.320"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.323">@{cmd_list} = [ ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_lis...</msg>
<status endtime="20170808 16:18:23.323" status="PASS" starttime="20170808 16:18:23.322"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.325">${logpath} = /tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_led.txt</msg>
<status endtime="20170808 16:18:23.325" status="PASS" starttime="20170808 16:18:23.324"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:23.329">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:18:23.330" status="PASS" starttime="20170808 16:18:23.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.330">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:18:23.330" status="PASS" starttime="20170808 16:18:23.330"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.331">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:18:23.331" status="PASS" starttime="20170808 16:18:23.331"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.332">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:18:23.332" status="PASS" starttime="20170808 16:18:23.332"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:23.596">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:18:23.596" status="PASS" starttime="20170808 16:18:23.334"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:23.597">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:23.597">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:23.597" status="PASS" starttime="20170808 16:18:23.333"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:23.597">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:23.597" status="PASS" starttime="20170808 16:18:23.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:23.598">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:23.598" status="PASS" starttime="20170808 16:18:23.598"></status>
</kw>
<status endtime="20170808 16:18:23.598" status="PASS" starttime="20170808 16:18:23.327"></status>
</kw>
<status endtime="20170808 16:18:23.598" status="PASS" starttime="20170808 16:18:23.327"></status>
</kw>
<status endtime="20170808 16:18:23.599" status="PASS" starttime="20170808 16:18:23.326"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.599">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170808 16:18:23.599" status="PASS" starttime="20170808 16:18:23.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 16:18:23.600" status="PASS" starttime="20170808 16:18:23.599"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.642">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:18:23.642">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170808 16:18:23.642" status="PASS" starttime="20170808 16:18:23.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 16:18:23.643" status="PASS" starttime="20170808 16:18:23.642"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:18:23.643">Delete All Sessions</msg>
<status endtime="20170808 16:18:23.643" status="PASS" starttime="20170808 16:18:23.643"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:23.643">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170808 16:18:23.643" status="PASS" starttime="20170808 16:18:23.325"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:23.645">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170808 16:18:23.645">404 != 200</msg>
<status endtime="20170808 16:18:23.645" status="FAIL" starttime="20170808 16:18:23.644"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:23.645">${status} = False</msg>
<status endtime="20170808 16:18:23.645" status="PASS" starttime="20170808 16:18:23.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170808 16:18:23.646">Continuing for loop from the next iteration.</msg>
<status endtime="20170808 16:18:23.646" status="PASS" starttime="20170808 16:18:23.646"></status>
</kw>
<status endtime="20170808 16:18:23.646" status="PASS" starttime="20170808 16:18:23.646"></status>
</kw>
<status endtime="20170808 16:18:23.646" status="PASS" starttime="20170808 16:18:23.323"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.647">${logpath} = /tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_inventory.txt</msg>
<status endtime="20170808 16:18:23.647" status="PASS" starttime="20170808 16:18:23.647"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:23.650">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:18:23.650" status="PASS" starttime="20170808 16:18:23.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.651">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:18:23.651" status="PASS" starttime="20170808 16:18:23.651"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.652">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:18:23.652" status="PASS" starttime="20170808 16:18:23.651"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.652">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:18:23.652" status="PASS" starttime="20170808 16:18:23.652"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:23.854">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:18:23.854" status="PASS" starttime="20170808 16:18:23.653"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:23.855">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:23.855">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:23.855" status="PASS" starttime="20170808 16:18:23.653"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:23.855">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:23.855" status="PASS" starttime="20170808 16:18:23.855"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:23.856">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:23.856" status="PASS" starttime="20170808 16:18:23.856"></status>
</kw>
<status endtime="20170808 16:18:23.856" status="PASS" starttime="20170808 16:18:23.649"></status>
</kw>
<status endtime="20170808 16:18:23.856" status="PASS" starttime="20170808 16:18:23.649"></status>
</kw>
<status endtime="20170808 16:18:23.856" status="PASS" starttime="20170808 16:18:23.648"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:23.857">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170808 16:18:23.857" status="PASS" starttime="20170808 16:18:23.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 16:18:23.858" status="PASS" starttime="20170808 16:18:23.857"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.091">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:18:24.091">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:24.091" status="PASS" starttime="20170808 16:18:23.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 16:18:24.092" status="PASS" starttime="20170808 16:18:24.092"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:18:24.093">Delete All Sessions</msg>
<status endtime="20170808 16:18:24.093" status="PASS" starttime="20170808 16:18:24.092"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:24.093">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:24.093" status="PASS" starttime="20170808 16:18:23.647"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:24.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:24.095" status="PASS" starttime="20170808 16:18:24.094"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:24.095">${status} = True</msg>
<status endtime="20170808 16:18:24.095" status="PASS" starttime="20170808 16:18:24.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170808 16:18:24.095" status="PASS" starttime="20170808 16:18:24.095"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.096">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:18:24.096">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170808 16:18:24.096">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status endtime="20170808 16:18:24.097" status="PASS" starttime="20170808 16:18:24.096"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:24.098">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_inventory.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:24.098" status="PASS" starttime="20170808 16:18:24.097"></status>
</kw>
<status endtime="20170808 16:18:24.098" status="PASS" starttime="20170808 16:18:24.097"></status>
</kw>
<status endtime="20170808 16:18:24.098" status="PASS" starttime="20170808 16:18:23.647"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.099">${logpath} = /tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_elog.txt</msg>
<status endtime="20170808 16:18:24.099" status="PASS" starttime="20170808 16:18:24.099"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:24.102">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:18:24.102" status="PASS" starttime="20170808 16:18:24.102"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.103">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:18:24.103" status="PASS" starttime="20170808 16:18:24.102"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.103">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:18:24.103" status="PASS" starttime="20170808 16:18:24.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.104">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:18:24.104" status="PASS" starttime="20170808 16:18:24.104"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:24.289">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:18:24.290" status="PASS" starttime="20170808 16:18:24.105"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:24.290">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:24.290">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:24.290" status="PASS" starttime="20170808 16:18:24.104"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:24.291">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:24.291" status="PASS" starttime="20170808 16:18:24.290"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:24.291">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:24.291" status="PASS" starttime="20170808 16:18:24.291"></status>
</kw>
<status endtime="20170808 16:18:24.291" status="PASS" starttime="20170808 16:18:24.101"></status>
</kw>
<status endtime="20170808 16:18:24.292" status="PASS" starttime="20170808 16:18:24.101"></status>
</kw>
<status endtime="20170808 16:18:24.292" status="PASS" starttime="20170808 16:18:24.100"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.292">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170808 16:18:24.292" status="PASS" starttime="20170808 16:18:24.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 16:18:24.293" status="PASS" starttime="20170808 16:18:24.293"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.500">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:18:24.500">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:24.501" status="PASS" starttime="20170808 16:18:24.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 16:18:24.501" status="PASS" starttime="20170808 16:18:24.501"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:18:24.502">Delete All Sessions</msg>
<status endtime="20170808 16:18:24.502" status="PASS" starttime="20170808 16:18:24.502"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:24.502">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:24.502" status="PASS" starttime="20170808 16:18:24.099"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:24.503">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:24.503" status="PASS" starttime="20170808 16:18:24.503"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:24.503">${status} = True</msg>
<status endtime="20170808 16:18:24.503" status="PASS" starttime="20170808 16:18:24.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170808 16:18:24.504" status="PASS" starttime="20170808 16:18:24.503"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.504">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502207558623, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502208197094, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:18:24.505">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170808 16:18:24.505">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [],
            "Id": 2,
            "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFile...</msg>
<status endtime="20170808 16:18:24.505" status="PASS" starttime="20170808 16:18:24.504"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:24.506">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_elog.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:24.506" status="PASS" starttime="20170808 16:18:24.506"></status>
</kw>
<status endtime="20170808 16:18:24.506" status="PASS" starttime="20170808 16:18:24.505"></status>
</kw>
<status endtime="20170808 16:18:24.506" status="PASS" starttime="20170808 16:18:24.098"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.507">${logpath} = /tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_sensor_list.txt</msg>
<status endtime="20170808 16:18:24.507" status="PASS" starttime="20170808 16:18:24.507"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:24.510">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:18:24.510" status="PASS" starttime="20170808 16:18:24.510"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.511">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:18:24.511" status="PASS" starttime="20170808 16:18:24.511"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.512">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:18:24.512" status="PASS" starttime="20170808 16:18:24.511"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.512">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:18:24.512" status="PASS" starttime="20170808 16:18:24.512"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:24.695">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:18:24.695" status="PASS" starttime="20170808 16:18:24.513"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:24.695">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:24.695">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:24.695" status="PASS" starttime="20170808 16:18:24.513"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:24.696">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:24.696" status="PASS" starttime="20170808 16:18:24.695"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:24.697">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:24.697" status="PASS" starttime="20170808 16:18:24.696"></status>
</kw>
<status endtime="20170808 16:18:24.697" status="PASS" starttime="20170808 16:18:24.509"></status>
</kw>
<status endtime="20170808 16:18:24.697" status="PASS" starttime="20170808 16:18:24.509"></status>
</kw>
<status endtime="20170808 16:18:24.697" status="PASS" starttime="20170808 16:18:24.508"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.698">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170808 16:18:24.698" status="PASS" starttime="20170808 16:18:24.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 16:18:24.698" status="PASS" starttime="20170808 16:18:24.698"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.866">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:18:24.866">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:24.866" status="PASS" starttime="20170808 16:18:24.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 16:18:24.867" status="PASS" starttime="20170808 16:18:24.867"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:18:24.867">Delete All Sessions</msg>
<status endtime="20170808 16:18:24.867" status="PASS" starttime="20170808 16:18:24.867"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:24.868">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:24.868" status="PASS" starttime="20170808 16:18:24.507"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:24.869">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:24.869" status="PASS" starttime="20170808 16:18:24.868"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:24.869">${status} = True</msg>
<status endtime="20170808 16:18:24.869" status="PASS" starttime="20170808 16:18:24.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170808 16:18:24.870" status="PASS" starttime="20170808 16:18:24.869"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.870">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170808 16:18:24.870">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170808 16:18:24.870">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170808 16:18:24.871" status="PASS" starttime="20170808 16:18:24.870"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:24.872">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_sensor_list.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:24.872" status="PASS" starttime="20170808 16:18:24.871"></status>
</kw>
<status endtime="20170808 16:18:24.872" status="PASS" starttime="20170808 16:18:24.871"></status>
</kw>
<status endtime="20170808 16:18:24.872" status="PASS" starttime="20170808 16:18:24.506"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.874">${logpath} = /tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/20170808161814421976_BMC_record_log.txt</msg>
<status endtime="20170808 16:18:24.874" status="PASS" starttime="20170808 16:18:24.873"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:24.877">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 16:18:24.878" status="PASS" starttime="20170808 16:18:24.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.879">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 16:18:24.879" status="PASS" starttime="20170808 16:18:24.878"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.880">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 16:18:24.880" status="PASS" starttime="20170808 16:18:24.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:24.881">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 16:18:24.881" status="PASS" starttime="20170808 16:18:24.880"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:25.094">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 16:18:25.094" status="PASS" starttime="20170808 16:18:24.882"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:25.095">${status} = PASS</msg>
<msg level="INFO" timestamp="20170808 16:18:25.095">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 16:18:25.095" status="PASS" starttime="20170808 16:18:24.881"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:25.095">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:25.095" status="PASS" starttime="20170808 16:18:25.095"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:25.096">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 16:18:25.096" status="PASS" starttime="20170808 16:18:25.096"></status>
</kw>
<status endtime="20170808 16:18:25.096" status="PASS" starttime="20170808 16:18:24.876"></status>
</kw>
<status endtime="20170808 16:18:25.096" status="PASS" starttime="20170808 16:18:24.876"></status>
</kw>
<status endtime="20170808 16:18:25.097" status="PASS" starttime="20170808 16:18:24.875"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.097">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170808 16:18:25.097" status="PASS" starttime="20170808 16:18:25.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 16:18:25.098" status="PASS" starttime="20170808 16:18:25.097"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.139">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170808 16:18:25.140">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170808 16:18:25.140" status="PASS" starttime="20170808 16:18:25.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 16:18:25.140" status="PASS" starttime="20170808 16:18:25.140"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170808 16:18:25.141">Delete All Sessions</msg>
<status endtime="20170808 16:18:25.141" status="PASS" starttime="20170808 16:18:25.140"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:25.141">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170808 16:18:25.141" status="PASS" starttime="20170808 16:18:24.874"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:25.142">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170808 16:18:25.142">404 != 200</msg>
<status endtime="20170808 16:18:25.143" status="FAIL" starttime="20170808 16:18:25.142"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:25.143">${status} = False</msg>
<status endtime="20170808 16:18:25.143" status="PASS" starttime="20170808 16:18:25.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170808 16:18:25.144">Continuing for loop from the next iteration.</msg>
<status endtime="20170808 16:18:25.144" status="PASS" starttime="20170808 16:18:25.143"></status>
</kw>
<status endtime="20170808 16:18:25.144" status="PASS" starttime="20170808 16:18:25.143"></status>
</kw>
<status endtime="20170808 16:18:25.144" status="PASS" starttime="20170808 16:18:24.873"></status>
</kw>
<status endtime="20170808 16:18:25.144" status="PASS" starttime="20170808 16:18:23.323"></status>
</kw>
<status endtime="20170808 16:18:25.144" status="PASS" starttime="20170808 16:18:23.321"></status>
</kw>
<status endtime="20170808 16:18:25.144" status="PASS" starttime="20170808 16:18:23.321"></status>
</kw>
<status endtime="20170808 16:18:25.144" status="PASS" starttime="20170808 16:18:23.321"></status>
</kw>
<status endtime="20170808 16:18:25.144" status="PASS" starttime="20170808 16:18:23.320"></status>
</kw>
<status endtime="20170808 16:18:25.144" status="PASS" starttime="20170808 16:18:23.290"></status>
</kw>
<status endtime="20170808 16:18:25.144" status="PASS" starttime="20170808 16:18:23.287"></status>
</kw>
<status endtime="20170808 16:18:25.145" status="PASS" starttime="20170808 16:18:23.287"></status>
</kw>
<status endtime="20170808 16:18:25.145" status="PASS" starttime="20170808 16:18:14.674"></status>
</kw>
<status endtime="20170808 16:18:25.145" status="PASS" starttime="20170808 16:18:14.671"></status>
</kw>
<status endtime="20170808 16:18:25.145" status="PASS" starttime="20170808 16:18:14.671"></status>
</kw>
<status endtime="20170808 16:18:25.145" status="PASS" starttime="20170808 16:18:14.671"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170808 16:18:25.152" status="PASS" starttime="20170808 16:18:25.152"></status>
</kw>
<status endtime="20170808 16:18:25.153" status="PASS" starttime="20170808 16:18:25.145"></status>
</kw>
<status endtime="20170808 16:18:25.153" status="PASS" starttime="20170808 16:18:14.670"></status>
</kw>
<status endtime="20170808 16:18:25.153" status="PASS" starttime="20170808 16:18:11.368"></status>
</kw>
<status endtime="20170808 16:18:25.153" status="PASS" starttime="20170808 16:18:11.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170808 16:18:25.154" status="PASS" starttime="20170808 16:18:25.153"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.164">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170808 16:18:25.164" status="PASS" starttime="20170808 16:18:25.154"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.165">${FFDC_DIR_PATH} = /tmp/fspcibld/10938/obmc-robot/logs/20170808161814421976_TestsTestBasicPoweron/20170808161814421976_PowerOnTest/</msg>
<status endtime="20170808 16:18:25.165" status="PASS" starttime="20170808 16:18:25.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170808 16:18:25.166" status="PASS" starttime="20170808 16:18:25.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170808 16:18:25.167" status="PASS" starttime="20170808 16:18:25.166"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:25.167">Directory '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs"&gt;/tmp/fspcibld/10938/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170808 16:18:25.167" status="PASS" starttime="20170808 16:18:25.167"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:25.168">File '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170808 16:18:25.169" status="PASS" starttime="20170808 16:18:25.168"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:25.169">${exist} = True</msg>
<status endtime="20170808 16:18:25.169" status="PASS" starttime="20170808 16:18:25.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170808 16:18:25.169" status="PASS" starttime="20170808 16:18:25.169"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170808 16:18:25.170" status="PASS" starttime="20170808 16:18:25.169"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.171">${cur_time} = 2017-08-08 16:18:25:170675</msg>
<status endtime="20170808 16:18:25.171" status="PASS" starttime="20170808 16:18:25.170"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.172">${cur_time} = 20170808161825170675</msg>
<status endtime="20170808 16:18:25.172" status="PASS" starttime="20170808 16:18:25.171"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:25.172">${cur_time} = 20170808161825170675</msg>
<status endtime="20170808 16:18:25.172" status="PASS" starttime="20170808 16:18:25.170"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:25.173">Appended to file '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10938/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:25.173" status="PASS" starttime="20170808 16:18:25.172"></status>
</kw>
<status endtime="20170808 16:18:25.173" status="PASS" starttime="20170808 16:18:25.154"></status>
</kw>
<status endtime="20170808 16:18:25.173" status="PASS" starttime="20170808 16:18:11.011"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.175">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 16:18:25.175" status="PASS" starttime="20170808 16:18:25.175"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.176">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 16:18:25.176" status="PASS" starttime="20170808 16:18:25.175"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:25.176">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 16:18:25.176" status="PASS" starttime="20170808 16:18:25.174"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.177">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170808 16:18:25.177" status="PASS" starttime="20170808 16:18:25.177"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170808 16:18:25.177" status="PASS" starttime="20170808 16:18:25.177"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.182">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170808 16:18:25.185">${rc} = 0</msg>
<msg level="INFO" timestamp="20170808 16:18:25.185">${output} = /tmp/fspcibld/10938/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170808 16:18:25.185" status="PASS" starttime="20170808 16:18:25.178"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170808 16:18:25.189" status="PASS" starttime="20170808 16:18:25.188"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170808 16:18:25.190" status="PASS" starttime="20170808 16:18:25.189"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.192">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170808 16:18:25.192" status="PASS" starttime="20170808 16:18:25.191"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:25.192">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170808 16:18:25.192" status="PASS" starttime="20170808 16:18:25.176"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.193">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170808 16:18:25.193" status="PASS" starttime="20170808 16:18:25.193"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170808 16:18:25.194" status="PASS" starttime="20170808 16:18:25.194"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.201">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170808 16:18:25.210">${rc} = 0</msg>
<msg level="INFO" timestamp="20170808 16:18:25.210">${os_con_pid} = </msg>
<status endtime="20170808 16:18:25.210" status="PASS" starttime="20170808 16:18:25.195"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170808 16:18:25.213" status="PASS" starttime="20170808 16:18:25.212"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.214">${cmd_buf} = kill -9 </msg>
<status endtime="20170808 16:18:25.214" status="PASS" starttime="20170808 16:18:25.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170808 16:18:25.218" status="PASS" starttime="20170808 16:18:25.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.219">${rc} = None</msg>
<msg level="INFO" timestamp="20170808 16:18:25.219">${output} = None</msg>
<status endtime="20170808 16:18:25.219" status="PASS" starttime="20170808 16:18:25.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170808 16:18:25.220" status="PASS" starttime="20170808 16:18:25.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170808 16:18:25.224">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/10938/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/10938/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170808 16:18:25.224" status="PASS" starttime="20170808 16:18:25.221"></status>
</kw>
<status endtime="20170808 16:18:25.224" status="PASS" starttime="20170808 16:18:25.221"></status>
</kw>
<status endtime="20170808 16:18:25.224" status="PASS" starttime="20170808 16:18:25.220"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.225">${output} = </msg>
<status endtime="20170808 16:18:25.225" status="PASS" starttime="20170808 16:18:25.224"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170808 16:18:25.225">${loc_quiet} = 1</msg>
<status endtime="20170808 16:18:25.225" status="PASS" starttime="20170808 16:18:25.225"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170808 16:18:25.260" status="PASS" starttime="20170808 16:18:25.226"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:25.262">${rc} = 0</msg>
<msg level="INFO" timestamp="20170808 16:18:25.262">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status endtime="20170808 16:18:25.262" status="PASS" starttime="20170808 16:18:25.226"></status>
</kw>
<msg level="INFO" timestamp="20170808 16:18:25.263">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status endtime="20170808 16:18:25.263" status="PASS" starttime="20170808 16:18:25.173"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170808 16:18:25.265">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status endtime="20170808 16:18:25.265" status="PASS" starttime="20170808 16:18:25.264"></status>
</kw>
<status endtime="20170808 16:18:25.265" status="PASS" starttime="20170808 16:18:11.011"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170808 16:18:25.265" status="FAIL" critical="yes" starttime="20170808 16:07:59.997">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170808 16:18:25.267" status="FAIL" starttime="20170808 16:07:59.962"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170808 16:18:25.270" status="FAIL" starttime="20170808 16:07:54.173"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat name="Tests" pass="1" id="s1" fail="1">Tests</stat>
<stat name="Security" pass="1" id="s1-s1" fail="0">Tests.Security</stat>
<stat name="Test Ssl" pass="1" id="s1-s1-s1" fail="0">Tests.Security.Test Ssl</stat>
<stat name="Test Basic Poweron" pass="0" id="s1-s2" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
