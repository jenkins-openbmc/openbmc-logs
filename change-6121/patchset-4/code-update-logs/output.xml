<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170823 03:45:03.610" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/code_update.robot" id="s1" name="Code Update">
<test id="s1-t1" name="REST Host Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'true' == '${DELETE_OLD_PNOR_IMAGES}'</arg>
<arg>Delete All PNOR Images</arg>
</arguments>
<kw name="Delete All Pnor Images" library="code_update_utils">
<doc>Delete all PNOR images from the BMC.</doc>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/enumerate</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:45:04.470" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:45:04.471" starttime="20170823 03:45:04.470"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:45:04.472" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:45:04.472" starttime="20170823 03:45:04.471"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:45:04.472" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:45:04.473" starttime="20170823 03:45:04.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:45:04.473" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:45:04.473" starttime="20170823 03:45:04.473"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:45:04.653" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:45:04.654" starttime="20170823 03:45:04.474"></status>
</kw>
<msg timestamp="20170823 03:45:04.654" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:45:04.654" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:04.654" starttime="20170823 03:45:04.474"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:45:04.654" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:04.655" starttime="20170823 03:45:04.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:45:04.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:04.656" starttime="20170823 03:45:04.655"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:04.656" starttime="20170823 03:45:04.469"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:04.656" starttime="20170823 03:45:04.469"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:04.656" starttime="20170823 03:45:04.468"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:45:04.657" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170823 03:45:04.657" starttime="20170823 03:45:04.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:04.657" starttime="20170823 03:45:04.657"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:45:04.782" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170823 03:45:04.783" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:04.783" starttime="20170823 03:45:04.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:04.785" starttime="20170823 03:45:04.783"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:45:04.786" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:45:04.786" starttime="20170823 03:45:04.786"></status>
</kw>
<msg timestamp="20170823 03:45:04.786" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:04.786" starttime="20170823 03:45:04.467"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:45:04.787" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:04.787" starttime="20170823 03:45:04.786"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 03:45:04.788" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/65a30f36": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.9-26-g1e559e4"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:45:04.788" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 03:45:04.788" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/software/65a30f36': {u'Path': u'', u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedA...</msg>
<status status="PASS" endtime="20170823 03:45:04.788" starttime="20170823 03:45:04.787"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:04.788" starttime="20170823 03:45:04.467"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:04.788" starttime="20170823 03:45:04.457"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:04.788" starttime="20170823 03:45:04.456"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:04.788" starttime="20170823 03:45:04.455"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<msg timestamp="20170823 03:45:04.789" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar"&gt;/home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170823 03:45:04.789" starttime="20170823 03:45:04.789"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<assign>
<var>${IMAGE_VERSION}</var>
</assign>
<msg timestamp="20170823 03:45:04.791" level="INFO">${IMAGE_VERSION} = IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32</msg>
<status status="PASS" endtime="20170823 03:45:04.791" starttime="20170823 03:45:04.790"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170823 03:45:04.792" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar"&gt;/home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170823 03:45:16.295" level="INFO">${image_data} = MANIFEST0000664075750014206770000000062113145334332011550 0...</msg>
<status status="PASS" endtime="20170823 03:45:16.295" starttime="20170823 03:45:04.792"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:45:16.299" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:45:16.299" starttime="20170823 03:45:16.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:45:16.300" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:45:16.300" starttime="20170823 03:45:16.300"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:45:16.301" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:45:16.301" starttime="20170823 03:45:16.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:45:16.301" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:45:16.301" starttime="20170823 03:45:16.301"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:45:16.495" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:45:16.495" starttime="20170823 03:45:16.302"></status>
</kw>
<msg timestamp="20170823 03:45:16.495" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:45:16.496" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:16.496" starttime="20170823 03:45:16.302"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:45:16.496" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:16.496" starttime="20170823 03:45:16.496"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:45:16.497" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:16.497" starttime="20170823 03:45:16.497"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:16.497" starttime="20170823 03:45:16.298"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:16.497" starttime="20170823 03:45:16.297"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:16.498" starttime="20170823 03:45:16.297"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:45:16.498" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170823 03:45:16.498" starttime="20170823 03:45:16.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:45:16.499" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170823 03:45:16.499" starttime="20170823 03:45:16.498"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:16.499" starttime="20170823 03:45:16.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:16.500" starttime="20170823 03:45:16.500"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:45:23.777" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170823 03:45:23.777" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:23.777" starttime="20170823 03:45:16.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:23.778" starttime="20170823 03:45:23.777"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:45:23.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:23.778" starttime="20170823 03:45:23.778"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:45:23.779" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:45:23.779" starttime="20170823 03:45:23.779"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:23.779" starttime="20170823 03:45:16.296"></status>
</kw>
<kw name="Verify Image Upload" library="code_update_utils">
<doc>Verify the image was uploaded correctly and that it created</doc>
<assign>
<var>${ret}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170823 03:45:23.785" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170823 03:45:23.785" starttime="20170823 03:45:23.785"></status>
</kw>
<msg timestamp="20170823 03:45:23.785" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170823 03:45:23.785" starttime="20170823 03:45:23.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:23.787" starttime="20170823 03:45:23.786"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:23.787" starttime="20170823 03:45:23.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:23.787" starttime="20170823 03:45:23.787"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170823 03:45:23.789" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170823 03:45:23.789" starttime="20170823 03:45:23.788"></status>
</kw>
<msg timestamp="20170823 03:45:23.789" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170823 03:45:23.789" starttime="20170823 03:45:23.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:23.791" starttime="20170823 03:45:23.790"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:23.791" starttime="20170823 03:45:23.790"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:23.791" starttime="20170823 03:45:23.789"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170823 03:45:23.791" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170823 03:45:26.002" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170823 03:45:26.002" starttime="20170823 03:45:23.791"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:26.002" starttime="20170823 03:45:23.784"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -d /tmp/images/*/</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 03:45:26.010" level="INFO">Executing command 'ls -d /tmp/images/*/'.</msg>
<msg timestamp="20170823 03:45:26.059" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170823 03:45:26.059" level="INFO">${stdout} = /tmp/images/fd2cbe15/</msg>
<msg timestamp="20170823 03:45:26.059" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170823 03:45:26.059" starttime="20170823 03:45:26.009"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170823 03:45:26.060" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170823 03:45:26.060" starttime="20170823 03:45:26.059"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:26.060" starttime="20170823 03:45:26.009"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170823 03:45:26.065" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170823 03:45:26.065" starttime="20170823 03:45:26.065"></status>
</kw>
<msg timestamp="20170823 03:45:26.065" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170823 03:45:26.065" starttime="20170823 03:45:26.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:26.066" starttime="20170823 03:45:26.066"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:26.066" starttime="20170823 03:45:26.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:26.067" starttime="20170823 03:45:26.067"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170823 03:45:26.068" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170823 03:45:26.068" starttime="20170823 03:45:26.068"></status>
</kw>
<msg timestamp="20170823 03:45:26.068" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170823 03:45:26.068" starttime="20170823 03:45:26.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:26.070" starttime="20170823 03:45:26.070"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:26.070" starttime="20170823 03:45:26.069"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:26.070" starttime="20170823 03:45:26.069"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170823 03:45:26.071" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170823 03:45:27.749" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170823 03:45:27.750" starttime="20170823 03:45:26.071"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:27.750" starttime="20170823 03:45:26.063"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/fd2cbe15/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 03:45:27.757" level="INFO">Executing command 'cat /tmp/images/fd2cbe15/MANIFEST | grep "version="'.</msg>
<msg timestamp="20170823 03:45:27.856" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170823 03:45:27.856" level="INFO">${stdout} = version=IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32
extended_version=op-build-v1.18-74-g53f4235-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.7-92-g0818df625e35,hostboot-be278ac,linux-4.12.5-openpowe...</msg>
<msg timestamp="20170823 03:45:27.856" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170823 03:45:27.856" starttime="20170823 03:45:27.757"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170823 03:45:27.857" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170823 03:45:27.857" starttime="20170823 03:45:27.856"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:27.857" starttime="20170823 03:45:27.756"></status>
</kw>
<msg timestamp="20170823 03:45:27.857" level="INFO">${version_id} = fd2cbe15</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170823 03:45:27.863" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170823 03:45:27.863" starttime="20170823 03:45:27.862"></status>
</kw>
<msg timestamp="20170823 03:45:27.863" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170823 03:45:27.863" starttime="20170823 03:45:27.861"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:27.865" starttime="20170823 03:45:27.864"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:27.865" starttime="20170823 03:45:27.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:27.866" starttime="20170823 03:45:27.865"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170823 03:45:27.867" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170823 03:45:27.868" starttime="20170823 03:45:27.867"></status>
</kw>
<msg timestamp="20170823 03:45:27.868" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170823 03:45:27.868" starttime="20170823 03:45:27.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:27.870" starttime="20170823 03:45:27.870"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:27.871" starttime="20170823 03:45:27.869"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:27.871" starttime="20170823 03:45:27.868"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170823 03:45:27.871" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170823 03:45:29.532" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170823 03:45:29.532" starttime="20170823 03:45:27.871"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:29.532" starttime="20170823 03:45:27.861"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170823 03:45:29.538" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170823 03:45:29.538" starttime="20170823 03:45:29.537"></status>
</kw>
<msg timestamp="20170823 03:45:29.538" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170823 03:45:29.538" starttime="20170823 03:45:29.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:29.539" starttime="20170823 03:45:29.539"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:29.539" starttime="20170823 03:45:29.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:29.540" starttime="20170823 03:45:29.540"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170823 03:45:29.541" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170823 03:45:29.541" starttime="20170823 03:45:29.541"></status>
</kw>
<msg timestamp="20170823 03:45:29.541" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170823 03:45:29.541" starttime="20170823 03:45:29.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:29.543" starttime="20170823 03:45:29.543"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:29.543" starttime="20170823 03:45:29.542"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:29.543" starttime="20170823 03:45:29.542"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170823 03:45:29.544" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170823 03:45:31.203" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170823 03:45:31.203" starttime="20170823 03:45:29.544"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:31.203" starttime="20170823 03:45:29.536"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/fd2cbe15/MANIFEST | grep "purpose="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 03:45:31.210" level="INFO">Executing command 'cat /tmp/images/fd2cbe15/MANIFEST | grep "purpose="'.</msg>
<msg timestamp="20170823 03:45:31.307" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170823 03:45:31.308" level="INFO">${stdout} = purpose=xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<msg timestamp="20170823 03:45:31.308" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170823 03:45:31.308" starttime="20170823 03:45:31.210"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170823 03:45:31.308" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170823 03:45:31.308" starttime="20170823 03:45:31.308"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:31.309" starttime="20170823 03:45:31.209"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/fd2cbe15</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:45:31.318" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:45:31.319" starttime="20170823 03:45:31.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:45:31.319" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:45:31.319" starttime="20170823 03:45:31.319"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:45:31.320" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:45:31.320" starttime="20170823 03:45:31.320"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:45:31.321" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:45:31.321" starttime="20170823 03:45:31.321"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:45:31.545" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:45:31.545" starttime="20170823 03:45:31.322"></status>
</kw>
<msg timestamp="20170823 03:45:31.546" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:45:31.546" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:31.546" starttime="20170823 03:45:31.322"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:45:31.546" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:31.547" starttime="20170823 03:45:31.546"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:45:31.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:31.547" starttime="20170823 03:45:31.547"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:31.547" starttime="20170823 03:45:31.317"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:31.547" starttime="20170823 03:45:31.317"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:31.548" starttime="20170823 03:45:31.316"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:45:31.548" level="INFO">${base_uri} = /xyz/openbmc_project/software/fd2cbe15/attr/Activation</msg>
<status status="PASS" endtime="20170823 03:45:31.548" starttime="20170823 03:45:31.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:31.549" starttime="20170823 03:45:31.549"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:45:31.723" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/fd2cbe15/attr/Activation, headers=None json=None</msg>
<msg timestamp="20170823 03:45:31.723" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:31.723" starttime="20170823 03:45:31.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:31.724" starttime="20170823 03:45:31.723"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:45:31.724" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:45:31.724" starttime="20170823 03:45:31.724"></status>
</kw>
<msg timestamp="20170823 03:45:31.725" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:31.725" starttime="20170823 03:45:31.315"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:45:31.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:31.726" starttime="20170823 03:45:31.725"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 03:45:31.727" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:45:31.727" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 03:45:31.727" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Ready'}</msg>
<status status="PASS" endtime="20170823 03:45:31.727" starttime="20170823 03:45:31.726"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:31.727" starttime="20170823 03:45:31.315"></status>
</kw>
<msg timestamp="20170823 03:45:31.727" level="INFO">${ret} = True</msg>
<status status="PASS" endtime="20170823 03:45:31.728" starttime="20170823 03:45:23.780"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:31.729" starttime="20170823 03:45:31.728"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:45:31.734" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:45:31.734" starttime="20170823 03:45:31.734"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:45:31.735" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:45:31.735" starttime="20170823 03:45:31.735"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:45:31.736" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:45:31.736" starttime="20170823 03:45:31.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:45:31.736" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:45:31.737" starttime="20170823 03:45:31.736"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:45:31.916" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:45:31.916" starttime="20170823 03:45:31.737"></status>
</kw>
<msg timestamp="20170823 03:45:31.916" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:45:31.916" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:31.916" starttime="20170823 03:45:31.737"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:45:31.917" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:31.917" starttime="20170823 03:45:31.916"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:45:31.917" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:31.918" starttime="20170823 03:45:31.917"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:31.918" starttime="20170823 03:45:31.732"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:31.918" starttime="20170823 03:45:31.731"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:31.918" starttime="20170823 03:45:31.731"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:45:31.918" level="INFO">${base_uri} = /xyz/openbmc_project/software/fd2cbe15</msg>
<status status="PASS" endtime="20170823 03:45:31.919" starttime="20170823 03:45:31.918"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:31.919" starttime="20170823 03:45:31.919"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:45:32.050" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/fd2cbe15, headers=None json=None</msg>
<msg timestamp="20170823 03:45:32.051" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:32.051" starttime="20170823 03:45:31.919"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:32.052" starttime="20170823 03:45:32.051"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:45:32.052" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:45:32.052" starttime="20170823 03:45:32.052"></status>
</kw>
<msg timestamp="20170823 03:45:32.052" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:32.052" starttime="20170823 03:45:31.730"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:45:32.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:32.053" starttime="20170823 03:45:32.053"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 03:45:32.054" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "ExtendedVersion": "op-build-v1.18-74-g53f4235-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.7-92-g0818df625e35,hostboot-be278ac,linux-4.12.5-openpower1-pc06e0a6,petitboot-v1.5.1-p641e963,machine-xml-9a28007-p5e6f272,occ-71b5f68,hostboot-binaries-cf51511,capp-ucode-9c73e9f,sbe-bcb079b", 
    "Path": "/tmp/images/fd2cbe15", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:45:32.054" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 03:45:32.054" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32', u'Purpose': ...</msg>
<status status="PASS" endtime="20170823 03:45:32.054" starttime="20170823 03:45:32.053"></status>
</kw>
<msg timestamp="20170823 03:45:32.054" level="INFO">${software_state} = {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpo...</msg>
<status status="PASS" endtime="20170823 03:45:32.054" starttime="20170823 03:45:31.729"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${READY}</arg>
</arguments>
<msg timestamp="20170823 03:45:32.055" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:32.055" starttime="20170823 03:45:32.055"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${REQUESTED_ACTIVE}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170823 03:45:32.056" level="INFO">${args} = {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}</msg>
<status status="PASS" endtime="20170823 03:45:32.056" starttime="20170823 03:45:32.055"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
<arg>RequestedActivation</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:45:32.057" level="INFO">${base_uri} = /xyz/openbmc_project/software/fd2cbe15</msg>
<status status="PASS" endtime="20170823 03:45:32.057" starttime="20170823 03:45:32.057"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:45:32.062" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:45:32.062" starttime="20170823 03:45:32.061"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:45:32.063" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:45:32.063" starttime="20170823 03:45:32.062"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:45:32.063" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:45:32.063" starttime="20170823 03:45:32.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:45:32.064" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:45:32.064" starttime="20170823 03:45:32.064"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:45:32.242" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:45:32.242" starttime="20170823 03:45:32.065"></status>
</kw>
<msg timestamp="20170823 03:45:32.243" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:45:32.243" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:32.243" starttime="20170823 03:45:32.064"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:45:32.243" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:32.243" starttime="20170823 03:45:32.243"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:45:32.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:32.245" starttime="20170823 03:45:32.244"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:32.245" starttime="20170823 03:45:32.061"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:32.245" starttime="20170823 03:45:32.060"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:32.245" starttime="20170823 03:45:32.058"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:45:32.246" level="INFO">${base_uri} = /xyz/openbmc_project/software/fd2cbe15/attr/RequestedActivation</msg>
<status status="PASS" endtime="20170823 03:45:32.246" starttime="20170823 03:45:32.245"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:45:32.246" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:45:32.246" starttime="20170823 03:45:32.246"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:32.247" starttime="20170823 03:45:32.246"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 03:45:32.248" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/fd2cbe15/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'he...</msg>
<status status="PASS" endtime="20170823 03:45:32.248" starttime="20170823 03:45:32.248"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 03:45:32.249" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/fd2cbe15/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170823 03:45:32.250" starttime="20170823 03:45:32.249"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:32.250" starttime="20170823 03:45:32.249"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:32.250" starttime="20170823 03:45:32.247"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:45:32.814" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/software/fd2cbe15/attr/RequestedActivation, data={"data": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170823 03:45:32.814" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:32.814" starttime="20170823 03:45:32.250"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170823 03:45:32.815" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170823 03:45:32.815" starttime="20170823 03:45:32.815"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170823 03:45:32.816" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170823 03:45:32.816" starttime="20170823 03:45:32.816"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:32.816" starttime="20170823 03:45:32.815"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:32.817" starttime="20170823 03:45:32.814"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:45:32.822" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:45:32.822" starttime="20170823 03:45:32.821"></status>
</kw>
<msg timestamp="20170823 03:45:32.822" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:32.822" starttime="20170823 03:45:32.057"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:45:32.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:32.823" starttime="20170823 03:45:32.822"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170823 03:45:32.823" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:45:32.823" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 03:45:32.823" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170823 03:45:32.823" starttime="20170823 03:45:32.823"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:32.823" starttime="20170823 03:45:32.056"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:45:32.832" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:45:32.833" starttime="20170823 03:45:32.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:45:32.833" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:45:32.833" starttime="20170823 03:45:32.833"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:45:32.834" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:45:32.834" starttime="20170823 03:45:32.834"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:45:32.835" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:45:32.835" starttime="20170823 03:45:32.834"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:45:33.240" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:45:33.240" starttime="20170823 03:45:32.836"></status>
</kw>
<msg timestamp="20170823 03:45:33.240" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:45:33.240" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:33.241" starttime="20170823 03:45:32.835"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:45:33.241" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:33.241" starttime="20170823 03:45:33.241"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:45:33.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:33.242" starttime="20170823 03:45:33.242"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:33.242" starttime="20170823 03:45:32.831"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:33.242" starttime="20170823 03:45:32.831"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:33.242" starttime="20170823 03:45:32.830"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:45:33.243" level="INFO">${base_uri} = /xyz/openbmc_project/software/fd2cbe15</msg>
<status status="PASS" endtime="20170823 03:45:33.243" starttime="20170823 03:45:33.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:33.244" starttime="20170823 03:45:33.243"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:45:33.659" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/fd2cbe15, headers=None json=None</msg>
<msg timestamp="20170823 03:45:33.659" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:33.659" starttime="20170823 03:45:33.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:33.660" starttime="20170823 03:45:33.659"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:45:33.660" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:45:33.660" starttime="20170823 03:45:33.660"></status>
</kw>
<msg timestamp="20170823 03:45:33.661" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:33.661" starttime="20170823 03:45:32.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:45:33.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:33.661" starttime="20170823 03:45:33.661"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 03:45:33.662" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.18-74-g53f4235-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.7-92-g0818df625e35,hostboot-be278ac,linux-4.12.5-openpower1-pc06e0a6,petitboot-v1.5.1-p641e963,machine-xml-9a28007-p5e6f272,occ-71b5f68,hostboot-binaries-cf51511,capp-ucode-9c73e9f,sbe-bcb079b", 
    "Path": "/tmp/images/fd2cbe15", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:45:33.662" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 03:45:33.662" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32', u'Purpo...</msg>
<status status="PASS" endtime="20170823 03:45:33.662" starttime="20170823 03:45:33.662"></status>
</kw>
<msg timestamp="20170823 03:45:33.662" level="INFO">${software_state} = {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32', u'Purpose': u'xyz.openbmc_project.Software.Version.Version...</msg>
<status status="PASS" endtime="20170823 03:45:33.662" starttime="20170823 03:45:32.824"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[RequestedActivation]</arg>
<arg>${REQUESTED_ACTIVE}</arg>
</arguments>
<msg timestamp="20170823 03:45:33.667" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:33.668" starttime="20170823 03:45:33.663"></status>
</kw>
<kw name="Wait For Activation State Change" library="code_update_utils">
<doc>Wait for the current activation state of ${version_id} to</doc>
<arguments>
<arg>${version_id}</arg>
<arg>${ACTIVATING}</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170823 03:45:33.673" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170823 03:45:33.673" starttime="20170823 03:45:33.673"></status>
</kw>
<msg timestamp="20170823 03:45:33.673" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170823 03:45:33.673" starttime="20170823 03:45:33.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:33.675" starttime="20170823 03:45:33.674"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:33.675" starttime="20170823 03:45:33.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:33.675" starttime="20170823 03:45:33.675"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170823 03:45:33.676" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170823 03:45:33.677" starttime="20170823 03:45:33.676"></status>
</kw>
<msg timestamp="20170823 03:45:33.677" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170823 03:45:33.677" starttime="20170823 03:45:33.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:33.679" starttime="20170823 03:45:33.678"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:33.679" starttime="20170823 03:45:33.678"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:33.679" starttime="20170823 03:45:33.677"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170823 03:45:33.680" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170823 03:45:36.217" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170823 03:45:36.217" starttime="20170823 03:45:33.680"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:36.217" starttime="20170823 03:45:33.672"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/fd2cbe15</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:45:36.227" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:45:36.228" starttime="20170823 03:45:36.227"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:45:36.228" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:45:36.228" starttime="20170823 03:45:36.228"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:45:36.229" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:45:36.229" starttime="20170823 03:45:36.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:45:36.230" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:45:36.230" starttime="20170823 03:45:36.229"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:45:36.639" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:45:36.639" starttime="20170823 03:45:36.230"></status>
</kw>
<msg timestamp="20170823 03:45:36.639" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:45:36.639" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:36.639" starttime="20170823 03:45:36.230"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:45:36.640" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:36.640" starttime="20170823 03:45:36.639"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:45:36.640" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:36.640" starttime="20170823 03:45:36.640"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:36.641" starttime="20170823 03:45:36.226"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:36.641" starttime="20170823 03:45:36.226"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:36.641" starttime="20170823 03:45:36.225"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:45:36.641" level="INFO">${base_uri} = /xyz/openbmc_project/software/fd2cbe15</msg>
<status status="PASS" endtime="20170823 03:45:36.641" starttime="20170823 03:45:36.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:36.642" starttime="20170823 03:45:36.642"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:45:37.047" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/fd2cbe15, headers=None json=None</msg>
<msg timestamp="20170823 03:45:37.048" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:37.048" starttime="20170823 03:45:36.642"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:45:37.049" starttime="20170823 03:45:37.048"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:45:37.049" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:45:37.049" starttime="20170823 03:45:37.049"></status>
</kw>
<msg timestamp="20170823 03:45:37.050" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:45:37.050" starttime="20170823 03:45:36.224"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:45:37.050" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:45:37.050" starttime="20170823 03:45:37.050"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 03:45:37.051" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.18-74-g53f4235-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.7-92-g0818df625e35,hostboot-be278ac,linux-4.12.5-openpower1-pc06e0a6,petitboot-v1.5.1-p641e963,machine-xml-9a28007-p5e6f272,occ-71b5f68,hostboot-binaries-cf51511,capp-ucode-9c73e9f,sbe-bcb079b", 
    "Path": "/tmp/images/fd2cbe15", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:45:37.051" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 03:45:37.051" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32', u'Purpo...</msg>
<status status="PASS" endtime="20170823 03:45:37.051" starttime="20170823 03:45:37.051"></status>
</kw>
<status status="PASS" endtime="20170823 03:45:37.051" starttime="20170823 03:45:36.224"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/fd2cbe15</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:46:37.122" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:46:37.122" starttime="20170823 03:46:37.121"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:46:37.123" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:46:37.123" starttime="20170823 03:46:37.123"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:46:37.123" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:46:37.124" starttime="20170823 03:46:37.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:46:37.124" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:46:37.124" starttime="20170823 03:46:37.124"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:46:37.785" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:46:37.785" starttime="20170823 03:46:37.125"></status>
</kw>
<msg timestamp="20170823 03:46:37.785" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:46:37.785" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:46:37.785" starttime="20170823 03:46:37.125"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:46:37.786" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:46:37.786" starttime="20170823 03:46:37.786"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:46:37.787" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:46:37.787" starttime="20170823 03:46:37.786"></status>
</kw>
<status status="PASS" endtime="20170823 03:46:37.787" starttime="20170823 03:46:37.121"></status>
</kw>
<status status="PASS" endtime="20170823 03:46:37.787" starttime="20170823 03:46:37.120"></status>
</kw>
<status status="PASS" endtime="20170823 03:46:37.787" starttime="20170823 03:46:37.119"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:46:37.788" level="INFO">${base_uri} = /xyz/openbmc_project/software/fd2cbe15</msg>
<status status="PASS" endtime="20170823 03:46:37.788" starttime="20170823 03:46:37.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:46:37.789" starttime="20170823 03:46:37.788"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:46:37.993" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/fd2cbe15, headers=None json=None</msg>
<msg timestamp="20170823 03:46:37.994" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:46:37.994" starttime="20170823 03:46:37.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:46:37.995" starttime="20170823 03:46:37.994"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:46:37.995" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:46:37.995" starttime="20170823 03:46:37.995"></status>
</kw>
<msg timestamp="20170823 03:46:37.995" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:46:37.995" starttime="20170823 03:46:37.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:46:37.996" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:46:37.996" starttime="20170823 03:46:37.996"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 03:46:37.997" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.18-74-g53f4235-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.7-92-g0818df625e35,hostboot-be278ac,linux-4.12.5-openpower1-pc06e0a6,petitboot-v1.5.1-p641e963,machine-xml-9a28007-p5e6f272,occ-71b5f68,hostboot-binaries-cf51511,capp-ucode-9c73e9f,sbe-bcb079b", 
    "Path": "/tmp/images/fd2cbe15", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:46:37.997" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 03:46:37.997" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32', u'Purpo...</msg>
<status status="PASS" endtime="20170823 03:46:37.997" starttime="20170823 03:46:37.996"></status>
</kw>
<status status="PASS" endtime="20170823 03:46:37.997" starttime="20170823 03:46:37.118"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/fd2cbe15</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:47:38.050" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:47:38.050" starttime="20170823 03:47:38.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:47:38.051" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:47:38.051" starttime="20170823 03:47:38.051"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:47:38.052" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:47:38.052" starttime="20170823 03:47:38.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:47:38.053" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:47:38.053" starttime="20170823 03:47:38.053"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:47:38.233" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:47:38.233" starttime="20170823 03:47:38.055"></status>
</kw>
<msg timestamp="20170823 03:47:38.233" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:47:38.233" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:47:38.233" starttime="20170823 03:47:38.054"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:47:38.234" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:47:38.234" starttime="20170823 03:47:38.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:47:38.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:47:38.235" starttime="20170823 03:47:38.234"></status>
</kw>
<status status="PASS" endtime="20170823 03:47:38.235" starttime="20170823 03:47:38.048"></status>
</kw>
<status status="PASS" endtime="20170823 03:47:38.235" starttime="20170823 03:47:38.047"></status>
</kw>
<status status="PASS" endtime="20170823 03:47:38.235" starttime="20170823 03:47:38.047"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:47:38.236" level="INFO">${base_uri} = /xyz/openbmc_project/software/fd2cbe15</msg>
<status status="PASS" endtime="20170823 03:47:38.236" starttime="20170823 03:47:38.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:47:38.236" starttime="20170823 03:47:38.236"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:47:38.380" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/fd2cbe15, headers=None json=None</msg>
<msg timestamp="20170823 03:47:38.380" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:47:38.380" starttime="20170823 03:47:38.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:47:38.381" starttime="20170823 03:47:38.380"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:47:38.381" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:47:38.381" starttime="20170823 03:47:38.381"></status>
</kw>
<msg timestamp="20170823 03:47:38.382" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:47:38.382" starttime="20170823 03:47:38.046"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:47:38.382" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:47:38.382" starttime="20170823 03:47:38.382"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 03:47:38.383" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.18-74-g53f4235-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.7-92-g0818df625e35,hostboot-be278ac,linux-4.12.5-openpower1-pc06e0a6,petitboot-v1.5.1-p641e963,machine-xml-9a28007-p5e6f272,occ-71b5f68,hostboot-binaries-cf51511,capp-ucode-9c73e9f,sbe-bcb079b", 
    "Path": "/tmp/images/fd2cbe15", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:47:38.383" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 03:47:38.383" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32', u'Purpo...</msg>
<status status="PASS" endtime="20170823 03:47:38.383" starttime="20170823 03:47:38.383"></status>
</kw>
<status status="PASS" endtime="20170823 03:47:38.383" starttime="20170823 03:47:38.045"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/fd2cbe15</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:48:38.395" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:48:38.396" starttime="20170823 03:48:38.395"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:48:38.397" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:48:38.397" starttime="20170823 03:48:38.396"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:48:38.398" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:48:38.398" starttime="20170823 03:48:38.397"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:48:38.399" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:48:38.399" starttime="20170823 03:48:38.398"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:48:38.579" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:48:38.579" starttime="20170823 03:48:38.400"></status>
</kw>
<msg timestamp="20170823 03:48:38.579" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:48:38.579" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:48:38.579" starttime="20170823 03:48:38.399"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:48:38.580" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:48:38.580" starttime="20170823 03:48:38.579"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:48:38.581" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:48:38.581" starttime="20170823 03:48:38.580"></status>
</kw>
<status status="PASS" endtime="20170823 03:48:38.581" starttime="20170823 03:48:38.394"></status>
</kw>
<status status="PASS" endtime="20170823 03:48:38.581" starttime="20170823 03:48:38.393"></status>
</kw>
<status status="PASS" endtime="20170823 03:48:38.581" starttime="20170823 03:48:38.392"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:48:38.582" level="INFO">${base_uri} = /xyz/openbmc_project/software/fd2cbe15</msg>
<status status="PASS" endtime="20170823 03:48:38.582" starttime="20170823 03:48:38.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:48:38.582" starttime="20170823 03:48:38.582"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:48:38.726" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/fd2cbe15, headers=None json=None</msg>
<msg timestamp="20170823 03:48:38.726" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:48:38.726" starttime="20170823 03:48:38.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:48:38.727" starttime="20170823 03:48:38.727"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:48:38.728" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:48:38.728" starttime="20170823 03:48:38.727"></status>
</kw>
<msg timestamp="20170823 03:48:38.728" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:48:38.728" starttime="20170823 03:48:38.391"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:48:38.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:48:38.729" starttime="20170823 03:48:38.728"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 03:48:38.729" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.18-74-g53f4235-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.7-92-g0818df625e35,hostboot-be278ac,linux-4.12.5-openpower1-pc06e0a6,petitboot-v1.5.1-p641e963,machine-xml-9a28007-p5e6f272,occ-71b5f68,hostboot-binaries-cf51511,capp-ucode-9c73e9f,sbe-bcb079b", 
    "Path": "/tmp/images/fd2cbe15", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:48:38.729" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 03:48:38.729" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32', u'Purpo...</msg>
<status status="PASS" endtime="20170823 03:48:38.729" starttime="20170823 03:48:38.729"></status>
</kw>
<status status="PASS" endtime="20170823 03:48:38.730" starttime="20170823 03:48:38.390"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/fd2cbe15</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:49:38.754" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:49:38.755" starttime="20170823 03:49:38.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:49:38.756" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:49:38.756" starttime="20170823 03:49:38.755"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:49:38.756" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:49:38.756" starttime="20170823 03:49:38.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:49:38.757" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:49:38.757" starttime="20170823 03:49:38.757"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:49:38.931" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:49:38.931" starttime="20170823 03:49:38.758"></status>
</kw>
<msg timestamp="20170823 03:49:38.932" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:49:38.932" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:49:38.932" starttime="20170823 03:49:38.757"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:49:38.932" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:49:38.932" starttime="20170823 03:49:38.932"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:49:38.933" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:49:38.933" starttime="20170823 03:49:38.933"></status>
</kw>
<status status="PASS" endtime="20170823 03:49:38.933" starttime="20170823 03:49:38.753"></status>
</kw>
<status status="PASS" endtime="20170823 03:49:38.933" starttime="20170823 03:49:38.753"></status>
</kw>
<status status="PASS" endtime="20170823 03:49:38.933" starttime="20170823 03:49:38.752"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:49:38.934" level="INFO">${base_uri} = /xyz/openbmc_project/software/fd2cbe15</msg>
<status status="PASS" endtime="20170823 03:49:38.934" starttime="20170823 03:49:38.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:49:38.935" starttime="20170823 03:49:38.934"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:49:39.077" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/fd2cbe15, headers=None json=None</msg>
<msg timestamp="20170823 03:49:39.077" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:49:39.077" starttime="20170823 03:49:38.935"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:49:39.078" starttime="20170823 03:49:39.078"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:49:39.079" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:49:39.079" starttime="20170823 03:49:39.079"></status>
</kw>
<msg timestamp="20170823 03:49:39.079" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:49:39.079" starttime="20170823 03:49:38.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:49:39.080" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:49:39.080" starttime="20170823 03:49:39.080"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 03:49:39.081" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.18-74-g53f4235-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.7-92-g0818df625e35,hostboot-be278ac,linux-4.12.5-openpower1-pc06e0a6,petitboot-v1.5.1-p641e963,machine-xml-9a28007-p5e6f272,occ-71b5f68,hostboot-binaries-cf51511,capp-ucode-9c73e9f,sbe-bcb079b", 
    "Path": "/tmp/images/fd2cbe15", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:49:39.081" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 03:49:39.081" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32', u'Purpo...</msg>
<status status="PASS" endtime="20170823 03:49:39.081" starttime="20170823 03:49:39.080"></status>
</kw>
<status status="PASS" endtime="20170823 03:49:39.081" starttime="20170823 03:49:38.751"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/fd2cbe15</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:50:39.132" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:50:39.133" starttime="20170823 03:50:39.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:50:39.133" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:50:39.133" starttime="20170823 03:50:39.133"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:50:39.138" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:50:39.138" starttime="20170823 03:50:39.134"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:50:39.139" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:50:39.139" starttime="20170823 03:50:39.138"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:50:39.411" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:50:39.411" starttime="20170823 03:50:39.140"></status>
</kw>
<msg timestamp="20170823 03:50:39.411" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:50:39.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:50:39.411" starttime="20170823 03:50:39.139"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:50:39.412" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:50:39.412" starttime="20170823 03:50:39.412"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:50:39.413" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:50:39.413" starttime="20170823 03:50:39.412"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:39.413" starttime="20170823 03:50:39.131"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:39.413" starttime="20170823 03:50:39.130"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:39.413" starttime="20170823 03:50:39.130"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:50:39.414" level="INFO">${base_uri} = /xyz/openbmc_project/software/fd2cbe15</msg>
<status status="PASS" endtime="20170823 03:50:39.414" starttime="20170823 03:50:39.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:39.414" starttime="20170823 03:50:39.414"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:50:39.645" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/fd2cbe15, headers=None json=None</msg>
<msg timestamp="20170823 03:50:39.646" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:50:39.646" starttime="20170823 03:50:39.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:39.646" starttime="20170823 03:50:39.646"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:50:39.647" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:50:39.647" starttime="20170823 03:50:39.647"></status>
</kw>
<msg timestamp="20170823 03:50:39.647" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:50:39.647" starttime="20170823 03:50:39.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:50:39.648" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:50:39.648" starttime="20170823 03:50:39.647"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 03:50:39.648" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
    "ExtendedVersion": "op-build-v1.18-74-g53f4235-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.7-92-g0818df625e35,hostboot-be278ac,linux-4.12.5-openpower1-pc06e0a6,petitboot-v1.5.1-p641e963,machine-xml-9a28007-p5e6f272,occ-71b5f68,hostboot-binaries-cf51511,capp-ucode-9c73e9f,sbe-bcb079b", 
    "Path": "/tmp/images/fd2cbe15", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:50:39.649" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 03:50:39.649" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Failed', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32', u'Purpose':...</msg>
<status status="PASS" endtime="20170823 03:50:39.649" starttime="20170823 03:50:39.648"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:39.649" starttime="20170823 03:50:39.128"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:39.649" starttime="20170823 03:45:33.668"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:50:39.652" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:50:39.653" starttime="20170823 03:50:39.652"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:50:39.653" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:50:39.653" starttime="20170823 03:50:39.653"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:50:39.654" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:50:39.654" starttime="20170823 03:50:39.654"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:50:39.655" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:50:39.655" starttime="20170823 03:50:39.654"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:50:39.835" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:50:39.835" starttime="20170823 03:50:39.656"></status>
</kw>
<msg timestamp="20170823 03:50:39.835" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:50:39.835" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:50:39.835" starttime="20170823 03:50:39.655"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:50:39.836" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:50:39.836" starttime="20170823 03:50:39.836"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:50:39.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:50:39.837" starttime="20170823 03:50:39.836"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:39.837" starttime="20170823 03:50:39.652"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:39.837" starttime="20170823 03:50:39.651"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:39.837" starttime="20170823 03:50:39.651"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:50:39.838" level="INFO">${base_uri} = /xyz/openbmc_project/software/fd2cbe15</msg>
<status status="PASS" endtime="20170823 03:50:39.838" starttime="20170823 03:50:39.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:39.839" starttime="20170823 03:50:39.838"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:50:39.974" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/fd2cbe15, headers=None json=None</msg>
<msg timestamp="20170823 03:50:39.974" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:50:39.974" starttime="20170823 03:50:39.839"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:39.975" starttime="20170823 03:50:39.974"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:50:39.975" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:50:39.976" starttime="20170823 03:50:39.975"></status>
</kw>
<msg timestamp="20170823 03:50:39.976" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:50:39.976" starttime="20170823 03:50:39.650"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:50:39.976" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:50:39.977" starttime="20170823 03:50:39.976"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 03:50:39.978" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Failed", 
    "ExtendedVersion": "op-build-v1.18-74-g53f4235-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.7-92-g0818df625e35,hostboot-be278ac,linux-4.12.5-openpower1-pc06e0a6,petitboot-v1.5.1-p641e963,machine-xml-9a28007-p5e6f272,occ-71b5f68,hostboot-binaries-cf51511,capp-ucode-9c73e9f,sbe-bcb079b", 
    "Path": "/tmp/images/fd2cbe15", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:50:39.978" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 03:50:39.978" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Failed', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32', u'Purpose':...</msg>
<status status="PASS" endtime="20170823 03:50:39.978" starttime="20170823 03:50:39.977"></status>
</kw>
<msg timestamp="20170823 03:50:39.978" level="INFO">${software_state} = {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Failed', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.32', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurp...</msg>
<status status="PASS" endtime="20170823 03:50:39.978" starttime="20170823 03:50:39.649"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${ACTIVE}</arg>
</arguments>
<msg timestamp="20170823 03:50:39.980" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<msg timestamp="20170823 03:50:39.980" level="FAIL">xyz.openbmc_project.Software.Activation.Activations.Failed != xyz.openbmc_project.Software.Activation.Activations.Active</msg>
<status status="FAIL" endtime="20170823 03:50:39.980" starttime="20170823 03:50:39.979"></status>
</kw>
<kw type="teardown" name="Code Update Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170823 03:50:39.983" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170823 03:50:39.983" starttime="20170823 03:50:39.983"></status>
</kw>
<msg timestamp="20170823 03:50:39.983" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170823 03:50:39.983" starttime="20170823 03:50:39.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:39.985" starttime="20170823 03:50:39.984"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:39.985" starttime="20170823 03:50:39.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:39.986" starttime="20170823 03:50:39.985"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170823 03:50:39.987" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170823 03:50:39.987" starttime="20170823 03:50:39.986"></status>
</kw>
<msg timestamp="20170823 03:50:39.987" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170823 03:50:39.987" starttime="20170823 03:50:39.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:39.989" starttime="20170823 03:50:39.988"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:39.989" starttime="20170823 03:50:39.988"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:39.989" starttime="20170823 03:50:39.987"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170823 03:50:39.989" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170823 03:50:41.767" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170823 03:50:41.768" starttime="20170823 03:50:39.989"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:41.768" starttime="20170823 03:50:39.981"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -rf /tmp/images/*</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 03:50:41.769" level="INFO">Executing command 'rm -rf /tmp/images/*'.</msg>
<msg timestamp="20170823 03:50:41.897" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170823 03:50:41.897" level="INFO">${stdout} = </msg>
<msg timestamp="20170823 03:50:41.897" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170823 03:50:41.897" starttime="20170823 03:50:41.769"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170823 03:50:41.898" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170823 03:50:41.898" starttime="20170823 03:50:41.897"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:41.898" starttime="20170823 03:50:41.768"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170823 03:50:42.024" starttime="20170823 03:50:41.898"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:50:42.029" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:50:42.029" starttime="20170823 03:50:42.028"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:50:42.030" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:50:42.030" starttime="20170823 03:50:42.029"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:50:42.030" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:50:42.031" starttime="20170823 03:50:42.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:50:42.031" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:50:42.031" starttime="20170823 03:50:42.031"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:50:42.579" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:50:42.579" starttime="20170823 03:50:42.032"></status>
</kw>
<msg timestamp="20170823 03:50:42.579" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:50:42.579" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:50:42.579" starttime="20170823 03:50:42.032"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:50:42.580" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:50:42.580" starttime="20170823 03:50:42.580"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:50:42.581" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:50:42.581" starttime="20170823 03:50:42.581"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:42.581" starttime="20170823 03:50:42.028"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:42.581" starttime="20170823 03:50:42.027"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:42.581" starttime="20170823 03:50:42.027"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:50:42.582" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170823 03:50:42.582" starttime="20170823 03:50:42.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:42.583" starttime="20170823 03:50:42.582"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:50:42.715" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170823 03:50:42.716" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:50:42.716" starttime="20170823 03:50:42.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:42.717" starttime="20170823 03:50:42.716"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:50:42.717" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:50:42.717" starttime="20170823 03:50:42.717"></status>
</kw>
<msg timestamp="20170823 03:50:42.717" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:50:42.717" starttime="20170823 03:50:42.026"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:50:42.718" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:50:42.718" starttime="20170823 03:50:42.718"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 03:50:42.719" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:50:42.719" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 03:50:42.719" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170823 03:50:42.719" starttime="20170823 03:50:42.718"></status>
</kw>
<msg timestamp="20170823 03:50:42.719" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170823 03:50:42.719" starttime="20170823 03:50:42.025"></status>
</kw>
<msg timestamp="20170823 03:50:42.720" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170823 03:50:42.720" starttime="20170823 03:50:42.025"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170823 03:50:42.721" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" endtime="20170823 03:50:42.721" starttime="20170823 03:50:42.721"></status>
</kw>
<msg timestamp="20170823 03:50:42.721" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170823 03:50:42.721" starttime="20170823 03:50:42.720"></status>
</kw>
<msg timestamp="20170823 03:50:42.721" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170823 03:50:42.721" starttime="20170823 03:50:42.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170823 03:50:42.732" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170823 03:50:42.732" starttime="20170823 03:50:42.732"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170823 03:50:42.739" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170823 03:50:45.743" level="INFO">${RC} = 0</msg>
<msg timestamp="20170823 03:50:45.743" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.767 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.629 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170823 03:50:45.743" starttime="20170823 03:50:42.732"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170823 03:50:45.747" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.767 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.629 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.654 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.620 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.620/0.667/0.767/0.064 ms</msg>
<status status="PASS" endtime="20170823 03:50:45.747" starttime="20170823 03:50:45.746"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:45.748" starttime="20170823 03:50:45.748"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:45.748" starttime="20170823 03:50:42.731"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170823 03:50:45.769" level="INFO">${cur_time} = 2017-08-23 03:50:45:769129</msg>
<status status="PASS" endtime="20170823 03:50:45.769" starttime="20170823 03:50:45.769"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170823 03:50:45.770" level="INFO">${cur_time} = 20170823035045769129</msg>
<status status="PASS" endtime="20170823 03:50:45.770" starttime="20170823 03:50:45.770"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:45.770" starttime="20170823 03:50:45.768"></status>
</kw>
<msg timestamp="20170823 03:50:45.776" level="INFO">${FFDC_TIME} = 20170823035045769129</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170823 03:50:45.778" level="INFO">${suite_name} = CodeUpdate</msg>
<status status="PASS" endtime="20170823 03:50:45.778" starttime="20170823 03:50:45.778"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170823 03:50:45.779" level="INFO">${suite_name} = 20170823035045769129_CodeUpdate</msg>
<status status="PASS" endtime="20170823 03:50:45.779" starttime="20170823 03:50:45.778"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170823 03:50:45.780" level="INFO">${test_name} = RESTHostCodeUpdate</msg>
<status status="PASS" endtime="20170823 03:50:45.780" starttime="20170823 03:50:45.779"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170823 03:50:45.781" level="INFO">${test_name} = 20170823035045769129_RESTHostCodeUpdate</msg>
<status status="PASS" endtime="20170823 03:50:45.781" starttime="20170823 03:50:45.780"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:45.781" starttime="20170823 03:50:45.777"></status>
</kw>
<msg timestamp="20170823 03:50:45.786" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/</msg>
<msg timestamp="20170823 03:50:45.791" level="INFO">${FFDC_PREFIX} = 20170823035045769129_</msg>
<msg timestamp="20170823 03:50:45.811" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/</arg>
</arguments>
<msg timestamp="20170823 03:50:45.812" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:45.812" starttime="20170823 03:50:45.812"></status>
</kw>
<msg timestamp="20170823 03:50:45.818" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:45.829" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:45.829" starttime="20170823 03:50:45.828"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:45.829" starttime="20170823 03:50:45.827"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:45.830" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:45.830" starttime="20170823 03:50:45.830"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:45.830" starttime="20170823 03:50:45.829"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:45.831" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:45.831" starttime="20170823 03:50:45.831"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:45.831" starttime="20170823 03:50:45.830"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:45.833" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:45.833" starttime="20170823 03:50:45.832"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:45.833" starttime="20170823 03:50:45.832"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:45.834" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:45.834" starttime="20170823 03:50:45.834"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:45.834" starttime="20170823 03:50:45.833"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:45.835" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:45.835" starttime="20170823 03:50:45.835"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:45.836" starttime="20170823 03:50:45.834"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:45.837" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:45.837" starttime="20170823 03:50:45.836"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:45.837" starttime="20170823 03:50:45.836"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:45.839" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:45.839" starttime="20170823 03:50:45.838"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:45.839" starttime="20170823 03:50:45.838"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:45.840" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:45.840" starttime="20170823 03:50:45.840"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:45.840" starttime="20170823 03:50:45.839"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:45.842" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:45.842" starttime="20170823 03:50:45.841"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:45.842" starttime="20170823 03:50:45.841"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:45.843" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:45.843" starttime="20170823 03:50:45.842"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:45.843" starttime="20170823 03:50:45.842"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:45.844" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:45.844" starttime="20170823 03:50:45.844"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:45.844" starttime="20170823 03:50:45.843"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:45.846" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:45.846" starttime="20170823 03:50:45.845"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:45.846" starttime="20170823 03:50:45.845"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170823 03:50:45.863" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170823 03:50:45.863" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170823 03:50:48.346" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170823 03:50:48.346" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170823 03:50:48.436" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170823 03:50:48.447" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170823 03:50:48.447" level="INFO">${stderr} = </msg>
<msg timestamp="20170823 03:50:48.447" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170823 03:50:48.447" starttime="20170823 03:50:45.846"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170823 03:50:48.448" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170823 03:50:48.448" starttime="20170823 03:50:48.448"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170823 03:50:48.448" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170823 03:50:48.449" starttime="20170823 03:50:48.448"></status>
</kw>
<msg timestamp="20170823 03:50:48.449" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170823 03:50:48.449" starttime="20170823 03:50:45.846"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:48.450" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:48.450" starttime="20170823 03:50:48.450"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.450" starttime="20170823 03:50:48.449"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.450" starttime="20170823 03:50:45.840"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:48.452" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:48.452" starttime="20170823 03:50:48.451"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.452" starttime="20170823 03:50:48.451"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170823 03:50:48.452" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170823 03:50:48.452" starttime="20170823 03:50:48.452"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:48.454" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:48.454" starttime="20170823 03:50:48.453"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.454" starttime="20170823 03:50:48.453"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:48.455" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:48.455" starttime="20170823 03:50:48.455"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.455" starttime="20170823 03:50:48.454"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.455" starttime="20170823 03:50:48.453"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:48.457" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:48.457" starttime="20170823 03:50:48.456"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.457" starttime="20170823 03:50:48.456"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:48.458" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:48.458" starttime="20170823 03:50:48.458"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.458" starttime="20170823 03:50:48.457"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.458" starttime="20170823 03:50:48.455"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:48.459" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:48.459" starttime="20170823 03:50:48.459"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.460" starttime="20170823 03:50:48.458"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:48.461" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:48.461" starttime="20170823 03:50:48.460"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.461" starttime="20170823 03:50:48.460"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.461" starttime="20170823 03:50:48.458"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.461" starttime="20170823 03:50:48.452"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:48.462" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:48.462" starttime="20170823 03:50:48.462"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.462" starttime="20170823 03:50:48.461"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.462" starttime="20170823 03:50:45.827"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170823 03:50:48.468" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170823 03:50:48.468" starttime="20170823 03:50:48.467"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170823 03:50:48.469" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170823 03:50:48.469" starttime="20170823 03:50:48.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:48.471" starttime="20170823 03:50:48.470"></status>
</kw>
<msg timestamp="20170823 03:50:48.471" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170823 03:50:48.471" starttime="20170823 03:50:48.470"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:48.473" starttime="20170823 03:50:48.472"></status>
</kw>
<msg timestamp="20170823 03:50:48.473" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:50:48.473" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170823 03:50:48.473" starttime="20170823 03:50:48.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:48.473" starttime="20170823 03:50:48.473"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170823 03:50:48.488" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170823 03:50:48.488" starttime="20170823 03:50:48.488"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170823 03:50:48.489" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170823 03:50:48.489" starttime="20170823 03:50:48.489"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170823 03:50:48.495" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170823 03:50:48.495" starttime="20170823 03:50:48.490"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:48.499" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:48.499" starttime="20170823 03:50:48.498"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.499" starttime="20170823 03:50:48.498"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:48.500" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:48.500" starttime="20170823 03:50:48.500"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.500" starttime="20170823 03:50:48.499"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:48.501" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:48.502" starttime="20170823 03:50:48.501"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.502" starttime="20170823 03:50:48.501"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:48.503" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:48.503" starttime="20170823 03:50:48.502"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.503" starttime="20170823 03:50:48.502"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.503" starttime="20170823 03:50:48.497"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:48.503" starttime="20170823 03:50:48.497"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 03:50:48.504" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170823 03:50:48.504" starttime="20170823 03:50:48.503"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 03:50:48.546" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170823 03:50:48.547" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170823 03:50:53.731" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170823 03:50:53.731" starttime="20170823 03:50:48.522"></status>
</kw>
<msg timestamp="20170823 03:50:53.731" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:50:53.731" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.R...</msg>
<status status="PASS" endtime="20170823 03:50:53.732" starttime="20170823 03:50:48.505"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 03:50:53.732" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<status status="PASS" endtime="20170823 03:50:53.732" starttime="20170823 03:50:53.732"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 03:50:53.733" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170823 03:50:53.733" starttime="20170823 03:50:53.733"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:53.741" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:53.741" starttime="20170823 03:50:53.740"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:53.741" starttime="20170823 03:50:53.739"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:53.741" starttime="20170823 03:50:53.733"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:53.741" starttime="20170823 03:50:48.496"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:53.741" starttime="20170823 03:50:48.496"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:53.741" starttime="20170823 03:50:48.495"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:53.741" starttime="20170823 03:50:48.488"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:53.741" starttime="20170823 03:50:48.488"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170823 03:50:53.742" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170823 03:50:53.742" starttime="20170823 03:50:53.742"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170823 03:50:53.743" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170823 03:50:53.743" starttime="20170823 03:50:53.743"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:53.746" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:53.746" starttime="20170823 03:50:53.746"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:53.747" starttime="20170823 03:50:53.745"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:53.748" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:53.748" starttime="20170823 03:50:53.748"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:53.748" starttime="20170823 03:50:53.747"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:53.749" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:53.749" starttime="20170823 03:50:53.749"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:53.750" starttime="20170823 03:50:53.748"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:53.751" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:53.751" starttime="20170823 03:50:53.750"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:53.751" starttime="20170823 03:50:53.750"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:53.751" starttime="20170823 03:50:53.745"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:53.751" starttime="20170823 03:50:53.744"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 03:50:53.752" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170823 03:50:53.752" starttime="20170823 03:50:53.751"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 03:50:53.794" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170823 03:50:53.794" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170823 03:50:54.073" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170823 03:50:54.074" starttime="20170823 03:50:53.771"></status>
</kw>
<msg timestamp="20170823 03:50:54.074" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:50:54.074" level="INFO">${ret_values} = (u'20170823025209', u'', 0)</msg>
<status status="PASS" endtime="20170823 03:50:54.074" starttime="20170823 03:50:53.753"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 03:50:54.075" level="INFO">${stdout} = 20170823025209</msg>
<status status="PASS" endtime="20170823 03:50:54.075" starttime="20170823 03:50:54.075"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 03:50:54.076" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170823 03:50:54.076" starttime="20170823 03:50:54.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:54.084" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:54.084" starttime="20170823 03:50:54.083"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.084" starttime="20170823 03:50:54.082"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.084" starttime="20170823 03:50:54.076"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.084" starttime="20170823 03:50:53.744"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.084" starttime="20170823 03:50:53.743"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:54.087" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:54.087" starttime="20170823 03:50:54.087"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.087" starttime="20170823 03:50:54.086"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:54.088" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:54.089" starttime="20170823 03:50:54.088"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.089" starttime="20170823 03:50:54.087"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:54.090" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:54.090" starttime="20170823 03:50:54.089"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.090" starttime="20170823 03:50:54.089"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:54.091" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:54.091" starttime="20170823 03:50:54.091"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.091" starttime="20170823 03:50:54.090"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.091" starttime="20170823 03:50:54.086"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.091" starttime="20170823 03:50:54.085"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 03:50:54.092" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170823 03:50:54.092" starttime="20170823 03:50:54.092"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 03:50:54.134" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170823 03:50:54.134" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170823 03:50:54.511" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170823 03:50:54.511" starttime="20170823 03:50:54.111"></status>
</kw>
<msg timestamp="20170823 03:50:54.512" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:50:54.512" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.9-26"\nVERSION_ID="v1.99.9-26-g1e559e4"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC P...</msg>
<status status="PASS" endtime="20170823 03:50:54.512" starttime="20170823 03:50:54.093"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 03:50:54.512" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.9-26"
VERSION_ID="v1.99.9-26-g1e559e4"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<status status="PASS" endtime="20170823 03:50:54.513" starttime="20170823 03:50:54.512"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 03:50:54.513" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170823 03:50:54.513" starttime="20170823 03:50:54.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:54.521" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:54.521" starttime="20170823 03:50:54.520"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.521" starttime="20170823 03:50:54.519"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.521" starttime="20170823 03:50:54.513"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.521" starttime="20170823 03:50:54.084"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.521" starttime="20170823 03:50:54.084"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.521" starttime="20170823 03:50:53.743"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.521" starttime="20170823 03:50:53.742"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.521" starttime="20170823 03:50:53.741"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170823 03:50:54.522" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170823 03:50:54.523" starttime="20170823 03:50:54.522"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170823 03:50:54.523" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170823 03:50:54.523" starttime="20170823 03:50:54.523"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:54.529" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:54.529" starttime="20170823 03:50:54.529"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.529" starttime="20170823 03:50:54.528"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:54.531" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:54.531" starttime="20170823 03:50:54.530"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.531" starttime="20170823 03:50:54.529"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:54.532" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:54.532" starttime="20170823 03:50:54.532"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.532" starttime="20170823 03:50:54.531"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:54.533" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:54.534" starttime="20170823 03:50:54.533"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.534" starttime="20170823 03:50:54.532"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.534" starttime="20170823 03:50:54.528"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:54.534" starttime="20170823 03:50:54.527"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 03:50:54.535" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170823 03:50:54.535" starttime="20170823 03:50:54.534"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 03:50:54.576" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170823 03:50:54.576" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170823 03:50:54.994" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170823 03:50:54.995" starttime="20170823 03:50:54.553"></status>
</kw>
<msg timestamp="20170823 03:50:54.995" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:50:54.995" level="INFO">${ret_values} = (u' 03:51:02 up 8 min,  load average: 3.19, 2.03, 1.11', u'', 0)</msg>
<status status="PASS" endtime="20170823 03:50:54.995" starttime="20170823 03:50:54.535"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 03:50:54.996" level="INFO">${stdout} =  03:51:02 up 8 min,  load average: 3.19, 2.03, 1.11</msg>
<status status="PASS" endtime="20170823 03:50:54.996" starttime="20170823 03:50:54.995"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 03:50:54.996" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170823 03:50:54.996" starttime="20170823 03:50:54.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:55.004" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:55.004" starttime="20170823 03:50:55.003"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.004" starttime="20170823 03:50:55.002"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.004" starttime="20170823 03:50:54.997"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.004" starttime="20170823 03:50:54.526"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.004" starttime="20170823 03:50:54.524"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:55.008" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:55.008" starttime="20170823 03:50:55.007"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.008" starttime="20170823 03:50:55.007"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:55.009" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:55.009" starttime="20170823 03:50:55.009"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.009" starttime="20170823 03:50:55.008"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:55.010" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:55.010" starttime="20170823 03:50:55.010"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.011" starttime="20170823 03:50:55.009"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:55.012" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:55.012" starttime="20170823 03:50:55.011"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.012" starttime="20170823 03:50:55.011"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.012" starttime="20170823 03:50:55.006"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.012" starttime="20170823 03:50:55.005"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 03:50:55.013" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170823 03:50:55.013" starttime="20170823 03:50:55.012"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 03:50:55.053" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170823 03:50:55.053" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170823 03:50:55.492" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170823 03:50:55.492" starttime="20170823 03:50:55.030"></status>
</kw>
<msg timestamp="20170823 03:50:55.493" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:50:55.493" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170823 03:50:55.493" starttime="20170823 03:50:55.013"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 03:50:55.493" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<status status="PASS" endtime="20170823 03:50:55.493" starttime="20170823 03:50:55.493"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 03:50:55.494" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170823 03:50:55.494" starttime="20170823 03:50:55.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:55.501" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:55.501" starttime="20170823 03:50:55.501"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.502" starttime="20170823 03:50:55.500"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.502" starttime="20170823 03:50:55.494"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.502" starttime="20170823 03:50:55.004"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.502" starttime="20170823 03:50:55.004"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:55.505" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:55.505" starttime="20170823 03:50:55.505"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.505" starttime="20170823 03:50:55.504"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:55.507" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:55.507" starttime="20170823 03:50:55.506"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.507" starttime="20170823 03:50:55.505"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:55.508" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:55.508" starttime="20170823 03:50:55.508"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.508" starttime="20170823 03:50:55.507"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:55.510" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:55.510" starttime="20170823 03:50:55.509"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.510" starttime="20170823 03:50:55.509"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.510" starttime="20170823 03:50:55.503"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:55.510" starttime="20170823 03:50:55.503"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 03:50:55.511" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170823 03:50:55.511" starttime="20170823 03:50:55.510"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 03:50:55.551" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170823 03:50:55.551" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170823 03:50:56.020" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170823 03:50:56.020" starttime="20170823 03:50:55.528"></status>
</kw>
<msg timestamp="20170823 03:50:56.020" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:50:56.020" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Wed Aug 23 02:50:54 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170823 03:50:56.020" starttime="20170823 03:50:55.511"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 03:50:56.021" level="INFO">${stdout} = Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Wed Aug 23 02:50:54 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170823 03:50:56.021" starttime="20170823 03:50:56.021"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 03:50:56.022" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170823 03:50:56.022" starttime="20170823 03:50:56.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:56.029" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:56.029" starttime="20170823 03:50:56.029"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:56.029" starttime="20170823 03:50:56.028"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:56.030" starttime="20170823 03:50:56.022"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:56.030" starttime="20170823 03:50:55.502"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:56.030" starttime="20170823 03:50:55.502"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:56.030" starttime="20170823 03:50:54.523"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:56.030" starttime="20170823 03:50:54.522"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:56.030" starttime="20170823 03:50:54.521"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:56.030" starttime="20170823 03:50:48.488"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:56.030" starttime="20170823 03:50:48.487"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:56.030" starttime="20170823 03:50:48.474"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:56.030" starttime="20170823 03:50:48.471"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:56.030" starttime="20170823 03:50:48.471"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:56.032" starttime="20170823 03:50:56.032"></status>
</kw>
<msg timestamp="20170823 03:50:56.032" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:50:56.032" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170823 03:50:56.032" starttime="20170823 03:50:56.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:56.033" starttime="20170823 03:50:56.033"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170823 03:50:56.047" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170823 03:50:56.047" starttime="20170823 03:50:56.047"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170823 03:50:56.048" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_sensor_xyz_l...</msg>
<status status="PASS" endtime="20170823 03:50:56.048" starttime="20170823 03:50:56.048"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 03:50:56.049" level="INFO">${logpath} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170823 03:50:56.049" starttime="20170823 03:50:56.049"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:50:56.053" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:50:56.053" starttime="20170823 03:50:56.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:50:56.054" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:50:56.054" starttime="20170823 03:50:56.053"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:50:56.054" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:50:56.054" starttime="20170823 03:50:56.054"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:50:56.055" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:50:56.055" starttime="20170823 03:50:56.055"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:50:56.529" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:50:56.529" starttime="20170823 03:50:56.056"></status>
</kw>
<msg timestamp="20170823 03:50:56.529" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:50:56.529" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:50:56.529" starttime="20170823 03:50:56.055"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:50:56.530" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:50:56.530" starttime="20170823 03:50:56.530"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:50:56.531" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:50:56.531" starttime="20170823 03:50:56.531"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:56.531" starttime="20170823 03:50:56.052"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:56.531" starttime="20170823 03:50:56.051"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:56.531" starttime="20170823 03:50:56.050"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:50:56.532" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170823 03:50:56.532" starttime="20170823 03:50:56.532"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:56.533" starttime="20170823 03:50:56.532"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:50:59.276" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170823 03:50:59.276" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:50:59.276" starttime="20170823 03:50:56.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:59.277" starttime="20170823 03:50:59.276"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:50:59.277" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:50:59.277" starttime="20170823 03:50:59.277"></status>
</kw>
<msg timestamp="20170823 03:50:59.278" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:50:59.278" starttime="20170823 03:50:56.050"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:50:59.279" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:50:59.279" starttime="20170823 03:50:59.279"></status>
</kw>
<msg timestamp="20170823 03:50:59.279" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170823 03:50:59.279" starttime="20170823 03:50:59.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:59.280" starttime="20170823 03:50:59.280"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170823 03:50:59.281" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:50:59.281" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170823 03:50:59.281" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170823 03:50:59.281" starttime="20170823 03:50:59.280"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:50:59.282" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:50:59.282" starttime="20170823 03:50:59.282"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:59.283" starttime="20170823 03:50:59.281"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:59.283" starttime="20170823 03:50:56.049"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 03:50:59.283" level="INFO">${logpath} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170823 03:50:59.283" starttime="20170823 03:50:59.283"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:50:59.287" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:50:59.287" starttime="20170823 03:50:59.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:50:59.288" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:50:59.288" starttime="20170823 03:50:59.288"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:50:59.289" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:50:59.289" starttime="20170823 03:50:59.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:50:59.290" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:50:59.290" starttime="20170823 03:50:59.289"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:50:59.470" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:50:59.470" starttime="20170823 03:50:59.290"></status>
</kw>
<msg timestamp="20170823 03:50:59.470" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:50:59.470" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:50:59.470" starttime="20170823 03:50:59.290"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:50:59.471" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:50:59.471" starttime="20170823 03:50:59.470"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:50:59.471" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:50:59.472" starttime="20170823 03:50:59.471"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:59.472" starttime="20170823 03:50:59.286"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:59.472" starttime="20170823 03:50:59.285"></status>
</kw>
<status status="PASS" endtime="20170823 03:50:59.472" starttime="20170823 03:50:59.284"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:50:59.473" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170823 03:50:59.473" starttime="20170823 03:50:59.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:50:59.473" starttime="20170823 03:50:59.473"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:51:00.289" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170823 03:51:00.290" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:00.290" starttime="20170823 03:50:59.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:00.291" starttime="20170823 03:51:00.290"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:51:00.291" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:51:00.291" starttime="20170823 03:51:00.291"></status>
</kw>
<msg timestamp="20170823 03:51:00.291" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:00.291" starttime="20170823 03:50:59.284"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:00.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:00.293" starttime="20170823 03:51:00.292"></status>
</kw>
<msg timestamp="20170823 03:51:00.293" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170823 03:51:00.293" starttime="20170823 03:51:00.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:00.294" starttime="20170823 03:51:00.293"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170823 03:51:00.294" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot_mode": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"
    }, 
    "/xyz/openbmc_project/control/host0/boot_source": {
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.AlwaysOff"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:51:00.295" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170823 03:51:00.295" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170823 03:51:00.295" starttime="20170823 03:51:00.294"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:51:00.296" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:51:00.296" starttime="20170823 03:51:00.296"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:00.297" starttime="20170823 03:51:00.295"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:00.297" starttime="20170823 03:50:59.283"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 03:51:00.297" level="INFO">${logpath} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170823 03:51:00.297" starttime="20170823 03:51:00.297"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:51:00.301" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:51:00.301" starttime="20170823 03:51:00.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:51:00.302" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:51:00.302" starttime="20170823 03:51:00.301"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:51:00.302" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:51:00.302" starttime="20170823 03:51:00.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:51:00.303" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:51:00.303" starttime="20170823 03:51:00.303"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:51:00.497" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:51:00.497" starttime="20170823 03:51:00.304"></status>
</kw>
<msg timestamp="20170823 03:51:00.497" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:00.497" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:00.497" starttime="20170823 03:51:00.303"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:51:00.498" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:00.498" starttime="20170823 03:51:00.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:00.499" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:00.499" starttime="20170823 03:51:00.498"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:00.499" starttime="20170823 03:51:00.300"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:00.499" starttime="20170823 03:51:00.299"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:00.499" starttime="20170823 03:51:00.299"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:51:00.500" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170823 03:51:00.500" starttime="20170823 03:51:00.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:00.501" starttime="20170823 03:51:00.500"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:51:00.545" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170823 03:51:00.545" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:00.545" starttime="20170823 03:51:00.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:00.545" starttime="20170823 03:51:00.545"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:51:00.546" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:51:00.546" starttime="20170823 03:51:00.546"></status>
</kw>
<msg timestamp="20170823 03:51:00.546" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:00.546" starttime="20170823 03:51:00.298"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:00.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170823 03:51:00.548" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170823 03:51:00.548" starttime="20170823 03:51:00.547"></status>
</kw>
<msg timestamp="20170823 03:51:00.548" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170823 03:51:00.548" starttime="20170823 03:51:00.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170823 03:51:00.549" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170823 03:51:00.549" starttime="20170823 03:51:00.549"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:00.549" starttime="20170823 03:51:00.548"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:00.549" starttime="20170823 03:51:00.297"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_xyz_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 03:51:00.550" level="INFO">${logpath} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_sensor_xyz_list.txt</msg>
<status status="PASS" endtime="20170823 03:51:00.550" starttime="20170823 03:51:00.549"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:51:00.553" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:51:00.553" starttime="20170823 03:51:00.553"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:51:00.554" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:51:00.554" starttime="20170823 03:51:00.554"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:51:00.555" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:51:00.555" starttime="20170823 03:51:00.554"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:51:00.555" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:51:00.555" starttime="20170823 03:51:00.555"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:51:00.782" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:51:00.782" starttime="20170823 03:51:00.556"></status>
</kw>
<msg timestamp="20170823 03:51:00.782" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:00.782" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:00.782" starttime="20170823 03:51:00.556"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:51:00.783" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:00.783" starttime="20170823 03:51:00.783"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:00.784" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:00.784" starttime="20170823 03:51:00.783"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:00.784" starttime="20170823 03:51:00.552"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:00.784" starttime="20170823 03:51:00.552"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:00.784" starttime="20170823 03:51:00.551"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:51:00.785" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170823 03:51:00.785" starttime="20170823 03:51:00.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:00.786" starttime="20170823 03:51:00.785"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:51:01.225" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170823 03:51:01.225" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.226" starttime="20170823 03:51:00.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:01.226" starttime="20170823 03:51:01.226"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:51:01.227" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:51:01.227" starttime="20170823 03:51:01.227"></status>
</kw>
<msg timestamp="20170823 03:51:01.227" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.227" starttime="20170823 03:51:00.550"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:01.228" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.229" starttime="20170823 03:51:01.228"></status>
</kw>
<msg timestamp="20170823 03:51:01.229" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170823 03:51:01.229" starttime="20170823 03:51:01.228"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:01.229" starttime="20170823 03:51:01.229"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170823 03:51:01.230" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 25750
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 1000
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9842
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10416
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9842
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10302
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9868
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10504
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9868
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10416
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 346000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 25410
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 207000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 12250
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 218
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:51:01.230" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170823 03:51:01.231" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170823 03:51:01.231" starttime="20170823 03:51:01.230"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:51:01.232" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_sensor_xyz_list.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_sensor_xyz_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:51:01.232" starttime="20170823 03:51:01.232"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:01.232" starttime="20170823 03:51:01.231"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:01.233" starttime="20170823 03:51:00.549"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 03:51:01.233" level="INFO">${logpath} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_led.txt</msg>
<status status="PASS" endtime="20170823 03:51:01.233" starttime="20170823 03:51:01.233"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:51:01.236" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:51:01.237" starttime="20170823 03:51:01.236"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:51:01.237" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:51:01.238" starttime="20170823 03:51:01.237"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:51:01.238" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:51:01.238" starttime="20170823 03:51:01.238"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:51:01.239" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:51:01.239" starttime="20170823 03:51:01.239"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:51:01.416" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:51:01.416" starttime="20170823 03:51:01.240"></status>
</kw>
<msg timestamp="20170823 03:51:01.416" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:01.416" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.416" starttime="20170823 03:51:01.239"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:51:01.417" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.417" starttime="20170823 03:51:01.417"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:01.418" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.418" starttime="20170823 03:51:01.417"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:01.418" starttime="20170823 03:51:01.236"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:01.418" starttime="20170823 03:51:01.235"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:01.418" starttime="20170823 03:51:01.234"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:51:01.419" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170823 03:51:01.419" starttime="20170823 03:51:01.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:01.420" starttime="20170823 03:51:01.419"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:51:01.463" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170823 03:51:01.463" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.463" starttime="20170823 03:51:01.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:01.464" starttime="20170823 03:51:01.464"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:51:01.464" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:51:01.465" starttime="20170823 03:51:01.464"></status>
</kw>
<msg timestamp="20170823 03:51:01.465" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.465" starttime="20170823 03:51:01.234"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:01.466" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170823 03:51:01.466" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170823 03:51:01.466" starttime="20170823 03:51:01.466"></status>
</kw>
<msg timestamp="20170823 03:51:01.466" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170823 03:51:01.466" starttime="20170823 03:51:01.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170823 03:51:01.467" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170823 03:51:01.468" starttime="20170823 03:51:01.467"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:01.468" starttime="20170823 03:51:01.467"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:01.468" starttime="20170823 03:51:01.233"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 03:51:01.468" level="INFO">${logpath} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_elog.txt</msg>
<status status="PASS" endtime="20170823 03:51:01.469" starttime="20170823 03:51:01.468"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:51:01.472" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:51:01.472" starttime="20170823 03:51:01.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:51:01.473" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:51:01.473" starttime="20170823 03:51:01.472"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:51:01.473" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:51:01.473" starttime="20170823 03:51:01.473"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:51:01.474" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:51:01.474" starttime="20170823 03:51:01.474"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:51:01.652" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:51:01.652" starttime="20170823 03:51:01.475"></status>
</kw>
<msg timestamp="20170823 03:51:01.652" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:01.652" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.652" starttime="20170823 03:51:01.474"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:51:01.653" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.653" starttime="20170823 03:51:01.652"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:01.653" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.654" starttime="20170823 03:51:01.653"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:01.654" starttime="20170823 03:51:01.471"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:01.654" starttime="20170823 03:51:01.470"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:01.654" starttime="20170823 03:51:01.469"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:51:01.654" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170823 03:51:01.655" starttime="20170823 03:51:01.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:01.655" starttime="20170823 03:51:01.655"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:51:01.787" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170823 03:51:01.787" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.787" starttime="20170823 03:51:01.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:01.788" starttime="20170823 03:51:01.788"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:51:01.789" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:51:01.789" starttime="20170823 03:51:01.789"></status>
</kw>
<msg timestamp="20170823 03:51:01.789" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.789" starttime="20170823 03:51:01.469"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:01.790" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.790" starttime="20170823 03:51:01.790"></status>
</kw>
<msg timestamp="20170823 03:51:01.790" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170823 03:51:01.790" starttime="20170823 03:51:01.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:01.791" starttime="20170823 03:51:01.791"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170823 03:51:01.792" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503459925147, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503460254404, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:51:01.792" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170823 03:51:01.792" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFile...</msg>
<status status="PASS" endtime="20170823 03:51:01.792" starttime="20170823 03:51:01.791"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:51:01.793" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_elog.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:51:01.793" starttime="20170823 03:51:01.793"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:01.794" starttime="20170823 03:51:01.792"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:01.794" starttime="20170823 03:51:01.468"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 03:51:01.794" level="INFO">${logpath} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170823 03:51:01.794" starttime="20170823 03:51:01.794"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:51:01.798" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:51:01.798" starttime="20170823 03:51:01.797"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:51:01.799" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:51:01.799" starttime="20170823 03:51:01.798"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:51:01.799" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:51:01.799" starttime="20170823 03:51:01.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:51:01.800" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:51:01.800" starttime="20170823 03:51:01.800"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:51:01.988" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:51:01.988" starttime="20170823 03:51:01.801"></status>
</kw>
<msg timestamp="20170823 03:51:01.988" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:01.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.988" starttime="20170823 03:51:01.800"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:51:01.989" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.989" starttime="20170823 03:51:01.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:01.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:01.990" starttime="20170823 03:51:01.989"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:01.990" starttime="20170823 03:51:01.797"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:01.990" starttime="20170823 03:51:01.796"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:01.990" starttime="20170823 03:51:01.795"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:51:01.991" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170823 03:51:01.991" starttime="20170823 03:51:01.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:01.991" starttime="20170823 03:51:01.991"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:51:02.357" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170823 03:51:02.357" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:02.357" starttime="20170823 03:51:01.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:02.358" starttime="20170823 03:51:02.358"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:51:02.359" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:51:02.359" starttime="20170823 03:51:02.358"></status>
</kw>
<msg timestamp="20170823 03:51:02.359" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:02.359" starttime="20170823 03:51:01.795"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:02.360" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:02.360" starttime="20170823 03:51:02.360"></status>
</kw>
<msg timestamp="20170823 03:51:02.360" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170823 03:51:02.360" starttime="20170823 03:51:02.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:02.361" starttime="20170823 03:51:02.360"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170823 03:51:02.362" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:51:02.362" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170823 03:51:02.362" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170823 03:51:02.362" starttime="20170823 03:51:02.361"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:51:02.363" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:51:02.363" starttime="20170823 03:51:02.363"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:02.364" starttime="20170823 03:51:02.362"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:02.364" starttime="20170823 03:51:01.794"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:02.364" starttime="20170823 03:50:56.049"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:02.364" starttime="20170823 03:50:56.048"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:02.364" starttime="20170823 03:50:56.047"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:02.364" starttime="20170823 03:50:56.047"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:02.364" starttime="20170823 03:50:56.046"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:02.364" starttime="20170823 03:50:56.033"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:02.364" starttime="20170823 03:50:56.031"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:02.364" starttime="20170823 03:50:56.030"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:02.366" starttime="20170823 03:51:02.366"></status>
</kw>
<msg timestamp="20170823 03:51:02.366" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:02.366" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170823 03:51:02.366" starttime="20170823 03:51:02.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:02.367" starttime="20170823 03:51:02.367"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:02.383" starttime="20170823 03:51:02.382"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170823 03:51:02.384" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170823 03:51:02.384" starttime="20170823 03:51:02.383"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:02.384" starttime="20170823 03:51:02.381"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:02.384" starttime="20170823 03:51:02.367"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:02.384" starttime="20170823 03:51:02.365"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:02.384" starttime="20170823 03:51:02.364"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:02.386" starttime="20170823 03:51:02.386"></status>
</kw>
<msg timestamp="20170823 03:51:02.386" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:02.386" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170823 03:51:02.386" starttime="20170823 03:51:02.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:02.387" starttime="20170823 03:51:02.386"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170823 03:51:02.420" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170823 03:51:02.420" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170823 03:51:02.703" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170823 03:51:02.715" level="INFO">${core_files} = None</msg>
<msg timestamp="20170823 03:51:02.715" level="INFO">${stderr} = None</msg>
<msg timestamp="20170823 03:51:02.715" level="INFO">${rc} = None</msg>
<msg timestamp="20170823 03:51:02.715" level="FAIL">#(UTC) 2017/08/23 03:51:02.713825 -   14.267356 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170823 03:51:02.715" starttime="20170823 03:51:02.401"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170823 03:51:02.716" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170823 03:51:02.716" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170823 03:51:02.716" starttime="20170823 03:51:02.716"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:02.733" starttime="20170823 03:51:02.726"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:03.939" starttime="20170823 03:51:02.735"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:03.939" starttime="20170823 03:51:02.734"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:03.940" starttime="20170823 03:51:02.725"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:03.940" starttime="20170823 03:51:02.717"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170823 03:51:03.940" starttime="20170823 03:51:03.940"></status>
</kw>
<status status="FAIL" endtime="20170823 03:51:03.940" starttime="20170823 03:51:02.400"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:03.940" starttime="20170823 03:51:02.387"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:03.940" starttime="20170823 03:51:02.384"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:03.940" starttime="20170823 03:51:02.384"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:03.943" starttime="20170823 03:51:03.942"></status>
</kw>
<msg timestamp="20170823 03:51:03.943" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:03.943" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170823 03:51:03.943" starttime="20170823 03:51:03.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:03.943" starttime="20170823 03:51:03.943"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170823 03:51:03.957" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170823 03:51:03.957" starttime="20170823 03:51:03.957"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170823 03:51:03.959" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170823 03:51:03.959" starttime="20170823 03:51:03.958"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 03:51:03.960" level="INFO">${logpath} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170823 03:51:03.960" starttime="20170823 03:51:03.959"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:03.961" starttime="20170823 03:51:03.961"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 03:51:03.962" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170823 03:51:03.962" starttime="20170823 03:51:03.961"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 03:51:04.004" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170823 03:51:04.004" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170823 03:51:05.059" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170823 03:51:05.059" starttime="20170823 03:51:03.979"></status>
</kw>
<msg timestamp="20170823 03:51:05.060" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:05.061" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug 23 03:51 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug 23 03:51 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170823 03:51:05.061" starttime="20170823 03:51:03.962"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 03:51:05.062" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug 23 03:51 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug 23 03:51 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170823 03:51:05.062" starttime="20170823 03:51:05.061"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 03:51:05.062" level="INFO">${stderr} = ls: /proc/1734/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170823 03:51:05.062" starttime="20170823 03:51:05.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:51:05.076" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:51:05.076" starttime="20170823 03:51:05.074"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:05.076" starttime="20170823 03:51:05.073"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:05.076" starttime="20170823 03:51:05.063"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:05.076" starttime="20170823 03:51:03.960"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:05.076" starttime="20170823 03:51:03.959"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 03:51:05.077" level="INFO">${logpath} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170823 03:51:05.077" starttime="20170823 03:51:05.076"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:05.078" starttime="20170823 03:51:05.078"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 03:51:05.079" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170823 03:51:05.079" starttime="20170823 03:51:05.079"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 03:51:05.120" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170823 03:51:05.120" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170823 03:51:05.188" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170823 03:51:05.188" starttime="20170823 03:51:05.097"></status>
</kw>
<msg timestamp="20170823 03:51:05.188" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:05.188" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170823 03:51:05.188" starttime="20170823 03:51:05.079"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 03:51:05.189" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170823 03:51:05.189" starttime="20170823 03:51:05.189"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 03:51:05.190" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170823 03:51:05.190" starttime="20170823 03:51:05.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:51:05.197" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:51:05.197" starttime="20170823 03:51:05.197"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:05.197" starttime="20170823 03:51:05.196"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:05.197" starttime="20170823 03:51:05.190"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:05.197" starttime="20170823 03:51:05.077"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:05.198" starttime="20170823 03:51:05.076"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 03:51:05.198" level="INFO">${logpath} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170823 03:51:05.198" starttime="20170823 03:51:05.198"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:05.200" starttime="20170823 03:51:05.199"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 03:51:05.201" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170823 03:51:05.201" starttime="20170823 03:51:05.200"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 03:51:05.242" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170823 03:51:05.243" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170823 03:51:05.299" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170823 03:51:05.299" starttime="20170823 03:51:05.218"></status>
</kw>
<msg timestamp="20170823 03:51:05.300" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:05.300" level="INFO">${ret_values} = (u'MemTotal:         432248 kB\nMemFree:          278508 kB\nMemAvailable:     326516 kB\nBuffers:           11672 kB\nCached:            53084 kB\nSwapCached:            0 kB\nActive:            9666...</msg>
<status status="PASS" endtime="20170823 03:51:05.300" starttime="20170823 03:51:05.201"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 03:51:05.300" level="INFO">${stdout} = MemTotal:         432248 kB
MemFree:          278508 kB
MemAvailable:     326516 kB
Buffers:           11672 kB
Cached:            53084 kB
SwapCached:            0 kB
Active:            96660 kB
Inac...</msg>
<status status="PASS" endtime="20170823 03:51:05.300" starttime="20170823 03:51:05.300"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 03:51:05.301" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170823 03:51:05.301" starttime="20170823 03:51:05.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:51:05.308" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:51:05.309" starttime="20170823 03:51:05.308"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:05.309" starttime="20170823 03:51:05.307"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:05.309" starttime="20170823 03:51:05.301"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:05.309" starttime="20170823 03:51:05.199"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:05.309" starttime="20170823 03:51:05.198"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 03:51:05.310" level="INFO">${logpath} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170823 03:51:05.310" starttime="20170823 03:51:05.309"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:05.311" starttime="20170823 03:51:05.311"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 03:51:05.312" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170823 03:51:05.312" starttime="20170823 03:51:05.311"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 03:51:05.358" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170823 03:51:05.358" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170823 03:51:06.312" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170823 03:51:06.312" starttime="20170823 03:51:05.335"></status>
</kw>
<msg timestamp="20170823 03:51:06.312" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:06.312" level="INFO">${ret_values} = (u'Mem: 153740K used, 278508K free, 14484K shrd, 11672K buff, 53088K cached\nCPU:   9% usr   0% sys   0% nic  90% idle   0% io   0% irq   0% sirq\nLoad average: 3.75 2.20 1.17 3/146 1739\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170823 03:51:06.312" starttime="20170823 03:51:05.312"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 03:51:06.313" level="INFO">${stdout} = Mem: 153740K used, 278508K free, 14484K shrd, 11672K buff, 53088K cached
CPU:   9% usr   0% sys   0% nic  90% idle   0% io   0% irq   0% sirq
Load average: 3.75 2.20 1.17 3/146 1739
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170823 03:51:06.313" starttime="20170823 03:51:06.313"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 03:51:06.314" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170823 03:51:06.314" starttime="20170823 03:51:06.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:51:06.321" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:51:06.322" starttime="20170823 03:51:06.321"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:06.322" starttime="20170823 03:51:06.320"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:06.322" starttime="20170823 03:51:06.314"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:06.322" starttime="20170823 03:51:05.310"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:06.322" starttime="20170823 03:51:05.309"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 03:51:06.323" level="INFO">${logpath} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170823 03:51:06.323" starttime="20170823 03:51:06.322"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:06.324" starttime="20170823 03:51:06.324"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 03:51:06.325" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170823 03:51:06.325" starttime="20170823 03:51:06.324"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 03:51:06.366" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170823 03:51:06.367" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170823 03:51:06.445" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170823 03:51:06.445" starttime="20170823 03:51:06.343"></status>
</kw>
<msg timestamp="20170823 03:51:06.445" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:06.445" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Wed Aug 23 0...</msg>
<status status="PASS" endtime="20170823 03:51:06.445" starttime="20170823 03:51:06.325"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 03:51:06.446" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Wed Aug 23 02:50...</msg>
<status status="PASS" endtime="20170823 03:51:06.446" starttime="20170823 03:51:06.446"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 03:51:06.447" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170823 03:51:06.447" starttime="20170823 03:51:06.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:51:06.455" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:51:06.455" starttime="20170823 03:51:06.454"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:06.455" starttime="20170823 03:51:06.453"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:06.455" starttime="20170823 03:51:06.447"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:06.455" starttime="20170823 03:51:06.323"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:06.455" starttime="20170823 03:51:06.322"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 03:51:06.456" level="INFO">${logpath} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170823 03:51:06.456" starttime="20170823 03:51:06.456"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:06.457" starttime="20170823 03:51:06.457"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170823 03:51:06.458" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170823 03:51:06.458" starttime="20170823 03:51:06.458"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170823 03:51:06.499" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170823 03:51:06.499" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170823 03:51:14.278" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170823 03:51:14.280" starttime="20170823 03:51:06.476"></status>
</kw>
<msg timestamp="20170823 03:51:14.280" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:14.283" level="INFO">${ret_values} = (u'-- Logs begin at Wed 2017-08-23 03:43:06 UTC, end at Wed 2017-08-23 03:51:14 UTC. --\nAug 23 03:43:06 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 23 03:43:06 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170823 03:51:14.283" starttime="20170823 03:51:06.459"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170823 03:51:14.284" level="INFO">${stdout} = -- Logs begin at Wed 2017-08-23 03:43:06 UTC, end at Wed 2017-08-23 03:51:14 UTC. --
Aug 23 03:43:06 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 23 03:43:06 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170823 03:51:14.284" starttime="20170823 03:51:14.283"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170823 03:51:14.285" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170823 03:51:14.285" starttime="20170823 03:51:14.285"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170823 03:51:14.295" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:51:14.295" starttime="20170823 03:51:14.293"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:14.295" starttime="20170823 03:51:14.292"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:14.295" starttime="20170823 03:51:14.286"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:14.296" starttime="20170823 03:51:06.456"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:14.296" starttime="20170823 03:51:06.455"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:14.296" starttime="20170823 03:51:03.959"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:14.296" starttime="20170823 03:51:03.958"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:14.296" starttime="20170823 03:51:03.957"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:14.296" starttime="20170823 03:51:03.957"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:14.296" starttime="20170823 03:51:03.956"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:14.296" starttime="20170823 03:51:03.944"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:14.296" starttime="20170823 03:51:03.941"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:14.297" starttime="20170823 03:51:03.941"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:14.299" starttime="20170823 03:51:14.298"></status>
</kw>
<msg timestamp="20170823 03:51:14.299" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:14.299" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170823 03:51:14.299" starttime="20170823 03:51:14.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:14.299" starttime="20170823 03:51:14.299"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:51:14.316" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:51:14.316" starttime="20170823 03:51:14.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:51:14.317" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:51:14.317" starttime="20170823 03:51:14.317"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:51:14.318" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:51:14.318" starttime="20170823 03:51:14.317"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:51:14.318" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:51:14.318" starttime="20170823 03:51:14.318"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:51:14.850" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:51:14.850" starttime="20170823 03:51:14.319"></status>
</kw>
<msg timestamp="20170823 03:51:14.850" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:14.850" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:14.850" starttime="20170823 03:51:14.319"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:51:14.851" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:14.851" starttime="20170823 03:51:14.851"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:14.852" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:14.852" starttime="20170823 03:51:14.851"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:14.852" starttime="20170823 03:51:14.315"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:14.852" starttime="20170823 03:51:14.314"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:14.852" starttime="20170823 03:51:14.314"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:51:14.853" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170823 03:51:14.853" starttime="20170823 03:51:14.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:14.854" starttime="20170823 03:51:14.853"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:51:22.255" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170823 03:51:22.255" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:22.255" starttime="20170823 03:51:14.854"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:22.256" starttime="20170823 03:51:22.256"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:51:22.257" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:51:22.257" starttime="20170823 03:51:22.257"></status>
</kw>
<msg timestamp="20170823 03:51:22.257" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:22.257" starttime="20170823 03:51:14.313"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:22.258" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:22.259" starttime="20170823 03:51:22.258"></status>
</kw>
<msg timestamp="20170823 03:51:22.259" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170823 03:51:22.259" starttime="20170823 03:51:22.258"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:22.259" starttime="20170823 03:51:22.259"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 03:51:22.260" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503459925147, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503460254404, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:51:22.260" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 03:51:22.260" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/2': {u'Resolved': 0, u'AdditionalData': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Ti...</msg>
<status status="PASS" endtime="20170823 03:51:22.260" starttime="20170823 03:51:22.260"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170823 03:51:22.261" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2']</msg>
<status status="PASS" endtime="20170823 03:51:22.261" starttime="20170823 03:51:22.260"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170823 03:51:22.261" level="INFO">${logpath} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_esel</msg>
<status status="PASS" endtime="20170823 03:51:22.261" starttime="20170823 03:51:22.261"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170823 03:51:22.262" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_esel"&gt;/home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/20170823035045769129_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:51:22.262" starttime="20170823 03:51:22.262"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:22.263" starttime="20170823 03:51:22.263"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:51:22.267" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:51:22.267" starttime="20170823 03:51:22.267"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:51:22.268" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:51:22.268" starttime="20170823 03:51:22.268"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:51:22.269" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:51:22.269" starttime="20170823 03:51:22.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:51:22.269" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:51:22.269" starttime="20170823 03:51:22.269"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:51:22.687" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:51:22.687" starttime="20170823 03:51:22.270"></status>
</kw>
<msg timestamp="20170823 03:51:22.687" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:22.687" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:22.687" starttime="20170823 03:51:22.270"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:51:22.688" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:22.688" starttime="20170823 03:51:22.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:22.689" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:22.689" starttime="20170823 03:51:22.688"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:22.689" starttime="20170823 03:51:22.266"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:22.689" starttime="20170823 03:51:22.266"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:22.689" starttime="20170823 03:51:22.265"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:51:22.690" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170823 03:51:22.690" starttime="20170823 03:51:22.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:22.690" starttime="20170823 03:51:22.690"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:51:22.814" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170823 03:51:22.814" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:22.814" starttime="20170823 03:51:22.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:22.815" starttime="20170823 03:51:22.814"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:51:22.815" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:51:22.815" starttime="20170823 03:51:22.815"></status>
</kw>
<msg timestamp="20170823 03:51:22.816" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:22.816" starttime="20170823 03:51:22.264"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:22.816" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:22.816" starttime="20170823 03:51:22.816"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 03:51:22.817" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:51:22.817" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 03:51:22.817" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170823 03:51:22.817" starttime="20170823 03:51:22.817"></status>
</kw>
<msg timestamp="20170823 03:51:22.817" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170823 03:51:22.818" starttime="20170823 03:51:22.263"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170823 03:51:22.818" level="INFO">Length is 0</msg>
<msg timestamp="20170823 03:51:22.818" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170823 03:51:22.818" starttime="20170823 03:51:22.818"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170823 03:51:22.819" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170823 03:51:22.819" starttime="20170823 03:51:22.819"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:22.819" starttime="20170823 03:51:22.262"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:22.820" starttime="20170823 03:51:22.819"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170823 03:51:22.824" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170823 03:51:22.824" starttime="20170823 03:51:22.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170823 03:51:22.825" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170823 03:51:22.825" starttime="20170823 03:51:22.824"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170823 03:51:22.825" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170823 03:51:22.825" starttime="20170823 03:51:22.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170823 03:51:22.826" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170823 03:51:22.826" starttime="20170823 03:51:22.826"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170823 03:51:23.047" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170823 03:51:23.047" starttime="20170823 03:51:22.827"></status>
</kw>
<msg timestamp="20170823 03:51:23.047" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:23.047" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:23.047" starttime="20170823 03:51:22.826"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170823 03:51:23.048" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:23.048" starttime="20170823 03:51:23.048"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:23.049" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:23.049" starttime="20170823 03:51:23.049"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.049" starttime="20170823 03:51:22.823"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.049" starttime="20170823 03:51:22.822"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.049" starttime="20170823 03:51:22.822"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170823 03:51:23.050" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" endtime="20170823 03:51:23.050" starttime="20170823 03:51:23.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:23.051" starttime="20170823 03:51:23.050"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170823 03:51:23.180" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170823 03:51:23.180" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:23.180" starttime="20170823 03:51:23.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:23.181" starttime="20170823 03:51:23.180"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170823 03:51:23.181" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170823 03:51:23.181" starttime="20170823 03:51:23.181"></status>
</kw>
<msg timestamp="20170823 03:51:23.181" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170823 03:51:23.182" starttime="20170823 03:51:22.821"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170823 03:51:23.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170823 03:51:23.182" starttime="20170823 03:51:23.182"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170823 03:51:23.183" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170823 03:51:23.183" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170823 03:51:23.183" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170823 03:51:23.183" starttime="20170823 03:51:23.183"></status>
</kw>
<msg timestamp="20170823 03:51:23.183" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170823 03:51:23.183" starttime="20170823 03:51:22.820"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170823 03:51:23.184" level="INFO">Length is 0</msg>
<msg timestamp="20170823 03:51:23.184" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170823 03:51:23.184" starttime="20170823 03:51:23.184"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170823 03:51:23.185" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170823 03:51:23.185" starttime="20170823 03:51:23.184"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.185" starttime="20170823 03:51:22.819"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.185" starttime="20170823 03:51:22.262"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170823 03:51:23.190" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170823 03:51:23.195" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170823 03:51:23.195" starttime="20170823 03:51:23.185"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170823 03:51:23.200" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170823 03:51:23.200" starttime="20170823 03:51:23.199"></status>
</kw>
<msg timestamp="20170823 03:51:23.200" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170823 03:51:23.200" starttime="20170823 03:51:23.198"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170823 03:51:23.201" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170823 03:51:23.201" starttime="20170823 03:51:23.200"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.201" starttime="20170823 03:51:14.313"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.201" starttime="20170823 03:51:14.300"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.201" starttime="20170823 03:51:14.297"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.201" starttime="20170823 03:51:14.297"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:23.206" starttime="20170823 03:51:23.204"></status>
</kw>
<msg timestamp="20170823 03:51:23.206" level="INFO">${status} = PASS</msg>
<msg timestamp="20170823 03:51:23.206" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170823 03:51:23.206" starttime="20170823 03:51:23.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:23.207" starttime="20170823 03:51:23.206"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170823 03:51:23.221" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170823 03:51:23.222" starttime="20170823 03:51:23.221"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.222" starttime="20170823 03:51:23.220"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.222" starttime="20170823 03:51:23.207"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.222" starttime="20170823 03:51:23.202"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.222" starttime="20170823 03:51:23.202"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.222" starttime="20170823 03:50:48.471"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.222" starttime="20170823 03:50:48.468"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.222" starttime="20170823 03:50:48.468"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.222" starttime="20170823 03:50:48.468"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170823 03:51:23.228" starttime="20170823 03:51:23.228"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.228" starttime="20170823 03:51:23.222"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.228" starttime="20170823 03:50:48.467"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.229" starttime="20170823 03:50:42.722"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.229" starttime="20170823 03:50:42.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:23.230" starttime="20170823 03:51:23.230"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170823 03:51:23.231" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170823 03:51:23.232" starttime="20170823 03:51:23.231"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170823 03:51:23.232" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170823035045769129_CodeUpdate/20170823035045769129_RESTHostCodeUpdate/</msg>
<status status="PASS" endtime="20170823 03:51:23.232" starttime="20170823 03:51:23.232"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:23.233" starttime="20170823 03:51:23.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:23.234" starttime="20170823 03:51:23.233"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170823 03:51:23.234" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170823 03:51:23.234" starttime="20170823 03:51:23.234"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170823 03:51:23.235" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170823 03:51:23.235" starttime="20170823 03:51:23.235"></status>
</kw>
<msg timestamp="20170823 03:51:23.235" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170823 03:51:23.235" starttime="20170823 03:51:23.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:23.236" starttime="20170823 03:51:23.236"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170823 03:51:23.237" starttime="20170823 03:51:23.236"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170823 03:51:23.238" level="INFO">${cur_time} = 2017-08-23 03:51:23:237598</msg>
<status status="PASS" endtime="20170823 03:51:23.238" starttime="20170823 03:51:23.237"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170823 03:51:23.238" level="INFO">${cur_time} = 20170823035123237598</msg>
<status status="PASS" endtime="20170823 03:51:23.239" starttime="20170823 03:51:23.238"></status>
</kw>
<msg timestamp="20170823 03:51:23.239" level="INFO">${cur_time} = 20170823035123237598</msg>
<status status="PASS" endtime="20170823 03:51:23.239" starttime="20170823 03:51:23.237"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170823 03:51:23.240" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 03:51:23.240" starttime="20170823 03:51:23.239"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.240" starttime="20170823 03:51:23.231"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.241" starttime="20170823 03:50:42.024"></status>
</kw>
<status status="PASS" endtime="20170823 03:51:23.241" starttime="20170823 03:50:39.981"></status>
</kw>
<doc>Do a PNOR code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_Host_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170823 03:51:23.241" critical="yes" starttime="20170823 03:45:04.454">xyz.openbmc_project.Software.Activation.Activations.Failed != xyz.openbmc_project.Software.Activation.Activations.Active</status>
</test>
<doc>Code update to a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v DELETE_OLD_PNOR_IMAGES:&lt;"true" or "false"&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; code_update.robot

Code update method BMC
Update work flow sequence:
- Upload image via REST
- Verify that the file exists on the BMC
- Check software "Activation" status to be "Ready"
- Set "Requested Activation" to "Active"
- Wait for code update to complete
- Verify the new version</doc>
<status status="FAIL" endtime="20170823 03:51:23.243" starttime="20170823 03:45:03.611"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_Host_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Code Update" pass="0">Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
